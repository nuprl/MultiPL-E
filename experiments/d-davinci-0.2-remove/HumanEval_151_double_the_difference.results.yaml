language: d
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdq_liwbr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283dd]

    ??:? void tmpdq_liwbr.__unittest_L23_C1() [0x42802c]

    ??:? void tmpdq_liwbr.__modtest() [0x428160]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42882c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i %\
    \ 1 == 0)\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ trunc(i))\n        {\n            if(i % 2 == 1)\n            {\n          \
    \      sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float f; lst)\n    {\n        if(f > 0 && f ==\
    \ cast(int)f)\n        {\n            if(f % 2 == 1)\n            {\n        \
    \        sum += f * f;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ int(x))\n        {\n            if(x % 2 != 0)\n            {\n            \
    \    sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhk15t18.d(16): Error: cannot implicitly convert expression `x`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhk15t18.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float n; lst)\n    {\n        if(n > 0 && is(typeof(n)\
    \ == int))\n        {\n            if(n % 2 == 1)\n            {\n           \
    \     sum += n * n;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxnav9mk1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpxnav9mk1.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpxnav9mk1.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ int(x))\n        {\n            if(x % 2 != 0)\n            {\n            \
    \    sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhk15t18.d(16): Error: cannot implicitly convert expression `x`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhk15t18.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxx8fpf7.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxx8fpf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0)\n    \
    \    {\n            if(i % 2 != 0)\n            {\n                sum += pow(i,\
    \ 2);\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3])\
    \ == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0,\
    \ -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i %\
    \ 1 == 0)\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ cast(int)x)\n        {\n            if(x % 2 == 1)\n            {\n        \
    \        sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ (int)i)\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbs46clc8.d(16): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbs46clc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x < 0 || x !=\
    \ cast(int)x)\n            continue;\n        if(x % 2 == 1)\n            sum\
    \ += x * x;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n         \
    \   {\n                sum += num * num;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmuj4f0na.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpmuj4f0na.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpmuj4f0na.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppfoe3xfe.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmppfoe3xfe.__unittest_L26_C1() [0x427f19]

    ??:? void tmppfoe3xfe.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 != 0)\n            {\n           \
    \     sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpumronqcl.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpumronqcl.__unittest_L26_C1() [0x427f19]

    ??:? void tmpumronqcl.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_iox1dqe.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_iox1dqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && (int)i\
    \ == i)\n        {\n            if(i % 2 != 0)\n            {\n              \
    \  sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf2tr9tg5.d(16): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2tr9tg5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxx8fpf7.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxx8fpf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 != 0)\n            {\n           \
    \     sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpumronqcl.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpumronqcl.__unittest_L26_C1() [0x427f19]

    ??:? void tmpumronqcl.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x % 2 != 0)\n\
    \        {\n            sum += x * x;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplwqztt38.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283dd]

    ??:? void tmplwqztt38.__unittest_L23_C1() [0x42802c]

    ??:? void tmplwqztt38.__modtest() [0x428160]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42882c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float n; lst)\n    {\n        if(n > 0 && is(typeof(n)\
    \ == int))\n        {\n            if(n % 2 == 1)\n            {\n           \
    \     sum += n * n;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxnav9mk1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpxnav9mk1.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpxnav9mk1.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i < 0)\n    \
    \        continue;\n        if(i % 2 == 0)\n            continue;\n        sum\
    \ += i * i;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 != 0)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphmwqt8o5.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmphmwqt8o5.__unittest_L26_C1() [0x427ec9]

    ??:? void tmphmwqt8o5.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxx8fpf7.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxx8fpf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i %\
    \ 2 == 1)\n        {\n            sum += pow(i, 2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ num == int(num))\n        {\n            if(num % 2 != 0)\n            {\n \
    \               sum += num * num;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpofbmo0yr.d(16): Error: cannot implicitly convert expression `num`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofbmo0yr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxx8fpf7.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxx8fpf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n         \
    \   {\n                sum += pow(num, 2);\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb4r34x14.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpb4r34x14.__unittest_L26_C1() [0x427f19]

    ??:? void tmpb4r34x14.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 != 0)\n            {\n           \
    \     sum += pow(x, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw7p2tr8h.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpw7p2tr8h.__unittest_L26_C1() [0x427f19]

    ??:? void tmpw7p2tr8h.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_iox1dqe.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_iox1dqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x))\n \
    \       {\n            sum += x*x;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphzn_1wq_.d(16): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzn_1wq_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(isOdd(i))\n \
    \       {\n            sum += i*i;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptn7mux7b.d(16): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptn7mux7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 != 0)\n            {\n           \
    \     sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpumronqcl.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpumronqcl.__unittest_L26_C1() [0x427f19]

    ??:? void tmpumronqcl.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ num == cast(int)num)\n        {\n            if(num % 2 != 0)\n            {\n\
    \                sum += num * num;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i < 0)\n    \
    \        continue;\n        if(i % 2 == 0)\n            continue;\n        sum\
    \ += i * i;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ trunc(i))\n        {\n            if(i % 2 == 1)\n            {\n          \
    \      sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ num == cast(int)num)\n        {\n            if(num % 2 == 1)\n            {\n\
    \                sum += num * num;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n         \
    \   {\n                sum += num * num;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmuj4f0na.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpmuj4f0na.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpmuj4f0na.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ trunc(i))\n        {\n            if(i % 2 == 1)\n            {\n          \
    \      sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxx8fpf7.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxx8fpf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float n; lst)\n    {\n        if(n > 0 && is(typeof(n)\
    \ == int))\n        {\n            if(n % 2 == 1)\n            {\n           \
    \     sum += n * n;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxnav9mk1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpxnav9mk1.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpxnav9mk1.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 != 0)\n            {\n           \
    \     sum += pow(x, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw7p2tr8h.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpw7p2tr8h.__unittest_L26_C1() [0x427f19]

    ??:? void tmpw7p2tr8h.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ cast(int)x)\n        {\n            if(x % 2 != 0)\n            {\n        \
    \        sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float n; lst)\n    {\n        if(n < 0 || n !=\
    \ int(n))\n            continue;\n        if(n % 2 == 1)\n            sum += n*n;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ii8w895.d(16): Error: cannot implicitly convert expression `n`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ii8w895.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 != 0)\n            {\n           \
    \     sum += pow(x, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw7p2tr8h.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpw7p2tr8h.__unittest_L26_C1() [0x427f19]

    ??:? void tmpw7p2tr8h.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == float))\n        {\n            if(x % 2 == 1)\n            {\n         \
    \       sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i %\
    \ 2 == 1)\n        {\n            sum += i * i;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 != 0)\n            {\n           \
    \     sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpumronqcl.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpumronqcl.__unittest_L26_C1() [0x427f19]

    ??:? void tmpumronqcl.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 != 0)\n            {\n           \
    \     sum += pow(x, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw7p2tr8h.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpw7p2tr8h.__unittest_L26_C1() [0x427f19]

    ??:? void tmpw7p2tr8h.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 != 0)\n            {\n        \
    \        sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long result = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i\
    \ == int(i))\n        {\n            if(i % 2 == 1)\n            {\n         \
    \       result += i * i;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyj1_y5fd.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyj1_y5fd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6qxq0ze.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6qxq0ze.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n         \
    \   {\n                sum += num * num;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmuj4f0na.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpmuj4f0na.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpmuj4f0na.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float item; lst)\n    {\n        if(item > 0 &&\
    \ is(typeof(item) == int))\n        {\n            if(item % 2 != 0)\n       \
    \     {\n                sum += pow(item, 2);\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwbmmwvs.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpwwbmmwvs.__unittest_L26_C1() [0x427f19]

    ??:? void tmpwwbmmwvs.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ (int)i)\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal48drjo.d(16): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal48drjo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxx8fpf7.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxx8fpf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ trunc(i))\n        {\n            if(i % 2 != 0)\n            {\n          \
    \      sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 != 0)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6qxq0ze.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6qxq0ze.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ cast(int)x)\n        {\n            if(x % 2 == 1)\n            {\n        \
    \        sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 != 0)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv31g2y9m.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpv31g2y9m.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpv31g2y9m.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ cast(int)x)\n        {\n            if(x % 2 == 1)\n            {\n        \
    \        sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ num == cast(int)num)\n        {\n            if(num % 2 == 1)\n            {\n\
    \                sum += num * num;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ cast(int)x)\n        {\n            if(x % 2 == 1)\n            {\n        \
    \        sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i%2 != 0)\n \
    \       {\n            sum += pow(i,2);\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpta1j4hms.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42854d]

    ??:? void tmpta1j4hms.__unittest_L23_C1() [0x428088]

    ??:? void tmpta1j4hms.__modtest() [0x4282d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c503]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b396]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304b5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b36d]

    ??:? runModuleUnitTests [0x42c2d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42899c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n         \
    \   {\n                sum += pow(num, 2);\n            }\n        }\n    }\n\
    \    return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb4r34x14.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpb4r34x14.__unittest_L26_C1() [0x427f19]

    ??:? void tmpb4r34x14.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float n; lst)\n    {\n        if(n > 0 && n %\
    \ 1 == 0)\n        {\n            if(n % 2 == 1)\n            {\n            \
    \    sum += n * n;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ cast(int)x)\n        {\n            if(x % 2 == 1)\n            {\n        \
    \        sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ num == (int)num)\n        {\n            if(num % 2 != 0)\n            {\n \
    \               sum += num * num;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqjv5r06f.d(16): Error: C style cast illegal, use `cast(int)num`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjv5r06f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i %\
    \ 1 == 0)\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ num == (int)num)\n        {\n            if(num % 2 != 0)\n            {\n \
    \               sum += num * num;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqjv5r06f.d(16): Error: C style cast illegal, use `cast(int)num`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqjv5r06f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i*i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long result = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i\
    \ == cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n     \
    \           result += i * i;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n         \
    \   {\n                sum += num * num;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmuj4f0na.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpmuj4f0na.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpmuj4f0na.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_iox1dqe.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_iox1dqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float n; lst)\n    {\n        if(n > 0 && n ==\
    \ cast(int)n)\n        {\n            if(n % 2 == 1)\n            {\n        \
    \        sum += pow(n, 2);\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ trunc(i))\n        {\n            if(i % 2 != 0)\n            {\n          \
    \      sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppfoe3xfe.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmppfoe3xfe.__unittest_L26_C1() [0x427f19]

    ??:? void tmppfoe3xfe.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i < 0)\n    \
    \        continue;\n        if(i != int(i))\n            continue;\n        if(i\
    \ % 2 == 0)\n            continue;\n        sum += pow(i, 2);\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphyxj2k0s.d(18): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphyxj2k0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ (int)x)\n        {\n            if(x % 2 == 1)\n            {\n            \
    \    sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6odk4x_.d(16): Error: C style cast illegal, use `cast(int)x`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6odk4x_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += pow(x, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_tobjn3p.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmp_tobjn3p.__unittest_L26_C1() [0x427f19]

    ??:? void tmp_tobjn3p.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 != 0)\n            {\n           \
    \     sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpumronqcl.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpumronqcl.__unittest_L26_C1() [0x427f19]

    ??:? void tmpumronqcl.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float n; lst)\n    {\n        if(n > 0 && n ==\
    \ cast(int)n)\n        {\n            if(n % 2 == 1)\n            {\n        \
    \        sum += pow(n, 2);\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += pow(i, 2);\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_iox1dqe.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_iox1dqe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 != 0)\n            {\n        \
    \        sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x))\n \
    \       {\n            sum += x*x;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphzn_1wq_.d(16): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzn_1wq_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ num % 1 == 0)\n        {\n            if(num % 2 == 1)\n            {\n    \
    \            sum += num * num;\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n         \
    \   {\n                sum += num * num;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmuj4f0na.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpmuj4f0na.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpmuj4f0na.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 != 0)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphmwqt8o5.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmphmwqt8o5.__unittest_L26_C1() [0x427ec9]

    ??:? void tmphmwqt8o5.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            sum += pow(i, 2);\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt84qveep.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42854d]

    ??:? void tmpt84qveep.__unittest_L23_C1() [0x428088]

    ??:? void tmpt84qveep.__modtest() [0x4282d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c503]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b396]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304b5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b36d]

    ??:? runModuleUnitTests [0x42c2d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42899c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += pow(i, 2);\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += pow(i, 2);\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 != 0)\n            {\n           \
    \     sum += pow(x, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw7p2tr8h.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpw7p2tr8h.__unittest_L26_C1() [0x427f19]

    ??:? void tmpw7p2tr8h.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i*i;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ trunc(x))\n        {\n            if(x % 2 == 1)\n            {\n          \
    \      sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ trunc(i))\n        {\n            if(i % 2 == 1)\n            {\n          \
    \      sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 != 0)\n            {\n           \
    \     sum += pow(x, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw7p2tr8h.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpw7p2tr8h.__unittest_L26_C1() [0x427f19]

    ??:? void tmpw7p2tr8h.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i %\
    \ 2 == 1)\n        {\n            sum += pow(i, 2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxx8fpf7.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxx8fpf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppfoe3xfe.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmppfoe3xfe.__unittest_L26_C1() [0x427f19]

    ??:? void tmppfoe3xfe.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430980]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43045d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b315]

    ??:? runModuleUnitTests [0x42c281]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 != 0)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnxx8fpf7.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnxx8fpf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && (int)i\
    \ == i)\n        {\n            if(i % 2 != 0)\n            {\n              \
    \  sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpklexiqi7.d(16): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpklexiqi7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i*i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwzlx345q.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwzlx345q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == int))\n        {\n            if(x % 2 == 1)\n            {\n           \
    \     sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwdrgmoq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpbwdrgmoq.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpbwdrgmoq.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i*i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwzlx345q.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwzlx345q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += pow(i, 2);\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ is(typeof(num) == int))\n        {\n            if(num % 2 != 0)\n         \
    \   {\n                sum += num * num;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjc7qt83x.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpjc7qt83x.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpjc7qt83x.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 != 0)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += pow(i, 2);\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6qxq0ze.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6qxq0ze.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(isOdd(x))\n \
    \       {\n            sum += pow(x,2);\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdst2uibv.d(16): Error: undefined identifier `isOdd`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdst2uibv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i %\
    \ 2 == 1)\n        {\n            sum += pow(i, 2);\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && is(typeof(x)\
    \ == float))\n        {\n            sum += x * x;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj3cbv24r.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283d5]

    ??:? void tmpj3cbv24r.__unittest_L23_C1() [0x427f0d]

    ??:? void tmpj3cbv24r.__modtest() [0x428158]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430860]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43033d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f5]

    ??:? runModuleUnitTests [0x42c161]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428824]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ trunc(i))\n        {\n            if(i % 2 == 1)\n            {\n          \
    \      sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && is(typeof(i)\
    \ == int))\n        {\n            if(i % 2 == 1)\n            {\n           \
    \     sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy_as0gx4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpy_as0gx4.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpy_as0gx4.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ num == cast(int)num)\n        {\n            if(num % 2 == 1)\n            {\n\
    \                sum += num * num;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ cast(int)i)\n        {\n            if(i % 2 == 1)\n            {\n        \
    \        sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163963
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += pow(i, 2);\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ cast(int)x)\n        {\n            if(x % 2 == 1)\n            {\n        \
    \        sum += pow(x, 2);\n            }\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float x; lst)\n    {\n        if(x > 0 && x ==\
    \ cast(int)x)\n        {\n            if(x % 2 == 1)\n            {\n        \
    \        sum += x * x;\n            }\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 0
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i % 2 == 1)\n\
    \        {\n            sum += i*i;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ (int)i)\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpal48drjo.d(16): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpal48drjo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163964
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float i; lst)\n    {\n        if(i > 0 && i ==\
    \ int(i))\n        {\n            if(i % 2 == 1)\n            {\n            \
    \    sum += i * i;\n            }\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1,\
    \ 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n  \
    \  assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0,\
    \ 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eynha7s.d(16): Error: cannot implicitly convert expression `i`
    of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eynha7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163963
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given a list of numbers, return the sum of\
    \ squares of the numbers\n    in the list that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n                   \n    If the input list\
    \ is empty, return 0.\n    \n*/\nlong double_the_difference(float[] lst) \n{\n\
    \    long sum = 0;\n    foreach(float num; lst)\n    {\n        if(num > 0 &&\
    \ is(typeof(num) == int))\n        {\n            if(num % 2 == 1)\n         \
    \   {\n                sum += num * num;\n            }\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = double_the_difference;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n\
    \    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0,\
    \ -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2,\
    \ 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmuj4f0na.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x428395]

    ??:? void tmpmuj4f0na.__unittest_L26_C1() [0x427ec9]

    ??:? void tmpmuj4f0na.__modtest() [0x428114]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163963
