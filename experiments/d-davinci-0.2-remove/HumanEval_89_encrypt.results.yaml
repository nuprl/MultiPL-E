language: d
name: HumanEval_89_encrypt
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else\n        {\n       \
    \     int index = c - 'a';\n            index = (index + 2 * 2) % 26;\n      \
    \      result ~= 'a' + index;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (char)((c - 'a' + 2*2) % 26 + 'a');\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (char)((c - 'A' + 2*2) % 26 + 'A');\n        }\n        else\n        {\n  \
    \          result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzqv3z2b.d(18): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    /tmp/tmplzqv3z2b.d(22): Error: C style cast illegal, use `cast(char)((c - ''A''
    + 2 * 2) % 26 + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzqv3z2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            encrypted ~= alphabet[(cast(int)c\
    \ - 97 + 4) % 26];\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b1x0_ue.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280cd]

    ??:? void tmp9b1x0_ue.__unittest_L27_C1() [0x427b92]

    ??:? void tmp9b1x0_ue.__modtest() [0x427e50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430049]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42851c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= chr(c + 2 * 2);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptsrarehf.d(21): Error: undefined identifier `chr`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsrarehf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.find(c);\n       \
    \ encrypted ~= alphabet[(index + 2*2) % alphabet.length];\n    }\n    return encrypted;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ms_qo2z.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ms_qo2z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(char c; s)\n    {\n        if(c.isAlpha)\n        {\n \
    \           if(c.isUpper)\n            {\n                result ~= (cast(char)(((c\
    \ - 'A' + 2) * 2) % 26 + 'A'));\n            }\n            else\n           \
    \ {\n                result ~= (cast(char)(((c - 'a' + 2) * 2) % 26 + 'a'));\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hh489ze.d(16): Error: no property `isAlpha` for type `char`

    /tmp/tmp1hh489ze.d(18): Error: no property `isUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hh489ze.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8h551cm_.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8h551cm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        if(c == ' ') \n        {\n            result ~= ' ';\n \
    \       }\n        else \n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2*2) % alphabet.length;\n            result\
    \ ~= alphabet[newIndex];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8gjmqy5t.d(23): Error: no property `indexOf` for type `string`

    /tmp/tmp8gjmqy5t.d(24): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8gjmqy5t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * 2)) % 26;\n            encrypted ~=\
    \ alphabet[newIndex];\n        }\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfl7641c7.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfl7641c7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c.isAlpha)\n     \
    \   {\n            result ~= c.toUpper.rotate(2 * 2);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpozfi3qcd.d(16): Error: no property `isAlpha` for type `char`

    /tmp/tmpozfi3qcd.d(18): Error: no property `toUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpozfi3qcd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= c + 2 * 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsfn816ov.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428165]

    ??:? void tmpsfn816ov.__unittest_L27_C1() [0x427d52]

    ??:? void tmpsfn816ov.__modtest() [0x427ee4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42caef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430884]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430361]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9d5]

    ??:? runModuleUnitTests [0x42c8c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n      \
    \      result ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n\
    \        else\n            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6ymt7bs.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmps6ymt7bs.__unittest_L25_C1() [0x427c5a]

    ??:? void tmps6ymt7bs.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n   \
    \ assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxk_1r0st.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxk_1r0st.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n      \
    \      result ~= c.toLower.rotate(2*2);\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz7pbwp33.d(16): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmpz7pbwp33.d(18): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz7pbwp33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n      \
    \  {\n            result ~= (c - 'a' + 2) % 26 + 'a';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 'A' + 2) % 26\
    \ + 'A';\n        }\n        else\n        {\n            result ~= c;\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjuww1ouz.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmpjuww1ouz.__unittest_L31_C1() [0x427bf2]

    ??:? void tmpjuww1ouz.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430558]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430035]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6a9]

    ??:? runModuleUnitTests [0x42c599]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            result ~= c;\n  \
    \      }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2 * 2) % alphabet.length;\n            result\
    \ ~= alphabet[newIndex];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpderdt4a6.d(23): Error: no property `indexOf` for type `string`

    /tmp/tmpderdt4a6.d(24): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpderdt4a6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (c + 2 > 'z') ? (c + 2 - 'z' + 'a' - 1) : (c\
    \ + 2);\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n       \
    \     result ~= (c + 2 > 'Z') ? (c + 2 - 'Z' + 'A' - 1) : (c + 2);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\n/*\nCreate a function decrypt that takes a string as an argument\
    \ and\n    returns a string decrypted with the alphabet being rotated. \n    The\
    \ alphabet should be rotated in a manner such that the letters \n    shift up\
    \ by two multiplied to two places.\n    For example:\n                    \n*/\n\
    string decrypt(string s) \n{\n    string result = \"\";\n    foreach(c; s)\n \
    \   {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~= (c -\
    \ 2 < 'a') ? (c - 2 + 'z' - 'a' + 1) : (c - 2);\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            result ~= (c - 2 < 'A') ? (c - 2\
    \ + 'Z' - 'A' + 1) : (c - 2);\n        }\n        else\n        {\n          \
    \  result ~= c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function\
    \ that takes a string as an argument and returns \n    a string with the first\
    \ letter of each word capitalized.\n    For example:\n                    \n*/\n\
    string capitalize(string s) \n{\n    string result = \"\";\n    bool capitalize\
    \ = true;\n    foreach(c; s)\n    {\n        if(capitalize)\n        {\n     \
    \       result ~= toupper(c);\n            capitalize = false;\n        }\n  \
    \      else\n        {\n            result ~= c;\n        }\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp81n2noo5.d(80): Error: found `unittest` instead of statement

    /tmp/tmp81n2noo5.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp81n2noo5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n\
    \            if(c.isUpper)\n            {\n                result ~= (cast(char)(((c\
    \ - 'A' + 2) % 26) + 'A'));\n            }\n            else\n            {\n\
    \                result ~= (cast(char)(((c - 'a' + 2) % 26) + 'a'));\n       \
    \     }\n        }\n        else\n        {\n            result ~= c;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdxl6gw10.d(16): Error: undefined identifier `isAlpha`

    /tmp/tmpdxl6gw10.d(18): Error: no property `isUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxl6gw10.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)(((c - 'a' + 2) * 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)(((c - 'A' + 2) * 2) % 26 + 'A'));\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_2khs1nt.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmp_2khs1nt.__unittest_L31_C1() [0x427bfa]

    ??:? void tmp_2khs1nt.__modtest() [0x427eb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430560]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43003d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b1]

    ??:? runModuleUnitTests [0x42c5a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428584]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= rotate(c, 2*2);\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n \
    \   assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7disupw.d(22): Error: undefined identifier `rotate`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7disupw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2) * 2;\n            encrypted ~= alphabet[newIndex\
    \ % alphabet.length];\n        }\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptukl_z_u.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptukl_z_u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 4) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ae5u5ux.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ae5u5ux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32mkj_q7.d(16): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32mkj_q7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qn2p5qk.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qn2p5qk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32mkj_q7.d(16): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32mkj_q7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (char)((c - 'a' + 2*2) % 26 + 'a');\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (char)((c - 'A' + 2*2) % 26 + 'A');\n        }\n        else\n        {\n  \
    \          result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzqv3z2b.d(18): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    /tmp/tmplzqv3z2b.d(22): Error: C style cast illegal, use `cast(char)((c - ''A''
    + 2 * 2) % 26 + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzqv3z2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= char(c + 2 * 2);\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe6yloslk.d(22): Error: cannot implicitly convert expression `cast(int)c
    + 4` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6yloslk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n    \
    \    if(index != -1)\n        {\n            int newIndex = (index + (2 * 2))\
    \ % alphabet.length;\n            encrypted ~= alphabet[newIndex];\n        }\n\
    \        else\n        {\n            encrypted ~= c;\n        }\n    }\n    return\
    \ encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_jjkg07q.d(17): Error: no property `indexOf` for type `string`

    /tmp/tmp_jjkg07q.d(20): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_jjkg07q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(char c; s)\n    {\n        if(c.isAlpha)\n        {\n \
    \           result ~= c.toLower.rotate(2 * 2);\n        }\n        else\n    \
    \    {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxb16ms14.d(16): Error: no property `isAlpha` for type `char`

    /tmp/tmpxb16ms14.d(18): Error: no property `toLower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxb16ms14.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else\n        {\n       \
    \     result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1zxr8ht.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1zxr8ht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp73qt7t5a.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp73qt7t5a.__unittest_L25_C1() [0x427c5a]

    ??:? void tmp73qt7t5a.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n    \
    \    if(index != -1)\n        {\n            encrypted ~= alphabet[(index + 2*2)\
    \ % alphabet.length];\n        }\n        else\n        {\n            encrypted\
    \ ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnvwgv360.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvwgv360.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            result ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzy2567ug.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzy2567ug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            result ~=\
    \ (c + 2 * 2).to!char;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps7e4fx1d.d(22): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps7e4fx1d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else\n  \
    \      {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        result ~= (cast(char)(c\
    \ + 2 * 2));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjk9_sefe.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428085]

    ??:? void tmpjk9_sefe.__unittest_L20_C1() [0x427c76]

    ??:? void tmpjk9_sefe.__modtest() [0x427e08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c71b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430001]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c4f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n   \
    \ assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxk_1r0st.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxk_1r0st.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n\
    \            result ~= (c.isUpper ? 'A' : 'a') + ((c - (c.isUpper ? 'A' : 'a')\
    \ + 2 * 2) % 26);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfuj12vhd.d(16): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmpfuj12vhd.d(18): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpfuj12vhd.d(18): Error: no property `isUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuj12vhd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else if(c == 'z')\n     \
    \   {\n            result ~= 'b';\n        }\n        else if(c == 'y')\n    \
    \    {\n            result ~= 'a';\n        }\n        else\n        {\n     \
    \       result ~= (char)(c + 2);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnfsmeole.d(30): Error: C style cast illegal, use `cast(char)(c
    + 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfsmeole.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n    \
    \    if(index != -1)\n        {\n            encrypted ~= alphabet[(index + (2\
    \ * 2)) % alphabet.length];\n        }\n        else\n        {\n            encrypted\
    \ ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphtw8drez.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtw8drez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n\
    \            result ~= c;\n        }\n        else \n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= c;\n     \
    \   }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2 * 2) % alphabet.length;\n            result\
    \ ~= alphabet[newIndex];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibapoaux.d(23): Error: no property `indexOf` for type `string`

    /tmp/tmpibapoaux.d(24): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibapoaux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n\
    \            result ~= ' ';\n        } \n        else \n        {\n          \
    \  int index = c - 'a';\n            index = (index + 2 * 2) % 26;\n         \
    \   result ~= char(index + 'a');\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppzu42n47.d(24): Error: cannot implicitly convert expression `index
    + 97` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppzu42n47.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 2 * 2) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n   \
    \ assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps5l2rgfo.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps5l2rgfo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)(((cast(int)(c) - 97 + 2*2) % 26) + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ res;\n    foreach(c; s)\n    {\n        res ~= (c == ' ') ? ' ' : 'a' + ((c\
    \ - 'a' + 2*2) % 26);\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= c;\n        }\n        else\n        {\n         \
    \   result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97rjbgfj.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97rjbgfj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            result ~= alphabet[(index + 2 * 2) % alphabet.length];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpww4mrugf.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpww4mrugf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n    }\n    return result;\n\
    }\n/*\nCreate a function decrypt that takes a string as an argument and\n    returns\
    \ a string decrypted with the alphabet being rotated. \n    The alphabet should\
    \ be rotated in a manner such that the letters \n    shift up by two multiplied\
    \ to two places.\n*/\nstring decrypt(string s) \n{\n    string result = \"\";\n\
    \    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            result\
    \ ~= ' ';\n        }\n        else\n        {\n            result ~= (char)(((c\
    \ - 'a' - 2) % 26) + 'a');\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7k3yrcj.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    /tmp/tmpb7k3yrcj.d(44): Error: C style cast illegal, use `cast(char)((c - ''a''
    - 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7k3yrcj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n\
    \            result ~= ' ';\n        } \n        else \n        {\n          \
    \  result ~= char(cast(int)c + 2 * 2);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpizgh8kox.d(22): Error: cannot implicitly convert expression `cast(int)c
    + 4` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpizgh8kox.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n    \
    \    if(index != -1)\n        {\n            encrypted ~= alphabet[(index + 2*2)\
    \ % alphabet.length];\n        }\n        else\n        {\n            encrypted\
    \ ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnvwgv360.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvwgv360.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        if(c == ' ') \n    \
    \    {\n            result ~= ' ';\n        } \n        else \n        {\n   \
    \         result ~= char(mod(cast(int)c + 2 * 2, 26) + 'a');\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpasz22ssc.d(22): Error: undefined identifier `mod`, did you mean
    function `fmod`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpasz22ssc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n     \
    \   }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp58l7bo98.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58l7bo98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == 'z')\n           \
    \ result ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n    \
    \    else\n            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3or9ka11.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp3or9ka11.__unittest_L25_C1() [0x427c5a]

    ??:? void tmp3or9ka11.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n\
    \            result ~= ' ';\n        } \n        else \n        {\n          \
    \  result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlg4hedd.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280cd]

    ??:? void tmpqlg4hedd.__unittest_L27_C1() [0x427b92]

    ??:? void tmpqlg4hedd.__modtest() [0x427e50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430049]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42851c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n        }\n        else \n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm9zhtu96.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmpm9zhtu96.__unittest_L31_C1() [0x427bf6]

    ??:? void tmpm9zhtu96.__modtest() [0x427eb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430560]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43003d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b1]

    ??:? runModuleUnitTests [0x42c5a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428584]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n        }\n        else \n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm9zhtu96.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmpm9zhtu96.__unittest_L31_C1() [0x427bf6]

    ??:? void tmpm9zhtu96.__modtest() [0x427eb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430560]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43003d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b1]

    ??:? runModuleUnitTests [0x42c5a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428584]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)('a' + (c - 'a' + 2 * 2) % 26));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)('A' + (c - 'A' + 2 * 2) % 26));\n        }\n        else\n  \
    \      {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (c + 2 * 2);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsj14c1hh.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42815d]

    ??:? void tmpsj14c1hh.__unittest_L27_C1() [0x427d4e]

    ??:? void tmpsj14c1hh.__modtest() [0x427ee0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cae7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9cd]

    ??:? runModuleUnitTests [0x42c8bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n     \
    \   }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp58l7bo98.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58l7bo98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n\
    \            result ~= (c.toLower.isUpper ? 'a' : 'A') + (c.toLower - 'a' + 2\
    \ * 2) % 26;\n        }\n        else\n        {\n            result ~= c;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfajw2ajv.d(16): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmpfajw2ajv.d(18): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpfajw2ajv.d(18): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfajw2ajv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\n/*\nCreate a function decrypt that takes a string as\
    \ an argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n*/\nstring decrypt(string\
    \ s) \n{\n    string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string decrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n  \
    \          decrypted ~= ' ';\n        }\n        else\n        {\n           \
    \ int index = alphabet.indexOf(c);\n            decrypted ~= alphabet[(index -\
    \ (2 * 2)) % 26];\n        }\n    }\n    return decrypted;\n}\n/*\nCreate a function\
    \ encrypt that takes a string as an argument and\n    returns a string encrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\n/*\nCreate a function decrypt that takes a string as\
    \ an argument and\n    returns a string decrypted\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptapo1u7f.d(80): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptapo1u7f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * 2)) % 26;\n            encrypted ~=\
    \ alphabet[newIndex];\n        }\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfl7641c7.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfl7641c7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2 * 2) % alphabet.length;\n            encrypted\
    \ ~= alphabet[newIndex];\n        }\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnggkd8jk.d(23): Error: no property `indexOf` for type `string`

    /tmp/tmpnggkd8jk.d(24): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnggkd8jk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n      \
    \      result ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n\
    \        else\n            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6ymt7bs.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmps6ymt7bs.__unittest_L25_C1() [0x427c5a]

    ??:? void tmps6ymt7bs.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n\
    \            if(c.isUpper)\n            {\n                result ~= (((c - 'A'\
    \ + 2) % 26) + 'A');\n            }\n            else\n            {\n       \
    \         result ~= (((c - 'a' + 2) % 26) + 'a');\n            }\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4u7f5dov.d(16): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmp4u7f5dov.d(18): Error: no property `isUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4u7f5dov.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n\
    \            result ~= c;\n        }\n        else \n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (char)((c - 'A' + 2 * 2) % 26 + 'A');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphzbyn5d8.d(18): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    /tmp/tmphzbyn5d8.d(22): Error: C style cast illegal, use `cast(char)((c - ''A''
    + 2 * 2) % 26 + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzbyn5d8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        result ~= (cast(char)((c\
    \ - 'a' + 2 * 2) % 26 + 'a'));\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n  \
    \  assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (char)((c - 'a' + 2*2) % 26 + 'a');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplcprdjb_.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplcprdjb_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c.isAlpha)\n     \
    \   {\n            if(c.isUpper)\n            {\n                result ~= (cast(char)((c\
    \ - 'A' + 2*2) % 26 + 'A'));\n            }\n            else\n            {\n\
    \                result ~= (cast(char)((c - 'a' + 2*2) % 26 + 'a'));\n       \
    \     }\n        }\n        else\n        {\n            result ~= c;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn4_qhi0r.d(16): Error: no property `isAlpha` for type `char`

    /tmp/tmpn4_qhi0r.d(18): Error: no property `isUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn4_qhi0r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) + 2 * 2)));\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf7srl4xb.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280bd]

    ??:? void tmpf7srl4xb.__unittest_L27_C1() [0x427cae]

    ??:? void tmpf7srl4xb.__modtest() [0x427e40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b662]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430039]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffc5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b639]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42850c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= char(cast(int)c + 2*2);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqpku3o9q.d(22): Error: cannot implicitly convert expression `cast(int)c
    + 4` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpku3o9q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= c;\n        }\n        else\n        {\n         \
    \   int index = c - 'a';\n            index = (index + 2*2) % 26;\n          \
    \  result ~= 'a' + index;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s) \n    {\n        int index = alphabet.indexOf(c);\n   \
    \     if(index != -1) \n        {\n            encrypted ~= alphabet[(index +\
    \ 2 * 2) % alphabet.length];\n        }\n        else \n        {\n          \
    \  encrypted ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc62p4s1v.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc62p4s1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (c + (2 * 2));\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n  \
    \  assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5pzq9xdq.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42815d]

    ??:? void tmp5pzq9xdq.__unittest_L27_C1() [0x427d4e]

    ??:? void tmp5pzq9xdq.__modtest() [0x427ee0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cae7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9cd]

    ??:? runModuleUnitTests [0x42c8bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 4) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ae5u5ux.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ae5u5ux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        result ~= (cast(char)((cast(int)c\
    \ + 2 * 2) % 256));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpghszcyjj.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42808d]

    ??:? void tmpghszcyjj.__unittest_L20_C1() [0x427c7e]

    ??:? void tmpghszcyjj.__modtest() [0x427e10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c723]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c4f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (char)((c - 'A' + 2 * 2) % 26 + 'A');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcxj074vz.d(18): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    /tmp/tmpcxj074vz.d(22): Error: C style cast illegal, use `cast(char)((c - ''A''
    + 2 * 2) % 26 + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxj074vz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ encrypted = \"\";\n    foreach(char c; s)\n    {\n        encrypted ~= (cast(char)((c\
    \ - 'a' + 2) % 26 + 'a'));\n    }\n    return encrypted;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpql9zhui5.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x42808d]

    ??:? void tmpql9zhui5.__unittest_L20_C1() [0x427b52]

    ??:? void tmpql9zhui5.__modtest() [0x427e10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c723]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c4f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= c;\n        }\n        else\n        {\n         \
    \   result ~= (cast(char)((cast(int)(c) + 2*2 - 97) % 26 + 97));\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (char)(((c - 'a' + 2 * 2) % 26) + 'a');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpax_totjw.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpax_totjw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        result ~= cast(char)(cast(int)c\
    \ + 2 * 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_yhefpjw.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428085]

    ??:? void tmp_yhefpjw.__unittest_L20_C1() [0x427c76]

    ??:? void tmp_yhefpjw.__modtest() [0x427e08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c71b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430001]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c4f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= char(mod(c - 'a' + 2 * 2, 26) + 'a');\n \
    \       }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= char(mod(c - 'A' + 2 * 2, 26) + 'A');\n        }\n        else \n       \
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ubrpent.d(18): Error: undefined identifier `mod`, did you mean
    function `fmod`?

    /tmp/tmp2ubrpent.d(22): Error: undefined identifier `mod`, did you mean function
    `fmod`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ubrpent.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (c + 2 * 2);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsj14c1hh.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42815d]

    ??:? void tmpsj14c1hh.__unittest_L27_C1() [0x427d4e]

    ??:? void tmpsj14c1hh.__modtest() [0x427ee0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cae7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9cd]

    ??:? runModuleUnitTests [0x42c8bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 4) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ae5u5ux.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ae5u5ux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n   \
    \     }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsxcmq0cy.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxcmq0cy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n\
    \            result ~= ' ';\n        }\n        else \n        {\n           \
    \ result ~= (cast(char)(((cast(int)(c) - 97 + 2) * 2) % 26 + 97));\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmzta3w80.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280cd]

    ??:? void tmpmzta3w80.__unittest_L27_C1() [0x427b92]

    ??:? void tmpmzta3w80.__modtest() [0x427e50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430049]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42851c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        if(c == ' ') \n        {\n            result ~= ' ';\n \
    \       }\n        else \n        {\n            int index = alphabet.indexOf(c);\n\
    \            result ~= alphabet[(index + (2 * 2)) % alphabet.length];\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq3z1zk2x.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3z1zk2x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 4) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ae5u5ux.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ae5u5ux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (c - 'a' + 2 * 2) % 26 + 'a';\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= c;\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 4) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzs02r89k.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzs02r89k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else\n  \
    \      {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8vgn78p2.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmp8vgn78p2.__unittest_L31_C1() [0x427bf6]

    ??:? void tmp8vgn78p2.__modtest() [0x427eb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430560]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43003d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b1]

    ??:? runModuleUnitTests [0x42c5a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428584]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (char)((c + 2 * 2 - 'a') % 26 + 'a');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo92f9rp0.d(22): Error: C style cast illegal, use `cast(char)((c
    + 2 * 2 - ''a'') % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo92f9rp0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (char)('a' + (c - 'a' + 2 * 2) % 26);\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (char)('A' + (c - 'A' + 2 * 2) % 26);\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmkngydtm.d(18): Error: C style cast illegal, use `cast(char)(''a''
    + (c - ''a'' + 2 * 2) % 26)`

    /tmp/tmpmkngydtm.d(22): Error: C style cast illegal, use `cast(char)(''A'' + (c
    - ''A'' + 2 * 2) % 26)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmkngydtm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else\n        {\n       \
    \     result ~= 'a' + ((c - 'a' + 2 * 2) % 26);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c.isAlpha)\n     \
    \   {\n            if(c.isUpper)\n            {\n                result ~= (cast(char)((cast(int)(c)\
    \ + 2 * 2 - 65) % 26 + 65));\n            }\n            else\n            {\n\
    \                result ~= (cast(char)((cast(int)(c) + 2 * 2 - 97) % 26 + 97));\n\
    \            }\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpymgvnio9.d(16): Error: no property `isAlpha` for type `char`

    /tmp/tmpymgvnio9.d(18): Error: no property `isUpper` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymgvnio9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s) \n    {\n        int index = alphabet.indexOf(c);\n   \
    \     if(index == -1) \n        {\n            encrypted ~= c;\n        }\n  \
    \      else \n        {\n            encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n\
    \        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj87e0c2d.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj87e0c2d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (c + 2 * 2);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0v3up2xq.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428165]

    ??:? void tmp0v3up2xq.__unittest_L27_C1() [0x427d52]

    ??:? void tmp0v3up2xq.__modtest() [0x427ee4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42caef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430884]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430361]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9d5]

    ??:? runModuleUnitTests [0x42c8c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n    \
    \    if(index != -1)\n        {\n            encrypted ~= alphabet[(index + 2\
    \ * 2) % alphabet.length];\n        }\n        else\n        {\n            encrypted\
    \ ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqil6vv6.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqil6vv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else\n        {\n       \
    \     result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1zxr8ht.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1zxr8ht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            result ~=\
    \ (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= c;\n            continue;\n        }\n        else if(c == 'z')\n\
    \        {\n            result ~= 'b';\n            continue;\n        }\n   \
    \     else if(c == 'y')\n        {\n            result ~= 'a';\n            continue;\n\
    \        }\n        else\n        {\n            result ~= c + 2;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk4rseevo.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4281cd]

    ??:? void tmpk4rseevo.__unittest_L38_C1() [0x427c8e]

    ??:? void tmpk4rseevo.__modtest() [0x427f4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43043d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba3d]

    ??:? runModuleUnitTests [0x42c92d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42861c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32mkj_q7.d(16): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32mkj_q7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s) \n    {\n        if(c >= 'a' && c <= 'z') \n    \
    \    {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else \n \
    \       {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            result ~=\
    \ (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 4) % 26];\n        }\n    }\n    return\
    \ encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ae5u5ux.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ae5u5ux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            result ~= c;\n  \
    \      }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2) * 2;\n            if(newIndex > 25)\n\
    \            {\n                newIndex = newIndex - 26;\n            }\n   \
    \         result ~= alphabet[newIndex];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86ye9uck.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86ye9uck.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        if(c == ' ') \n    \
    \    {\n            result ~= c;\n        }\n        else \n        {\n      \
    \      int ascii = c;\n            ascii += 2 * 2;\n            if(ascii > 122)\
    \ \n            {\n                ascii -= 26;\n            }\n            result\
    \ ~= cast(char)ascii;\n        }\n    }\n    return result;\n}\n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n    returns a string decrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n                    \n*/\nstring decrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        if(c == ' ') \n    \
    \    {\n            result ~= c;\n        }\n        else \n        {\n      \
    \      int ascii = c;\n            ascii -= 2 * 2;\n            if(ascii < 97)\
    \ \n            {\n                ascii += 26;\n            }\n            result\
    \ ~= cast(char)ascii;\n        }\n    }\n    return result;\n}\n/*\nCreate a function\
    \ that takes a string as an argument and returns a string \n    with the alphabet\
    \ being rotated. The alphabet should be rotated in a \n    manner such that the\
    \ letters shift by a certain amount.\n    For example:\n                    \n\
    */\nstring rotate(string s, int shift) \n{\n    string result = \"\";\n    foreach(char\
    \ c; s) \n    {\n        if(c == ' ') \n        {\n            result ~= c;\n\
    \        }\n        else \n        {\n            int ascii = c;\n           \
    \ ascii += shift;\n            if(ascii > 122) \n            {\n             \
    \   ascii -= 26;\n            }\n            else if(ascii < 97) \n          \
    \  {\n                ascii += 26;\n            }\n            result ~= cast\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgfroln2x.d(92): Error: found `unittest` when expecting `(`

    /tmp/tmpgfroln2x.d(93): Error: basic type expected, not `{`

    /tmp/tmpgfroln2x.d(93): Error: found `{` when expecting `)`

    /tmp/tmpgfroln2x.d(94): Error: expression expected, not `alias`

    /tmp/tmpgfroln2x.d(94): Error: found `candidate` when expecting `;` following
    statement

    /tmp/tmpgfroln2x.d(94): Error: found `=` instead of statement

    /tmp/tmpgfroln2x.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpgfroln2x.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfroln2x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphx5_87j0.d(16): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphx5_87j0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2) * 2;\n            if(newIndex > 25)\n\
    \            {\n                newIndex = newIndex - 26;\n            }\n   \
    \         result ~= alphabet[newIndex];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd5bov5mo.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5bov5mo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)(((cast(int)(c) - 97 + 2) * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp16qt2izc.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280cd]

    ??:? void tmp16qt2izc.__unittest_L27_C1() [0x427b92]

    ??:? void tmp16qt2izc.__modtest() [0x427e50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430049]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42851c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= char(mod(c - 'a' + 2 * 2, 26) + 'a');\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ char(mod(c - 'A' + 2 * 2, 26) + 'A');\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7a_yl05.d(18): Error: undefined identifier `mod`, did you mean
    function `fmod`?

    /tmp/tmp_7a_yl05.d(22): Error: undefined identifier `mod`, did you mean function
    `fmod`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7a_yl05.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        result ~= (c == ' ') ? ' '\
    \ : (c + 2 * 2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo8rcrczz.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42813d]

    ??:? void tmpo8rcrczz.__unittest_L20_C1() [0x427d2a]

    ??:? void tmpo8rcrczz.__modtest() [0x427ebc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0db]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430101]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43008d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afc1]

    ??:? runModuleUnitTests [0x42beb1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42858c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= ' ';\n        }\n        else\n        {\n            result ~=\
    \ (cast(char)((cast(int)(c) - 65 + 2 * 2) % 26 + 65));\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg2876arv.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280cd]

    ??:? void tmpg2876arv.__unittest_L27_C1() [0x427b8e]

    ??:? void tmpg2876arv.__modtest() [0x427e4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430049]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42851c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpit9irenk.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpit9irenk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        if(c >= 'a' && c <=\
    \ 'z') \n        {\n            result ~= (char)('a' + (c - 'a' + 2*2) % 26);\n\
    \        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (char)('A' + (c - 'A' + 2*2) % 26);\n        } \n        else \n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2kjvx__7.d(18): Error: C style cast illegal, use `cast(char)(''a''
    + (c - ''a'' + 2 * 2) % 26)`

    /tmp/tmp2kjvx__7.d(22): Error: C style cast illegal, use `cast(char)(''A'' + (c
    - ''A'' + 2 * 2) % 26)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kjvx__7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else\n        {\n       \
    \     result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1zxr8ht.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1zxr8ht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n\
    \            if(c.isUpper)\n            {\n                result ~= (c + 2).toUpper;\n\
    \            }\n            else\n            {\n                result ~= (c\
    \ + 2).toLower;\n            }\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw5btbkxr.d(16): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmpw5btbkxr.d(18): Error: no property `isUpper` for type `immutable(char)`

    /tmp/tmpw5btbkxr.d(20): Error: no property `toUpper` for type `int`

    /tmp/tmpw5btbkxr.d(24): Error: no property `toLower` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw5btbkxr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(char c; s)\n    {\n        result ~= (cast(char)(c + 2\
    \ * 2));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjag7p5jp.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x428085]

    ??:? void tmpjag7p5jp.__unittest_L20_C1() [0x427c72]

    ??:? void tmpjag7p5jp.__modtest() [0x427e04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c71b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430001]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c4f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= c;\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * 2)) % alphabet.length;\n           \
    \ encrypted ~= alphabet[newIndex];\n        }\n    }\n    return encrypted;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyig9awaf.d(23): Error: no property `indexOf` for type `string`

    /tmp/tmpyig9awaf.d(24): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyig9awaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   int index = 0;\n    foreach(char c; s)\n    {\n        if(c == ' ')\n    \
    \    {\n            encrypted ~= ' ';\n        }\n        else\n        {\n  \
    \          index = alphabet.indexOf(c);\n            encrypted ~= alphabet[(index\
    \ + 2) % 26];\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm74k0i0z.d(24): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm74k0i0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8h551cm_.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8h551cm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else\n        {\n       \
    \     result ~= (char)((c - 'a' + 2) % 26 + 'a');\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9sdb0rv.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9sdb0rv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        if(c >= 'a' && c <=\
    \ 'z') \n        {\n            result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n\
    \        } \n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n        } \n        else \n    \
    \    {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8vvjxrc.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmpy8vvjxrc.__unittest_L31_C1() [0x427bf6]

    ??:? void tmpy8vvjxrc.__modtest() [0x427eb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430560]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43003d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b1]

    ??:? runModuleUnitTests [0x42c5a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428584]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c.isAlpha) \n        {\n\
    \            result ~= c.toLower.rotate(2 * 2);\n        }\n        else \n  \
    \      {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp82dwc04o.d(16): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmp82dwc04o.d(18): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp82dwc04o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n    \
    \    if(index != -1)\n        {\n            encrypted ~= alphabet[(index + 2\
    \ * 2) % alphabet.length];\n        }\n        else\n        {\n            encrypted\
    \ ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqil6vv6.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqil6vv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n     \
    \       result ~= ' ';\n        }\n        else \n        {\n            result\
    \ ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk36hqyoe.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk36hqyoe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n   \
    \ assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxk_1r0st.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxk_1r0st.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26\
    \ + 97));\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n     \
    \       result ~= (cast(char)((cast(int)(c) - 65 + 2 * 2) % 26 + 65));\n     \
    \   }\n        else\n        {\n            result ~= c;\n        }\n    }\n \
    \   return result;\n}\n/*\nCreate a function decrypt that takes a string as an\
    \ argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n             \
    \       \n*/\nstring decrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result ~=\
    \ (cast(char)((cast(int)(c) - 97 - 2 * 2 + 26) % 26 + 97));\n        }\n     \
    \   else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (cast(char)((cast(int)(c)\
    \ - 65 - 2 * 2 + 26) % 26 + 65));\n        }\n        else\n        {\n      \
    \      result ~= c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function\
    \ encrypt that takes a string as an argument and\n    returns a string encrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26\
    \ + 97));\n\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo90_55ch.d(76): Error: found `unittest` instead of statement

    /tmp/tmpo90_55ch.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpo90_55ch.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo90_55ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (c + 2 * 2);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsj14c1hh.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42815d]

    ??:? void tmpsj14c1hh.__unittest_L27_C1() [0x427d4e]

    ??:? void tmpsj14c1hh.__modtest() [0x427ee0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cae7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9cd]

    ??:? runModuleUnitTests [0x42c8bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n\
    \            result ~= (c.toLower.to!int + 2 * 2).to!char;\n        }\n      \
    \  else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpykaiyqh0.d(16): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmpykaiyqh0.d(18): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpykaiyqh0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else\n        {\n       \
    \     result ~= (char)((c - 'a' + 2*2) % 26 + 'a');\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc0ospxd6.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc0ospxd6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if (c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((c - 'a' + 2*2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2*2) % 26 + 'A'));\n        }\n        else\n    \
    \    {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n   \
    \ assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxk_1r0st.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxk_1r0st.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpit9irenk.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpit9irenk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else\n  \
    \      {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) + 2 * 2 - 65) % 26 + 65));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu1yp3620.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280cd]

    ??:? void tmpu1yp3620.__unittest_L27_C1() [0x427b92]

    ??:? void tmpu1yp3620.__modtest() [0x427e50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430049]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42851c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if (c == ' ') \n        {\n\
    \            result ~= ' ';\n        }\n        else \n        {\n           \
    \ result ~= (cast(char)(((cast(int)(c) - 97 + 2) % 26) + 97));\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpini9tnwq.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280cd]

    ??:? void tmpini9tnwq.__unittest_L27_C1() [0x427b92]

    ??:? void tmpini9tnwq.__modtest() [0x427e50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c763]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430049]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c539]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42851c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        if(c.isAlpha) \n   \
    \     {\n            result ~= (c.toLower.isLower ? 'a' : 'A') + (c.toLower -\
    \ 'a' + 2) % 26;\n        }\n        else \n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5hvpkwkr.d(16): Error: no property `isAlpha` for type `char`

    /tmp/tmp5hvpkwkr.d(18): Error: no property `toLower` for type `char`

    /tmp/tmp5hvpkwkr.d(18): Error: no property `toLower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5hvpkwkr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n       \
    \     result ~= c;\n            continue;\n        }\n        int index = c -\
    \ 'a';\n        index = (index + 2 * 2) % 26;\n        result ~= 'a' + index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s) \n    {\n        if(c >= 'a' && c <=\
    \ 'z') \n        {\n            result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n\
    \        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (char)((c - 'A' + 2 * 2) % 26 + 'A');\n        }\n        else \n       \
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gn03s6s.d(18): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    /tmp/tmp1gn03s6s.d(22): Error: C style cast illegal, use `cast(char)((c - ''A''
    + 2 * 2) % 26 + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gn03s6s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n    \
    \    if(index == -1)\n        {\n            encrypted ~= c;\n        }\n    \
    \    else\n        {\n            encrypted ~= alphabet[(index + 2*2) % alphabet.length];\n\
    \        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpti2p20pr.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpti2p20pr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(c; s) \n    {\n        if(c == ' ') \n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else \n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % 26];\n        }\n    }\n\
    \    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n   \
    \ assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd_civz3c.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_civz3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n   \
    \     }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsxcmq0cy.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxcmq0cy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= char(cast(int)c + 2 * 2);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaivzhlf6.d(22): Error: cannot implicitly convert expression `cast(int)c
    + 4` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaivzhlf6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * 2)) % 26;\n            result ~= alphabet[newIndex];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm8l8m5c.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm8l8m5c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n      \
    \  }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (char)(((c - 'A' + 2) % 26) + 'A');\n        }\n        else\n        {\n  \
    \          result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpohfsil6n.d(18): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    /tmp/tmpohfsil6n.d(22): Error: C style cast illegal, use `cast(char)((c - ''A''
    + 2) % 26 + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpohfsil6n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)(((cast(int)(c) - 97 + 2 * 2) % 26) + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else\n        {\n       \
    \     result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqpa_28k7.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpa_28k7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n\
    \            result ~= (c.toUpper.to!int + 2 * 2).to!char;\n        }\n      \
    \  else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhwc2d4b.d(16): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmpuhwc2d4b.d(18): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhwc2d4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n      \
    \      result ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n\
    \        else\n            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6ymt7bs.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmps6ymt7bs.__unittest_L25_C1() [0x427c5a]

    ??:? void tmps6ymt7bs.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.find(c);\n       \
    \ if(index != -1)\n        {\n            encrypted ~= alphabet[(index + (2 *\
    \ 2)) % alphabet.length];\n        }\n        else\n        {\n            encrypted\
    \ ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqpnvaj2k.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpnvaj2k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n     \
    \       result ~= ' ';\n        } \n        else \n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == 'z')\n           \
    \ result ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n    \
    \    else\n            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3or9ka11.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp3or9ka11.__unittest_L25_C1() [0x427c5a]

    ??:? void tmp3or9ka11.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) + 2*2 - 97) % 26 + 97));\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= c;\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * 2)) % alphabet.length;\n           \
    \ encrypted ~= alphabet[newIndex];\n        }\n    }\n    return encrypted;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyig9awaf.d(23): Error: no property `indexOf` for type `string`

    /tmp/tmpyig9awaf.d(24): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyig9awaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n\
    \        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2 * 2) % 26;\n            result ~= alphabet[newIndex];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdhaxf8au.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdhaxf8au.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == 'z')\n           \
    \ result ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n    \
    \    else\n            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3or9ka11.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp3or9ka11.__unittest_L25_C1() [0x427c5a]

    ??:? void tmp3or9ka11.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else \n \
    \       {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    /*\nCreate a function decrypt that takes a string as an argument and\n    returns\
    \ a string decrypted with the alphabet being rotated. \n    The alphabet should\
    \ be rotated in a manner such that the letters \n    shift up by two multiplied\
    \ to two places.\n    For example:\n                    \n*/\nstring decrypt(string\
    \ s) \n{\n    string result = \"\";\n    foreach(c; s) \n    {\n        if(c >=\
    \ 'a' && c <= 'z') \n        {\n            result ~= (cast(char)((c - 'a' - 2\
    \ * 2 + 26) % 26 + 'a'));\n        }\n        else if(c >= 'A' && c <= 'Z') \n\
    \        {\n            result ~= (cast(char)((c - 'A' - 2 * 2 + 26) % 26 + 'A'));\n\
    \        }\n        else \n        {\n            result ~= c;\n        }\n  \
    \  }\n    return result;\n}\n/*\nCreate a function encrypt that takes a string\
    \ as an argument and\n    returns a string encrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift down by two multiplied to two places.\n    For example:\n           \
    \         \n*/\nstring encrypt(string s) \n{\n    string result = \"\";\n    foreach(c;\
    \ s) \n    {\n        if(c >= 'a' && c <= 'z') \n        {\n            result\
    \ ~= (cast(char)((c - 'a' + 2 * 2) % 26 +\nunittest\n{\n    alias candidate =\
    \ encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgc8kmnbc.d(75): Error: expression expected, not `unittest`

    /tmp/tmpgc8kmnbc.d(74): Error: found `{` when expecting `)`

    /tmp/tmpgc8kmnbc.d(74): Error: found `alias` when expecting `)`

    /tmp/tmpgc8kmnbc.d(77): Error: found `candidate` when expecting `;` following
    statement

    /tmp/tmpgc8kmnbc.d(77): Error: found `=` instead of statement

    /tmp/tmpgc8kmnbc.d(88): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpgc8kmnbc.d(88): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgc8kmnbc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n     \
    \   }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_58t4kek.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_58t4kek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= c;\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + (2 * 2)) % alphabet.length];\n   \
    \     }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd6icfnt6.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6icfnt6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= (char)((c - 'a' + 2) % 26 + 'a');\n     \
    \   }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result ~=\
    \ (char)((c - 'A' + 2) % 26 + 'A');\n        }\n        else \n        {\n   \
    \         result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuszdxd80.d(18): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    /tmp/tmpuszdxd80.d(22): Error: C style cast illegal, use `cast(char)((c - ''A''
    + 2) % 26 + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuszdxd80.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n\
    \        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            result ~= alphabet[(index + 2 * 2) % alphabet.length];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppq5p3a6t.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppq5p3a6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= c;\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)(((cast(int)(c) - 97 + 2 * 2) % 26) + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else \n \
    \       {\n            result ~= c;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n\
    \            result ~= c.toUpper.rotate(2 * 2);\n        }\n        else\n   \
    \     {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuuezlx0o.d(16): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmpuuezlx0o.d(18): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuuezlx0o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if (c >= 'a' && c <= 'z')\n\
    \        {\n            c = (c - 'a' + 2 * 2) % 26 + 'a';\n        }\n       \
    \ else if (c >= 'A' && c <= 'Z')\n        {\n            c = (c - 'A' + 2 * 2)\
    \ % 26 + 'A';\n        }\n        result ~= c;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0pqahgad.d(18): Error: cannot modify `immutable` expression `c`

    /tmp/tmp0pqahgad.d(22): Error: cannot modify `immutable` expression `c`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0pqahgad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n   \
    \     }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            result ~= alphabet[(index + 2*2) % alphabet.length];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefg4eco9.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefg4eco9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n      \
    \  {\n            result ~= (cast(char)((c - 'a' + 2 * 2) % 26 + 'a'));\n    \
    \    }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result ~=\
    \ (cast(char)((c - 'A' + 2 * 2) % 26 + 'A'));\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n\
    \            result ~= ' ';\n        }\n        else \n        {\n           \
    \ result ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if(c == ' ') \n        {\n\
    \            result ~= c;\n        }\n        else \n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2 * 2) % 26 + 97));\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163130
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((c - 'a' + 2*2) % 26 + 'a'));\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        if(c == ' ')\n        {\n            result ~= ' ';\n\
    \        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2) * 2;\n            if(newIndex > 25)\n\
    \            {\n                newIndex = newIndex - 26;\n            }\n   \
    \         result ~= alphabet[newIndex];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01l4mg9s.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01l4mg9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    int\
    \ len = s.length;\n    string result = \"\";\n    foreach(i; 0..len)\n    {\n\
    \        if(s[i] == ' ')\n        {\n            result ~= ' ';\n        }\n \
    \       else\n        {\n            int ascii = s[i];\n            ascii += 4;\n\
    \            if(ascii > 122)\n            {\n                ascii -= 26;\n  \
    \          }\n            result ~= cast(char)ascii;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps317clin.d(13): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps317clin.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c == ' ')\n        {\n\
    \            result ~= ' ';\n        }\n        else\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) - 97 + 2*2) % 26 + 97));\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163131
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * 2)) % 26;\n            encrypted ~=\
    \ alphabet[newIndex];\n        }\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfl7641c7.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfl7641c7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            encrypted ~= alphabet[(index + 2 * 2) % alphabet.length];\n     \
    \   }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp58l7bo98.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58l7bo98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.indexOf(c);\n    \
    \    if(index != -1)\n        {\n            encrypted ~= alphabet[(index + 4)\
    \ % 26];\n        }\n        else\n        {\n            encrypted ~= c;\n  \
    \      }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate =\
    \ encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjf65c18y.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjf65c18y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        if (c >= 'a' && c <= 'z')\
    \ \n        {\n            result ~= (c + 2).to!char;\n        }\n        else\
    \ if (c >= 'A' && c <= 'Z') \n        {\n            result ~= (c + 2).to!char;\n\
    \        }\n        else \n        {\n            result ~= c;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg0j69amp.d(18): Error: no property `to` for type `int`

    /tmp/tmpg0j69amp.d(22): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0j69amp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        if(c == ' ')\n        {\n            encrypted\
    \ ~= ' ';\n        }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + (2 * 2)) % 26;\n            encrypted ~=\
    \ alphabet[newIndex];\n        }\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfl7641c7.d(23): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfl7641c7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n \
    \   foreach(char c; s)\n    {\n        int index = alphabet.find(c);\n       \
    \ if(index != -1)\n        {\n            encrypted ~= alphabet[(index + 2 * 2)\
    \ % alphabet.length];\n        }\n        else\n        {\n            encrypted\
    \ ~= c;\n        }\n    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmjc05gea.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmjc05gea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(char c; s)\n    {\n        if(c == ' ')\n      \
    \  {\n            result ~= ' ';\n        }\n        else\n        {\n       \
    \     result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1zxr8ht.d(22): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1zxr8ht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c == ' ')\n        {\n            result ~= c;\n     \
    \   }\n        else\n        {\n            int index = alphabet.indexOf(c);\n\
    \            int newIndex = (index + 2 * 2) % alphabet.length;\n            result\
    \ ~= alphabet[newIndex];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibapoaux.d(23): Error: no property `indexOf` for type `string`

    /tmp/tmpibapoaux.d(24): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibapoaux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163130
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if (c == ' ')\n        {\n            result ~= ' ';\n  \
    \          continue;\n        }\n        int index = alphabet.indexOf(c);\n  \
    \      int newIndex = (index + 2 * 2) % alphabet.length;\n        result ~= alphabet[newIndex];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplce_a3pe.d(22): Error: no property `indexOf` for type `string`

    /tmp/tmplce_a3pe.d(23): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplce_a3pe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163132
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n                    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n\
    \        {\n            result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n  \
    \      }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((c - 'A' + 2) % 26 + 'A'));\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8vgn78p2.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmp8vgn78p2.__unittest_L31_C1() [0x427bf6]

    ??:? void tmp8vgn78p2.__modtest() [0x427eb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430560]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43003d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b1]

    ??:? runModuleUnitTests [0x42c5a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428584]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163131
