language: d
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\n/*\n    return the number of brackets in brackets.\n*/\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            count++;\n        } else if (c == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets)\n    {\n        if (c == '<')\n\
    \            open++;\n        else\n            open--;\n        if (open < 0)\n\
    \            return false;\n    }\n    return open == 0;\n}\nunittest\n{\n   \
    \ alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            count++;\n        } else if (c == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    bool result = true;\n    int open_brackets = 0;\n    foreach(c; brackets)\n\
    \    {\n        if(c == '<')\n        {\n            open_brackets++;\n      \
    \  }\n        else if(c == '>')\n        {\n            open_brackets--;\n   \
    \     }\n        if(open_brackets < 0)\n        {\n            result = false;\n\
    \            break;\n        }\n    }\n    if(open_brackets != 0)\n    {\n   \
    \     result = false;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\n/*\n    return True if the string contains a balanced set of brackets.\n\
    \    A balanced set of brackets is a set of brackets that contains no unmatched\
    \ brackets.\n*/\nunittest\n{\n    alias candidate = correct_bracketing;\n\n  \
    \  assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ech55i.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ech55i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '<')\n            open_brackets++;\n        else if (c == '>')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    //int[] stack;\n    int stack_size = 0;\n    foreach(char c; brackets)\n\
    \    {\n        if(c == '<')\n        {\n            stack_size++;\n        }\n\
    \        else if(c == '>')\n        {\n            if(stack_size == 0)\n     \
    \       {\n                return false;\n            }\n            stack_size--;\n\
    \        }\n    }\n    return stack_size == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count\
    \ += 1;\n        }\n        else if (brackets[i] == '>')\n        {\n        \
    \    count -= 1;\n        }\n        if (count < 0)\n        {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjq3fzm_z.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjq3fzm_z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            open++;\n        else if (c == '>')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return open == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ech55i.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ech55i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\n/*\n    return the number of pairs of brackets in brackets.\n    A pair\
    \ of brackets is a \"<\" followed by a \">\".\n    For example, \"<<>>\" has two\
    \ pairs of brackets.\n*/\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++) \n    {\n        if (brackets[i] == '<') \n        {\n           \
    \ count++;\n        }\n        else \n        {\n            count--;\n      \
    \  }\n        if (count < 0) \n        {\n            return false;\n        }\n\
    \    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpopqku8i1.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopqku8i1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ech55i.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ech55i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c;brackets)\n    {\n        if(c ==\
    \ '<')\n            count++;\n        else if(c == '>')\n            count--;\n\
    \        if(count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ech55i.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ech55i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            n++;\n        } else {\n            n--;\n        }\n       \
    \ if (n < 0) {\n            return false;\n        }\n    }\n    return n == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else\n        {\n            count--;\n        }\n       \
    \ if (count < 0)\n        {\n            return false;\n        }\n    }\n   \
    \ return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm6xtupa_.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6xtupa_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else\n        {\n            count--;\n        }\n       \
    \ if (count < 0)\n        {\n            return false;\n        }\n    }\n   \
    \ return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm6xtupa_.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6xtupa_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ech55i.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ech55i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            count++;\n        } else if (c == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '<')\n            open_count++;\n        else if (c == '>')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int level = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            level++;\n        } else if (c == '>') {\n            level--;\n\
    \        }\n        if (level < 0) {\n            return false;\n        }\n \
    \   }\n    return level == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char ch; brackets)\n    {\n        if (ch\
    \ == '<')\n            count++;\n        else if (ch == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    //int n = brackets.length;\n    int n = brackets.length;\n    int i\
    \ = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int\
    \ o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n   \
    \ int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm\
    \ = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n \
    \   int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww\
    \ = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa = 0;\n \
    \   int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff\
    \ = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n\
    \    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int ooo = 0;\n    int\
    \ ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt\
    \ = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx = 0;\n\
    \    int yyy = 0\nunittest\n{\n    alias candidate = correct_bracketing;\n\n \
    \   assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvwjzf94_.d(79): Error: semicolon expected, not `unittest`

    /tmp/tmpvwjzf94_.d(79): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvwjzf94_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            open++;\n        else if (c == '>')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return open == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            count++;\n        } else if (c == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    //int[] bracket_stack;\n    int bracket_stack_size = 0;\n    foreach(char\
    \ c; brackets)\n    {\n        if(c == '<')\n        {\n            bracket_stack_size++;\n\
    \        }\n        else if(c == '>')\n        {\n            if(bracket_stack_size\
    \ == 0)\n            {\n                return false;\n            }\n       \
    \     bracket_stack_size--;\n        }\n    }\n    return bracket_stack_size ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c;brackets)\n    {\n        if(c ==\
    \ '<')\n            count++;\n        else if(c == '>')\n            count--;\n\
    \        if(count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            count++;\n        } else if (c == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ech55i.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ech55i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ech55i.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ech55i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    foreach(i; 0..n)\n\
    \    {\n        if(brackets[i] == '<')\n            count++;\n        else if(brackets[i]\
    \ == '>')\n            count--;\n        if(count < 0)\n            return false;\n\
    \    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxg2ga11j.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxg2ga11j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '<')\n            open_brackets++;\n        else if (c == '>')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = 0;\n    foreach(c; brackets)\n    {\n        if (c == '<')\n\
    \            n++;\n        else if (c == '>')\n            n--;\n        if (n\
    \ < 0)\n            return false;\n    }\n    return n == 0;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            open++;\n        else if (c == '>')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return open == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++) \n    {\n        if (brackets[i] == '<') \n        {\n           \
    \ count++;\n        } \n        else \n        {\n            count--;\n     \
    \   }\n        if (count < 0) \n        {\n            return false;\n       \
    \ }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3vixag87.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vixag87.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '<')\n            open_count++;\n        else if (c == '>')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\n\
    \            count++;\n        else if (c == '>')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets) \n    {\n        if (c ==\
    \ '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            count++;\n        } else if (c == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\n\
    \            count++;\n        else if (c == '>')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\n/*\n    return a string of length n\
    \ with the same number of opening and closing brackets.\n    The brackets are\
    \ randomly placed.\n*/\nstring random_brackets(int n)\n{\n    string brackets\
    \ = \"\";\n    int count = 0;\n    for (int i = 0; i < n; i++)\n    {\n      \
    \  if (count == 0)\n        {\n            brackets ~= \"<\";\n            count++;\n\
    \        }\n        else if (count == n/2)\n        {\n            brackets ~=\
    \ \">\";\n            count--;\n        }\n        else\n        {\n         \
    \   int r = uniform(0, 2);\n            if (r == 0)\n            {\n         \
    \       brackets ~= \"<\";\n                count++;\n            }\n        \
    \    else\n            {\n                brackets ~= \">\";\n               \
    \ count--;\n            }\n        }\n    }\n    return brackets;\n}\n/*\n   \
    \ return a string of length n with the same number of opening and closing brackets.\n\
    \    The brackets are placed in a way that makes the string correct.\n*/\nstring\
    \ correct_brackets(int n)\n{\n    string brackets = \"\";\n    for (int i = 0;\
    \ i < n/2; i++)\n    {\n        brackets ~= \"<\";\n    }\n    for (int i = 0;\
    \ i < n/2; i++)\n    {\n        brackets ~= \">\";\n    }\n    return brackets;\n\
    }\n/*\n    return a string of length n with the same number of opening and closing\
    \ brackets.\n    The brackets are placed in a way that makes the string incorrect.\n\
    */\nstring incorrect_brackets(int n)\n{\n    string brackets = \"\";\n    for\
    \ (int i = 0; i <\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavrrkm33.d(92): Error: expression expected, not `unittest`

    /tmp/tmpavrrkm33.d(93): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpavrrkm33.d(94): Error: expression expected, not `alias`

    /tmp/tmpavrrkm33.d(94): Error: found `candidate` when expecting `)`

    /tmp/tmpavrrkm33.d(94): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavrrkm33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            count++;\n        } else if (c == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int depth = 0;\n    foreach(c; brackets)\n    {\n        if (c == '<')\n\
    \            depth++;\n        else if (c == '>')\n            depth--;\n    \
    \    if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '<')\n            open_count++;\n        else if (c == '>')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else\n        {\n            count--;\n        }\n       \
    \ if (count < 0)\n        {\n            return false;\n        }\n    }\n   \
    \ return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm6xtupa_.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6xtupa_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c;brackets)\n    {\n        if(c ==\
    \ '<')\n            count++;\n        else if(c == '>')\n            count--;\n\
    \        if(count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets) {\n        if (c == '<') {\n\
    \            count++;\n        } else if (c == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else\n            count--;\n        if\
    \ (count < 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int balance = 0;\n    foreach(char c; brackets) {\n        if (c ==\
    \ '<') {\n            balance++;\n        } else if (c == '>') {\n           \
    \ balance--;\n        }\n        if (balance < 0) {\n            return false;\n\
    \        }\n    }\n    return balance == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ech55i.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ech55i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c;brackets)\n    {\n        if(c ==\
    \ '<')\n            count++;\n        else if(c == '>')\n            count--;\n\
    \        if(count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\n/*\n    return the number of ways to insert brackets into the string\
    \ s\n    so that the resulting string is correct.\n*/\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(bracket; brackets)\n    {\n        if(bracket\
    \ == '<')\n            count++;\n        else if(bracket == '>')\n           \
    \ count--;\n        if(count < 0)\n            return false;\n    }\n    return\
    \ count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n \
    \   assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '<')\n\
    \            count++;\n        else if(c == '>')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            open++;\n        else if (c == '>')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return open == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else\n        {\n            count--;\n        }\n       \
    \ if (count < 0)\n        {\n            return false;\n        }\n    }\n   \
    \ return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm6xtupa_.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm6xtupa_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int counter = 0;\n    foreach(char c; brackets)\n    {\n        if\
    \ (c == '<')\n            counter++;\n        else if (c == '>')\n           \
    \ counter--;\n        if (counter < 0)\n            return false;\n    }\n   \
    \ return counter == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '<')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == '>')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0ech55i.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0ech55i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\
    \ {\n            count++;\n        } else if (c == '>') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '<')\n            count++;\n        else if (c == '>')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164325
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = 0;\n    foreach(char c; brackets) {\n        if (c == '<')\n\
    \            n++;\n        else\n            n--;\n        if (n < 0)\n      \
    \      return false;\n    }\n    return n == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164326
