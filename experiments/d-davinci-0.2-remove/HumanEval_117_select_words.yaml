name: HumanEval_117_select_words
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
  \ number n, you have been tasked to implement \n    a function that returns a list\
  \ of all words from string s that contain exactly \n    n consonants, in order these\
  \ words appear in the string s.\n    If the string s is empty then the function\
  \ should return an empty list.\n    Note: you may assume the input string contains\
  \ only letters and spaces.\n    Examples:\n                        \n*/\nstring[]\
  \ select_words(string s, long n) \n"
tests: "unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
  Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
  \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
  \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"\
  ]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
  \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
  d\", \"f\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n  \
    \      if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] ret = new string[];\n\
    \    foreach(string w; words)\n    {\n        if(countConsonants(w) == n)\n  \
    \          ret ~= w;\n    }\n    return ret;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    auto result = new string[];\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n  \
    \      if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.length\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] result;\n    string[] words = split(s);\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n  \
    \      if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result;\n    foreach(string word; words)\n    {\n       \
    \ if(word.countConsonants() == n)\n        {\n            result ~= word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\" \"\
    );\n    string[] result;\n    foreach(string word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split;\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(word.countConsonants == n)\n        {\n    \
    \        result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result;\n    foreach(string word; words)\n  \
    \  {\n        if(word.countConsonants == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s,\
    \ \" \");\n    string[] result;\n    foreach(string word; words)\n    {\n    \
    \    if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] res;\n    foreach(word; words)\n    {\n        if(word.count!(c\
    \ => c.isConsonant) == n)\n            res ~= word;\n    }\n    return res;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split(\" \");\n    string[] result = new string[0];\n    foreach(string word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    string[] result;\n    foreach(string word; words)\n\
    \    {\n        if(word.length == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    import std.algorithm;\n   \
    \ import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.traits;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    import std.traits;\n    import std.typecons;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.traits;\n    import std.typecons;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n\
    \    import std.typecons;\n    import std.math;\n    import std.traits;\n    import\
    \ std.typecons;\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n   \
    \     if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(w; words)\n    {\n        if(countConsonants(w)\
    \ == n)\n        {\n            result ~= w;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = new string[];\n    foreach(string\
    \ word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n  \
    \      if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.length == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n  \
    \  {\n        if(word.countConsonants() == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n  \
    \      if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(word.length == n)\n        {\n            result ~= word;\n       \
    \ }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n    string[]\
    \ result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split();\n    string[] result;\n   \
    \ foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n     \
    \   {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = s.split;\n    string[] result;\n    foreach(string word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!('a','e','i','o','u')\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split;\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(word.countConsonants == n)\n        {\n    \
    \        result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = new string[0];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants() == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s, \"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    auto words\
    \ = split(s);\n    auto result = filter!(w => count_consonants(w) == n)(words);\n\
    \    return result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n\
    \    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ import std.algorithm : filter, map;\n    import std.range : zip;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.string : split;\n\
    \    import std.range : iota;\n    import std.typecons : tuple;\n    import std.math\
    \ : isNaN;\n    import std.traits : isFloatingPoint;\n    import std.range : take;\n\
    \    import std.typecons : tuple;\n    import std.algorithm : map;\n    import\
    \ std.range : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n\
    \    import std.algorithm : map;\n    import std.range : zip;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n\
    \    import std.range : zip;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n   \
    \ import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map;\n    import std.range : zip;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range\
    \ : zip;\n    import std.array : array;\n    import std.typecons : tuple;\n  \
    \  import std.algorithm : map;\n    import std.range : zip;\n    import std.array\
    \ : array;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n\
    \    import std.range : zip;\n    import std.array : array;\n    import std.typecons\
    \ : tuple;\n    import std.algorithm : map;\n    import std.range : zip;\n   \
    \ import std.array : array;\n    import std.typecons : tuple;\n    import std.algorithm\
    \ : map;\n    import std.range : zip;\n    import std.array : array;\n    import\
    \ std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range\
    \ : zip;", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = s.split(\" \");\n    string[] result = new string[];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = [];\n    foreach(word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.count!('a','e','i','o','u','y') == n)\n     \
    \   {\n            result ~= word;\n        }\n    }\n    return result;\n}",
  "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result;\n\
    \    foreach(string word; words)\n    {\n        if(word.countConsonants() ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.count!(c => c.isConsonant) == n)\n        {\n\
    \            result ~= word;\n        }\n    }\n    return result;\n}", "{\n \
    \   string[] words = s.split(\" \");\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(word; words)\n    {\n        if(word.countConsonants == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    auto words = split(s);\n  \
    \  auto result = words.filter!(w => count_consonants(w) == n);\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n  \
    \      if(word.count!('a','e','i','o','u','y') == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result;\n\
    \    foreach(string word; words)\n    {\n        if(word.countConsonants() ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n  \
    \      if(word.count!('a','e','i','o','u','A','E','I','O','U') == n)\n       \
    \ {\n            result ~= word;\n        }\n    }\n    return result;\n}", "{\n\
    \    string[] words = split(s);\n    string[] result;\n    foreach(string word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result;\n\
    \    foreach(string word; words)\n    {\n        if(word.countConsonants() ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split;\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!('a','e','i','o','u')\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split(\" \");\n    string[] result =\
    \ [];\n    foreach(string word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(word.count!(c\
    \ => c.isConsonant) == n)\n        {\n            result ~= word;\n        }\n\
    \    }\n    return result;\n}", "{\n    string[] words = split(s);\n    string[]\
    \ result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n \
    \   {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"z\"];\n    string[] result;\n    foreach(string word; words)\n\
    \    {\n        long count = 0;\n        foreach(string letter; word)\n      \
    \  {\n            if(letter in consonants)\n            {\n                count++;\n\
    \            }\n        }\n        if(count == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n  \
    \      if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(count_consonants(word) == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    auto words = split(s, \" \");\n    auto result = new string[];\n\
    \    foreach(word; words)\n    {\n        auto consonants = 0;\n        foreach(c;\
    \ word)\n        {\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                consonants++;\n        }\n        if(consonants\
    \ == n)\n            result ~= word;\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] res;\n\
    \    foreach(word; words)\n    {\n        if(count_consonants(word) == n)\n  \
    \      {\n            res ~= word;\n        }\n    }\n    return res;\n}", "{\n\
    \    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(count_consonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n  \
    \      if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result = new string[0];\n    foreach(string\
    \ word; words)\n    {\n        if(word.countConsonants() == n)\n        {\n  \
    \          result ~= word;\n        }\n    }\n    return result;\n}", "{\n   \
    \ string[] words = split(s);\n    string[] result;\n    foreach(string word; words)\n\
    \    {\n        if(countConsonants(word) == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ s.split;\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result;\n    foreach(word; words)\n    {\n  \
    \      if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result;\n    foreach(word; words)\n    {\n        if(word.countConsonants\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s, \" \");\n    string[] result;\n\
    \    foreach(string word; words)\n    {\n        if(countConsonants(word) == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(word.countConsonants == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        long count = 0;\n        foreach(letter; word)\n    \
    \    {\n            if(!isVowel(letter))\n            {\n                count++;\n\
    \            }\n        }\n        if(count == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    import std.algorithm : filter, map;\n    import std.range\
    \ : zip;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.string : split;\n    import std.typecons : tuple;\n    import std.math :\
    \ isNaN;\n    import std.stdio : writeln;\n    import std.range : take;\n    import\
    \ std.range : drop;\n    import std.range : cycle;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range :", "{\n    string[] words = split(s);\n    string[]\
    \ result;\n    foreach(word; words)\n    {\n        if(countConsonants(word) ==\
    \ n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = s.split(\" \");\n    string[] result = [];\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants() == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(word; words)\n    {\n        if(word.countConsonants()\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(string word; words)\n \
    \   {\n        if(countConsonants(word) == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(count_consonants(word) == n)\n        {\n        \
    \    result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split;\n    string[] result;\n    foreach(string word; words)\n  \
    \  {\n        if(word.countConsonants == n)\n        {\n            result ~=\
    \ word;\n        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = s.split(\"\
    \ \");\n    string[] result = [];\n    foreach(string word; words)\n    {\n  \
    \      if(word.countConsonants() == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(string\
    \ word; words)\n    {\n        if(countConsonants(word) == n)\n        {\n   \
    \         result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n\
    \    {\n        if(word.countConsonants() == n)\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[] words =\
    \ split(s);\n    string[] result;\n    foreach(string word; words)\n    {\n  \
    \      if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(string word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string[] words = split(s);\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(countConsonants(word) == n)\n        {\n         \
    \   result ~= word;\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(count_consonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] words = split(s);\n\
    \    string[] result;\n    foreach(word; words)\n    {\n        if(count_consonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    auto words = split(s);\n    auto result = filter!(w =>\
    \ count_consonants(w) == n)(words);\n    return result;\n}", "{\n    string[]\
    \ words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n \
    \       if(countConsonants(word) == n)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result;\n}", "{\n    string[] result;\n    string[]\
    \ words = split(s);\n    foreach(string word; words)\n    {\n        if(countConsonants(word)\
    \ == n)\n        {\n            result ~= word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    import std.algorithm;\n    import std.array;\n    import\
    \ std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n\
    \    import std.math;\n    string[] words = s.split(\" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(word.countUntil(\"aeiou\") == n)\n\
    \        {\n            result ~= word;\n        }\n    }\n    return result;\n\
    }", "{\n    string[] words = s.split;\n    string[] result;\n    foreach(word;\
    \ words)\n    {\n        if(word.countConsonants == n)\n        {\n          \
    \  result ~= word;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
