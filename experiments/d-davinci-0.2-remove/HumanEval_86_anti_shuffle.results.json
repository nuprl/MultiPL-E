{
  "language": "d",
  "name": "HumanEval_86_anti_shuffle",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result[i] = chars.idup;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4hwju5bh.d(16): Error: no property `split` for type `string`\n/tmp/tmp4hwju5bh.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4hwju5bh.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hwju5bh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        sort(chars);\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp67ce1m_4.d(16): Error: no property `split` for type `string`\n/tmp/tmp67ce1m_4.d(20): Error: no property `split` for type `string`\n/tmp/tmp67ce1m_4.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp67ce1m_4.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp67ce1m_4.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp67ce1m_4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp42b6y14k.d(16): Error: undefined identifier `split`\n/tmp/tmp42b6y14k.d(25): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42b6y14k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars.idup.join(\"\");\n        result ~= \" \";\n    }\n    return result.idup[0..$-1].join(\"\");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsa8n8jnl.d(16): Error: no property `split` for type `string`\n/tmp/tmpsa8n8jnl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpsa8n8jnl.d(22): Error: no property `join` for type `string`\n/tmp/tmpsa8n8jnl.d(25): Error: no property `join` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsa8n8jnl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] newWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        newWords[i] = word.sort();\n    }\n    return newWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsvlz1swb.d(16): Error: no property `split` for type `string`\n/tmp/tmpsvlz1swb.d(20): Error: no property `sort` for type `string`\n/tmp/tmpsvlz1swb.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvlz1swb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    foreach(ref word; words)\n    {\n        word = word.sort();\n    }\n    return words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps74dxnkm.d(16): Error: no property `split` for type `string`\n/tmp/tmps74dxnkm.d(19): Error: no property `sort` for type `string`\n/tmp/tmps74dxnkm.d(21): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps74dxnkm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n    return join(sorted_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8z51asp8.d(16): Error: undefined identifier `split`\n/tmp/tmp8z51asp8.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8z51asp8.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z51asp8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = word.sort();\n    }\n    return sortedWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp02e3zqw4.d(16): Error: no property `split` for type `string`\n/tmp/tmp02e3zqw4.d(20): Error: no property `sort` for type `string`\n/tmp/tmp02e3zqw4.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02e3zqw4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ih_1ghy.d(16): Error: no property `split` for type `string`\n/tmp/tmp3ih_1ghy.d(25): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ih_1ghy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] new_words;\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        new_words ~= chars.idup;\n    }\n    return new_words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7cc4t3el.d(16): Error: no property `split` for type `string`\n/tmp/tmp7cc4t3el.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp7cc4t3el.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7cc4t3el.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0dwzzpj2.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dwzzpj2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string new_word = \"\";\n        foreach(char; word)\n        {\n            new_word ~= char;\n        }\n        new_word = sort(new_word);\n        result ~= new_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkp7a_5ji.d(21): Error: no identifier for declarator `char`\n/tmp/tmpkp7a_5ji.d(23): Error: found `;` when expecting `.` following char\n/tmp/tmpkp7a_5ji.d(24): Error: found `}` when expecting identifier following `char`.\n/tmp/tmpkp7a_5ji.d(25): Error: found `new_word` when expecting `;` following statement\n/tmp/tmpkp7a_5ji.d(25): Error: found `=` instead of statement\n/tmp/tmpkp7a_5ji.d(30): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkp7a_5ji.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] newWords = new string[words.length];\n    foreach(int i, string word; words)\n    {\n        newWords[i] = sort(word);\n    }\n    return join(newWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4qt56heg.d(16): Error: undefined identifier `split`\n/tmp/tmp4qt56heg.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4qt56heg.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4qt56heg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa4kq2zcx.d(16): Error: no property `split` for type `string`\n/tmp/tmpa4kq2zcx.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpa4kq2zcx.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4kq2zcx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n    return join(sorted_words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7t8pvyg4.d(16): Error: undefined identifier `split`\n/tmp/tmp7t8pvyg4.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp7t8pvyg4.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t8pvyg4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        sort(chars);\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp58gfkrip.d(16): Error: no property `split` for type `string`\n/tmp/tmp58gfkrip.d(20): Error: no property `split` for type `string`\n/tmp/tmp58gfkrip.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp58gfkrip.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp58gfkrip.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58gfkrip.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] newWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        newWords[i] = sort(word);\n    }\n    return join(newWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp470k1pva.d(16): Error: undefined identifier `split`\n/tmp/tmp470k1pva.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp470k1pva.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp470k1pva.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    foreach(word; words)\n    {\n        sort(word);\n    }\n    return join(words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph81yqo5j.d(16): Error: undefined identifier `split`\n/tmp/tmph81yqo5j.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmph81yqo5j.d(21): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph81yqo5j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted ~ \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyf30n2ag.d(16): Error: undefined identifier `split`\n/tmp/tmpyf30n2ag.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyf30n2ag.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] orderedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word, \"\");\n        sort(chars);\n        orderedWords[i] = join(chars);\n    }\n    return join(orderedWords, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc3yt40o9.d(16): Error: undefined identifier `split`\n/tmp/tmpc3yt40o9.d(20): Error: undefined identifier `split`\n/tmp/tmpc3yt40o9.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpc3yt40o9.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpc3yt40o9.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc3yt40o9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result[i] = chars.idup;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4hwju5bh.d(16): Error: no property `split` for type `string`\n/tmp/tmp4hwju5bh.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4hwju5bh.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hwju5bh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s, ' ');\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word, '');\n        sort(chars);\n        result ~= join(chars, '') ~ ' ';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu0_3s3kf.d(20): Error: unterminated character constant\n/tmp/tmpu0_3s3kf.d(22): Error: unterminated character constant\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0_3s3kf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2jcayazt.d(16): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(20): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp2jcayazt.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp2jcayazt.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jcayazt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmpqre7ln.d(16): Error: undefined identifier `split`\n/tmp/tmpmpqre7ln.d(20): Error: undefined identifier `split`\n/tmp/tmpmpqre7ln.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpmpqre7ln.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmpqre7ln.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sorted = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        sorted[i] = join(chars);\n    }\n    return join(sorted);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvlqpt6gu.d(16): Error: undefined identifier `split`\n/tmp/tmpvlqpt6gu.d(20): Error: undefined identifier `split`\n/tmp/tmpvlqpt6gu.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpvlqpt6gu.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpvlqpt6gu.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvlqpt6gu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        string sortedWord = \"\";\n        foreach(j, char; word)\n        {\n            sortedWord ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        sortedWords[i] = sortedWord;\n    }\n    return join(sortedWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr3kd6u70.d(21): Error: no identifier for declarator `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3kd6u70.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmposaafxjz.d(16): Error: undefined identifier `split`\n/tmp/tmposaafxjz.d(20): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmposaafxjz.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmposaafxjz.d(22): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmposaafxjz.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmposaafxjz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars) ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqlo879ec.d(16): Error: undefined identifier `split`\n/tmp/tmpqlo879ec.d(20): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpqlo879ec.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqlo879ec.d(22): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqlo879ec.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        result[i] = sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa_8ah_6j.d(16): Error: undefined identifier `split`\n/tmp/tmpa_8ah_6j.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpa_8ah_6j.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_8ah_6j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        foreach(char; chars)\n        {\n            result ~= char;\n        }\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpljivq2de.d(22): Error: no identifier for declarator `char`\n/tmp/tmpljivq2de.d(24): Error: found `;` when expecting `.` following char\n/tmp/tmpljivq2de.d(25): Error: found `}` when expecting identifier following `char`.\n/tmp/tmpljivq2de.d(26): Error: found `result` when expecting `;` following statement\n/tmp/tmpljivq2de.d(26): Error: found `~=` instead of statement\n/tmp/tmpljivq2de.d(30): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpljivq2de.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result[i] = chars.idup;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4hwju5bh.d(16): Error: no property `split` for type `string`\n/tmp/tmp4hwju5bh.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4hwju5bh.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hwju5bh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6wqli4sq.d(16): Error: undefined identifier `split`\n/tmp/tmp6wqli4sq.d(25): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wqli4sq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sortedWord = sort(word);\n        result ~= sortedWord ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxfg3d_pq.d(16): Error: undefined identifier `split`\n/tmp/tmpxfg3d_pq.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfg3d_pq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word, \"\");\n        sort(chars);\n        result[i] = join(chars);\n    }\n    return join(result, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfgxgbx67.d(16): Error: undefined identifier `split`\n/tmp/tmpfgxgbx67.d(20): Error: undefined identifier `split`\n/tmp/tmpfgxgbx67.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpfgxgbx67.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpfgxgbx67.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgxgbx67.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split;\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        std.algorithm.sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpe581n16q.d(16): Error: no property `split` for type `string`\n/tmp/tmpe581n16q.d(21): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe581n16q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words;\n    string[] result;\n    string[] temp;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int yy;\n    int zz;\n    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n    int gg;\n    int hh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n    int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n    int pppp;\n    int q\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7v_224va.d(106): Error: semicolon expected, not `unittest`\n/tmp/tmp7v_224va.d(106): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7v_224va.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort!(a, b => a.compare(b) < 0);\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf1p6w6ud.d(16): Error: no property `split` for type `string`\n/tmp/tmpf1p6w6ud.d(20): Error: no property `split` for type `string`\n/tmp/tmpf1p6w6ud.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmpf1p6w6ud.d(22): Error: no property `join` for type `string[]`\n/tmp/tmpf1p6w6ud.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1p6w6ud.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result[i] = chars.idup;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4hwju5bh.d(16): Error: no property `split` for type `string`\n/tmp/tmp4hwju5bh.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4hwju5bh.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hwju5bh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6wqli4sq.d(16): Error: undefined identifier `split`\n/tmp/tmp6wqli4sq.d(25): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wqli4sq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] new_words;\n    foreach(word; words)\n    {\n        new_words ~= sort(word);\n    }\n    return join(new_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy8l5b6te.d(16): Error: undefined identifier `split`\n/tmp/tmpy8l5b6te.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpy8l5b6te.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8l5b6te.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result[i] = join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8hf8nr9v.d(16): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(20): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8hf8nr9v.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp8hf8nr9v.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hf8nr9v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted ~ \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvrioaqwd.d(16): Error: no property `split` for type `string`\n/tmp/tmpvrioaqwd.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvrioaqwd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = word.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnl2oc_ey.d(16): Error: no property `split` for type `string`\n/tmp/tmpnl2oc_ey.d(20): Error: no property `sort` for type `string`\n/tmp/tmpnl2oc_ey.d(23): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnl2oc_ey.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0dwzzpj2.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dwzzpj2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    foreach(i, word; words)\n    {\n        words[i] = sort(word);\n    }\n    return join(words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_3mh7v2l.d(16): Error: no property `split` for type `string`\n/tmp/tmp_3mh7v2l.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp_3mh7v2l.d(21): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_3mh7v2l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmposaafxjz.d(16): Error: undefined identifier `split`\n/tmp/tmposaafxjz.d(20): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmposaafxjz.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmposaafxjz.d(22): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmposaafxjz.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmposaafxjz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = word.sort();\n    }\n    return sortedWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp02e3zqw4.d(16): Error: no property `split` for type `string`\n/tmp/tmp02e3zqw4.d(20): Error: no property `sort` for type `string`\n/tmp/tmp02e3zqw4.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02e3zqw4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] new_words;\n    foreach(word; words)\n    {\n        new_words ~= sort(word);\n    }\n    return join(new_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy8l5b6te.d(16): Error: undefined identifier `split`\n/tmp/tmpy8l5b6te.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpy8l5b6te.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8l5b6te.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars) ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxnj2sy53.d(16): Error: undefined identifier `split`\n/tmp/tmpxnj2sy53.d(20): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpxnj2sy53.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpxnj2sy53.d(22): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxnj2sy53.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2jcayazt.d(16): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(20): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp2jcayazt.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp2jcayazt.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jcayazt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_o23p94h.d(16): Error: undefined identifier `split`\n/tmp/tmp_o23p94h.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp_o23p94h.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o23p94h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= word.sort();\n    }\n    return sorted_words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa1bvizjm.d(16): Error: no property `split` for type `string`\n/tmp/tmpa1bvizjm.d(20): Error: no property `sort` for type `string`\n/tmp/tmpa1bvizjm.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa1bvizjm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sortedWords = new string[words.length];\n    foreach(int i, string w; words)\n    {\n        sortedWords[i] = sort(w);\n    }\n    return join(sortedWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqi0z52au.d(16): Error: undefined identifier `split`\n/tmp/tmpqi0z52au.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqi0z52au.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqi0z52au.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = s.split(\" \");\n    string result;\n    foreach(word; words)\n    {\n        auto chars = word.split(\"\");\n        chars.sort;\n        result ~= chars.join(\"\");\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx6nx6aek.d(16): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6nx6aek.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result[i] = join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8hf8nr9v.d(16): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(20): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8hf8nr9v.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp8hf8nr9v.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hf8nr9v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort!((a, b) => a > b);\n        result ~= chars.join(\"\");\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ldtzz4r.d(16): Error: no property `split` for type `string`\n/tmp/tmp4ldtzz4r.d(20): Error: no property `split` for type `string`\n/tmp/tmp4ldtzz4r.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp4ldtzz4r.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp4ldtzz4r.d(25): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ldtzz4r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2jcayazt.d(16): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(20): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp2jcayazt.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp2jcayazt.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jcayazt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdjb2sgdc.d(16): Error: undefined identifier `split`\n/tmp/tmpdjb2sgdc.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdjb2sgdc.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjb2sgdc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        result[i] = word.sort();\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuwhkfy_m.d(16): Error: no property `split` for type `string`\n/tmp/tmpuwhkfy_m.d(20): Error: no property `sort` for type `string`\n/tmp/tmpuwhkfy_m.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwhkfy_m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result[i] = join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8hf8nr9v.d(16): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(20): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8hf8nr9v.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp8hf8nr9v.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hf8nr9v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2jcayazt.d(16): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(20): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp2jcayazt.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp2jcayazt.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jcayazt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] ordered_words;\n    foreach(string word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        ordered_words ~= join(chars);\n    }\n    return join(ordered_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2o7fz7z0.d(16): Error: undefined identifier `split`\n/tmp/tmp2o7fz7z0.d(20): Error: undefined identifier `split`\n/tmp/tmp2o7fz7z0.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp2o7fz7z0.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp2o7fz7z0.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2o7fz7z0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s, \" \");\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word, \"\");\n        sort(chars);\n        result ~= join(chars, \"\");\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1fj7e7u5.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fj7e7u5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    foreach(word; words)\n    {\n        sort(word);\n    }\n    return join(words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj_bae7ac.d(16): Error: undefined identifier `split`\n/tmp/tmpj_bae7ac.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpj_bae7ac.d(21): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_bae7ac.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] ordered_words;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        ordered_words ~= chars.join(\"\");\n    }\n    return ordered_words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc81pjuls.d(16): Error: no property `split` for type `string`\n/tmp/tmpc81pjuls.d(20): Error: no property `split` for type `string`\n/tmp/tmpc81pjuls.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmpc81pjuls.d(22): Error: no property `join` for type `string[]`\n/tmp/tmpc81pjuls.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc81pjuls.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result[i] = sorted;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3046nc0d.d(16): Error: no property `split` for type `string`\n/tmp/tmp3046nc0d.d(25): Error: no property `sort` for type `string`\n/tmp/tmp3046nc0d.d(28): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3046nc0d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort;\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbxowg824.d(16): Error: no property `split` for type `string`\n/tmp/tmpbxowg824.d(20): Error: no property `split` for type `string`\n/tmp/tmpbxowg824.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmpbxowg824.d(22): Error: no property `join` for type `string[]`\n/tmp/tmpbxowg824.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbxowg824.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result[i] = chars.idup;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4hwju5bh.d(16): Error: no property `split` for type `string`\n/tmp/tmp4hwju5bh.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4hwju5bh.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hwju5bh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n    return join(sorted_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8z51asp8.d(16): Error: undefined identifier `split`\n/tmp/tmp8z51asp8.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8z51asp8.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z51asp8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string newWord = \"\";\n        foreach(c; word)\n        {\n            newWord ~= c;\n        }\n        sort(newWord);\n        result ~= newWord ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuyxouz91.d(16): Error: undefined identifier `split`\n/tmp/tmpuyxouz91.d(25): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuyxouz91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        string new_word = join(chars);\n        result ~= new_word;\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7n35jbh5.d(16): Error: undefined identifier `split`\n/tmp/tmp7n35jbh5.d(20): Error: undefined identifier `split`\n/tmp/tmp7n35jbh5.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp7n35jbh5.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp7n35jbh5.d(25): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7n35jbh5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        result[i] = word.sort();\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuwhkfy_m.d(16): Error: no property `split` for type `string`\n/tmp/tmpuwhkfy_m.d(20): Error: no property `sort` for type `string`\n/tmp/tmpuwhkfy_m.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwhkfy_m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        result ~= word.sort();\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi3pezun8.d(16): Error: no property `split` for type `string`\n/tmp/tmpi3pezun8.d(20): Error: no property `sort` for type `string`\n/tmp/tmpi3pezun8.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3pezun8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        result ~= word.sort();\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu5xfdal0.d(16): Error: no property `split` for type `string`\n/tmp/tmpu5xfdal0.d(20): Error: no property `sort` for type `string`\n/tmp/tmpu5xfdal0.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5xfdal0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = word.sort();\n    }\n    return sortedWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp02e3zqw4.d(16): Error: no property `split` for type `string`\n/tmp/tmp02e3zqw4.d(20): Error: no property `sort` for type `string`\n/tmp/tmp02e3zqw4.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02e3zqw4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        result[i] = sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa_8ah_6j.d(16): Error: undefined identifier `split`\n/tmp/tmpa_8ah_6j.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpa_8ah_6j.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_8ah_6j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    foreach(ref word; words)\n    {\n        sort(word);\n    }\n    return join(words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuycocs5f.d(16): Error: undefined identifier `split`\n/tmp/tmpuycocs5f.d(19): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpuycocs5f.d(21): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuycocs5f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n    return join(sorted_words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7t8pvyg4.d(16): Error: undefined identifier `split`\n/tmp/tmp7t8pvyg4.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp7t8pvyg4.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t8pvyg4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] ordered_words;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort;\n        ordered_words ~= chars.join(\"\");\n    }\n    return ordered_words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa94di4d4.d(16): Error: no property `split` for type `string`\n/tmp/tmpa94di4d4.d(20): Error: no property `split` for type `string`\n/tmp/tmpa94di4d4.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmpa94di4d4.d(22): Error: no property `join` for type `string[]`\n/tmp/tmpa94di4d4.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa94di4d4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] new_words;\n    foreach(w; words)\n    {\n        new_words ~= sort(w);\n    }\n    return join(new_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbxposd30.d(16): Error: undefined identifier `split`\n/tmp/tmpbxposd30.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpbxposd30.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbxposd30.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result[i] = join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8hf8nr9v.d(16): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(20): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8hf8nr9v.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp8hf8nr9v.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hf8nr9v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n    return join(sorted_words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7t8pvyg4.d(16): Error: undefined identifier `split`\n/tmp/tmp7t8pvyg4.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp7t8pvyg4.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7t8pvyg4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        result[i] = sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa_8ah_6j.d(16): Error: undefined identifier `split`\n/tmp/tmpa_8ah_6j.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpa_8ah_6j.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_8ah_6j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split;\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= word.sort;\n    }\n    return sorted_words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv412liq.d(16): Error: no property `split` for type `string`\n/tmp/tmplv412liq.d(20): Error: no property `sort` for type `string`\n/tmp/tmplv412liq.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv412liq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdjb2sgdc.d(16): Error: undefined identifier `split`\n/tmp/tmpdjb2sgdc.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdjb2sgdc.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjb2sgdc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] new_words;\n    foreach(word; words)\n    {\n        new_words ~= word.sort();\n    }\n    return new_words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpspheomdu.d(16): Error: no property `split` for type `string`\n/tmp/tmpspheomdu.d(20): Error: no property `sort` for type `string`\n/tmp/tmpspheomdu.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspheomdu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        result[i] = sort(word);\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8mityvu4.d(16): Error: no property `split` for type `string`\n/tmp/tmp8mityvu4.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8mityvu4.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8mityvu4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkp_geq3y.d(16): Error: undefined identifier `split`\n/tmp/tmpkp_geq3y.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkp_geq3y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result[i] = chars.idup;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4hwju5bh.d(16): Error: no property `split` for type `string`\n/tmp/tmp4hwju5bh.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4hwju5bh.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hwju5bh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        string sorted_word;\n        foreach(c; word)\n        {\n            sorted_word ~= c;\n        }\n        sort(sorted_word);\n        result ~= sorted_word ~ \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp56a36xp6.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp56a36xp6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp29hxu1kd.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp29hxu1kd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] newWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        newWords[i] = word.sort();\n    }\n    return newWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsvlz1swb.d(16): Error: no property `split` for type `string`\n/tmp/tmpsvlz1swb.d(20): Error: no property `sort` for type `string`\n/tmp/tmpsvlz1swb.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvlz1swb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split;\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = word.sort;\n    }\n    return sortedWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3m42ksl1.d(16): Error: no property `split` for type `string`\n/tmp/tmp3m42ksl1.d(20): Error: no property `sort` for type `string`\n/tmp/tmp3m42ksl1.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3m42ksl1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0dwzzpj2.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dwzzpj2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        result[i] = word.sort();\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuwhkfy_m.d(16): Error: no property `split` for type `string`\n/tmp/tmpuwhkfy_m.d(20): Error: no property `sort` for type `string`\n/tmp/tmpuwhkfy_m.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwhkfy_m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] letters = split(word);\n        sort(letters);\n        result ~= join(letters);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwxx4v1ni.d(16): Error: undefined identifier `split`\n/tmp/tmpwxx4v1ni.d(20): Error: undefined identifier `split`\n/tmp/tmpwxx4v1ni.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpwxx4v1ni.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpwxx4v1ni.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxx4v1ni.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        string sorted_word;\n        foreach(ch; word)\n        {\n            sorted_word ~= ch;\n        }\n        sort(sorted_word);\n        result ~= sorted_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpum5xnv7r.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpum5xnv7r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        result ~= word.sort();\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu5xfdal0.d(16): Error: no property `split` for type `string`\n/tmp/tmpu5xfdal0.d(20): Error: no property `sort` for type `string`\n/tmp/tmpu5xfdal0.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5xfdal0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] new_words;\n    foreach(word; words)\n    {\n        new_words ~= sort(word);\n    }\n    return join(new_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy8l5b6te.d(16): Error: undefined identifier `split`\n/tmp/tmpy8l5b6te.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpy8l5b6te.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8l5b6te.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(w; words)\n    {\n        string[] chars = w.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfedqas9_.d(16): Error: no property `split` for type `string`\n/tmp/tmpfedqas9_.d(20): Error: no property `split` for type `string`\n/tmp/tmpfedqas9_.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmpfedqas9_.d(22): Error: no property `join` for type `string[]`\n/tmp/tmpfedqas9_.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfedqas9_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_o23p94h.d(16): Error: undefined identifier `split`\n/tmp/tmp_o23p94h.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp_o23p94h.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o23p94h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0dwzzpj2.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dwzzpj2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        result[i] = word.sort();\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuwhkfy_m.d(16): Error: no property `split` for type `string`\n/tmp/tmpuwhkfy_m.d(20): Error: no property `sort` for type `string`\n/tmp/tmpuwhkfy_m.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuwhkfy_m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= word.sort() ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpogvxpecw.d(16): Error: no property `split` for type `string`\n/tmp/tmpogvxpecw.d(20): Error: no property `sort` for type `string`\n/tmp/tmpogvxpecw.d(22): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpogvxpecw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] new_words;\n    foreach(word; words)\n    {\n        new_words ~= word.sort();\n    }\n    return new_words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpspheomdu.d(16): Error: no property `split` for type `string`\n/tmp/tmpspheomdu.d(20): Error: no property `sort` for type `string`\n/tmp/tmpspheomdu.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspheomdu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2jcayazt.d(16): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(20): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp2jcayazt.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp2jcayazt.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jcayazt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word, \"\");\n        sort(chars);\n        sortedWords[i] = join(chars);\n    }\n    return join(sortedWords, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4zd3su6e.d(16): Error: undefined identifier `split`\n/tmp/tmp4zd3su6e.d(20): Error: undefined identifier `split`\n/tmp/tmp4zd3su6e.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4zd3su6e.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp4zd3su6e.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zd3su6e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        sort(chars);\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp58gfkrip.d(16): Error: no property `split` for type `string`\n/tmp/tmp58gfkrip.d(20): Error: no property `split` for type `string`\n/tmp/tmp58gfkrip.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp58gfkrip.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp58gfkrip.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58gfkrip.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] new_words;\n    foreach(word; words)\n    {\n        new_words ~= sort(word);\n    }\n    return join(new_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy8l5b6te.d(16): Error: undefined identifier `split`\n/tmp/tmpy8l5b6te.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpy8l5b6te.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8l5b6te.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(i, word; words)\n    {\n        result ~= sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppkeb5udb.d(16): Error: undefined identifier `split`\n/tmp/tmppkeb5udb.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmppkeb5udb.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkeb5udb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_o23p94h.d(16): Error: undefined identifier `split`\n/tmp/tmp_o23p94h.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp_o23p94h.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o23p94h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        string sortedWord = sort(word);\n        sortedWords[i] = sortedWord;\n    }\n    return join(sortedWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsa86ntby.d(16): Error: undefined identifier `split`\n/tmp/tmpsa86ntby.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpsa86ntby.d(23): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsa86ntby.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort;\n        result ~= chars.join(\"\");\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpthpnjgb5.d(16): Error: no property `split` for type `string`\n/tmp/tmpthpnjgb5.d(20): Error: no property `split` for type `string`\n/tmp/tmpthpnjgb5.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmpthpnjgb5.d(22): Error: no property `join` for type `string[]`\n/tmp/tmpthpnjgb5.d(25): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpthpnjgb5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = sort(word);\n        result ~= sorted_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ue93vnb.d(16): Error: undefined identifier `split`\n/tmp/tmp3ue93vnb.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ue93vnb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwub3jr9v.d(16): Error: undefined identifier `split`\n/tmp/tmpwub3jr9v.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdjb2sgdc.d(16): Error: undefined identifier `split`\n/tmp/tmpdjb2sgdc.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdjb2sgdc.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjb2sgdc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_o23p94h.d(16): Error: undefined identifier `split`\n/tmp/tmp_o23p94h.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp_o23p94h.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o23p94h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] newWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        newWords[i] = sort(word);\n    }\n    return join(newWords, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptgui04ir.d(16): Error: no property `split` for type `string`\n/tmp/tmptgui04ir.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmptgui04ir.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptgui04ir.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = word.replaceFirst(minElement(word), \"\");\n        }\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3p2b3ny5.d(16): Error: no property `split` for type `string`\n/tmp/tmp3p2b3ny5.d(23): Error: undefined identifier `minElement`\n/tmp/tmp3p2b3ny5.d(24): Error: no property `replaceFirst` for type `string`\n/tmp/tmp3p2b3ny5.d(28): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3p2b3ny5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmporhq4ihd.d(16): Error: no property `split` for type `string`\n/tmp/tmporhq4ihd.d(25): Error: no property `sort` for type `string`\n/tmp/tmporhq4ihd.d(28): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmporhq4ihd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n    return join(sorted_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8z51asp8.d(16): Error: undefined identifier `split`\n/tmp/tmp8z51asp8.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8z51asp8.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z51asp8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = word.dup;\n        sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfin65wi4.d(16): Error: no property `split` for type `string`\n/tmp/tmpfin65wi4.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfin65wi4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa4kq2zcx.d(16): Error: no property `split` for type `string`\n/tmp/tmpa4kq2zcx.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpa4kq2zcx.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4kq2zcx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdjb2sgdc.d(16): Error: undefined identifier `split`\n/tmp/tmpdjb2sgdc.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdjb2sgdc.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjb2sgdc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2jcayazt.d(16): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(20): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp2jcayazt.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp2jcayazt.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jcayazt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort!((a, b) => a.compare(b) < 0);\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa8443ehk.d(16): Error: no property `split` for type `string`\n/tmp/tmpa8443ehk.d(20): Error: no property `split` for type `string`\n/tmp/tmpa8443ehk.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmpa8443ehk.d(22): Error: no property `join` for type `string[]`\n/tmp/tmpa8443ehk.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa8443ehk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result[i] = join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8hf8nr9v.d(16): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(20): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8hf8nr9v.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp8hf8nr9v.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hf8nr9v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] newWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        newWords[i] = word.sort();\n    }\n    return newWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsvlz1swb.d(16): Error: no property `split` for type `string`\n/tmp/tmpsvlz1swb.d(20): Error: no property `sort` for type `string`\n/tmp/tmpsvlz1swb.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvlz1swb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n    return join(sorted_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8z51asp8.d(16): Error: undefined identifier `split`\n/tmp/tmp8z51asp8.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8z51asp8.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z51asp8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpe1ei44t_.d(16): Error: no property `split` for type `string`\n/tmp/tmpe1ei44t_.d(20): Error: no property `split` for type `string`\n/tmp/tmpe1ei44t_.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmpe1ei44t_.d(22): Error: no property `join` for type `string[]`\n/tmp/tmpe1ei44t_.d(25): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1ei44t_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s, \" \");\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word, \"\");\n        sort(chars);\n        result ~= join(chars, \"\");\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1fj7e7u5.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fj7e7u5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= min(c, sorted);\n        }\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqiu9p92.d(16): Error: undefined identifier `split`\n/tmp/tmpaqiu9p92.d(23): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqiu9p92.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdjb2sgdc.d(16): Error: undefined identifier `split`\n/tmp/tmpdjb2sgdc.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpdjb2sgdc.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjb2sgdc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] sortedWords = new string[words.length];\n    foreach(int i, string word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnyxrvys9.d(16): Error: undefined identifier `split`\n/tmp/tmpnyxrvys9.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpnyxrvys9.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnyxrvys9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        result ~= word.sort();\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu5xfdal0.d(16): Error: no property `split` for type `string`\n/tmp/tmpu5xfdal0.d(20): Error: no property `sort` for type `string`\n/tmp/tmpu5xfdal0.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5xfdal0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = word.dup;\n        sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfin65wi4.d(16): Error: no property `split` for type `string`\n/tmp/tmpfin65wi4.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfin65wi4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmpqre7ln.d(16): Error: undefined identifier `split`\n/tmp/tmpmpqre7ln.d(20): Error: undefined identifier `split`\n/tmp/tmpmpqre7ln.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpmpqre7ln.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmpqre7ln.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        sort(chars);\n        sorted_words ~= join(chars);\n    }\n    return join(sorted_words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqu8aqoqg.d(16): Error: no property `split` for type `string`\n/tmp/tmpqu8aqoqg.d(20): Error: no property `split` for type `string`\n/tmp/tmpqu8aqoqg.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqu8aqoqg.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqu8aqoqg.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqu8aqoqg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split;\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split;\n        sort(chars);\n        result[i] = chars.join;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp28apb45l.d(16): Error: no property `split` for type `string`\n/tmp/tmp28apb45l.d(20): Error: no property `split` for type `string`\n/tmp/tmp28apb45l.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp28apb45l.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp28apb45l.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp28apb45l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = word.sort();\n    }\n    return sortedWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp02e3zqw4.d(16): Error: no property `split` for type `string`\n/tmp/tmp02e3zqw4.d(20): Error: no property `sort` for type `string`\n/tmp/tmp02e3zqw4.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02e3zqw4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars.idup;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq8mwo4wh.d(16): Error: no property `split` for type `string`\n/tmp/tmpq8mwo4wh.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpq8mwo4wh.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq8mwo4wh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars) ~ \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnyv5l8am.d(16): Error: undefined identifier `split`\n/tmp/tmpnyv5l8am.d(20): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpnyv5l8am.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpnyv5l8am.d(22): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnyv5l8am.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(i, word; words)\n    {\n        result ~= sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppkeb5udb.d(16): Error: undefined identifier `split`\n/tmp/tmppkeb5udb.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmppkeb5udb.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkeb5udb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] newWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        string newWord = \"\";\n        foreach(j, char; word)\n        {\n            newWord ~= char;\n        }\n        newWords[i] = newWord.sort();\n    }\n    return newWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplsfgo54w.d(21): Error: no identifier for declarator `char`\n/tmp/tmplsfgo54w.d(23): Error: found `;` when expecting `.` following char\n/tmp/tmplsfgo54w.d(24): Error: found `}` when expecting identifier following `char`.\n/tmp/tmplsfgo54w.d(25): Error: found `newWords` when expecting `;` following statement\n/tmp/tmplsfgo54w.d(29): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplsfgo54w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = s.split();\n    string result;\n    foreach(word; words)\n    {\n        auto chars = word.to!string.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppd4yg3a6.d(16): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppd4yg3a6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(string word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp70ud_e6h.d(16): Error: no property `split` for type `string`\n/tmp/tmp70ud_e6h.d(20): Error: no property `split` for type `string`\n/tmp/tmp70ud_e6h.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp70ud_e6h.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp70ud_e6h.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70ud_e6h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s, \" \");\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word, \"\");\n        sort(chars);\n        result ~= join(chars, \"\");\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1fj7e7u5.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fj7e7u5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result[i] = join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8hf8nr9v.d(16): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(20): Error: undefined identifier `split`\n/tmp/tmp8hf8nr9v.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8hf8nr9v.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp8hf8nr9v.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8hf8nr9v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] ordered_words;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        ordered_words ~= join(chars);\n    }\n    return join(ordered_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpga1cd405.d(16): Error: undefined identifier `split`\n/tmp/tmpga1cd405.d(20): Error: undefined identifier `split`\n/tmp/tmpga1cd405.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpga1cd405.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpga1cd405.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga1cd405.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0dwzzpj2.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dwzzpj2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2jcayazt.d(16): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(20): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp2jcayazt.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp2jcayazt.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jcayazt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] new_words;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        new_words ~= join(chars);\n    }\n    return join(new_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0neocgv_.d(16): Error: undefined identifier `split`\n/tmp/tmp0neocgv_.d(20): Error: undefined identifier `split`\n/tmp/tmp0neocgv_.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp0neocgv_.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp0neocgv_.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0neocgv_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqypzijtl.d(16): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(20): Error: undefined identifier `split`\n/tmp/tmpqypzijtl.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpqypzijtl.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpqypzijtl.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqypzijtl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word, \"\");\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9f34bm_y.d(16): Error: undefined identifier `split`\n/tmp/tmp9f34bm_y.d(20): Error: undefined identifier `split`\n/tmp/tmp9f34bm_y.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp9f34bm_y.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp9f34bm_y.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9f34bm_y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result[i] = chars.idup;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4hwju5bh.d(16): Error: no property `split` for type `string`\n/tmp/tmp4hwju5bh.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4hwju5bh.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hwju5bh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n    return join(sorted_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8z51asp8.d(16): Error: undefined identifier `split`\n/tmp/tmp8z51asp8.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8z51asp8.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z51asp8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        sorted_words ~= join(chars);\n    }\n    return join(sorted_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzpeerntj.d(16): Error: undefined identifier `split`\n/tmp/tmpzpeerntj.d(20): Error: undefined identifier `split`\n/tmp/tmpzpeerntj.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpzpeerntj.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpzpeerntj.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpeerntj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkp_geq3y.d(16): Error: undefined identifier `split`\n/tmp/tmpkp_geq3y.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkp_geq3y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        foreach(char; chars)\n        {\n            result ~= char;\n        }\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp14r2pg04.d(22): Error: no identifier for declarator `char`\n/tmp/tmp14r2pg04.d(24): Error: found `;` when expecting `.` following char\n/tmp/tmp14r2pg04.d(25): Error: found `}` when expecting identifier following `char`.\n/tmp/tmp14r2pg04.d(26): Error: found `result` when expecting `;` following statement\n/tmp/tmp14r2pg04.d(26): Error: found `~=` instead of statement\n/tmp/tmp14r2pg04.d(30): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp14r2pg04.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = s.split(\" \");\n    string result;\n    foreach(word; words)\n    {\n        auto chars = word.split(\"\");\n        chars.sort!((a, b) => a < b);\n        result ~= chars.join(\"\");\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8zn6zfiz.d(16): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zn6zfiz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        sorted_words ~= sort(word);\n    }\n    return join(sorted_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8z51asp8.d(16): Error: undefined identifier `split`\n/tmp/tmp8z51asp8.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp8z51asp8.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8z51asp8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sorted_words;\n    foreach(w; words)\n    {\n        string[] chars = split(w);\n        sort(chars);\n        sorted_words ~= join(chars);\n    }\n    return join(sorted_words);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx9ok6xb_.d(16): Error: undefined identifier `split`\n/tmp/tmpx9ok6xb_.d(20): Error: undefined identifier `split`\n/tmp/tmpx9ok6xb_.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpx9ok6xb_.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpx9ok6xb_.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx9ok6xb_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result[i] = chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2jcayazt.d(16): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(20): Error: no property `split` for type `string`\n/tmp/tmp2jcayazt.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmp2jcayazt.d(22): Error: no property `join` for type `string[]`\n/tmp/tmp2jcayazt.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2jcayazt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkp_geq3y.d(16): Error: undefined identifier `split`\n/tmp/tmpkp_geq3y.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkp_geq3y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] newWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        newWords[i] = sort(word);\n    }\n    return join(newWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp470k1pva.d(16): Error: undefined identifier `split`\n/tmp/tmp470k1pva.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp470k1pva.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp470k1pva.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        result[i] = sort(word);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa_8ah_6j.d(16): Error: undefined identifier `split`\n/tmp/tmpa_8ah_6j.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpa_8ah_6j.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_8ah_6j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sortedWords = new string[words.length];\n    foreach(int i, string word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        sortedWords[i] = join(chars);\n    }\n    return join(sortedWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv7dzgrm.d(16): Error: undefined identifier `split`\n/tmp/tmplv7dzgrm.d(20): Error: undefined identifier `split`\n/tmp/tmplv7dzgrm.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmplv7dzgrm.d(22): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmplv7dzgrm.d(24): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv7dzgrm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp42b6y14k.d(16): Error: undefined identifier `split`\n/tmp/tmp42b6y14k.d(25): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42b6y14k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmparthqv1o.d(16): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(20): Error: no property `split` for type `string`\n/tmp/tmparthqv1o.d(21): Error: no property `sort` for type `string[]`\n/tmp/tmparthqv1o.d(22): Error: no property `join` for type `string[]`\n/tmp/tmparthqv1o.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmparthqv1o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    int i = 0;\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result[i] = chars.idup;\n        i++;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc5ut32yq.d(16): Error: no property `split` for type `string`\n/tmp/tmpc5ut32yq.d(22): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpc5ut32yq.d(26): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc5ut32yq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] newWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        newWords[i] = sort(word);\n    }\n    return join(newWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp470k1pva.d(16): Error: undefined identifier `split`\n/tmp/tmp470k1pva.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp470k1pva.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp470k1pva.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = word.replaceFirst(minElement(word),\"\");\n        }\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_iriojlv.d(16): Error: no property `split` for type `string`\n/tmp/tmp_iriojlv.d(23): Error: undefined identifier `minElement`\n/tmp/tmp_iriojlv.d(24): Error: no property `replaceFirst` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_iriojlv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164395
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_o23p94h.d(16): Error: undefined identifier `split`\n/tmp/tmp_o23p94h.d(20): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp_o23p94h.d(22): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_o23p94h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] result = new string[words.length];\n    foreach(i, word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result[i] = chars.idup;\n    }\n    return result.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4hwju5bh.d(16): Error: no property `split` for type `string`\n/tmp/tmp4hwju5bh.d(21): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp4hwju5bh.d(24): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4hwju5bh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] newWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        newWords[i] = word.sort();\n    }\n    return newWords.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsvlz1swb.d(16): Error: no property `split` for type `string`\n/tmp/tmpsvlz1swb.d(20): Error: no property `sort` for type `string`\n/tmp/tmpsvlz1swb.d(22): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsvlz1swb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n                \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s, \" \");\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word, \"\");\n        sort(chars);\n        result ~= join(chars, \"\");\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1fj7e7u5.d(16): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1fj7e7u5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    }
  ]
}