language: d
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        else\n            result ~=\
    \ n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiu4fdv31.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpiu4fdv31.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiu4fdv31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnk_5vb4b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpnk_5vb4b.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk_5vb4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers) \n    {\n        if(seen[n]) \n        {\n            continue;\n \
    \       }\n        seen[n] = true;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpky6tcx9z.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpky6tcx9z.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky6tcx9z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3qcl8jii.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3qcl8jii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers) \n    {\n        if(n in result)\
    \ \n        {\n            result -= n;\n        }\n        else \n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1e_bmenr.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    /tmp/tmp1e_bmenr.d(15): Error: invalid array operation `result -= n` (possible
    missing [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1e_bmenr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3qcl8jii.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3qcl8jii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(num; numbers)\n    {\n  \
    \      if(count(numbers, num) == 1)\n        {\n            result ~= num;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmparerk8w2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmparerk8w2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(numbers.count(n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ewqn4ch.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp1ewqn4ch.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ewqn4ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17wmmbad.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17wmmbad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(count(numbers, n) == 1)\n        {\n            result ~= n;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4tvml1z3.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tvml1z3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(num; numbers)\n    {\n        if(!result.canFind(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcoou28zk.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcoou28zk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    return numbers.dup.sort.array.uniq;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmtoly6f5.d(10): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmtoly6f5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto set = new Set!long();\n    foreach(n; numbers)\n    {\n      \
    \  set.insert(n);\n    }\n    return set.array;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw31lmr0b.d(10): Error: template instance `Set!long` template `Set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw31lmr0b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    long[] unique_numbers;\n    unique_numbers = numbers.dup;\n\
    \    unique_numbers.sort;\n    unique_numbers.uniq;\n    foreach(i; 0 .. unique_numbers.length)\n\
    \    {\n        result ~= unique_numbers[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86475piw.d(13): Error: no property `sort` for type `long[]`

    /tmp/tmp86475piw.d(14): Error: no property `uniq` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86475piw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers)\n    {\n        if(!seen[n])\n        {\n            seen[n] = true;\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvajnxzr.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpbvajnxzr.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvajnxzr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers)\n    {\n        if(seen[n])\n            continue;\n        seen[n]\
    \ = true;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ug0rnih.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp2ug0rnih.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ug0rnih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17wmmbad.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17wmmbad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(!result.canFind(n))\n        {\n            result ~= n;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2f76q00.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpl2f76q00.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2f76q00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnk_5vb4b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpnk_5vb4b.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk_5vb4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.count(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17lv090u.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17lv090u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        else\n            result ~=\
    \ n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiu4fdv31.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpiu4fdv31.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiu4fdv31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.count(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17lv090u.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17lv090u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppbpj5x33.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbpj5x33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(i; numbers)\n    {\n        if(i in result)\n\
    \            continue;\n        result ~= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujqfa1w6.d(13): Error: incompatible types for `(i) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujqfa1w6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p1qznku.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p1qznku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(result.count(n)\
    \ == 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvoo4883r.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvoo4883r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(numbers.count(n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa46wibs_.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa46wibs_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17wmmbad.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17wmmbad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers) \n    {\n        if(seen[n]) \n        {\n            continue;\n \
    \       }\n        seen[n] = true;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpky6tcx9z.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpky6tcx9z.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky6tcx9z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers) \n    {\n        if(!result.canFind(n))\
    \ \n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4m9wibiy.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4m9wibiy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17wmmbad.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17wmmbad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto numbers_set = numbers.dup.sort().uniq;\n    return numbers_set;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa328h0gy.d(10): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa328h0gy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(n in result)\n            continue;\n        else\n            result\
    \ ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfwvrs9dn.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwvrs9dn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto unique = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!unique.canFind(n))\n        {\n            unique ~= n;\n        }\n   \
    \ }\n    return unique;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkfcp7lc.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprkfcp7lc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(result.count(n) == 0)\n        {\n            result ~= n;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16bummwx.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16bummwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if (n in result)\n            continue;\n        result ~= n;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbekkc6u3.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbekkc6u3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnk_5vb4b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpnk_5vb4b.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk_5vb4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers)\n    {\n        if(!seen[n])\n        {\n            seen[n] = true;\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvajnxzr.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpbvajnxzr.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvajnxzr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17wmmbad.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17wmmbad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(result.count(n) == 0)\n        {\n            result ~= n;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16bummwx.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16bummwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17wmmbad.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17wmmbad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppbpj5x33.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbpj5x33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(!result.canFind(n))\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl15_9dda.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl15_9dda.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    //long[] result;\n    //long[] temp;\n    //long[] temp2;\n    //long[]\
    \ temp3;\n    //long[] temp4;\n    //long[] temp5;\n    //long[] temp6;\n    //long[]\
    \ temp7;\n    //long[] temp8;\n    //long[] temp9;\n    //long[] temp10;\n   \
    \ //long[] temp11;\n    //long[] temp12;\n    //long[] temp13;\n    //long[] temp14;\n\
    \    //long[] temp15;\n    //long[] temp16;\n    //long[] temp17;\n    //long[]\
    \ temp18;\n    //long[] temp19;\n    //long[] temp20;\n    //long[] temp21;\n\
    \    //long[] temp22;\n    //long[] temp23;\n    //long[] temp24;\n    //long[]\
    \ temp25;\n    //long[] temp26;\n    //long[] temp27;\n    //long[] temp28;\n\
    \    //long[] temp29;\n    //long[] temp30;\n    //long[] temp31;\n    //long[]\
    \ temp32;\n    //long[] temp33;\n    //long[] temp34;\n    //long[] temp35;\n\
    \    //long[] temp36;\n    //long[] temp37;\n    //long[] temp38;\n    //long[]\
    \ temp39;\n    //long[] temp40;\n    //long[] temp41;\n    //long[] temp42;\n\
    \    //long[] temp43;\n    //long[] temp44;\n    //long[] temp45;\n    //long[]\
    \ temp46;\n    //long[] temp47;\n    //long[] temp48;\n    //long[] temp49;\n\
    \    //long[] temp50;\n    //long[] temp51;\n    //long[] temp52;\n    //long[]\
    \ temp53;\n    //long[] temp54;\n    //long[] temp55;\n    //long[] temp56;\n\
    \    //long[] temp57;\n    //long[] temp58;\n    //long[] temp59;\n    //long[]\
    \ temp60;\n    //long[] temp61;\n    //long[] temp62;\n    //long[] temp63;\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsu1z4t2.d(74): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsu1z4t2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers) \n    {\n        if (n in result)\
    \ \n        {\n            result -= n;\n        }\n        else \n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbkth7xud.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    /tmp/tmpbkth7xud.d(15): Error: invalid array operation `result -= n` (possible
    missing [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbkth7xud.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(result.count(n)\
    \ == 0)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvoo4883r.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvoo4883r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(numbers.count(n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa46wibs_.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa46wibs_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(n in result)\n            continue;\n        result ~= n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjsl40h41.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsl40h41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers)\n    {\n        if(!seen[n])\n        {\n            seen[n] = true;\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvajnxzr.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpbvajnxzr.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvajnxzr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers) \n    {\n        if (seen[n]) \n        {\n            continue;\n\
    \        }\n        seen[n] = true;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg02497nq.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpg02497nq.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg02497nq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers)\n    {\n        if(!seen[n])\n        {\n            seen[n] = true;\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvajnxzr.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpbvajnxzr.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvajnxzr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(result.count(n) == 0)\n        {\n            result ~= n;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16bummwx.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16bummwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(count(numbers, n) == 1)\n        {\n            result ~= n;\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4tvml1z3.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4tvml1z3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers) \n    {\n        if(n\
    \ in result) \n        {\n            result -= n;\n        }\n        else \n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9rs_pu2.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    /tmp/tmp_9rs_pu2.d(15): Error: invalid array operation `result -= n` (possible
    missing [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9rs_pu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p1qznku.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p1qznku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(numbers.count(n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ewqn4ch.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp1ewqn4ch.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ewqn4ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(n in result)\n            continue;\n        result ~= n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjsl40h41.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsl40h41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(numbers.count(n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpggvd3oqj.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpggvd3oqj.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggvd3oqj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers) \n    {\n        if(n in result)\
    \ \n        {\n            result -= n;\n        } \n        else \n        {\n\
    \            result ~= n;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuot3skg7.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    /tmp/tmpuot3skg7.d(15): Error: invalid array operation `result -= n` (possible
    missing [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuot3skg7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(result.count(n) == 0)\n        {\n            result ~= n;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16bummwx.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16bummwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17wmmbad.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17wmmbad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p1qznku.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p1qznku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(!result.canFind(n))\n        {\n            result ~= n;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2f76q00.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpl2f76q00.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2f76q00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17wmmbad.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17wmmbad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3qcl8jii.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3qcl8jii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiukizv7s.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiukizv7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers)\n    {\n        if (seen[n])\n            continue;\n        seen[n]\
    \ = true;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp45cgqkrs.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp45cgqkrs.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp45cgqkrs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiukizv7s.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiukizv7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiukizv7s.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiukizv7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnk_5vb4b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpnk_5vb4b.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk_5vb4b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p1qznku.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p1qznku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(i; numbers)\n    {\n        if(!result.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpee9nfp81.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee9nfp81.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.count(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17lv090u.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17lv090u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(numbers.count(n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpggvd3oqj.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpggvd3oqj.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggvd3oqj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(result.count(n) == 0)\n        {\n            result ~= n;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp16bummwx.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16bummwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxbtu6pj.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxbtu6pj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppbpj5x33.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbpj5x33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.count(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17lv090u.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17lv090u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiukizv7s.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiukizv7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \        {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiukizv7s.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiukizv7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(i; numbers)\n    {\n    \
    \    if(!result.canFind(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnmoxruw6.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnmoxruw6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(num;\
    \ numbers)\n    {\n        if(!seen[num])\n        {\n            seen[num] =\
    \ true;\n            result ~= num;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvvp12ath.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpvvp12ath.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvvp12ath.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.count(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17lv090u.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17lv090u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3qcl8jii.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3qcl8jii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(numbers.count(n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa46wibs_.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa46wibs_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(n in result)\n            continue;\n        result ~= n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjsl40h41.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsl40h41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        else\n            result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv98v7r0.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv98v7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(!result.canFind(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17wmmbad.d(13): Error: no property `canFind` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17wmmbad.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    //long[] result;\n    //long[] temp;\n    //long[] temp2;\n    //long[]\
    \ temp3;\n    //long[] temp4;\n    //long[] temp5;\n    //long[] temp6;\n    //long[]\
    \ temp7;\n    //long[] temp8;\n    //long[] temp9;\n    //long[] temp10;\n   \
    \ //long[] temp11;\n    //long[] temp12;\n    //long[] temp13;\n    //long[] temp14;\n\
    \    //long[] temp15;\n    //long[] temp16;\n    //long[] temp17;\n    //long[]\
    \ temp18;\n    //long[] temp19;\n    //long[] temp20;\n    //long[] temp21;\n\
    \    //long[] temp22;\n    //long[] temp23;\n    //long[] temp24;\n    //long[]\
    \ temp25;\n    //long[] temp26;\n    //long[] temp27;\n    //long[] temp28;\n\
    \    //long[] temp29;\n    //long[] temp30;\n    //long[] temp31;\n    //long[]\
    \ temp32;\n    //long[] temp33;\n    //long[] temp34;\n    //long[] temp35;\n\
    \    //long[] temp36;\n    //long[] temp37;\n    //long[] temp38;\n    //long[]\
    \ temp39;\n    //long[] temp40;\n    //long[] temp41;\n    //long[] temp42;\n\
    \    //long[] temp43;\n    //long[] temp44;\n    //long[] temp45;\n    //long[]\
    \ temp46;\n    //long[] temp47;\n    //long[] temp48;\n    //long[] temp49;\n\
    \    //long[] temp50;\n    //long[] temp51;\n    //long[] temp52;\n    //long[]\
    \ temp53;\n    //long[] temp54;\n    //long[] temp55;\n    //long[] temp56;\n\
    \    //long[] temp57;\n    //long[] temp58;\n    //long[] temp59;\n    //long[]\
    \ temp60;\n    //long[] temp61;\n    //long[] temp62;\n    //long[] temp63;\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbsu1z4t2.d(74): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsu1z4t2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    return numbers.dup.sort().unique;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgf3o16lc.d(10): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgf3o16lc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(num; numbers)\n    {\n     \
    \   if(count(numbers, num) == 1)\n        {\n            result ~= num;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp18_mkztr.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp18_mkztr.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18_mkztr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(numbers.count(n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ewqn4ch.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp1ewqn4ch.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ewqn4ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi8f8c0pk.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi8f8c0pk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(count(numbers,\
    \ n) == 1)\n        {\n            result ~= n;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3qcl8jii.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3qcl8jii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(n in result)\n            continue;\n        result ~= n;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjsl40h41.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsl40h41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(count(numbers, n) == 1)\n        {\n            result ~= n;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlwl4io2.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmphlwl4io2.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlwl4io2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.count(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17lv090u.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17lv090u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = [];\n    foreach(n; numbers)\n    {\n        if(n in\
    \ result)\n            continue;\n        result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppbpj5x33.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbpj5x33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(i; numbers)\n    {\n       \
    \ if(count(numbers, i) == 1)\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvb4pm7yj.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpvb4pm7yj.d(13): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvb4pm7yj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    long[] temp = new long[0];\n    foreach(n;\
    \ numbers)\n    {\n        if(n in temp)\n        {\n            continue;\n \
    \       }\n        else\n        {\n            temp ~= n;\n            result\
    \ ~= n;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpybj8a3br.d(14): Error: incompatible types for `(n) in (temp)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybj8a3br.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = numbers.dup;\n    result.sort;\n    result.erase(result.unique);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ihqcfpq.d(11): Error: no property `sort` for type `long[]`

    /tmp/tmp3ihqcfpq.d(12): Error: no property `erase` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ihqcfpq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.count(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17lv090u.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17lv090u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[];\n    foreach(n; numbers)\n    {\n     \
    \   if(n in result)\n            continue;\n        result ~= n;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzf_34p_b.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzf_34p_b.d(13): Error: incompatible types for `(n) in (result)`: `long`
    and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf_34p_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(numbers.count(n)\
    \ == 1)\n        {\n            result ~= n;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi8f8c0pk.d(13): Error: no property `count` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi8f8c0pk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers)\n    {\n       \
    \ if(!result.canFind(n))\n            result ~= n;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprwum0my3.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprwum0my3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(i; numbers)\n    {\n       \
    \ if(!result.canFind(i))\n        {\n            result ~= i;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplnh0sjcf.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnh0sjcf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    foreach(n; numbers) \n    {\n      \
    \  if(!result.canFind(n)) \n        {\n            result ~= n;\n        }\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ym6697i.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ym6697i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result;\n    foreach(n; numbers)\n    {\n        if(n in result)\n\
    \            continue;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv07h5mun.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv07h5mun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    auto result = new long[];\n    auto seen = new bool[];\n    foreach(n;\
    \ numbers)\n    {\n        if(seen[n])\n            continue;\n        seen[n]\
    \ = true;\n        result ~= n;\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ug0rnih.d(10): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp2ug0rnih.d(11): Error: new can only create structs, dynamic arrays or
    class objects, not `bool[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ug0rnih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a list of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n        \n*/\nlong[] remove_duplicates(long[] numbers)\
    \ \n{\n    long[] result = new long[0];\n    foreach(n; numbers)\n    {\n    \
    \    if(n in result)\n            continue;\n        else\n            result\
    \ ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfwvrs9dn.d(13): Error: incompatible types for `(n) in (result)`:
    `long` and `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwvrs9dn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
