{
  "language": "d",
  "name": "HumanEval_81_numerical_letter_grade",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades) \n    {\n        if (grade >= 4.0) \n        {\n            letter_grades[i] = \"A+\";\n        } \n        else if (grade >= 3.7) \n        {\n            letter_grades[i] = \"A\";\n        } \n        else if (grade >= 3.3) \n        {\n            letter_grades[i] = \"A-\";\n        } \n        else if (grade >= 3.0) \n        {\n            letter_grades[i] = \"B+\";\n        } \n        else if (grade >= 2.7) \n        {\n            letter_grades[i] = \"B\";\n        } \n        else if (grade >= 2.3) \n        {\n            letter_grades[i] = \"B-\";\n        } \n        else if (grade >= 2.0) \n        {\n            letter_grades[i] = \"C+\";\n        } \n        else if (grade >= 1.7) \n        {\n            letter_grades[i] = \"C\";\n        } \n        else if (grade >= 1.3) \n        {\n            letter_grades[i] = \"C-\";\n        } \n        else if (grade >= 1.0) \n        {\n            letter_grades[i] = \"D+\";\n        } \n        else if (grade >= 0.7) \n        {\n            letter_grades[i] = \"D\";\n        } \n        else if (grade >= 0.0) \n        {\n            letter_grades[i] = \"D-\";\n        } \n        else \n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_gi5sfer.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_gi5sfer.__unittest_L88_C1() [0x428589]\n??:? void tmp_gi5sfer.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade > 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade > 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade > 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade > 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade > 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade > 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade > 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade > 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade > 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade > 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade > 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ob5s5dl.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp5ob5s5dl.__unittest_L62_C1() [0x428589]\n??:? void tmp5ob5s5dl.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.5, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n        string[] letter_grades = numerical_letter_grade(grades);\n        assert(letter_grades == [\"A-\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]);\n*/\n/*\n    The teacher has also given you a list of students and their GPAs.\n    You have to write a function that can output a list\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzzx8g3_0.d(68): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzzx8g3_0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164553
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplp7h7llo.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmplp7h7llo.__unittest_L88_C1() [0x428701]\n??:? void tmplp7h7llo.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7b_md34_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299dd]\n??:? void tmp7b_md34_.__unittest_L88_C1() [0x428735]\n??:? void tmp7b_md34_.__modtest() [0x428c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429736]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42970d]\n??:? runModuleUnitTests [0x42e331]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429ea0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n        assert(numerical_letter_grade(grades) == [\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]);\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqvim1gdd.d(71): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpqvim1gdd.__unittest_L67_C1() [0x428589]\n??:? void tmpqvim1gdd.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.7, 3.3, 2.7, 2.3, 1.7, 1.3, 0.7, 0.3, 0.0];\n        string[] letter_grades = numerical_letter_grade(grades);\n        writeln(letter_grades);\n        // [\"A\", \"A-\", \"B\", \"B-\", \"C\", \"C-\", \"D\", \"D-\", \"E\"]\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpz9zj_14_.d(73): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpz9zj_14_.__unittest_L69_C1() [0x428589]\n??:? void tmpz9zj_14_.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuhz45amp.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42984d]\n??:? void tmpuhz45amp.__unittest_L62_C1() [0x4285a5]\n??:? void tmpuhz45amp.__modtest() [0x428ab4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4295a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b0a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b134]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b031]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42957d]\n??:? runModuleUnitTests [0x42e1a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429d10]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++) \n    {\n        if (grades[i] == 4.0) \n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7) \n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3) \n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0) \n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7) \n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3) \n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0) \n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7) \n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3) \n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0) \n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7) \n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0) \n        {\n            letter_grades[i] = \"D-\";\n        }\n        else \n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltor0_4b.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmpltor0_4b.__unittest_L88_C1() [0x428701]\n??:? void tmpltor0_4b.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\n        assert(numerical_letter_grade(grades) == [\"A-\", \"B+\", \"B-\", \"C+\", \"C\", \"D+\", \"D\", \"E\"]);\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk285_vki.d(71): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpk285_vki.__unittest_L67_C1() [0x428589]\n??:? void tmpk285_vki.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjcumegwj.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpjcumegwj.__unittest_L62_C1() [0x428589]\n??:? void tmpjcumegwj.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\n        writeln(numerical_letter_grade(grades));\n        // Output: [\"A-\", \"B+\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D-\"]\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6k6qoobd.d(72): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp6k6qoobd.__unittest_L68_C1() [0x428589]\n??:? void tmp6k6qoobd.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g == 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g > 3.7)\n            letter_grades[i] = \"A\";\n        else if(g > 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g > 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g > 2.7)\n            letter_grades[i] = \"B\";\n        else if(g > 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g > 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g > 1.7)\n            letter_grades[i] = \"C\";\n        else if(g > 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g > 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g > 0.7)\n            letter_grades[i] = \"D\";\n        else if(g > 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3oi9w0nd.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp3oi9w0nd.__unittest_L62_C1() [0x428589]\n??:? void tmp3oi9w0nd.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[];\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv0oojwjx.d(30): Error: new can only create structs, dynamic arrays or class objects, not `string[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv0oojwjx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164553
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmiyobeno.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpmiyobeno.__unittest_L88_C1() [0x428799]\n??:? void tmpmiyobeno.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\n/*\n    Example:\n        grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n        result = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmps2w_x187.d(71): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmps2w_x187.__unittest_L67_C1() [0x428589]\n??:? void tmps2w_x187.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades) \n    {\n        if (grade >= 4.0) \n        {\n            letter_grades[i] = \"A+\";\n        } \n        else if (grade >= 3.7) \n        {\n            letter_grades[i] = \"A\";\n        } \n        else if (grade >= 3.3) \n        {\n            letter_grades[i] = \"A-\";\n        } \n        else if (grade >= 3.0) \n        {\n            letter_grades[i] = \"B+\";\n        } \n        else if (grade >= 2.7) \n        {\n            letter_grades[i] = \"B\";\n        } \n        else if (grade >= 2.3) \n        {\n            letter_grades[i] = \"B-\";\n        } \n        else if (grade >= 2.0) \n        {\n            letter_grades[i] = \"C+\";\n        } \n        else if (grade >= 1.7) \n        {\n            letter_grades[i] = \"C\";\n        } \n        else if (grade >= 1.3) \n        {\n            letter_grades[i] = \"C-\";\n        } \n        else if (grade >= 1.0) \n        {\n            letter_grades[i] = \"D+\";\n        } \n        else if (grade >= 0.7) \n        {\n            letter_grades[i] = \"D\";\n        } \n        else if (grade >= 0.0) \n        {\n            letter_grades[i] = \"D-\";\n        } \n        else \n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_gi5sfer.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_gi5sfer.__unittest_L88_C1() [0x428589]\n??:? void tmp_gi5sfer.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] results;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            results ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            results ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            results ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            results ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            results ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            results ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            results ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            results ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            results ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            results ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            results ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            results ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            results ~= \"E\";\n        }\n    }\n    return results;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfdrizjsa.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpfdrizjsa.__unittest_L88_C1() [0x4287a9]\n??:? void tmpfdrizjsa.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.5, 3.7, 3.8, 3.9, 4.0, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\n        string[] letter_grades = numerical_letter_grade(grades);\n        assert(letter_grades == [\"A-\", \"A\", \"A\", \"A\", \"A+\", \"B+\", \"B-\", \"C+\", \"C-\", \"D+\", \"D\", \"D-\"]);\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq9ftf9co.d(72): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpq9ftf9co.__unittest_L68_C1() [0x428589]\n??:? void tmpq9ftf9co.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjcumegwj.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpjcumegwj.__unittest_L62_C1() [0x428589]\n??:? void tmpjcumegwj.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7ur3th1.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_7ur3th1.__unittest_L62_C1() [0x428589]\n??:? void tmp_7ur3th1.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw1jmeaku.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpw1jmeaku.__unittest_L88_C1() [0x428591]\n??:? void tmpw1jmeaku.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjcumegwj.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpjcumegwj.__unittest_L62_C1() [0x428589]\n??:? void tmpjcumegwj.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplp7h7llo.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmplp7h7llo.__unittest_L88_C1() [0x428701]\n??:? void tmplp7h7llo.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7ur3th1.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_7ur3th1.__unittest_L62_C1() [0x428589]\n??:? void tmp_7ur3th1.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm1vwqc95.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpm1vwqc95.__unittest_L88_C1() [0x428589]\n??:? void tmpm1vwqc95.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades) \n    {\n        if (grade >= 4.0) \n        {\n            letter_grades[i] = \"A+\";\n        } \n        else if (grade >= 3.7) \n        {\n            letter_grades[i] = \"A\";\n        } \n        else if (grade >= 3.3) \n        {\n            letter_grades[i] = \"A-\";\n        } \n        else if (grade >= 3.0) \n        {\n            letter_grades[i] = \"B+\";\n        } \n        else if (grade >= 2.7) \n        {\n            letter_grades[i] = \"B\";\n        } \n        else if (grade >= 2.3) \n        {\n            letter_grades[i] = \"B-\";\n        } \n        else if (grade >= 2.0) \n        {\n            letter_grades[i] = \"C+\";\n        } \n        else if (grade >= 1.7) \n        {\n            letter_grades[i] = \"C\";\n        } \n        else if (grade >= 1.3) \n        {\n            letter_grades[i] = \"C-\";\n        } \n        else if (grade >= 1.0) \n        {\n            letter_grades[i] = \"D+\";\n        } \n        else if (grade >= 0.7) \n        {\n            letter_grades[i] = \"D\";\n        } \n        else if (grade >= 0.0) \n        {\n            letter_grades[i] = \"D-\";\n        } \n        else \n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0x6tscv0.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp0x6tscv0.__unittest_L88_C1() [0x428589]\n??:? void tmp0x6tscv0.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7b_md34_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299dd]\n??:? void tmp7b_md34_.__unittest_L88_C1() [0x428735]\n??:? void tmp7b_md34_.__modtest() [0x428c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429736]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42970d]\n??:? runModuleUnitTests [0x42e331]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429ea0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr4t_0igf.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpr4t_0igf.__unittest_L88_C1() [0x428589]\n??:? void tmpr4t_0igf.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.5, 3.8, 4.0, 2.5, 2.9, 3.0, 3.4, 3.6, 3.7, 3.8, 3.9, 4.0];\n        string[] letter_grades = numerical_letter_grade(grades);\n        assert(letter_grades == [\"A-\", \"A\", \"A+\", \"B-\", \"B-\", \"B\", \"B\", \"B+\", \"A-\", \"A\", \"A\", \"A+\"]);\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpszvixiej.d(72): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpszvixiej.__unittest_L68_C1() [0x428589]\n??:? void tmpszvixiej.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm1vwqc95.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpm1vwqc95.__unittest_L88_C1() [0x428589]\n??:? void tmpm1vwqc95.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade < 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n        else if(grade < 0.7)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade < 1.0)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade < 1.3)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade < 1.7)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade < 2.0)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade < 2.3)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade < 2.7)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade < 3.0)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade < 3.3)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade < 3.7)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade < 4.0)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else\n        {\n            letter_grades[i] = \"A+\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgyhhib_f.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429815]\n??:? void tmpgyhhib_f.__unittest_L88_C1() [0x428571]\n??:? void tmpgyhhib_f.__modtest() [0x428a80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e393]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42956e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b06d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b0fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42aff9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429545]\n??:? runModuleUnitTests [0x42e169]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cd8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpskv_xe1_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmpskv_xe1_.__unittest_L88_C1() [0x428701]\n??:? void tmpskv_xe1_.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7ur3th1.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_7ur3th1.__unittest_L62_C1() [0x428589]\n??:? void tmp_7ur3th1.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    for (int i = 0; i < grades.length; i++) \n    {\n        if (grades[i] >= 4.0) \n        {\n            result[i] = \"A+\";\n        } \n        else if (grades[i] >= 3.7) \n        {\n            result[i] = \"A\";\n        } \n        else if (grades[i] >= 3.3) \n        {\n            result[i] = \"A-\";\n        } \n        else if (grades[i] >= 3.0) \n        {\n            result[i] = \"B+\";\n        } \n        else if (grades[i] >= 2.7) \n        {\n            result[i] = \"B\";\n        } \n        else if (grades[i] >= 2.3) \n        {\n            result[i] = \"B-\";\n        } \n        else if (grades[i] >= 2.0) \n        {\n            result[i] = \"C+\";\n        } \n        else if (grades[i] >= 1.7) \n        {\n            result[i] = \"C\";\n        } \n        else if (grades[i] >= 1.3) \n        {\n            result[i] = \"C-\";\n        } \n        else if (grades[i] >= 1.0) \n        {\n            result[i] = \"D+\";\n        } \n        else if (grades[i] >= 0.7) \n        {\n            result[i] = \"D\";\n        } \n        else if (grades[i] >= 0.0) \n        {\n            result[i] = \"D-\";\n        } \n        else \n        {\n            result[i] = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_f5kd0_4.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmp_f5kd0_4.__unittest_L88_C1() [0x428701]\n??:? void tmp_f5kd0_4.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpskv_xe1_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmpskv_xe1_.__unittest_L88_C1() [0x428701]\n??:? void tmpskv_xe1_.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7b_md34_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299dd]\n??:? void tmp7b_md34_.__unittest_L88_C1() [0x428735]\n??:? void tmp7b_md34_.__modtest() [0x428c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429736]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42970d]\n??:? runModuleUnitTests [0x42e331]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429ea0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmiyobeno.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpmiyobeno.__unittest_L88_C1() [0x428799]\n??:? void tmpmiyobeno.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmjarspx_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpmjarspx_.__unittest_L88_C1() [0x428591]\n??:? void tmpmjarspx_.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmjarspx_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpmjarspx_.__unittest_L88_C1() [0x428591]\n??:? void tmpmjarspx_.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7ur3th1.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_7ur3th1.__unittest_L62_C1() [0x428589]\n??:? void tmp_7ur3th1.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmiyobeno.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpmiyobeno.__unittest_L88_C1() [0x428799]\n??:? void tmpmiyobeno.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades) \n    {\n        if (grade >= 4.0) \n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grade >= 3.7) \n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grade >= 3.3) \n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grade >= 3.0) \n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grade >= 2.7) \n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grade >= 2.3) \n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grade >= 2.0) \n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grade >= 1.7) \n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grade >= 1.3) \n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grade >= 1.0) \n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grade >= 0.7) \n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grade >= 0.0) \n        {\n            letter_grades[i] = \"D-\";\n        }\n        else \n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptpzf4n92.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmptpzf4n92.__unittest_L88_C1() [0x428589]\n??:? void tmptpzf4n92.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpskv_xe1_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmpskv_xe1_.__unittest_L88_C1() [0x428701]\n??:? void tmpskv_xe1_.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7ur3th1.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_7ur3th1.__unittest_L62_C1() [0x428589]\n??:? void tmp_7ur3th1.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmiyobeno.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpmiyobeno.__unittest_L88_C1() [0x428799]\n??:? void tmpmiyobeno.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7ur3th1.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_7ur3th1.__unittest_L62_C1() [0x428589]\n??:? void tmp_7ur3th1.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7ur3th1.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_7ur3th1.__unittest_L62_C1() [0x428589]\n??:? void tmp_7ur3th1.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjcumegwj.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpjcumegwj.__unittest_L62_C1() [0x428589]\n??:? void tmpjcumegwj.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjcumegwj.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpjcumegwj.__unittest_L62_C1() [0x428589]\n??:? void tmpjcumegwj.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp00lhgb8d.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmp00lhgb8d.__unittest_L88_C1() [0x4287a9]\n??:? void tmp00lhgb8d.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm1vwqc95.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpm1vwqc95.__unittest_L88_C1() [0x428589]\n??:? void tmpm1vwqc95.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades) \n    {\n        if(grade >= 4.0)\n            result ~= \"A+\";\n        else if(grade >= 3.7)\n            result ~= \"A\";\n        else if(grade >= 3.3)\n            result ~= \"A-\";\n        else if(grade >= 3.0)\n            result ~= \"B+\";\n        else if(grade >= 2.7)\n            result ~= \"B\";\n        else if(grade >= 2.3)\n            result ~= \"B-\";\n        else if(grade >= 2.0)\n            result ~= \"C+\";\n        else if(grade >= 1.7)\n            result ~= \"C\";\n        else if(grade >= 1.3)\n            result ~= \"C-\";\n        else if(grade >= 1.0)\n            result ~= \"D+\";\n        else if(grade >= 0.7)\n            result ~= \"D\";\n        else if(grade >= 0.0)\n            result ~= \"D-\";\n        else\n            result ~= \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplawhcwei.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmplawhcwei.__unittest_L62_C1() [0x428799]\n??:? void tmplawhcwei.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplp7h7llo.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmplp7h7llo.__unittest_L88_C1() [0x428701]\n??:? void tmplp7h7llo.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpskv_xe1_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmpskv_xe1_.__unittest_L88_C1() [0x428701]\n??:? void tmpskv_xe1_.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmjarspx_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpmjarspx_.__unittest_L88_C1() [0x428591]\n??:? void tmpmjarspx_.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjcumegwj.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpjcumegwj.__unittest_L62_C1() [0x428589]\n??:? void tmpjcumegwj.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7ur3th1.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_7ur3th1.__unittest_L62_C1() [0x428589]\n??:? void tmp_7ur3th1.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm1vwqc95.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpm1vwqc95.__unittest_L88_C1() [0x428589]\n??:? void tmpm1vwqc95.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjcumegwj.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpjcumegwj.__unittest_L62_C1() [0x428589]\n??:? void tmpjcumegwj.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            result[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            result[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            result[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            result[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            result[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            result[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            result[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            result[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            result[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            result[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            result[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            result[i] = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7syi0jwc.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmp7syi0jwc.__unittest_L88_C1() [0x428591]\n??:? void tmp7syi0jwc.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmjarspx_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpmjarspx_.__unittest_L88_C1() [0x428591]\n??:? void tmpmjarspx_.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n        string[] letter_grades = numerical_letter_grade(grades);\n        assert(letter_grades == [\"B+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]);\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8nnnxs6n.d(72): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp8nnnxs6n.__unittest_L68_C1() [0x428589]\n??:? void tmp8nnnxs6n.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw1jmeaku.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpw1jmeaku.__unittest_L88_C1() [0x428591]\n??:? void tmpw1jmeaku.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            result[i] = \"A+\";\n        else if(g >= 3.7)\n            result[i] = \"A\";\n        else if(g >= 3.3)\n            result[i] = \"A-\";\n        else if(g >= 3.0)\n            result[i] = \"B+\";\n        else if(g >= 2.7)\n            result[i] = \"B\";\n        else if(g >= 2.3)\n            result[i] = \"B-\";\n        else if(g >= 2.0)\n            result[i] = \"C+\";\n        else if(g >= 1.7)\n            result[i] = \"C\";\n        else if(g >= 1.3)\n            result[i] = \"C-\";\n        else if(g >= 1.0)\n            result[i] = \"D+\";\n        else if(g >= 0.7)\n            result[i] = \"D\";\n        else if(g >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyhh38v6z.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpyhh38v6z.__unittest_L62_C1() [0x428589]\n??:? void tmpyhh38v6z.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++) \n    {\n        if (grades[i] == 4.0) \n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7) \n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3) \n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0) \n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7) \n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3) \n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0) \n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7) \n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3) \n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0) \n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7) \n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0) \n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0) \n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwa5rzhbt.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299dd]\n??:? void tmpwa5rzhbt.__unittest_L88_C1() [0x428735]\n??:? void tmpwa5rzhbt.__modtest() [0x428c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429736]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42970d]\n??:? runModuleUnitTests [0x42e331]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429ea0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmjarspx_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpmjarspx_.__unittest_L88_C1() [0x428591]\n??:? void tmpmjarspx_.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplp7h7llo.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmplp7h7llo.__unittest_L88_C1() [0x428701]\n??:? void tmplp7h7llo.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0];\n        assert(numerical_letter_grade(grades) == [\"A-\", \"B+\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D-\"]);\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1btwk0ex.d(71): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp1btwk0ex.__unittest_L67_C1() [0x428589]\n??:? void tmp1btwk0ex.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            result[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            result[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            result[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            result[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            result[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            result[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            result[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            result[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            result[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            result[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            result[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            result[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            result[i] = \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7syi0jwc.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmp7syi0jwc.__unittest_L88_C1() [0x428591]\n??:? void tmp7syi0jwc.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade > 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade > 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade > 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade > 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade > 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade > 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade > 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade > 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade > 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade > 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade > 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ob5s5dl.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp5ob5s5dl.__unittest_L62_C1() [0x428589]\n??:? void tmp5ob5s5dl.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_brukyh5.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_brukyh5.__unittest_L62_C1() [0x428589]\n??:? void tmp_brukyh5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpskv_xe1_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299a5]\n??:? void tmpskv_xe1_.__unittest_L88_C1() [0x428701]\n??:? void tmpskv_xe1_.__modtest() [0x428c10]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e523]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4296fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b1fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b28c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4296d5]\n??:? runModuleUnitTests [0x42e2f9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e68]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7b_md34_.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299dd]\n??:? void tmp7b_md34_.__unittest_L88_C1() [0x428735]\n??:? void tmp7b_md34_.__modtest() [0x428c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429736]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42970d]\n??:? runModuleUnitTests [0x42e331]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429ea0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjcumegwj.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpjcumegwj.__unittest_L62_C1() [0x428589]\n??:? void tmpjcumegwj.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade > 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade > 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade > 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade > 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade > 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade > 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade > 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade > 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade > 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade > 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade > 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ob5s5dl.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp5ob5s5dl.__unittest_L62_C1() [0x428589]\n??:? void tmp5ob5s5dl.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmiyobeno.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpmiyobeno.__unittest_L88_C1() [0x428799]\n??:? void tmpmiyobeno.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        Input: [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n        Output: [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp89k_s8sc.d(71): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp89k_s8sc.__unittest_L67_C1() [0x428589]\n??:? void tmp89k_s8sc.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\n/*\n    Example:\n        float[] grades = [3.7, 3.3, 2.7, 2.3, 1.7, 1.3, 0.7, 0.3, 0.0];\n        string[] letter_grades = numerical_letter_grade(grades);\n        writeln(letter_grades);\n        //output: [\"A\", \"A-\", \"B\", \"B-\", \"C\", \"C-\", \"D\", \"D-\", \"E\"]\n*/\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0_6de721.d(73): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp0_6de721.__unittest_L69_C1() [0x428589]\n??:? void tmp0_6de721.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++) \n    {\n        if (grades[i] == 4.0) \n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7) \n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3) \n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0) \n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7) \n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3) \n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0) \n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7) \n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3) \n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0) \n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7) \n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0) \n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0) \n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwa5rzhbt.d(92): unittest failure\n----------------\n??:? _d_unittestp [0x4299dd]\n??:? void tmpwa5rzhbt.__unittest_L88_C1() [0x428735]\n??:? void tmpwa5rzhbt.__modtest() [0x428c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429736]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42970d]\n??:? runModuleUnitTests [0x42e331]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429ea0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n        \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4nbbxg5g.d(66): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp4nbbxg5g.__unittest_L62_C1() [0x428589]\n??:? void tmp4nbbxg5g.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164554
    }
  ]
}