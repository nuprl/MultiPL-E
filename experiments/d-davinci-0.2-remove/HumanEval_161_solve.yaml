name: HumanEval_161_solve
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n \
  \   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n\
  \    otherwise keep it as it is.\n    If the string contains no letters, reverse\
  \ the string.\n    The function should return the resulted string.\n    Examples\n\
  \                \n*/\nstring solve(string s) \n"
tests: "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(\"AsDf\"\
  ) == \"aSdF\");\n    assert(candidate(\"1234\") == \"4321\");\n    assert(candidate(\"\
  ab\") == \"AB\");\n    assert(candidate(\"#a@C\") == \"#A@c\");\n    assert(candidate(\"\
  #AsdfW^45\") == \"#aSDFw^45\");\n    assert(candidate(\"#6@2\") == \"2@6#\");\n\
  \    assert(candidate(\"#$a^D\") == \"#$A^d\");\n    assert(candidate(\"#ccc\")\
  \ == \"#CCC\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            result ~= toLower(c);\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    if(s.length == 0)\n        return result;\n  \
    \  foreach(i, c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    if(s.length == 0) return s;\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n        {\n  \
    \          if(c.isUpper)\n                result ~= c.toLower;\n            else\n\
    \                result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(i,\
    \ c; s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n\
    \        if(isLetter(c))\n        {\n            result ~= to!string(c ^ ' ');\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(i, c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result.length > 0 ? result : s.dup.reverse;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n\
    \            if(isUpper(c))\n                result ~= toLower(c);\n         \
    \   else\n                result ~= toUpper(c);\n        }\n        else\n   \
    \         result ~= c;\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n       \
    \     result ~= toLower(c) == c ? toUpper(c) : toLower(c);\n        }\n      \
    \  else\n        {\n            result ~= c;\n        }\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string res = \"\";\n    foreach(c; s)\n    {\n\
    \        if(c.isAlpha)\n        {\n            res ~= c.toUpper;\n        }\n\
    \        else\n        {\n            res ~= c;\n        }\n    }\n    return\
    \ res;\n}", "{\n    string res = \"\";\n    foreach(i, c; s)\n    {\n        if\
    \ (c.isLetter)\n        {\n            res ~= c.toLower;\n        }\n        else\n\
    \        {\n            res ~= c;\n        }\n    }\n    return res.length ==\
    \ 0 ? s.dup.reverse : res.reverse;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n \
    \               result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s : result;\n}", "{\n    string result = \"\"\
    ;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n   \
    \     if(isAlpha(c))\n        {\n            result ~= toLower(c) ? toUpper(c)\
    \ : toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s : result;\n}", "{\n    string result = \"\"\
    ;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            result\
    \ ~= to!string(c).toUpper();\n        }\n        else\n        {\n           \
    \ result ~= to!string(c).toLower();\n        }\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n     \
    \   {\n            if(isUpper(c))\n                result ~= toLower(c);\n   \
    \         else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n  \
    \          result ~= toLower(c) ? toUpper(c) : toLower(c);\n        }\n      \
    \  else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            result ~= toLower(c);\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n        {\n  \
    \          if(c.isUpper)\n                result ~= c.toLower;\n            else\n\
    \                result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string res = \"\";\n    foreach(immutable\
    \ c; s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n\
    \                res ~= c.toLower;\n            else\n                res ~= c.toUpper;\n\
    \        }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            result ~= to!string(c ^ ' ');\n        }\n        else\n   \
    \     {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string res = \"\";\n    if (s.length == 0) return res;\n    foreach (c; s)\n\
    \    {\n        if (c.isAlpha)\n        {\n            if (c.isUpper)\n      \
    \          res ~= c.toLower;\n            else\n                res ~= c.toUpper;\n\
    \        }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    if (s.empty)\n        return s;\n    string result;\n    foreach (c; s)\n\
    \    {\n        if (c.isLetter)\n            result ~= c.toLower;\n        else\n\
    \            result ~= c;\n    }\n    if (result.empty)\n        return s.dup.reverse;\n\
    \    return result.reverse;\n}", "{\n    string result = \"\";\n    foreach(i,\
    \ c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s : result;\n}", "{\n    string result = \"\"\
    ;\n    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    foreach(i, c; s)\n\
    \    {\n        if(isLetter(c))\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(i, c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c)\
    \ == c ? toUpper(c) : toLower(c);\n        }\n        else\n        {\n      \
    \      result ~= c;\n        }\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    if(result.length == 0)\n        return s.dup.reverse;\n\
    \    return result;\n}", "{\n    string res = \"\";\n    foreach(i, c; s)\n  \
    \  {\n        if(isAlpha(c))\n        {\n            res ~= toLower(c) ? toUpper(c)\
    \ : toLower(c);\n        }\n        else\n        {\n            res ~= c;\n \
    \       }\n    }\n    return res.length ? res : reverse(s);\n}", "{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isUpper(c))\n                result ~= toLower(c);\n            else\n\
    \                result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    if\
    \ (s.length == 0) return result;\n    foreach(c; s)\n    {\n        if (c.isAlpha)\n\
    \        {\n            if (c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isUpper(c))\n                result ~= toLower(c);\n            else\n\
    \                result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string res = \"\";\n    if(s.length\
    \ == 0) return res;\n    foreach(i, ch; s)\n    {\n        if(isLetter(ch))\n\
    \        {\n            if(isLower(ch)) res ~= toUpper(ch);\n            else\
    \ res ~= toLower(ch);\n        }\n        else res ~= ch;\n    }\n    return res;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    if(s.length == 0)\n        return result;\n    foreach(c; s)\n\
    \    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n     \
    \           result ~= toLower(c);\n            else\n                result ~=\
    \ toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(i, c; s)\n    {\n  \
    \      if(isLetter(c))\n        {\n            if(isUpper(c))\n              \
    \  result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            result ~= toLower(c) ? toUpper(c) : toLower(c);\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string res = \"\";\n    foreach(c; s)\n    {\n\
    \        if(c.isAlpha)\n        {\n            res ~= c.toUpper;\n        }\n\
    \        else\n        {\n            res ~= c;\n        }\n    }\n    return\
    \ res;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string res = \"\";\n    if (s.length == 0) return res;\n    foreach (c; s)\n\
    \    {\n        if (c.isAlpha)\n        {\n            if (c.isUpper)\n      \
    \          res ~= c.toLower;\n            else\n                res ~= c.toUpper;\n\
    \        }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    string res = \"\";\n    foreach(i, c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            res ~= to!string(c ^ ' ');\n        }\n        else\n\
    \        {\n            res ~= c;\n        }\n    }\n    return res;\n}", "{\n\
    \    string result;\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n   \
    \     {\n            result ~= toLower(c);\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            if(isUpper(c))\n                result ~= toLower(c);\n    \
    \        else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result;\n}", "{\n    string result = \"\";\n    if(s.length == 0)\n      \
    \  return s;\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n        {\n\
    \            if(c.isUpper)\n                result ~= c.toLower;\n           \
    \ else\n                result ~= c.toUpper;\n        }\n        else\n      \
    \      result ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\
    \";\n    foreach(i, c; s)\n    {\n        if(isLetter(c))\n        {\n       \
    \     if(isUpper(c))\n                result ~= toLower(c);\n            else\n\
    \                result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string res = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            res ~= to!string(c\
    \ ^ ' ');\n        }\n        else\n        {\n            res ~= c;\n       \
    \ }\n    }\n    return res.empty ? s : res;\n}", "{\n    string result = \"\"\
    ;\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n        {\n          \
    \  if(c.isUpper)\n                result ~= c.toLower;\n            else\n   \
    \             result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string res = \"\";\n    if (s.length\
    \ == 0)\n        return s;\n    foreach (i, c; s)\n    {\n        if (c >= 'a'\
    \ && c <= 'z')\n            res ~= to!string(toUpper(c));\n        else if (c\
    \ >= 'A' && c <= 'Z')\n            res ~= to!string(toLower(c));\n        else\n\
    \            res ~= to!string(c);\n    }\n    return res;\n}", "{\n    string\
    \ result = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            if(isUpper(c))\n                result ~= toLower(c);\n    \
    \        else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n  \
    \          if(isUpper(c))\n                result ~= toLower(c);\n           \
    \ else\n                result ~= toUpper(c);\n        }\n        else\n     \
    \       result ~= c;\n    }\n    if(result.length == 0)\n        return s.dup.reverse;\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n        \
    \        result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n \
    \       if(isLetter(c))\n        {\n            if(isUpper(c))\n             \
    \   result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(i, c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isUpper(c))\n                result ~= toLower(c);\n            else\n\
    \                result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(i,\
    \ c; s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  return result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n    \
    \    if(isAlpha(c))\n        {\n            result ~= toLower(c);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string ret = \"\";\n    if (s.length == 0)\n        return\
    \ ret;\n    foreach (c; s)\n    {\n        if (c.isLetter)\n            ret ~=\
    \ c.toUpper;\n        else\n            ret ~= c;\n    }\n    if (ret.length ==\
    \ s.length)\n        return ret.reverse;\n    else\n        return ret;\n}", "{\n\
    \    string res = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            res ~= to!string(c).toUpper();\n        }\n        else\n\
    \        {\n            res ~= to!string(c).toLower();\n        }\n    }\n   \
    \ return res;\n}", "{\n    if (s.length == 0)\n        return s;\n    string result\
    \ = \"\";\n    foreach (c; s)\n    {\n        if (c.isLetter)\n        {\n   \
    \         if (c.isUpper)\n                result ~= c.toLower;\n            else\n\
    \                result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(ch;\
    \ s)\n    {\n        if(isAlpha(ch))\n        {\n            if(isLower(ch))\n\
    \                result ~= toUpper(ch);\n            else\n                result\
    \ ~= toLower(ch);\n        }\n        else\n            result ~= ch;\n    }\n\
    \    return result;\n}", "{\n    string res = \"\";\n    foreach(c; s)\n    {\n\
    \        if(isAlpha(c))\n        {\n            res ~= toLower(c) == c ? toUpper(c)\
    \ : toLower(c);\n        }\n        else\n        {\n            res ~= c;\n \
    \       }\n    }\n    return res.length == 0 ? s : res;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n        {\n  \
    \          if(c.isUpper)\n                result ~= c.toLower;\n            else\n\
    \                result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(ch;\
    \ s)\n    {\n        if(isAlpha(ch))\n        {\n            if(isLower(ch))\n\
    \                result ~= toUpper(ch);\n            else\n                result\
    \ ~= toLower(ch);\n        }\n        else\n            result ~= ch;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(i, c; s)\n\
    \    {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    if(result.length == 0)\n    {\n        return s;\n    }\n    else\n \
    \   {\n        return result;\n    }\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c.isAlpha)\n        {\n            result ~= c.toLower.toUpper;\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    if(result.length == 0)\n    {\n        return s.dup.reverse;\n    }\n\
    \    return result;\n}", "{\n    string res = \"\";\n    if(s.length == 0) return\
    \ res;\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isUpper(c)) res ~= toLower(c);\n            else res ~= toUpper(c);\n\
    \        }\n        else res ~= c;\n    }\n    return res;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n\
    \            if(isUpper(c))\n                result ~= toLower(c);\n         \
    \   else\n                result ~= toUpper(c);\n        }\n        else\n   \
    \         result ~= c;\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n      \
    \      result ~= to!string(c^' ');\n        }\n        else\n        {\n     \
    \       result ~= c;\n        }\n    }\n    if(result.length == 0)\n    {\n  \
    \      return s;\n    }\n    return result;\n}", "{\n    string res = \"\";\n\
    \    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n            c = c.toLower;\n\
    \            res ~= c.toUpper;\n        }\n        else\n        {\n         \
    \   res ~= c;\n        }\n    }\n    return res;\n}", "{\n    string res = \"\"\
    ;\n    bool hasLetter = false;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            hasLetter = true;\n            res ~= to!string(c);\n\
    \        }\n        else\n        {\n            res ~= to!string(c);\n      \
    \  }\n    }\n    if(hasLetter)\n    {\n        return res.toLower().toUpper().toLower();\n\
    \    }\n    else\n    {\n        return res.reverse();\n    }\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n\
    \            result ~= toLower(c) ? toUpper(c) : toLower(c);\n        }\n    \
    \    else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    if(s.length == 0) return s;\n    foreach(i,c;s)\n\
    \    {\n        if(c.isLetter)\n        {\n            if(c.isUpper) result ~=\
    \ c.toLower;\n            else result ~= c.toUpper;\n        }\n        else result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    if(s.length == 0)\n        return\
    \ s;\n    string result = \"\";\n    bool hasLetter = false;\n    foreach(c; s)\n\
    \    {\n        if(isLetter(c))\n        {\n            hasLetter = true;\n  \
    \          result ~= to!string(c).toLower();\n        }\n        else\n      \
    \      result ~= to!string(c);\n    }\n    if(hasLetter)\n        return result.toUpper();\n\
    \    else\n        return result.reverse();\n}", "{\n    string result = \"\"\
    ;\n    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n   \
    \ {\n        if(isAlpha(c))\n        {\n            result ~= to!string(c ^ '\
    \ ');\n        }\n        else\n        {\n            result ~= c;\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= to!string(c\
    \ ^ ' ');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n \
    \               result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    if(s.length == 0)\n        return s;\n    string\
    \ result = \"\";\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n      \
    \  {\n            if(c.isUpper)\n                result ~= c.toLower;\n      \
    \      else\n                result ~= c.toUpper;\n        }\n        else\n \
    \           result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n  \
    \          result ~= toLower(c) ? toUpper(c) : toLower(c);\n        }\n      \
    \  else\n        {\n            result ~= c;\n        }\n    }\n    return result.length\
    \ == 0 ? s.dup.reverse : result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n  \
    \              result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n\
    \        if(c.isLetter)\n        {\n            if(c.isUpper)\n              \
    \  result ~= c.toLower;\n            else\n                result ~= c.toUpper;\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    if(s.length == 0) return s;\n    string res = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c.isAlpha)\n        {\n            if(c.isUpper)\n   \
    \             res ~= c.toLower;\n            else\n                res ~= c.toUpper;\n\
    \        }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    string result = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    if(result.length == 0)\n        return s.dup.reverse;\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(i, c; s)\n\
    \    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n       \
    \         result ~= c.toLower;\n            else\n                result ~= c.toUpper;\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(c.isAlpha)\n        {\n   \
    \         result ~= c.toUpper;\n        }\n        else\n        {\n         \
    \   result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    foreach(i, c; s)\n\
    \    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n     \
    \           result ~= toLower(c);\n            else\n                result ~=\
    \ toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   if (c.isAlpha)\n        {\n            result ~= c.toUpper;\n        }\n \
    \       else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(i, c; s)\n    {\n  \
    \      if (isLetter(c))\n        {\n            if (isUpper(c))\n            \
    \    result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string res = \"\";\n    foreach(i, c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            res ~= to!string(c ^ ' ');\n        }\n        else\n\
    \        {\n            res ~= c;\n        }\n    }\n    return res;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    if (s.length == 0) return s;\n    string res = \"\";\n    foreach (c; s)\n\
    \    {\n        if (isLetter(c))\n        {\n            if (isUpper(c))\n   \
    \             res ~= toLower(c);\n            else\n                res ~= toUpper(c);\n\
    \        }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    string res = \"\";\n    if (s.length == 0) return res;\n    foreach(i, c;\
    \ s)\n    {\n        if (c.isLetter)\n        {\n            if (c.isUpper)\n\
    \                res ~= c.toLower;\n            else\n                res ~= c.toUpper;\n\
    \        }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result;\n}", "{\n    string res = \"\";\n    foreach(i, c; s)\n    {\n   \
    \     if(isLetter(c))\n        {\n            if(isUpper(c))\n               \
    \ res ~= toLower(c);\n            else\n                res ~= toUpper(c);\n \
    \       }\n        else\n            res ~= c;\n    }\n    return res.length ==\
    \ 0 ? s : res;\n}", "{\n    if(s.length == 0) return s;\n    string res = \"\"\
    ;\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n          \
    \  if(isLower(c))\n                res ~= toUpper(c);\n            else\n    \
    \            res ~= toLower(c);\n        }\n        else\n            res ~= c;\n\
    \    }\n    return res;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n\
    \    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n      \
    \          result ~= toLower(c);\n            else\n                result ~=\
    \ toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   if(isLetter(c))\n        {\n            if(isUpper(c))\n                result\
    \ ~= toLower(c);\n            else\n                result ~= toUpper(c);\n  \
    \      }\n        else\n            result ~= c;\n    }\n    if(result.length\
    \ == 0)\n        return s.dup.reverse;\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    if(s.length == 0)\n        return result;\n    foreach(i,\
    \ c; s)\n    {\n        if(c.isAlpha)\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n\
    \        if(c.isLetter)\n        {\n            if(c.isUpper)\n              \
    \  result ~= c.toLower;\n            else\n                result ~= c.toUpper;\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string res = \"\";\n    if(s.length == 0)\n        return res;\n \
    \   foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n            if(c.isUpper)\n\
    \                res ~= c.toLower;\n            else\n                res ~= c.toUpper;\n\
    \        }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            if(isUpper(c))\n                result ~= toLower(c);\n    \
    \        else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n   \
    \     if(isAlpha(c))\n        {\n            result ~= toLower(c);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   if(c.isAlpha)\n        {\n            result ~= c.toLower;\n        }\n  \
    \      else\n        {\n            result ~= c;\n        }\n    }\n    if(result.length\
    \ == 0)\n    {\n        return s.reverse;\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(i, c; s)\n    {\n        if (c.isLetter)\n\
    \        {\n            if (c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    if(s.length == 0)\n        return s;\n    foreach(c; s)\n    {\n\
    \        if(isAlpha(c))\n        {\n            if(isUpper(c))\n             \
    \   result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result;\n    foreach(c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            result ~= to!string(c ^ ' ');\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(i, c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            if(c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isUpper(c))\n                result ~= toLower(c);\n            else\n\
    \                result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result.length == 0 ? s : result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            if(isUpper(c))\n                result ~= toLower(c);\n    \
    \        else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    if (s.length\
    \ == 0)\n        return s;\n    string result;\n    foreach (i, c; s)\n    {\n\
    \        if (c.isLetter)\n            result ~= c.toUpper;\n        else\n   \
    \         result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    if (s.length == 0)\n        return s;\n    foreach (i, c; s)\n    {\n   \
    \     if (isLetter(c))\n            result ~= to!string(c).toUpper();\n      \
    \  else\n            result ~= to!string(c).toLower();\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            result ~= toLower(c) ? toUpper(c) : toLower(c);\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string result\
    \ = \"\";\n    if(s.length == 0)\n        return result;\n    foreach(c; s)\n\
    \    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n       \
    \         result ~= c.toLower;\n            else\n                result ~= c.toUpper;\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(i, c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string res =\
    \ \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n       \
    \     res ~= toLower(c);\n        }\n        else\n        {\n            res\
    \ ~= c;\n        }\n    }\n    return res.length == 0 ? s : res;\n}", "{\n   \
    \ if(s.length == 0)\n        return s;\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n \
    \               result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n   \
    \     if(c.isLetter)\n        {\n            if(c.isUpper)\n                result\
    \ ~= c.toLower;\n            else\n                result ~= c.toUpper;\n    \
    \    }\n        else\n            result ~= c;\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n     \
    \   {\n            result ~= c.toLower;\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    if(result.length == 0)\n    {\n\
    \        return s.reverse;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isUpper(c))\n                result ~= toLower(c);\n            else\n\
    \                result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isLetter(c))\n        {\n            result ~= to!string(c\
    \ ^ ' ');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(i,\
    \ ch; s)\n    {\n        if(isAlpha(ch))\n        {\n            if(isUpper(ch))\n\
    \                result ~= toLower(ch);\n            else\n                result\
    \ ~= toUpper(ch);\n        }\n        else\n            result ~= ch;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    if(s.length == 0)\
    \ return s;\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n\
    \            if(isLower(c)) result ~= toUpper(c);\n            else result ~=\
    \ toLower(c);\n        }\n        else result ~= c;\n    }\n    return result;\n\
    }", "{\n    string res = \"\";\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                res ~= c.toLower;\n   \
    \         else\n                res ~= c.toUpper;\n        }\n        else\n \
    \           res ~= c;\n    }\n    return res;\n}", "{\n    string res;\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            res ~= to!string(c\
    \ ^ ' ');\n        }\n        else\n        {\n            res ~= c;\n       \
    \ }\n    }\n    return res.empty ? s : res;\n}", "{\n    string res = \"\";\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                res ~= toLower(c);\n            else\n                res ~=\
    \ toUpper(c);\n        }\n        else\n            res ~= c;\n    }\n    return\
    \ res.length == 0 ? s : res;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c.isAlpha)\n        {\n            if(c.isUpper)\n   \
    \             result ~= c.toLower;\n            else\n                result ~=\
    \ c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n    if(result.length\
    \ == 0)\n        return s.reverse;\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(isLetter(c))\n        {\n \
    \           if(isUpper(c))\n                result ~= toLower(c);\n          \
    \  else\n                result ~= toUpper(c);\n        }\n        else\n    \
    \        result ~= c;\n    }\n    return result;\n}", "{\n    string res = \"\"\
    ;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                res ~= toLower(c);\n            else\n                res ~=\
    \ toUpper(c);\n        }\n        else\n            res ~= c;\n    }\n    return\
    \ res;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n  \
    \          if(isUpper(c))\n                result ~= toLower(c);\n           \
    \ else\n                result ~= toUpper(c);\n        }\n        else\n     \
    \       result ~= c;\n    }\n    return result.length == 0 ? s : result;\n}",
  "{\n    string res;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n\
    \            res ~= toLower(c) ? toUpper(c) : toLower(c);\n        }\n       \
    \ else\n        {\n            res ~= c;\n        }\n    }\n    return res.length\
    \ == 0 ? s.dup.reverse : res;\n}", "{\n    string result = \"\";\n    if(s.length\
    \ == 0)\n        return result;\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string res;\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            res\
    \ ~= toLower(c);\n        }\n        else\n        {\n            res ~= c;\n\
    \        }\n    }\n    return res;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(c.isAlpha)\n        {\n            result ~= c.toLower.toUpper;\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n      \
    \  {\n            if(c.isUpper)\n                result ~= c.toLower;\n      \
    \      else\n                result ~= c.toUpper;\n        }\n        else\n \
    \           result ~= c;\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result;\n}", "{\n    string result = \"\";\n    if(s.length == 0)\n      \
    \  return s;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n  \
    \          if(c.isUpper)\n                result ~= c.toLower;\n            else\n\
    \                result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string res;\n    foreach(c; s)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            res ~= to!string(c ^ ' ');\n       \
    \ }\n        else\n        {\n            res ~= c;\n        }\n    }\n    return\
    \ res;\n}", "{\n    int len = s.length;\n    string res = \"\";\n    if(len ==\
    \ 0)\n        return res;\n    foreach(i; 0..len)\n    {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z')\n            res ~= to!string(toUpper(s[i]));\n        else\
    \ if(s[i] >= 'A' && s[i] <= 'Z')\n            res ~= to!string(toLower(s[i]));\n\
    \        else\n            res ~= to!string(s[i]);\n    }\n    return res;\n}",
  "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n     \
    \       result ~= c.toUpper;\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isUpper(c))\n                result ~= toLower(c);\n            else\n\
    \                result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n \
    \               result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n   \
    \ {\n        if(c.isAlpha)\n        {\n            result ~= c.toUpper;\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n       \
    \         result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    if(result.length == 0)\n        return s.dup.reverse;\n\
    \    return result;\n}", "{\n    string res;\n    if(s.length == 0)\n        return\
    \ s;\n    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n         \
    \   if(isUpper(c))\n                res ~= toLower(c);\n            else\n   \
    \             res ~= toUpper(c);\n        }\n        else\n            res ~=\
    \ c;\n    }\n    return res;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isLetter(c))\n        {\n            result ~= to!string(c\
    \ ^ ' ');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    return result;\n}", "{\n    string result;\n    if(s.empty)\n\
    \        return s;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n       \
    \     result ~= toLower(c) ? toUpper(c) : toLower(c);\n        else\n        \
    \    result ~= c;\n    }\n    return result;\n}", "{\n    string res = \"\";\n\
    \    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n            res\
    \ ~= c.toLower.toUpper;\n        }\n        else\n        {\n            res ~=\
    \ c;\n        }\n    }\n    return res.length == 0 ? s.dup.reverse : res;\n}",
  "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.empty ? s.reverse : result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n  \
    \          if(isUpper(c))\n                result ~= toLower(c);\n           \
    \ else\n                result ~= toUpper(c);\n        }\n        else\n     \
    \       result ~= c;\n    }\n    if(result.length == 0)\n        return reverse(s);\n\
    \    return result;\n}", "{\n    string res = \"\";\n    foreach(c; s)\n    {\n\
    \        if(c.isAlpha)\n        {\n            res ~= c.toLower;\n        }\n\
    \        else\n        {\n            res ~= c;\n        }\n    }\n    return\
    \ res.length == 0 ? s.dup.reverse : res.reverse;\n}", "{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n        \
    \    result ~= c.toLower;\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result.length == 0 ? s : result;\n}", "{\n\
    \    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            if(isUpper(c))\n                result ~= toLower(c);\n    \
    \        else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   if(result.length == 0)\n        return s.dup.reverse;\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string res = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n  \
    \      {\n            res ~= c.toLower;\n        }\n        else\n        {\n\
    \            res ~= c;\n        }\n    }\n    return res;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n\
    \            result ~= c.toLower;\n        }\n        else\n        {\n      \
    \      result ~= c;\n        }\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result.reverse;\n}", "{\n    string res = \"\";\n    foreach(c; s)\n    {\n\
    \        if(c.isLetter)\n        {\n            if(c.isUpper)\n              \
    \  res ~= c.toLower;\n            else\n                res ~= c.toUpper;\n  \
    \      }\n        else\n            res ~= c;\n    }\n    return res.length ==\
    \ 0 ? s.dup.reverse : res;\n}", "{\n    string result = \"\";\n    foreach(i,\
    \ c; s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c)\
    \ ? toUpper(c) : toLower(c);\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n   \
    \     if(c.isLetter)\n        {\n            if(c.isUpper)\n                result\
    \ ~= c.toLower;\n            else\n                result ~= c.toUpper;\n    \
    \    }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s.dup.reverse : result;\n}", "{\n    string result = \"\";\n    foreach(i,\
    \ c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isLower(c))\n\
    \                result ~= toUpper(c);\n            else\n                result\
    \ ~= toLower(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    if(s.length == 0) return s;\n    string res =\
    \ \"\";\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n        {\n    \
    \        if(c.isUpper) res ~= c.toLower;\n            else res ~= c.toUpper;\n\
    \        }\n        else res ~= c;\n    }\n    return res;\n}", "{\n    string\
    \ res = \"\";\n    foreach(i, c; s)\n    {\n        if(isLetter(c))\n        {\n\
    \            res ~= to!string(c).toUpper();\n        }\n        else\n       \
    \ {\n            res ~= to!string(c).toLower();\n        }\n    }\n    return\
    \ res;\n}", "{\n    string result = \"\";\n    foreach(i, c; s)\n    {\n     \
    \   if(isLetter(c))\n        {\n            if(isUpper(c))\n                result\
    \ ~= toLower(c);\n            else\n                result ~= toUpper(c);\n  \
    \      }\n        else\n            result ~= c;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    if(s.length == 0)\n        return result;\n \
    \   foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    return s.empty ? s : s.map!(a => a.isLetter ?\
    \ a.toLower.isUpper ? a.toLower : a.toUpper : a).array.join;\n}", "{\n    string\
    \ res = \"\";\n    if(s.length == 0) return res;\n    foreach(c; s)\n    {\n \
    \       if(c.isAlpha)\n        {\n            if(c.isUpper) res ~= c.toLower;\n\
    \            else res ~= c.toUpper;\n        }\n        else res ~= c;\n    }\n\
    \    return res;\n}", "{\n    string result = \"\";\n    if(s.length == 0)\n \
    \       return s;\n    foreach(i, c; s)\n    {\n        if(isLetter(c))\n    \
    \    {\n            if(isUpper(c))\n                result ~= toLower(c);\n  \
    \          else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string ret =\
    \ \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n       \
    \     if(isLower(c))\n                ret ~= toUpper(c);\n            else\n \
    \               ret ~= toLower(c);\n        }\n        else\n            ret ~=\
    \ c;\n    }\n    return ret;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n   \
    \ {\n        if(isLetter(c))\n        {\n            result ~= to!string(c ^ '\
    \ ');\n        }\n        else\n        {\n            result ~= c;\n        }\n\
    \    }\n    return result;\n}", "{\n    string res = \"\";\n    if(s.length ==\
    \ 0)\n        return res;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                res ~= c.toLower;\n   \
    \         else\n                res ~= c.toUpper;\n        }\n        else\n \
    \           res ~= c;\n    }\n    return res;\n}", "{\n    string result = \"\"\
    ;\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n          \
    \  if(isUpper(c))\n                result ~= toLower(c);\n            else\n \
    \               result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result.length == 0 ? s : result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            if(isUpper(c))\n                result ~= toLower(c);\n    \
    \        else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result;\n}", "{\n    string result = \"\";\n    foreach(i, c; s)\n    {\n\
    \        if(isLetter(c))\n        {\n            if(isUpper(c))\n            \
    \    result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            result ~= to!string(c);\n        }\n        else\n   \
    \     {\n            result ~= to!string(c);\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n        {\n  \
    \          if(isUpper(c))\n                result ~= toLower(c);\n           \
    \ else\n                result ~= toUpper(c);\n        }\n        else\n     \
    \       result ~= c;\n    }\n    if(result.length == 0)\n        return s.dup.reverse;\n\
    \    return result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n  \
    \      if(isAlpha(c))\n        {\n            if(isUpper(c))\n               \
    \ result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string res;\n    if(s.empty)\n        return\
    \ s;\n    foreach(i,c;s)\n    {\n        if(c.isLetter)\n            res ~= c.toLower;\n\
    \        else\n            res ~= c;\n    }\n    if(res.empty)\n        return\
    \ s.reverse;\n    return res.reverse;\n}", "{\n    string res = \"\";\n    foreach(i,\
    \ c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                res ~= toLower(c);\n            else\n                res ~=\
    \ toUpper(c);\n        }\n        else\n            res ~= c;\n    }\n    return\
    \ res;\n}", "{\n    string result = \"\";\n    if(s.length == 0)\n        return\
    \ result;\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n        {\n  \
    \          if(c.isUpper)\n                result ~= c.toLower;\n            else\n\
    \                result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isLetter(c))\n        {\n            result ~= toLower(c)\
    \ ? toUpper(c) : toLower(c);\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(i, c; s)\n    {\n        if(c.isLetter)\n        {\n            result\
    \ ~= c.toUpper;\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(ch; s)\n    {\n        if(isAlpha(ch))\n        {\n            if(isLower(ch))\n\
    \                result ~= toUpper(ch);\n            else\n                result\
    \ ~= toLower(ch);\n        }\n        else\n            result ~= ch;\n    }\n\
    \    return result;\n}", "{\n    string res = \"\";\n    foreach(c; s)\n    {\n\
    \        if(isAlpha(c))\n        {\n            res ~= toLower(c) == c ? toUpper(c)\
    \ : toLower(c);\n        }\n        else\n        {\n            res ~= c;\n \
    \       }\n    }\n    return res.length == 0 ? s : res;\n}", "{\n    string result\
    \ = \"\";\n    foreach(i; 0 .. s.length)\n    {\n        if(isAlpha(s[i]))\n \
    \       {\n            if(isUpper(s[i]))\n            {\n                result\
    \ ~= toLower(s[i]);\n            }\n            else\n            {\n        \
    \        result ~= toUpper(s[i]);\n            }\n        }\n        else\n  \
    \      {\n            result ~= s[i];\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(i; 0 .. s.length)\n    {\n        if(isAlpha(s[i]))\n\
    \        {\n            if(isUpper(s[i]))\n            {\n                result\
    \ ~= toLower(s[i]);\n            }\n            else\n            {\n        \
    \        result ~= toUpper(s[i]);\n            }\n        }\n        else\n  \
    \      {\n            result ~= s[i];\n        }\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n      \
    \      result ~= c.toLower;\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result.length == 0 ? s.reverse : result.reverse;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
