language: d
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 &&\
    \ e % 2 != 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2 == 0 && e%2 !=\
    \ 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(immutable i, immutable e; lst)\n    {\n       \
    \ if(i % 2 == 0 && e % 2 != 0)\n        {\n            sum += e;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n \
    \   assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   return lst.enumerate.filter!(a => a.index % 2 == 0 && a.value % 2 != 0).sum!(a\
    \ => a.value)();\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnb0awp8e.d(12): Error: no property `enumerate` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnb0awp8e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 1 && lst.indexOf(a) % 2 == 0).sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm07o3vrd.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm07o3vrd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 &&\
    \ e % 2 != 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2 == 0 && e%2 !=\
    \ 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 1 && a.indexof % 2 == 0).sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvt_3nab4.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvt_3nab4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 1 && a.indexof % 2 == 0).sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvt_3nab4.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvt_3nab4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\n/*\nimport std.stdio;\nunittest\n{\n    alias candidate = solution;\n\n   \
    \ assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L,\
    \ 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr97aovqb.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr97aovqb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 1 && a.indexof % 2 == 0).sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvt_3nab4.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvt_3nab4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 1 && lst.indexOf(a) % 2 == 0).sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm07o3vrd.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm07o3vrd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2 == 0 && e%2 ==\
    \ 1)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 2 == 0 && e\
    \ % 2 != 0)\n            sum += e;\n    }\n    return sum;\n}\nunittest\n{\n \
    \   alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n\
    \    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long res = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n            res += e;\n    }\n    return res;\n}\nunittest\n{\n   \
    \ alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n\
    \    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 1).filter!(a => a % 2 == 0).sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rasxhhd.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rasxhhd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(index, value; lst)\n    {\n        if(index % 2\
    \ == 0 && value % 2 != 0)\n        {\n            sum += value;\n        }\n \
    \   }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n  \
    \  assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 2 == 0 && e\
    \ % 2 != 0)\n            sum += e;\n    }\n    return sum;\n}\nunittest\n{\n \
    \   alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n\
    \    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i+=2)\n    {\n        if(lst[i]\
    \ % 2 != 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   return lst.filter!(a => a % 2 == 1 && a.indexof % 2 == 0).sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvt_3nab4.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvt_3nab4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2==0 && e%2!=0)\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2==0 && e%2!=0)\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) ==\
    \ 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,v; lst)\n    {\n        if(i%2==0 && v%2!=0)\n\
    \            sum += v;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L,\
    \ 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 2 == 0 && e\
    \ % 2 != 0)\n            sum += e;\n    }\n    return sum;\n}\nunittest\n{\n \
    \   alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n\
    \    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2 == 0 && e%2 !=\
    \ 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 &&\
    \ v % 2 != 0)\n        {\n            result += v;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L,\
    \ 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n\
    \    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L,\
    \ 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L,\
    \ 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.length; i++)\n    {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = solution;\n\
    \n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L,\
    \ 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n\
    \    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) ==\
    \ 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 0 && e %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers, return the sum of all of the odd elements that are in even positions.\n\
    \    \n\n    Examples\n                \n*/\nlong solution(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 0 && v %\
    \ 2 != 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L,\
    \ 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L,\
    \ 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L,\
    \ 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L,\
    \ 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163114
