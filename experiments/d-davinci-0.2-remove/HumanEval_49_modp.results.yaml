language: d
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    if (n == 0)\n        return 1;\n    else if (n == 1)\n        return 2;\n\
    \    else\n    {\n        long m = modp(n / 2, p);\n        if (n % 2 == 0)\n\
    \            return (m * m) % p;\n        else\n            return (2 * m * m)\
    \ % p;\n    }\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuh79bhu9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res * res % p;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcu68b568.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn true if n is prime.\n        \
    \                \n*/\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzw14rjk8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n      \
    \  {\n            r = (r * 2) % p;\n        }\n        n = n / 2;\n    }\n   \
    \ return r;\n}\n/*\nReturn the number of elements in the group of order n.\n \
    \                       \n*/\nlong order(long n) \n{\n    long r = 1;\n    long\
    \ p = 2;\n    while (p <= n) \n    {\n        long e = 0;\n        while (n %\
    \ p == 0) \n        {\n            n = n / p;\n            e = e + 1;\n      \
    \  }\n        r = r * (pow(p, e) - pow(p, e - 1));\n        p = p + 1;\n    }\n\
    \    return r;\n}\n/*\nReturn the order of a in the group of order n.\n      \
    \                  \n*/\nlong order(long a, long n) \n{\n    long r = 1;\n   \
    \ long p = 2;\n    while (p <= n) \n    {\n        long e = 0;\n        while\
    \ (n % p == 0) \n        {\n            n = n / p;\n            e = e + 1;\n \
    \       }\n        if (e > 0) \n        {\n            long m = modp(a, pow(p,\
    \ e));\n            if (m == 1) \n            {\n                r = r * (pow(p,\
    \ e) - pow(p, e - 1));\n            }\n            else \n            {\n    \
    \            long o = 1;\n                while (m != 1) \n                {\n\
    \                    m = (m * a) % pow(p, e);\n                    o = o + 1;\n\
    \                }\n                r = r * o;\n            }\n        }\n   \
    \     p = p + 1;\n    }\n    return r;\n}\n/*\nReturn the order of a in the group\
    \ of order n.\n                        \n*/\nlong order(long a, long n) \n{\n\
    \    long r = 1;\n    long p = 2;\n    while (p <= n) \n    {\n\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphug649m9.d(90): Error: found \''unittest\'' instead of statement\n/tmp/tmphug649m9.d(102):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphug649m9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcofogxj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n         \
    \   res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3k5w6vd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n           \
    \ r = (r * 2) % p;\n        }\n        n = n / 2;\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpurvn1_qk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2 ==\
    \ 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n /=\
    \ 2;\n    }\n    return res;\n}\n/*\nReturn the Jacobi symbol (a/b) (be aware\
    \ of numerics).\n                        \n*/\nlong jacobi(long a, long b) \n\
    {\n    long res = 1;\n    while (a != 0) {\n        while (a % 2 == 0) {\n   \
    \         a /= 2;\n            if (b % 8 == 3 || b % 8 == 5)\n               \
    \ res = -res;\n        }\n        long t = a;\n        a = b;\n        b = t;\n\
    \        if (a % 4 == 3 && b % 4 == 3)\n            res = -res;\n        a %=\
    \ b;\n    }\n    if (b == 1)\n        return res;\n    return 0;\n}\n/*\nReturn\
    \ true if n is prime (be aware of numerics).\n                        \n*/\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6wml0bs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) {\n        if (n & 1)\n            result\
    \ = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxp_bvj3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    for (long i = 0; i < n; i++) \n    {\n        res = (res\
    \ * 2) % p;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpad52grb_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    for (int i = 0; i < n; i++) \n    {\n        r = (r * 2)\
    \ % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n\
    \    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvwc8dd60.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ % 2 == 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n    \
    \    n /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5sfz8l7d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0) \n    {\n        if (power & 1) \n        {\n            result = (result\
    \ * value) % p;\n        }\n        value = (value * value) % p;\n        power\
    \ /= 2;\n    }\n    return result;\n}\n/*\nReturn true if n is prime.\n      \
    \                  \n*/\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9te8d_5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    for (long i = 0; i < n; i++)\n    {\n        r = (r * 2)\
    \ % p;\n    }\n    return r;\n}\n/*\nReturn the number of bits in the binary representation\
    \ of n.\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyc0hnvq.d(16): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxyc0hnvq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn true if n is prime.\n        \
    \                \n*/\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_26k2f8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    if (n == 0)\n        return 1;\n    else if (n == 1)\n        return 2;\n\
    \    else\n    {\n        long x = modp(n >> 1, p);\n        x = (x * x) % p;\n\
    \        if (n & 1)\n            x = (x * 2) % p;\n        return x;\n    }\n\
    }\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1u66ox7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res * res % p;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcu68b568.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n = n / 2;\n    }\n    return result;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp2(long n, long p) \n{\n    long result = 1;\n    long a = 2;\n    while\
    \ (n > 0) \n    {\n        if (n % 2 == 1) \n        {\n            result = (result\
    \ * a) % p;\n        }\n        a = (a * a) % p;\n        n = n / 2;\n    }\n\
    \    return result;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    \
    \                    \n*/\nlong modp3(long n, long p) \n{\n    long result = 1;\n\
    \    long a = 2;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n      \
    \  {\n            result = (result * a) % p;\n        }\n        a = (a * a) %\
    \ p;\n        n = n / 2;\n    }\n    return result;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp4(long n,\
    \ long p) \n{\n    long result = 1;\n    long a = 2;\n    while (n > 0) \n   \
    \ {\n        if (n % 2 == 1) \n        {\n            result = (result * a) %\
    \ p;\n        }\n        a = (a * a) % p;\n        n = n / 2;\n    }\n    return\
    \ result;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n              \
    \          \n*/\nlong modp5(long n, long p) \n{\n    long result = 1;\n    long\
    \ a = 2;\n    while (n > 0) \n    {\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj97f_j4k.d(89): Error: found \''unittest\'' instead of statement\n/tmp/tmpj97f_j4k.d(101):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj97f_j4k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) res\
    \ = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn the Jacobi symbol (a/b) (be aware of numerics).\n      \
    \                  \n*/\nlong jacobi(long a, long b) \n{\n    long res = 1;\n\
    \    while (a != 0) {\n        while (a % 2 == 0) {\n            a /= 2;\n   \
    \         if (b % 8 == 3 || b % 8 == 5) res = -res;\n        }\n        long t\
    \ = a;\n        a = b;\n        b = t;\n        if (a % 4 == 3 && b % 4 == 3)\
    \ res = -res;\n        a %= b;\n    }\n    if (b == 1) return res;\n    return\
    \ 0;\n}\n/*\nReturn true if n is prime.\n                        \n*/\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjv7azft.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk9jc7om.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ % 2 == 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n    \
    \    n = n / 2;\n    }\n    return res;\n}\n/*\nReturn true if n is prime.\n \
    \                       \n*/\nunittest\n{\n    alias candidate = modp;\n\n   \
    \ assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq4q_5lay.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        if (n > 0)\n            res\
    \ = (res * res) % p;\n    }\n    return res;\n}\n/*\nReturn the number of bits\
    \ in n.\n                        \n*/\nlong bits(long n) \n{\n    long res = 0;\n\
    \    while (n > 0) \n    {\n        res++;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of bits in n.\n                        \n*/\n\
    long bits(long n) \n{\n    long res = 0;\n    while (n > 0) \n    {\n        res++;\n\
    \        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of bits in\
    \ n.\n                        \n*/\nlong bits(long n) \n{\n    long res = 0;\n\
    \    while (n > 0) \n    {\n        res++;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of bits in n.\n                        \n*/\n\
    long bits(long n) \n{\n    long res = 0;\n    while (n > 0) \n    {\n        res++;\n\
    \        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of bits in\
    \ n.\n                        \n*/\nlong bits(long n) \n{\n    long res = 0;\n\
    \    while (n > 0) \n    {\n        res++;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of bits in n.\n                        \n*/\n\
    long bits(long n) \n{\n    long res = 0;\n    while (n > 0) \n    {\n        res++;\n\
    \        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of bits in\
    \ n.\n                        \n*/\nlong bits(long n) \n{\n    long res = 0;\n\
    \    while (n > 0) \n    {\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8qbplsv3.d(113): Error: found \''unittest\'' instead of statement\n/tmp/tmp8qbplsv3.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qbplsv3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk9jc7om.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of elements of the\
    \ multiplicative group of integers modulo p.\n                        \n*/\nlong\
    \ phi(long p) \n{\n    long res = p;\n    for (long i = 2; i * i <= p; ++i) \n\
    \    {\n        if (p % i == 0) \n        {\n            while (p % i == 0) \n\
    \                p /= i;\n            res -= res / i;\n        }\n    }\n    if\
    \ (p > 1) \n        res -= res / p;\n    return res;\n}\n/*\nReturn the number\
    \ of elements of the multiplicative group of integers modulo p^k.\n          \
    \              \n*/\nlong phi(long p, long k) \n{\n    return (p - 1) * modp(k\
    \ - 1, p);\n}\n/*\nReturn the number of elements of the multiplicative group of\
    \ integers modulo n.\n                        \n*/\nlong phi(long n) \n{\n   \
    \ long res = n;\n    for (long i = 2; i * i <= n; ++i) \n    {\n        if (n\
    \ % i == 0) \n        {\n            while (n % i == 0) \n                n /=\
    \ i;\n            res -= res / i;\n        }\n    }\n    if (n > 1) \n       \
    \ res -= res / n;\n    return res;\n}\n/*\nReturn the number of elements of the\
    \ multiplicative group of integers modulo n.\n                        \n*/\nlong\
    \ phi(long n) \n{\n    long res = n;\n    for (long i = 2; i * i <= n; ++i) \n\
    \    {\n        if (n % i == 0) \n        {\n            while (n % i == 0) \n\
    \                n /= i;\n            res -= res / i;\n        }\n    }\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfdcgejr1.d(84): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdcgejr1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n      \
    \      result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n\
    \    return result;\n}\n/*\nReturn the number of digits of n in base b.\n    \
    \                    \n*/\nlong digits(long n, long b) \n{\n    long result =\
    \ 0;\n    while (n > 0) \n    {\n        n /= b;\n        result++;\n    }\n \
    \   return result;\n}\n/*\nReturn the number of digits of n in base 2.\n     \
    \                   \n*/\nlong digits(long n) \n{\n    return digits(n, 2);\n\
    }\n/*\nReturn the number of digits of n! in base b.\n                        \n\
    */\nlong digitsFact(long n, long b) \n{\n    long result = 0;\n    for (long i\
    \ = 2; i <= n; i++) \n        result += digits(i, b);\n    return result;\n}\n\
    /*\nReturn the number of digits of n! in base 2.\n                        \n*/\n\
    long digitsFact(long n) \n{\n    return digitsFact(n, 2);\n}\n/*\nReturn the sum\
    \ of the digits of n in base b.\n                        \n*/\nlong sumDigits(long\
    \ n, long b) \n{\n    long result = 0;\n    while (n > 0) \n    {\n        result\
    \ += n % b;\n        n /= b;\n    }\n    return result;\n}\n/*\nReturn the sum\
    \ of the digits of n in base 10.\n                        \n*/\nlong sumDigits(long\
    \ n) \n{\n    return sumDigits(n, 10);\n}\n/*\nReturn the sum of the digits of\
    \ n! in base b.\n                        \n*/\nlong sumDigitsFact(long n, long\
    \ b) \n{\n    long result = 0;\n    for (long i = 2; i <= n; i++) \n        result\
    \ += sumDigits(i, b);\n    return result;\n}\n/*\nReturn the sum of the digits\
    \ of n! in base 10.\n                        \n*/\n\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprmwk0t6x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\n/*\nReturn the number of elements in the n-th row of Pascal's triangle.\n\
    \                        \n*/\nlong pascal(long n) \n{\n    return modp(n, 1000000007);\n\
    }\n/*\nReturn the number of elements in the n-th row of Pascal's triangle.\n \
    \                       \n*/\nlong pascal2(long n) \n{\n    long result = 1;\n\
    \    long i = 1;\n    while (i <= n)\n    {\n        result = (result * (n + 1\
    \ - i)) / i;\n        i += 1;\n    }\n    return result;\n}\n/*\nReturn the number\
    \ of elements in the n-th row of Pascal's triangle.\n                        \n\
    */\nlong pascal3(long n) \n{\n    return (n * (n + 1)) / 2 + 1;\n}\n/*\nReturn\
    \ the number of elements in the n-th row of Pascal's triangle.\n             \
    \           \n*/\nlong pascal4(long n) \n{\n    return (n * (n + 1)) / 2 + 1;\n\
    }\n/*\nReturn the number of elements in the n-th row of Pascal's triangle.\n \
    \                       \n*/\nlong pascal5(long n) \n{\n    return (n * (n + 1))\
    \ / 2 + 1;\n}\n/*\nReturn the number of elements in the n-th row of Pascal's triangle.\n\
    \                        \n*/\nlong pascal6(long n) \n{\n    return (n * (n +\
    \ 1)) / 2 + 1;\n}\n/*\nReturn the number of elements in the n-th row of Pascal's\
    \ triangle.\n                        \n*/\nlong pascal7(long n) \n{\n    return\
    \ (n * (n + 1)) / 2 + 1;\n}\n/*\nReturn the number of elements in the n-th row\
    \ of Pascal's triangle.\n                        \n*/\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwul37v7s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk9jc7om.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ % 2 == 1) \n        {\n            res = (res * a) % p;\n        }\n       \
    \ a = (a * a) % p;\n        n = n / 2;\n    }\n    return res % p;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzw19fj0c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n           \
    \ r = (r * 2) % p;\n        n >>= 1;\n        if (n > 0) \n            r = (r\
    \ * r) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8cnqnojc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0) \n    {\n        if (power & 1) \n        {\n            result = (result\
    \ * value) % p;\n        }\n        value = (value * value) % p;\n        power\
    \ /= 2;\n    }\n    return result;\n}\n/*\nReturn the number of integers in the\
    \ range [1,n] that are relatively prime to n.\n                        \n*/\n\
    long phi(long n) \n{\n    long result = n;\n    long i;\n    for (i = 2; i * i\
    \ <= n; i++) \n    {\n        if (n % i == 0) \n        {\n            while (n\
    \ % i == 0) \n            {\n                n /= i;\n            }\n        \
    \    result -= result / i;\n        }\n    }\n    if (n > 1) \n    {\n       \
    \ result -= result / n;\n    }\n    return result;\n}\n/*\nReturn the number of\
    \ integers in the range [1,n] that are relatively prime to n.\n              \
    \          \n*/\nlong phi2(long n) \n{\n    long result = n;\n    long i;\n  \
    \  for (i = 2; i * i <= n; i++) \n    {\n        if (n % i == 0) \n        {\n\
    \            while (n % i == 0) \n            {\n                n /= i;\n   \
    \         }\n            result -= result / i;\n        }\n    }\n    if (n >\
    \ 1) \n    {\n        result -= result / n;\n    }\n    return result;\n}\n/*\n\
    Return the number of integers in the range [1,n] that are relatively prime to\
    \ n.\n                        \n*/\nlong phi3(long n) \n{\n    long result = n;\n\
    \    long i;\n    for (i = 2; i * i <= n; i++) \n    {\n        if (n % i == 0)\
    \ \n        {\n            while (n % i == 0) \n            {\n              \
    \  n /= i;\n            }\n            result -= result / i\nunittest\n{\n   \
    \ alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpex136p2c.d(90): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmpex136p2c.d(102): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmpex136p2c.d(102): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpex136p2c.d(102):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpex136p2c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0) \n    {\n        if (power & 1) \n        {\n            result = (result\
    \ * value) % p;\n        }\n        value = (value * value) % p;\n        power\
    \ /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsbkimusp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res * res % p;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcu68b568.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n           \
    \ r = (r * 2) % p;\n        }\n        n = n / 2;\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpurvn1_qk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1)\n            result = (result * a) % p;\n        n = n / 2;\n \
    \       a = (a * a) % p;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmisheouj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r\
    \ = (r * 2) % p;\n        n = n / 2;\n    }\n    return r;\n}\nunittest\n{\n \
    \   alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcotug5jq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2 ==\
    \ 1) {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n\
    \        n /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6kcmltpc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n      \
    \  {\n            r = (r * 2) % p;\n        }\n        n = n / 2;\n    }\n   \
    \ return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ilfiju3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn true if n is prime.\n        \
    \                \n*/\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_26k2f8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long x = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * x) % p;\n        }\n\
    \        n = n / 2;\n        x = (x * x) % p;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqco0nqf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long x = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * x) % p;\n        }\n\
    \        n = n / 2;\n        x = (x * x) % p;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqco0nqf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) res\
    \ = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbmo0s_or.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    long b = 2;\n    while (n != 0) \n    {\n        if ((n\
    \ & 1) != 0) \n            r = (r * b) % p;\n        n >>= 1;\n        b = (b\
    \ * b) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpro1h25ut.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    if (n == 0)\n        return 1;\n    else if (n % 2 == 0)\n        return\
    \ modp(n/2, p)^2 % p;\n    else\n        return modp(n-1, p) * 2 % p;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuk5fqi4n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n       \
    \     result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps2gev15_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n           \
    \ r = (r * 2) % p;\n        }\n        n = n / 2;\n    }\n    return r;\n}\n/*\n\
    Return the number of digits in n.\n                        \n*/\nlong digits(long\
    \ n) \n{\n    long d = 0;\n    while (n > 0) {\n        n = n / 10;\n        d\
    \ = d + 1;\n    }\n    return d;\n}\n/*\nReturn the sum of the digits in n.\n\
    \                        \n*/\nlong sumdigits(long n) \n{\n    long s = 0;\n \
    \   while (n > 0) {\n        s = s + n % 10;\n        n = n / 10;\n    }\n   \
    \ return s;\n}\n/*\nReturn the number of digits in n.\n                      \
    \  \n*/\nlong digits(long n) \n{\n    long d = 0;\n    while (n > 0) {\n     \
    \   n = n / 10;\n        d = d + 1;\n    }\n    return d;\n}\n/*\nReturn the sum\
    \ of the digits in n.\n                        \n*/\nlong sumdigits(long n) \n\
    {\n    long s = 0;\n    while (n > 0) {\n        s = s + n % 10;\n        n =\
    \ n / 10;\n    }\n    return s;\n}\n/*\nReturn the number of digits in n.\n  \
    \                      \n*/\nlong digits(long n) \n{\n    long d = 0;\n    while\
    \ (n > 0) {\n        n = n / 10;\n        d = d + 1;\n    }\n    return d;\n}\n\
    /*\nReturn the sum of the digits in n.\n                        \n*/\nlong sumdigits(long\
    \ n) \n{\n    long s = 0;\n    while (n > 0) {\n        s = s + n % 10;\n    \
    \    n = n / 10;\n    }\n    return s;\n}\n/*\nReturn the number of digits in\
    \ n.\n                        \n*/\nlong digits(long n) \n{\n    long d = 0;\n\
    \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) ==\
    \ 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L)\
    \ == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8bhsierb.d(104): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bhsierb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\n/*\nReturn the number of bits in the binary representation of\
    \ n.\n                        \n*/\nlong bitlength(long n) \n{\n    long res =\
    \ 0;\n    while (n > 0) \n    {\n        res++;\n        n >>= 1;\n    }\n   \
    \ return res;\n}\n/*\nReturn the number of set bits in the binary representation\
    \ of n.\n                        \n*/\nlong bitcount(long n) \n{\n    long res\
    \ = 0;\n    while (n > 0) \n    {\n        res += n & 1;\n        n >>= 1;\n \
    \   }\n    return res;\n}\n/*\nReturn the parity of the number of set bits in\
    \ the binary representation of n.\n                        \n*/\nlong parity(long\
    \ n) \n{\n    long res = 0;\n    while (n > 0) \n    {\n        res ^= (n & 1);\n\
    \        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of trailing\
    \ zeros in the binary representation of n.\n                        \n*/\nlong\
    \ tzcount(long n) \n{\n    long res = 0;\n    if (n == 0)\n        return 64;\n\
    \    while ((n & 1) == 0) \n    {\n        res++;\n        n >>= 1;\n    }\n \
    \   return res;\n}\n/*\nReturn the number of trailing ones in the binary representation\
    \ of n.\n                        \n*/\nlong tocount(long n) \n{\n    long res\
    \ = 0;\n    if (n == 0)\n        return 64;\n    while ((n & 1) == 1) \n    {\n\
    \        res++;\n        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the position\
    \ of the most significant bit in the binary representation of n.\n           \
    \             \n*/\nlong msb(long n) \n{\n    long res = 0;\n    while (n >\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaa1z9ktd.d(101): Error: expression expected, not \''unittest\''\n/tmp/tmpaa1z9ktd.d(102):
    Error: found \''{\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpaa1z9ktd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1)\n            result = (result * a) % p;\n        n = n / 2;\n \
    \       a = (a * a) % p;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmisheouj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of elements in the\
    \ multiplicative group of integers modulo p that are relatively prime to p (i.e.\
    \ the group of units of Z/pZ).\n                        \n*/\nlong phi(long p)\
    \ \n{\n    long res = p;\n    for (long i = 2; i * i <= p; ++i)\n        if (p\
    \ % i == 0) \n        {\n            while (p % i == 0)\n                p /=\
    \ i;\n            res -= res / i;\n        }\n    if (p > 1)\n        res -= res\
    \ / p;\n    return res;\n}\n/*\nReturn the order of a modulo m.\n            \
    \            \n*/\nlong order(long a, long m) \n{\n    long phi_m = phi(m);\n\
    \    for (long r = 1; r <= phi_m; ++r)\n        if (modp(r, m) == 1)\n       \
    \     return r;\n    return phi_m;\n}\n/*\nReturn the smallest primitive root\
    \ of p.\n                        \n*/\nlong primitive_root(long p) \n{\n    long\
    \ phi_p = phi(p);\n    for (long g = 2; g <= p; ++g) \n    {\n        bool ok\
    \ = true;\n        for (long i = 2; i <= phi_p; ++i)\n            if (order(g,\
    \ p) % i == 0) \n            {\n                ok = false;\n                break;\n\
    \            }\n        if (ok)\n            return g;\n    }\n    return -1;\n\
    }\n/*\nReturn the smallest primitive root of p.\n                        \n*/\n\
    long primitive_root_2(long p) \n{\n    long phi_p = phi(p);\n    long[] factors;\n\
    \    for (long g = 2; g <= p;\nunittest\n{\n    alias candidate = modp;\n\n  \
    \  assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6i5sbb90.d(80): Error: expression expected, not \''unittest\''\n/tmp/tmp6i5sbb90.d(81):
    Error: found \''{\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6i5sbb90.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn true if n is prime.\n        \
    \                \n*/\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_26k2f8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) {\n        if (n & 1)\n            res =\
    \ (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpluj152tn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn the Jacobi symbol (a/n) (be aware\
    \ of numerics).\n                        \n*/\nlong jacobi(long a, long n) \n\
    {\n    long res = 1;\n    while (a != 0) \n    {\n        while (a % 2 == 0) \n\
    \        {\n            a /= 2;\n            if (n % 8 == 3 || n % 8 == 5)\n \
    \               res = -res;\n        }\n        long t = a;\n        a = n;\n\
    \        n = t;\n        if (a % 4 == 3 && n % 4 == 3)\n            res = -res;\n\
    \        a %= n;\n    }\n    if (n == 1)\n        return res;\n    return 0;\n\
    }\n/*\nReturn the Legendre symbol (a/p) (be aware of numerics).\n            \
    \            \n*/\nlong legendre(long a, long p) \n{\n    return jacobi(a, p);\n\
    }\n/*\nReturn the Kronecker symbol (a/n) (be aware of numerics).\n           \
    \             \n*/\nlong kronecker(long a, long n) \n{\n    if (n == 1)\n    \
    \    return 1;\n    if (n == 2)\n        return (a % 2 == 0) ? 0 : 1;\n    if\
    \ (n % 2 == 0)\n        return 0;\n    if (a == 0)\n        return 0;\n    if\
    \ (a == 1)\n        return 1;\n    if (a == 2)\n        return (n % 8 == 1 ||\
    \ n % 8 == 7) ? 1 : -1;\n    if (a == -1)\n        return (n % 4 == 1) ? 1 : -1;\n\
    \    if (a < 0)\n        return kronecker(-a, n);\n    if (a % 2 == 0)\n     \
    \   return kronecker\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp49cmbiud.d(78): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmp49cmbiud.d(90): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp49cmbiud.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    long b = 2;\n    while (n > 0) {\n        if (n % 2 == 1)\
    \ {\n            r = (r * b) % p;\n        }\n        n = n / 2;\n        b =\
    \ (b * b) % p;\n    }\n    return r;\n}\n/*\nReturn the number of elements in\
    \ the multiplicative group of integers modulo p.\n                        \n*/\n\
    long phi(long p) \n{\n    long r = 1;\n    long i = 2;\n    while (i < p) {\n\
    \        if (gcd(i, p) == 1) {\n            r = r + 1;\n        }\n        i =\
    \ i + 1;\n    }\n    return r;\n}\n/*\nReturn the number of elements in the multiplicative\
    \ group of integers modulo p.\n                        \n*/\nlong phi2(long p)\
    \ \n{\n    long r = 1;\n    long i = 2;\n    while (i < p) {\n        if (gcd(i,\
    \ p) == 1) {\n            r = r + 1;\n        }\n        i = i + 1;\n    }\n \
    \   return r;\n}\n/*\nReturn the number of elements in the multiplicative group\
    \ of integers modulo p.\n                        \n*/\nlong phi3(long p) \n{\n\
    \    long r = 1;\n    long i = 2;\n    while (i < p) {\n        if (gcd(i, p)\
    \ == 1) {\n            r = r + 1;\n        }\n        i = i + 1;\n    }\n    return\
    \ r;\n}\n/*\nReturn the number of elements in the multiplicative group of integers\
    \ modulo p.\n                        \n*/\nlong phi4(long p) \n{\n    long r =\
    \ 1;\n    long i = 2;\n    while (i < p) {\n        if (gcd(i, p) == 1) {\n  \
    \          r = r + 1;\n        }\n        i = i + 1;\n    }\n    return r;\n}\n\
    /*\nReturn the number of elements in the multiplicative group of integers modulo\
    \ p.\n                        \n*/\n\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysl0j0uq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long base = 2;\n    while (n > 0) {\n        if (n\
    \ & 1) {\n            result = (result * base) % p;\n        }\n        n >>=\
    \ 1;\n        base = (base * base) % p;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l_f_vw0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2 ==\
    \ 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n /=\
    \ 2;\n    }\n    return res;\n}\n/*\nReturn the number of elements in the multiplicative\
    \ group of integers modulo p.\n                        \n*/\nlong phi(long p)\
    \ \n{\n    long res = p;\n    for (long i = 2; i * i <= p; ++i)\n        if (p\
    \ % i == 0) {\n            while (p % i == 0)\n                p /= i;\n     \
    \       res -= res / i;\n        }\n    if (p > 1)\n        res -= res / p;\n\
    \    return res;\n}\n/*\nReturn the number of elements in the multiplicative group\
    \ of integers modulo p^k.\n                        \n*/\nlong phi(long p, long\
    \ k) \n{\n    return (p - 1) * modp(k - 1, p);\n}\n/*\nReturn the number of elements\
    \ in the multiplicative group of integers modulo n.\n                        \n\
    */\nlong phi(long n) \n{\n    long res = n;\n    for (long i = 2; i * i <= n;\
    \ ++i)\n        if (n % i == 0) {\n            while (n % i == 0)\n          \
    \      n /= i;\n            res -= res / i;\n        }\n    if (n > 1)\n     \
    \   res -= res / n;\n    return res;\n}\n/*\nReturn the number of elements in\
    \ the multiplicative group of integers modulo n.\n                        \n*/\n\
    long phi(long n) \n{\n    long res = n;\n    for (long i = 2; i * i <= n; ++i)\n\
    \        if (n % i == 0) {\n            while (n % i == 0)\n                n\
    \ /= i;\n            res -= res / i;\n        }\n    if (n > 1)\n        res -=\
    \ res / n;\n    return res;\n}\n/*\nReturn the number of elements in the multiplicative\
    \ group of\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7042cg3g.d(78): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7042cg3g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n) {\n        if (n & 1) {\n\
    \            result = (result * a) % p;\n        }\n        a = (a * a) % p;\n\
    \        n >>= 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzruljeyp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    for (long i = 0; i < n; i++) \n    {\n        res = (res\
    \ * 2) % p;\n    }\n    return res;\n}\n/*\nReturn the number of bits in the binary\
    \ representation of n.\n                        \n*/\nlong bitlen(long n) \n{\n\
    \    if (n == 0) \n    {\n        return 1;\n    }\n    long len = 0;\n    while\
    \ (n > 0) \n    {\n        len++;\n        n >>= 1;\n    }\n    return len;\n\
    }\n/*\nReturn the number of set bits in the binary representation of n.\n    \
    \                    \n*/\nlong bitcount(long n) \n{\n    long count = 0;\n  \
    \  while (n > 0) \n    {\n        count += n & 1;\n        n >>= 1;\n    }\n \
    \   return count;\n}\n/*\nReturn the parity of the number of set bits in the binary\
    \ representation of n.\n                        \n*/\nlong parity(long n) \n{\n\
    \    long parity = 0;\n    while (n > 0) \n    {\n        parity ^= n & 1;\n \
    \       n >>= 1;\n    }\n    return parity;\n}\n/*\nReturn the number of trailing\
    \ zeros in the binary representation of n.\n                        \n*/\nlong\
    \ tzcount(long n) \n{\n    if (n == 0) \n    {\n        return sizeof(n) * 8;\n\
    \    }\n    long count = 0;\n    while ((n & 1) == 0) \n    {\n        count++;\n\
    \        n >>= 1;\n    }\n    return count;\n}\n/*\nReturn the number of trailing\
    \ ones in the binary representation of n.\n                        \n*/\nlong\
    \ tocount(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n   \
    \ long count = 0;\n    while ((n & 1) == 1) \n    {\n        count++;\n      \
    \  n >>= 1;\n    }\n    return count;\n}\n/*\nReturn the number of leading zeros\
    \ in the binary representation of n.\n                        \n*/\nlong l\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpspqg6m6o.d(103): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpspqg6m6o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpditgudcz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n = n / 2;\n    }\n    return result;\n}\n\
    /*\nReturn the number of elements in the group of order p-1.\n               \
    \         \n*/\nlong order(long p) \n{\n    long phi = p - 1;\n    long result\
    \ = phi;\n    long n = 2;\n    while (n * n <= phi) \n    {\n        if (phi %\
    \ n == 0) \n        {\n            while (phi % n == 0) \n            {\n    \
    \            phi = phi / n;\n            }\n            result = result - result\
    \ / n;\n        }\n        n = n + 1;\n    }\n    if (phi > 1) \n    {\n     \
    \   result = result - result / phi;\n    }\n    return result;\n}\n/*\nReturn\
    \ true if n is prime.\n                        \n*/\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqjh8khd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpditgudcz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n      \
    \      result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphq8cbway.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0) \n    {\n        if (power & 1) \n        {\n            result = (result\
    \ * value) % p;\n        }\n        value = (value * value) % p;\n        power\
    \ /= 2;\n    }\n    return result;\n}\n/*\nReturn the number of integers in the\
    \ range [1, n] that are relatively prime to n.\n                        \n*/\n\
    long phi(long n) \n{\n    long result = n;\n    long i;\n    for (i = 2; i * i\
    \ <= n; i++) \n    {\n        if (n % i == 0) \n        {\n            while (n\
    \ % i == 0) \n            {\n                n /= i;\n            }\n        \
    \    result -= result / i;\n        }\n    }\n    if (n > 1) \n    {\n       \
    \ result -= result / n;\n    }\n    return result;\n}\n/*\nReturn the greatest\
    \ common divisor of a and b.\n                        \n*/\nlong gcd(long a, long\
    \ b) \n{\n    long tmp;\n    while (b != 0) \n    {\n        tmp = b;\n      \
    \  b = a % b;\n        a = tmp;\n    }\n    return a;\n}\n/*\nReturn the least\
    \ common multiple of a and b.\n                        \n*/\nlong lcm(long a,\
    \ long b) \n{\n    return (a / gcd(a, b)) * b;\n}\n/*\nReturn the multiplicative\
    \ inverse of a modulo m.\n                        \n*/\nlong modinv(long a, long\
    \ m) \n{\n    long b = m;\n    long x = 0;\n    long y = 1;\n    while (a > 1)\
    \ \n    {\n        long q = a / m;\n        long t = m;\n        m = a % m;\n\
    \        a = t;\n        t = x;\n        x = y - q * x;\n        y = t;\n    }\n\
    \    if (y < 0) \n    {\n        y += b;\n   \nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb3fs5oqk.d(94): Error: found \''unittest\'' instead of statement\n/tmp/tmpb3fs5oqk.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3fs5oqk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    for (long i = 0; i < n; i++) \n    {\n        r = (r * 2)\
    \ % p;\n    }\n    return r;\n}\n/*\nReturn the number of bits in the binary representation\
    \ of n.\n                        \n*/\nlong bits(long n) \n{\n    long r = 0;\n\
    \    while (n > 0) \n    {\n        r++;\n        n >>= 1;\n    }\n    return\
    \ r;\n}\n/*\nReturn the number of bits in the binary representation of n.\n  \
    \                      \n*/\nlong bits(long n) \n{\n    long r = 0;\n    while\
    \ (n > 0) \n    {\n        r++;\n        n >>= 1;\n    }\n    return r;\n}\n/*\n\
    Return the number of bits in the binary representation of n.\n               \
    \         \n*/\nlong bits(long n) \n{\n    long r = 0;\n    while (n > 0) \n \
    \   {\n        r++;\n        n >>= 1;\n    }\n    return r;\n}\n/*\nReturn the\
    \ number of bits in the binary representation of n.\n                        \n\
    */\nlong bits(long n) \n{\n    long r = 0;\n    while (n > 0) \n    {\n      \
    \  r++;\n        n >>= 1;\n    }\n    return r;\n}\n/*\nReturn the number of bits\
    \ in the binary representation of n.\n                        \n*/\nlong bits(long\
    \ n) \n{\n    long r = 0;\n    while (n > 0) \n    {\n        r++;\n        n\
    \ >>= 1;\n    }\n    return r;\n}\n/*\nReturn the number of bits in the binary\
    \ representation of n.\n                        \n*/\nlong bits(long n) \n{\n\
    \    long r = 0;\n    while (n > 0) \n    {\n        r++;\n        n >>= 1;\n\
    \    }\n    return r;\n}\n/*\nReturn the number of bits in the binary representation\
    \ of n.\n                        \n*/\nlong bits(long n) \n{\n    long r = 0;\n\
    \    while (n > 0) \n    {\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9pqk8wdm.d(109): Error: found \''unittest\'' instead of statement\n/tmp/tmp9pqk8wdm.d(121):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9pqk8wdm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcofogxj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n      \
    \      result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphq8cbway.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2 == 1)\
    \ {\n            r = (r * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n = n / 2;\n    }\n    return r;\n}\n/*\nReturn the Jacobi symbol (a/b).\n\
    \                        \n*/\nlong jacobi(long a, long b) \n{\n    long r = 1;\n\
    \    while (a != 0) {\n        while (a % 2 == 0) {\n            a = a / 2;\n\
    \            if (b % 8 == 3 || b % 8 == 5) {\n                r = -r;\n      \
    \      }\n        }\n        long t = a;\n        a = b;\n        b = t;\n   \
    \     if (a % 4 == 3 && b % 4 == 3) {\n            r = -r;\n        }\n      \
    \  a = a % b;\n    }\n    if (b == 1) {\n        return r;\n    }\n    return\
    \ 0;\n}\n/*\nReturn the Legendre symbol (a/p).\n                        \n*/\n\
    long legendre(long a, long p) \n{\n    return jacobi(a, p);\n}\n/*\nReturn the\
    \ least positive integer x congruent to a modulo p.\n                        \n\
    */\nlong mod(long a, long p) \n{\n    long r = a % p;\n    if (r < 0) {\n    \
    \    r = r + p;\n    }\n    return r;\n}\n/*\nReturn the least positive integer\
    \ x congruent to a modulo p.\n                        \n*/\nlong mod(long a, long\
    \ p) \n{\n    long r = a % p;\n    if (r < 0) {\n        r = r + p;\n    }\n \
    \   return r;\n}\n/*\nReturn the least positive integer x congruent to a modulo\
    \ p.\n                        \n*/\nlong mod(long a, long p) \n{\n    long r =\
    \ a % p;\n    if (r < 0) {\n        r = r + p;\n    }\n    return\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqrxbp2p.d(90): Error: expression expected, not \''unittest\''\n/tmp/tmpqqrxbp2p.d(91):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqrxbp2p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ % 2 == 1) \n        {\n            res = (res * a) % p;\n        }\n       \
    \ a = (a * a) % p;\n        n = n / 2;\n    }\n    return res % p;\n}\n/*\nReturn\
    \ true if n is prime.\n                        \n*/\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52ogmi9w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long pow = 2;\n    while (n > 0) \n    {\n        if\
    \ (n & 1) \n            result = (result * pow) % p;\n        pow = (pow * pow)\
    \ % p;\n        n >>= 1;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm5ovwpvu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn true if n is prime.\n        \
    \                \n*/\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_26k2f8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn the Jacobi symbol (a/b).\n   \
    \                     \n*/\nlong jacobi(long a, long b) \n{\n    long res = 1;\n\
    \    if (a == 0)\n        return 0;\n    if (a < 0) \n    {\n        a = -a;\n\
    \        if (b % 4 == 3)\n            res = -res;\n    }\n    while (a != 0) \n\
    \    {\n        while (a % 2 == 0) \n        {\n            a /= 2;\n        \
    \    if (b % 8 == 3 || b % 8 == 5)\n                res = -res;\n        }\n \
    \       long tmp = a;\n        a = b;\n        b = tmp;\n        if (a % 4 ==\
    \ 3 && b % 4 == 3)\n            res = -res;\n        a %= b;\n    }\n    if (b\
    \ == 1)\n        return res;\n    return 0;\n}\n/*\nReturn true if n is prime.\n\
    \                        \n*/\nunittest\n{\n    alias candidate = modp;\n\n  \
    \  assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_46g4jw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpditgudcz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n \
    \       {\n            result = (result * 2) % p;\n        }\n        n = n /\
    \ 2;\n        if (n > 0) \n        {\n            result = (result * result) %\
    \ p;\n        }\n    }\n    return result;\n}\n/*\nReturn the number of digits\
    \ in n.\n                        \n*/\nlong digits(long n) \n{\n    long result\
    \ = 0;\n    while (n > 0) \n    {\n        n = n / 10;\n        result = result\
    \ + 1;\n    }\n    return result;\n}\n/*\nReturn the sum of the digits in n.\n\
    \                        \n*/\nlong sumdigits(long n) \n{\n    long result = 0;\n\
    \    while (n > 0) \n    {\n        result = result + n % 10;\n        n = n /\
    \ 10;\n    }\n    return result;\n}\n/*\nReturn the number of digits in n.\n \
    \                       \n*/\nlong digits(long n) \n{\n    long result = 0;\n\
    \    while (n > 0) \n    {\n        n = n / 10;\n        result = result + 1;\n\
    \    }\n    return result;\n}\n/*\nReturn the sum of the digits in n.\n      \
    \                  \n*/\nlong sumdigits(long n) \n{\n    long result = 0;\n  \
    \  while (n > 0) \n    {\n        result = result + n % 10;\n        n = n / 10;\n\
    \    }\n    return result;\n}\n/*\nReturn the number of digits in n.\n       \
    \                 \n*/\nlong digits(long n) \n{\n    long result = 0;\n    while\
    \ (n > 0) \n    {\n        n = n / 10;\n        result = result + 1;\n    }\n\
    \    return result;\n}\n/*\nReturn the sum of the digits in n.\n             \
    \           \n*/\nlong sumdigits(long n) \n{\n    long result = 0;\n    while\
    \ (n > 0) \n    {\n        result = result + n % 10;\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeng05skl.d(104): Error: found \''unittest\'' instead of statement\n/tmp/tmpeng05skl.d(116):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeng05skl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) {\n        if (n & 1)\n            res =\
    \ (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpluj152tn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) res\
    \ = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n                 \
    \       \n*/\nlong modp(long n, long p) \n{\n    long res = 1;\n    long a = 2;\n\
    \    while (n > 0) {\n        if (n & 1) res = (res * a) % p;\n        a = (a\
    \ * a) % p;\n        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p) \n{\n    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if\
    \ (n & 1) res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n \
    \   }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modp(long n, long p) \n{\n    long res = 1;\n\
    \    long a = 2;\n    while (n > 0) {\n        if (n & 1) res = (res * a) % p;\n\
    \        a = (a * a) % p;\n        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ 2^n modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p) \n{\n    long res = 1;\n    long a = 2;\n    while (n > 0) {\n  \
    \      if (n & 1) res = (res * a) % p;\n        a = (a * a) % p;\n        n >>=\
    \ 1;\n    }\n    return res;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n\
    \                        \n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn5jx3ovl.d(78): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpn5jx3ovl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0) \n    {\n        if (power & 1) \n        {\n            result = (result\
    \ * value) % p;\n        }\n        value = (value * value) % p;\n        power\
    \ /= 2;\n    }\n    return result;\n}\n/*\nReturn the Jacobi symbol (a/b) (be\
    \ aware of numerics).\n                        \n*/\nlong jacobi(long a, long\
    \ b) \n{\n    long twos;\n    long mult = 1;\n    while (a > 1) \n    {\n    \
    \    a = a % b;\n        if (a == 0) \n        {\n            return 0;\n    \
    \    }\n        twos = 0;\n        while (a % 2 == 0) \n        {\n          \
    \  a /= 2;\n            twos++;\n        }\n        if (twos > 0) \n        {\n\
    \            if ((twos & 1) != 0 && (b % 8 == 3 || b % 8 == 5)) \n           \
    \ {\n                mult = -mult;\n            }\n        }\n        if (a %\
    \ 4 == b % 4 && b % 4 == 3) \n        {\n            mult = -mult;\n        }\n\
    \        long temp = a;\n        a = b;\n        b = temp;\n    }\n    if (a ==\
    \ 0) \n    {\n        return 0;\n    }\n    else if (a == 1) \n    {\n       \
    \ return mult;\n    }\n    else \n    {\n        return 0;\n    }\n}\n/*\nReturn\
    \ the Legendre symbol (a/p) (be aware of numerics).\n                        \n\
    */\nlong legendre(long a, long p) \n{\n    return jacobi(a, p);\n}\n/*\nReturn\
    \ the least positive integer x congruent to a modulo m.\n                    \
    \    \n*/\nlong mod(long a, long m) \n{\n    long r = a % m;\n    if (r < 0) \n\
    \    {\n        r += m;\n    }\n    return r;\n}\n/*\n\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5aes6ws4.d(93): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5aes6ws4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\n/*\nReturn the number of integers in the range [1,n] that are relatively\
    \ prime to n.\n                        \n*/\nlong totient(long n) \n{\n    long\
    \ result = n;\n    for (long i = 2; i * i <= n; i++)\n    {\n        if (n % i\
    \ == 0)\n        {\n            while (n % i == 0)\n                n /= i;\n\
    \            result -= result / i;\n        }\n    }\n    if (n > 1)\n       \
    \ result -= result / n;\n    return result;\n}\n/*\nReturn the number of integers\
    \ in the range [1,n] that are relatively prime to n.\n                       \
    \ \n*/\nlong totient2(long n) \n{\n    long result = 1;\n    for (long i = 2;\
    \ i * i <= n; i++)\n    {\n        if (n % i == 0)\n        {\n            while\
    \ (n % i == 0)\n                n /= i;\n            result *= i - 1;\n      \
    \  }\n    }\n    if (n > 1)\n        result *= n - 1;\n    return result;\n}\n\
    /*\nReturn the number of integers in the range [1,n] that are relatively prime\
    \ to n.\n                        \n*/\nlong totient3(long n) \n{\n    long result\
    \ = n;\n    for (long i = 2; i * i <= n; i++)\n    {\n        if (n % i == 0)\n\
    \        {\n            result -= result / i;\n            while (n % i == 0)\n\
    \                n /= i;\n        }\n    }\n    if (n > 1)\n        result -=\
    \ result / n;\n    return result;\n}\n/*\nReturn the number of integers in the\
    \ range [1,n] that are relatively prime to n.\n                        \n*/\n\
    long\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgx0w_wtj.d(86): Error: no identifier for declarator long\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgx0w_wtj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ % 2 != 0)\n            res = (res * a) % p;\n        a = (a * a) % p;\n    \
    \    n /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbby7lfj8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    long b = 2;\n    while (n > 0) {\n        if (n % 2 == 1)\
    \ {\n            r = (r * b) % p;\n        }\n        n /= 2;\n        b = (b\
    \ * b) % p;\n    }\n    return r;\n}\n/*\nReturn the number of bits in n.\n  \
    \                      \n*/\nlong nbits(long n) \n{\n    long r = 0;\n    while\
    \ (n > 0) {\n        r++;\n        n /= 2;\n    }\n    return r;\n}\n/*\nReturn\
    \ the number of bits in n.\n                        \n*/\nlong nbits(long n) \n\
    {\n    long r = 0;\n    while (n > 0) {\n        r++;\n        n /= 2;\n    }\n\
    \    return r;\n}\n/*\nReturn the number of bits in n.\n                     \
    \   \n*/\nlong nbits(long n) \n{\n    long r = 0;\n    while (n > 0) {\n     \
    \   r++;\n        n /= 2;\n    }\n    return r;\n}\n/*\nReturn the number of bits\
    \ in n.\n                        \n*/\nlong nbits(long n) \n{\n    long r = 0;\n\
    \    while (n > 0) {\n        r++;\n        n /= 2;\n    }\n    return r;\n}\n\
    /*\nReturn the number of bits in n.\n                        \n*/\nlong nbits(long\
    \ n) \n{\n    long r = 0;\n    while (n > 0) {\n        r++;\n        n /= 2;\n\
    \    }\n    return r;\n}\n/*\nReturn the number of bits in n.\n              \
    \          \n*/\nlong nbits(long n) \n{\n    long r = 0;\n    while (n > 0) {\n\
    \        r++;\n        n /= 2;\n    }\n    return r;\n}\n/*\nReturn the number\
    \ of bits in n.\n                        \n*/\nlong nbits(long n) \n{\n    long\
    \ r = 0;\n    while (n > 0) {\n        r++;\n        n /= 2;\n\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2i4jwf9b.d(109): Error: found \''unittest\'' instead of statement\n/tmp/tmp2i4jwf9b.d(121):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2i4jwf9b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcofogxj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpditgudcz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n      \
    \      result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n\
    \    return result;\n}\n/*\nReturn the number of bits in the binary representation\
    \ of n.\n                        \n*/\nlong bitSize(long n) \n{\n    long result\
    \ = 0;\n    while (n > 0) \n    {\n        ++result;\n        n >>= 1;\n    }\n\
    \    return result;\n}\n/*\nReturn the number of trailing 0 bits in n.\n     \
    \                   \n*/\nlong trailingZeros(long n) \n{\n    long result = 0;\n\
    \    while ((n & 1) == 0) \n    {\n        n >>= 1;\n        ++result;\n    }\n\
    \    return result;\n}\n/*\nReturn the number of 1 bits in the binary representation\
    \ of n.\n                        \n*/\nlong bitCount(long n) \n{\n    long result\
    \ = 0;\n    while (n > 0) \n    {\n        result += n & 1;\n        n >>= 1;\n\
    \    }\n    return result;\n}\n/*\nReturn the position of the most significant\
    \ 1 bit in n.\n                        \n*/\nlong mostSignificantBit(long n) \n\
    {\n    long result = 0;\n    while (n > 0) \n    {\n        n >>= 1;\n       \
    \ ++result;\n    }\n    return result;\n}\n/*\nReturn the position of the least\
    \ significant 1 bit in n.\n                        \n*/\nlong leastSignificantBit(long\
    \ n) \n{\n    return bitScanForward(n);\n}\n/*\nReturn the number of trailing\
    \ 0 bits in n.\n                        \n*/\nlong bitScanForward(long n) \n{\n\
    \    long result = 0;\n    while ((n & 1) == 0) \n    {\n        n >>= 1;\n  \
    \      ++result;\n    }\n    return result;\n}\n/*\nReturn the number of trailing\
    \ 0 bits in n.\n                        \n*/\nlong bitScanReverse(long n) \n{\n\
    \    long result = 0;\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8v5ofjml.d(104): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8v5ofjml.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n         \
    \   res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3k5w6vd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0) \n    {\n        if (power & 1) \n        {\n            result = (result\
    \ * value) % p;\n        }\n        value = (value * value) % p;\n        power\
    \ /= 2;\n    }\n    return result;\n}\n/*\nReturn the number of bits in the binary\
    \ representation of n (which must be positive).\n                        \n*/\n\
    long bitLength(long n) \n{\n    if (n < 1) \n    {\n        return 0;\n    }\n\
    \    return floor(log(n) / log(2)) + 1;\n}\n/*\nReturn True if n is a prime number.\
    \ This function does a quicker prime number check before calling rabinMiller().\n\
    \                        \n*/\nunittest\n{\n    alias candidate = modp;\n\n  \
    \  assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3hsq4ai.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n = n / 2;\n    }\n    return result;\n}\n\
    /*\nReturn the number of integers in the range [1,n] that are coprime to n.\n\
    \                        \n*/\nlong phi(long n) \n{\n    long result = n;\n  \
    \  long i;\n    for (i = 2; i * i <= n; i++) \n    {\n        if (n % i == 0)\
    \ \n        {\n            while (n % i == 0) \n            {\n              \
    \  n = n / i;\n            }\n            result = result - result / i;\n    \
    \    }\n    }\n    if (n > 1) \n    {\n        result = result - result / n;\n\
    \    }\n    return result;\n}\n/*\nReturn the number of integers in the range\
    \ [1,n] that are coprime to n.\n                        \n*/\nlong phi2(long n)\
    \ \n{\n    long result = n;\n    long i;\n    for (i = 2; i * i <= n; i++) \n\
    \    {\n        if (n % i == 0) \n        {\n            while (n % i == 0) \n\
    \            {\n                n = n / i;\n            }\n            result\
    \ = result - result / i;\n        }\n    }\n    if (n > 1) \n    {\n        result\
    \ = result - result / n;\n    }\n    return result;\n}\n/*\nReturn the number\
    \ of integers in the range [1,n] that are coprime to n.\n                    \
    \    \n*/\nlong phi3(long n) \n{\n    long result = n;\n    long i;\n    for (i\
    \ = 2; i * i <= n; i++) \n    {\n        if (n % i == 0) \n        {\n       \
    \     while (n % i == 0) \n            {\n                n = n / i;\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmgn873gp.d(87): Error: found \''unittest\'' instead of statement\n/tmp/tmpmgn873gp.d(99):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpmgn873gp.d(99):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpmgn873gp.d(99):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmgn873gp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0) \n    {\n        if (power & 1) \n        {\n            result = (result\
    \ * value) % p;\n        }\n        value = (value * value) % p;\n        power\
    \ /= 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsbkimusp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\n/*\nReturn the number of bits in the binary representation of\
    \ n.\n                        \n*/\nlong bitlen(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    long len = 0;\n    while (n > 0) \n    {\n        len++;\n\
    \        n >>= 1;\n    }\n    return len;\n}\n/*\nReturn the position of the i-th\
    \ set bit counting from the least\nsignificant bit. I.e. the 0-th bit is the least\
    \ significant bit.\n                        \n*/\nlong bitpos(long n, long i)\
    \ \n{\n    long pos = 0;\n    long len = bitlen(n);\n    for (long j = 0; j <\
    \ len; j++) \n    {\n        if (n & 1) \n        {\n            if (pos == i)\n\
    \                return j;\n            pos++;\n        }\n        n >>= 1;\n\
    \    }\n    return -1;\n}\n/*\nReturn the number of set bits in the binary representation\
    \ of n.\n                        \n*/\nlong bitcnt(long n) \n{\n    long cnt =\
    \ 0;\n    while (n > 0) \n    {\n        cnt += n & 1;\n        n >>= 1;\n   \
    \ }\n    return cnt;\n}\n/*\nReturn the number of trailing zeros in the binary\
    \ representation of n.\n                        \n*/\nlong tzcnt(long n) \n{\n\
    \    long cnt = 0;\n    while (n > 0 && (n & 1) == 0) \n    {\n        cnt++;\n\
    \        n >>= 1;\n    }\n    return cnt;\n}\n/*\nReturn the number of leading\
    \ zeros in the binary representation of n.\n                        \n*/\nlong\
    \ lzcnt(long n) \n{\n    long cnt = 0;\n    while (n > 0) \n    {\n        if\
    \ (n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp300mlvu.d(94): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpp300mlvu.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpp300mlvu.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp300mlvu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2\
    \ == 1) {\n            result = (result * a) % p;\n        }\n        n = n /\
    \ 2;\n        a = (a * a) % p;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8tnf9tj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\n/*\nReturn the inverse of x modulo p (be aware of numerics).\n \
    \                       \n*/\nlong modinv(long x, long p) \n{\n    return modp(p\
    \ - 2, p);\n}\n/*\nReturn the Legendre symbol (a/p) (be aware of numerics).\n\
    \                        \n*/\nlong legendre(long a, long p) \n{\n    a = a %\
    \ p;\n    if (a == 0)\n        return 0;\n    if (a == 1)\n        return 1;\n\
    \    a = modp(a, p);\n    if (a == p - 1)\n        return -1;\n    return legendre(p,\
    \ a);\n}\n/*\nReturn the Jacobi symbol (a/n) (be aware of numerics).\n       \
    \                 \n*/\nlong jacobi(long a, long n) \n{\n    if (a == 0)\n   \
    \     return 0;\n    a = a % n;\n    if (a == 0)\n        return 0;\n    if (a\
    \ == 1)\n        return 1;\n    long twos;\n    long mult = 1;\n    while (a %\
    \ 2 == 0)\n    {\n        a /= 2;\n        twos = n % 8;\n        if (twos ==\
    \ 3 || twos == 5)\n            mult *= -1;\n    }\n    if (a == 1)\n        return\
    \ mult;\n    if (n % 4 != 1)\n        mult *= -1;\n    return mult * jacobi(n,\
    \ a);\n}\n/*\nReturn the inverse of a modulo n.\n                        \n*/\n\
    long modinv(long a, long n) \n{\n    long t = 0;\n    long newt = 1;\n    long\
    \ r = n;\n    long newr = a;\n    while (newr != 0)\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz9apll_w.d(84): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9apll_w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of quadratic residues\
    \ modulo p.\n                        \n*/\nlong quadratic_residues(long p) \n\
    {\n    if (p == 2) \n        return 1;\n    if (p % 4 == 3) \n        return (p\
    \ + 1) / 2;\n    long r = modp(p - 1, 8);\n    if (r == 1) \n        return (p\
    \ + 1) / 2;\n    if (r == 7) \n        return (p - 1) / 2;\n    assert(false);\n\
    \    return 0;\n}\n/*\nReturn the number of quadratic non-residues modulo p.\n\
    \                        \n*/\nlong quadratic_nonresidues(long p) \n{\n    return\
    \ (p - 1) / 2 - quadratic_residues(p);\n}\n/*\nReturn the number of quadratic\
    \ residues modulo p^k.\n                        \n*/\nlong quadratic_residues_power(long\
    \ p, long k) \n{\n    if (k == 1) \n        return quadratic_residues(p);\n  \
    \  if (k == 2) \n        return (p + 1) * quadratic_residues(p) / 2;\n    if (k\
    \ == 3) \n        return (p * p + p + 2) / 3;\n    if (k == 4) \n        return\
    \ (p * p * p + 2 * p * p + p + 3) / 4;\n    if (k == 5) \n        return (p *\
    \ p * p * p + 3 * p * p * p + 3 * p * p + p + 4) / 5;\n    if (k == 6) \n    \
    \    return (p * p * p * p * p + 4 * p * p * p * p + 6 * p * p * p\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2373u5tk.d(63): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmp2373u5tk.d(65):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2373u5tk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n /= 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybq20ehx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    long b = 2;\n    while (n != 0) \n    {\n        if ((n\
    \ & 1) != 0)\n            r = (r * b) % p;\n        n >>= 1;\n        b = (b *\
    \ b) % p;\n    }\n    return r;\n}\n/*\nReturn true if n is prime.\n         \
    \               \n*/\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ozb9n__.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of elements in the\
    \ multiplicative group of integers modulo p (p must be prime).\n             \
    \           \n*/\nlong phi(long p) \n{\n    return p - 1;\n}\n/*\nReturn the number\
    \ of elements in the multiplicative group of integers modulo n (n must be a product\
    \ of primes).\n                        \n*/\nlong phi(long n) \n{\n    long res\
    \ = n;\n    for (long i = 2; i * i <= n; ++i) \n    {\n        if (n % i == 0)\
    \ \n        {\n            while (n % i == 0)\n                n /= i;\n     \
    \       res -= res / i;\n        }\n    }\n    if (n > 1)\n        res -= res\
    \ / n;\n    return res;\n}\n/*\nReturn the number of elements in the multiplicative\
    \ group of integers modulo n (n must be a product of primes).\n              \
    \          \n*/\nlong phi(long[] primes) \n{\n    long res = 1;\n    foreach (prime;\
    \ primes)\n        res *= prime - 1;\n    return res;\n}\n/*\nReturn the number\
    \ of elements in the multiplicative group of integers modulo n (n must be a product\
    \ of primes).\n                        \n*/\nlong phi(long[] primes, long[] powers)\
    \ \n{\n    long res = 1;\n    for (long i = 0; i < primes.length; ++i)\n     \
    \   res *= pow(primes[i], powers[i] - 1) * (primes[i] - 1);\n    return res;\n\
    }\n/*\nReturn the number of elements in the multiplicative group of integers modulo\
    \ n (n must be a product of primes).\n                        \n*/\nlong phi(long[]\
    \ primes, long[] powers, long n) \n{\n    long res = n\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjin0eai2.d(77): Error: semicolon expected, not \''unittest\''\n/tmp/tmpjin0eai2.d(77):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpjin0eai2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long b = 2;\n    while (n != 0) {\n        if ((n & 1)\
    \ != 0)\n            res = (res * b) % p;\n        n >>= 1;\n        b = (b *\
    \ b) % p;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsucus9h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    for (int i = 0; i < n; i++) \n    {\n        r = (r * 2)\
    \ % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n\
    \    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvwc8dd60.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n         \
    \   res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n  \
    \  return res;\n}\n/*\nReturn the number of bits in the binary representation\
    \ of n.\n                        \n*/\nlong bits(long n) \n{\n    long res = 0;\n\
    \    while (n > 0) \n    {\n        ++res;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of trailing zeros in the binary representation\
    \ of n.\n                        \n*/\nlong trailingZeros(long n) \n{\n    long\
    \ res = 0;\n    while ((n & 1) == 0) \n    {\n        ++res;\n        n >>= 1;\n\
    \    }\n    return res;\n}\n/*\nReturn the number of trailing zeros in the binary\
    \ representation of n.\n                        \n*/\nlong trailingZeros(long\
    \ n) \n{\n    long res = 0;\n    while ((n & 1) == 0) \n    {\n        ++res;\n\
    \        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of trailing\
    \ zeros in the binary representation of n.\n                        \n*/\nlong\
    \ trailingZeros(long n) \n{\n    long res = 0;\n    while ((n & 1) == 0) \n  \
    \  {\n        ++res;\n        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn\
    \ the number of trailing zeros in the binary representation of n.\n          \
    \              \n*/\nlong trailingZeros(long n) \n{\n    long res = 0;\n    while\
    \ ((n & 1) == 0) \n    {\n        ++res;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of trailing zeros in the binary representation\
    \ of n.\n                        \n*/\nlong trailingZeros(long n) \n{\n    long\
    \ res = 0;\n    while ((n & 1) == 0) \n    {\n        ++res;\n        n >>= 1;\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa1fm11p8.d(100): Error: found \''unittest\'' instead of statement\n/tmp/tmpa1fm11p8.d(112):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1fm11p8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2\
    \ == 1)\n            result = (result * a) % p;\n        n = n >> 1;\n       \
    \ a = (a * a) % p;\n    }\n    return result;\n}\n/*\nReturn the number of elements\
    \ in the group of order p-1.\n                        \n*/\nlong order(long p)\
    \ \n{\n    long phi = p-1;\n    long result = phi;\n    for (long i = 2; i * i\
    \ <= phi; ++i)\n        if (phi % i == 0) {\n            while (phi % i == 0)\n\
    \                phi /= i;\n            result -= result / i;\n        }\n   \
    \ if (phi > 1)\n        result -= result / phi;\n    return result;\n}\n/*\nReturn\
    \ the generator of the group of order p-1.\n                        \n*/\nlong\
    \ generator(long p) \n{\n    long phi = p-1;\n    long n = order(p);\n    for\
    \ (long i = 2; i < p; ++i) {\n        bool ok = true;\n        for (long j = 2;\
    \ j <= n; ++j) {\n            long x = modp(j, p);\n            long y = modp(j,\
    \ phi);\n            long a = modp(i, p);\n            long b = modp(i, phi);\n\
    \            if (x != a || y != b) {\n                ok = false;\n          \
    \      break;\n            }\n        }\n        if (ok)\n            return i;\n\
    \    }\n    return -1;\n}\n/*\nReturn the number of elements in the group of order\
    \ p-1.\n                        \n*/\nlong order(long p) \n{\n    long phi = p-1;\n\
    \    long result = phi;\n    for (long i = 2; i * i <= phi; ++i)\n        if (phi\
    \ % i == 0) {\n            while (phi % i == 0)\n                phi /= i;\n \
    \           result -= result / i;\n        }\n    if (phi\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbnz3jq70.d(77): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpbnz3jq70.d(89):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbnz3jq70.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ % 2 == 1) \n        {\n            res = (res * a) % p;\n        }\n       \
    \ a = (a * a) % p;\n        n = n / 2;\n    }\n    return res % p;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzw19fj0c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long b = 2;\n    while (n != 0) \n    {\n        if\
    \ (n % 2 == 1)\n            result = (result * b) % p;\n        n /= 2;\n    \
    \    b = (b * b) % p;\n    }\n    return result;\n}\n/*\nReturn the number of\
    \ elements of the multiplicative group of integers modulo p.\n               \
    \         \n*/\nlong phi(long p) \n{\n    long result = p;\n    long i = 2;\n\
    \    while (i * i <= p) \n    {\n        if (p % i == 0) \n        {\n       \
    \     while (p % i == 0)\n                p /= i;\n            result -= result\
    \ / i;\n        }\n        i++;\n    }\n    if (p > 1)\n        result -= result\
    \ / p;\n    return result;\n}\n/*\nReturn the order of a modulo p.\n         \
    \               \n*/\nlong order(long a, long p) \n{\n    long phi_p = phi(p);\n\
    \    long result = phi_p;\n    long i = 2;\n    while (i * i <= phi_p) \n    {\n\
    \        if (phi_p % i == 0) \n        {\n            while (phi_p % i == 0)\n\
    \                phi_p /= i;\n            if (modp(a, p) % i == 1)\n         \
    \       result /= i;\n        }\n        i++;\n    }\n    if (phi_p > 1)\n   \
    \     if (modp(a, p) % phi_p == 1)\n            result /= phi_p;\n    return result;\n\
    }\n/*\nReturn the smallest primitive root of p.\n                        \n*/\n\
    long primitive_root(long p) \n{\n    long phi_p = phi(p);\n    long result = 2;\n\
    \    while (order(result, p) != phi_p)\n        result++;\n    return result;\n\
    }\n/*\nReturn the smallest primitive root of p.\n                        \n*/\n\
    long primitive_root2(long p) \n{\n    long ph\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnvsjrzzh.d(86): Error: semicolon expected, not \''unittest\''\n/tmp/tmpnvsjrzzh.d(86):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnvsjrzzh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n = n / 2;\n    }\n    return result;\n}\n\
    /*\nReturn the number of elements of the multiplicative group of integers modulo\
    \ p.\n                        \n*/\nlong phi(long p) \n{\n    long result = p;\n\
    \    long i = 2;\n    while (i * i <= p) \n    {\n        if (p % i == 0) \n \
    \       {\n            while (p % i == 0) \n            {\n                p =\
    \ p / i;\n            }\n            result = result - result / i;\n        }\n\
    \        i = i + 1;\n    }\n    if (p > 1) \n    {\n        result = result -\
    \ result / p;\n    }\n    return result;\n}\n/*\nReturn the order of a modulo\
    \ p.\n                        \n*/\nlong order(long a, long p) \n{\n    long phi_p\
    \ = phi(p);\n    long n = 1;\n    while (modp(n, p) != 1) \n    {\n        n =\
    \ n + 1;\n    }\n    return n;\n}\n/*\nReturn the smallest primitive root of p.\n\
    \                        \n*/\nlong primitive_root(long p) \n{\n    long phi_p\
    \ = phi(p);\n    long candidate = 2;\n    while (order(candidate, p) != phi_p)\
    \ \n    {\n        candidate = candidate + 1;\n    }\n    return candidate;\n\
    }\n/*\nReturn the smallest primitive root of p.\n                        \n*/\n\
    long primitive_root_2(long p) \n{\n    long phi_p = phi(p);\n    long candidate\
    \ = 2;\n    while (order(candidate, p) != phi_p) \n    {\n        candidate =\
    \ candidate + 1;\n    }\n    return candidate;\n}\n/*\nReturn the smallest primitive\
    \ root of\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplrw42ebv.d(90): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmplrw42ebv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) res\
    \ = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of primes less than n.\n                    \
    \    \n*/\nlong primes(long n) \n{\n    long res = 0;\n    for (long i = 2; i\
    \ < n; i++) {\n        bool ok = true;\n        for (long j = 2; j * j <= i; j++)\
    \ {\n            if (i % j == 0) {\n                ok = false;\n            \
    \    break;\n            }\n        }\n        if (ok) res++;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of primes less than n.\n                    \
    \    \n*/\nlong primes2(long n) \n{\n    long res = 0;\n    for (long i = 2; i\
    \ < n; i++) {\n        if (modp(i, i) == i) res++;\n    }\n    return res;\n}\n\
    /*\nReturn the number of primes less than n.\n                        \n*/\nlong\
    \ primes3(long n) \n{\n    long res = 0;\n    for (long i = 2; i < n; i++) {\n\
    \        if (modp(i, i) == i) res++;\n    }\n    return res;\n}\n/*\nReturn the\
    \ number of primes less than n.\n                        \n*/\nlong primes4(long\
    \ n) \n{\n    long res = 0;\n    for (long i = 2; i < n; i++) {\n        if (modp(i,\
    \ i) == i) res++;\n    }\n    return res;\n}\n/*\nReturn the number of primes\
    \ less than n.\n                        \n*/\nlong primes5(long n) \n{\n    long\
    \ res = 0;\n    for (long i = 2; i < n; i++) {\n        if (modp(i, i) == i) res++;\n\
    \    }\n    return res;\n}\n/*\nReturn the number of\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsdw2su09.d(85): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsdw2su09.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0) \n    {\n        if (power & 1)\n            result = (result * value)\
    \ % p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1oh_8uxt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long pow2 = 2;\n    while (n != 0) \n    {\n      \
    \  if ((n & 1) != 0) \n            result = (result * pow2) % p;\n        pow2\
    \ = (pow2 * pow2) % p;\n        n >>= 1;\n    }\n    return result;\n}\n/*\nReturn\
    \ the Jacobi symbol (a/b).\n                        \n*/\nlong jacobi(long a,\
    \ long b) \n{\n    long twos, temp;\n    long mult = 1;\n    if (a == 0) \n  \
    \      return 0;\n    if (a == 1) \n        return 1;\n    if (a < 0) \n    {\n\
    \        a = -a;\n        if ((b & 7) == 3 || (b & 7) == 5) \n            mult\
    \ = -mult;\n    }\n    if (a == 2) \n    {\n        if ((b & 7) == 3 || (b & 7)\
    \ == 5) \n            mult = -mult;\n        return mult;\n    }\n    a = a %\
    \ b;\n    if (a == 0) \n        return 0;\n    while ((a & 1) == 0) \n    {\n\
    \        a >>= 1;\n        twos = b & 7;\n        if (twos == 3 || twos == 5)\
    \ \n            mult = -mult;\n    }\n    if (a == 1) \n        return mult;\n\
    \    if ((a & 3) == 3 && (b & 3) == 3) \n        mult = -mult;\n    temp = a;\n\
    \    a = b % a;\n    b = temp;\n    return mult * jacobi(a, b);\n}\n/*\nReturn\
    \ the Legendre symbol (a/p).\n                        \n*/\nlong legendre(long\
    \ a, long p) \n{\n    a = a % p;\n    if (a < 0) \n        a += p;\n    if (a\
    \ == 0) \n        return 0;\n    if (a == 1) \n        return 1;\n    return jacobi(a,\
    \ p);\n}\n/*\nReturn the\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn39znh1v.d(78): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpn39znh1v.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1)\n            result = (result * a) % p;\n        n = n / 2;\n \
    \       a = (a * a) % p;\n    }\n    return result;\n}\n/*\nReturn the number\
    \ of integers in the range [1, n] that are relatively prime to n.\n          \
    \              \n*/\nlong phi(long n) \n{\n    long result = n;\n    long i;\n\
    \    for (i = 2; i * i <= n; i++) \n    {\n        if (n % i == 0) \n        {\n\
    \            while (n % i == 0)\n                n = n / i;\n            result\
    \ = result - result / i;\n        }\n    }\n    if (n > 1)\n        result = result\
    \ - result / n;\n    return result;\n}\n/*\nReturn the number of integers in the\
    \ range [1, n] that are relatively prime to n.\n                        \n*/\n\
    long phi2(long n) \n{\n    long result = n;\n    long i;\n    for (i = 2; i *\
    \ i <= n; i++) \n    {\n        if (n % i == 0) \n        {\n            while\
    \ (n % i == 0)\n                n = n / i;\n            result = result - result\
    \ / i;\n        }\n    }\n    if (n > 1)\n        result = result - result / n;\n\
    \    return result;\n}\n/*\nReturn the number of integers in the range [1, n]\
    \ that are relatively prime to n.\n                        \n*/\nlong phi3(long\
    \ n) \n{\n    long result = n;\n    long i;\n    for (i = 2; i * i <= n; i++)\
    \ \n    {\n        if (n % i == 0) \n        {\n            while (n % i == 0)\n\
    \                n = n / i;\n            result = result - result / i;\n     \
    \   }\n    }\n    if (n > 1)\n        result = result - result / n;\n    return\
    \ result;\n}\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeo8nszgl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\n/*\nReturn the number of integers in the range [1,n] that are relatively\
    \ prime to n.\n                        \n*/\nlong phi(long n) \n{\n    long result\
    \ = n;\n    long i;\n    for (i = 2; i * i <= n; i++)\n    {\n        if (n %\
    \ i == 0)\n        {\n            while (n % i == 0)\n                n /= i;\n\
    \            result -= result / i;\n        }\n    }\n    if (n > 1)\n       \
    \ result -= result / n;\n    return result;\n}\n/*\nReturn the number of integers\
    \ in the range [1,n] that are relatively prime to n.\n                       \
    \ \n*/\nlong phi(long n) \n{\n    long result = n;\n    long i;\n    for (i =\
    \ 2; i * i <= n; i++)\n    {\n        if (n % i == 0)\n        {\n           \
    \ while (n % i == 0)\n                n /= i;\n            result -= result /\
    \ i;\n        }\n    }\n    if (n > 1)\n        result -= result / n;\n    return\
    \ result;\n}\n/*\nReturn the number of integers in the range [1,n] that are relatively\
    \ prime to n.\n                        \n*/\nlong phi(long n) \n{\n    long result\
    \ = n;\n    long i;\n    for (i = 2; i * i <= n; i++)\n    {\n        if (n %\
    \ i == 0)\n        {\n            while (n % i == 0)\n                n /= i;\n\
    \            result -= result / i;\n        }\n    }\n    if (n > 1)\n       \
    \ result -= result / n;\n    return result;\n}\n/*\nReturn the number of integers\
    \ in the range [1,n] that are relatively prime to\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp31dsemkj.d(84): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp31dsemkj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    long b = 2;\n    while (n > 0) {\n        if (n % 2 == 1)\
    \ {\n            r = (r * b) % p;\n        }\n        n /= 2;\n        b = (b\
    \ * b) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2o0att3v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res * res % p;\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcu68b568.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2 ==\
    \ 1) {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n\
    \        n /= 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6kcmltpc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) {\n        if (n & 1)\n            res =\
    \ (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of bits in n.\n                        \n*/\n\
    long bitlen(long n) \n{\n    long res = 0;\n    while (n > 0) {\n        ++res;\n\
    \        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of trailing\
    \ zeros in n.\n                        \n*/\nlong ctz(long n) \n{\n    long res\
    \ = 0;\n    while ((n & 1) == 0) {\n        ++res;\n        n >>= 1;\n    }\n\
    \    return res;\n}\n/*\nReturn the number of leading zeros in n.\n          \
    \              \n*/\nlong clz(long n) \n{\n    long res = 0;\n    while (n > 0)\
    \ {\n        ++res;\n        n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the\
    \ number of 1 bits in n.\n                        \n*/\nlong popcount(long n)\
    \ \n{\n    long res = 0;\n    while (n > 0) {\n        res += n & 1;\n       \
    \ n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of 1 bits in n.\n\
    \                        \n*/\nlong popcount2(long n) \n{\n    long res = 0;\n\
    \    while (n > 0) {\n        n &= n - 1;\n        ++res;\n    }\n    return res;\n\
    }\n/*\nReturn the number of 1 bits in n.\n                        \n*/\nlong popcount3(long\
    \ n) \n{\n    long res = 0;\n    while (n > 0) {\n        n = n & (n - 1);\n \
    \       ++res;\n    }\n    return res;\n}\n/*\nReturn the number of 1 bits in\
    \ n.\n                        \n*/\nlong popcount4(long n) \n{\n    long res =\
    \ 0;\n    while (n > 0) {\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphdexqz2c.d(104): Error: found \''unittest\'' instead of statement\n/tmp/tmphdexqz2c.d(116):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdexqz2c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\n/*\nReturn true if n is prime.\n                 \
    \       \n*/\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8993fzyl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcofogxj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n       \
    \     result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n \
    \   return result;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long p) \n{\n    long result = 1;\n\
    \    while (n > 0) \n    {\n        if (n & 1)\n            result = (result *\
    \ 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n    return result;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp(long n, long p) \n{\n    long result = 1;\n    while (n > 0) \n    {\n\
    \        if (n & 1)\n            result = (result * 2) % p;\n        n >>= 1;\n\
    \        2 %= p;\n    }\n    return result;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n       \
    \     result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n \
    \   return result;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n     \
    \                   \n*/\nlong modp(long n, long p) \n{\n    long result = 1;\n\
    \    while (n > 0) \n    {\n        if (n & 1)\n            result = (result *\
    \ 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n    return result;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp(long n, long p) \n{\n    long result = 1;\n    while (n > 0) \n    {\n\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcere5rdh.d(93): Error: found \''unittest\'' instead of statement\n/tmp/tmpcere5rdh.d(105):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcere5rdh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n /= 2;\n    }\n    return result;\n}\n/*\n\
    Return true if n is prime.\n                        \n*/\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jdxlgzs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) \n    {\n        if (n % 2 == 1) \n      \
    \  {\n            r = (r * 2) % p;\n        }\n        n = n / 2;\n    }\n   \
    \ return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ilfiju3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2 ==\
    \ 1) {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n\
    \        n = n / 2;\n    }\n    return res;\n}\n/*\nReturn the number of integers\
    \ in the range [1,n] that are coprime to n.\n                        \n*/\nlong\
    \ phi(long n) \n{\n    long res = n;\n    for (long i = 2; i * i <= n; i++) {\n\
    \        if (n % i == 0) {\n            while (n % i == 0) {\n               \
    \ n = n / i;\n            }\n            res = res - res / i;\n        }\n   \
    \ }\n    if (n > 1) {\n        res = res - res / n;\n    }\n    return res;\n\
    }\n/*\nReturn the number of integers in the range [1,n] that are coprime to n.\n\
    \                        \n*/\nlong phi(long n) \n{\n    long res = n;\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            while\
    \ (n % i == 0) {\n                n = n / i;\n            }\n            res =\
    \ res - res / i;\n        }\n    }\n    if (n > 1) {\n        res = res - res\
    \ / n;\n    }\n    return res;\n}\n/*\nReturn the number of integers in the range\
    \ [1,n] that are coprime to n.\n                        \n*/\nlong phi(long n)\
    \ \n{\n    long res = n;\n    for (long i = 2; i * i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            while (n % i == 0) {\n                n = n / i;\n\
    \            }\n            res = res - res / i;\n        }\n    }\n    if (n\
    \ > 1) {\n        res = res - res / n;\n    }\n    return res;\n}\n/*\nReturn\
    \ the\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg0d269p5.d(80): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpg0d269p5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2\
    \ == 1) {\n            result = (result * a) % p;\n        }\n        n = n /\
    \ 2;\n        a = (a * a) % p;\n    }\n    return result;\n}\n/*\nReturn the number\
    \ of elements in the finite field with p elements.\n                        \n\
    */\nlong order(long p) \n{\n    long result = 1;\n    long a = 2;\n    while (modp(result,\
    \ p) != 1) {\n        result = result + 1;\n    }\n    return result;\n}\n/*\n\
    Return the number of elements in the finite field with p elements.\n         \
    \               \n*/\nlong order2(long p) \n{\n    long result = 1;\n    long\
    \ a = 2;\n    while (modp(result, p) != 1) {\n        result = result + 1;\n \
    \   }\n    return result;\n}\n/*\nReturn the number of elements in the finite\
    \ field with p elements.\n                        \n*/\nlong order3(long p) \n\
    {\n    long result = 1;\n    long a = 2;\n    while (modp(result, p) != 1) {\n\
    \        result = result + 1;\n    }\n    return result;\n}\n/*\nReturn the number\
    \ of elements in the finite field with p elements.\n                        \n\
    */\nlong order4(long p) \n{\n    long result = 1;\n    long a = 2;\n    while\
    \ (modp(result, p) != 1) {\n        result = result + 1;\n    }\n    return result;\n\
    }\n/*\nReturn the number of elements in the finite field with p elements.\n  \
    \                      \n*/\nlong order5(long p) \n{\n    long result = 1;\n \
    \   long a = 2;\n    while (modp(result, p) != 1) {\n        result = result +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn the number of elements in the finite\
    \ field with p elements.\n                        \n*/\nlong order6(long p) \n\
    {\n    long result = 1;\n    long a\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv4xq2_xc.d(93): Error: semicolon expected, not \''unittest\''\n/tmp/tmpv4xq2_xc.d(93):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpv4xq2_xc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2\
    \ == 1) {\n            result = (result * a) % p;\n        }\n        n = n >>\
    \ 1;\n        a = (a * a) % p;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhnaszqh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n = n / 2;\n    }\n    return result;\n}\n\
    /*\nReturn the number of elements in the group of order p-1.\n               \
    \         \n*/\nlong order(long p) \n{\n    long phi = p - 1;\n    long result\
    \ = phi;\n    long n = 2;\n    while (n * n <= phi) \n    {\n        if (phi %\
    \ n == 0) \n        {\n            while (phi % n == 0) \n            {\n    \
    \            phi = phi / n;\n            }\n            result = result - result\
    \ / n;\n        }\n        n = n + 1;\n    }\n    if (phi > 1) \n    {\n     \
    \   result = result - result / phi;\n    }\n    return result;\n}\n/*\nReturn\
    \ the number of elements in the group of order p^n.\n                        \n\
    */\nlong order(long p, long n) \n{\n    long result = 1;\n    long i = 0;\n  \
    \  while (i < n) \n    {\n        result = result * order(p);\n        i = i +\
    \ 1;\n    }\n    return result;\n}\n/*\nReturn the number of elements in the group\
    \ of order p^n.\n                        \n*/\nlong order(long p, long n) \n{\n\
    \    long result = 1;\n    long i = 0;\n    while (i < n) \n    {\n        result\
    \ = result * order(p);\n        i = i + 1;\n    }\n    return result;\n}\n/*\n\
    Return the number of elements in the group of order p^n.\n                   \
    \     \n*/\nlong order(long p, long n) \n{\n    long result = 1;\n    long i =\
    \ 0;\n    while (i < n) \n    {\n        result = result * order(p);\n       \
    \ i = i + 1;\n   \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkzws7b80.d(92): Error: found \''unittest\'' instead of statement\n/tmp/tmpkzws7b80.d(104):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkzws7b80.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n >>= 1;\n    }\n    return res;\n}\n/*\nReturn n^-1 modulo p (be aware of\
    \ numerics).\n                        \n*/\nlong modinv(long n, long p) \n{\n\
    \    return modp(p - 2, p);\n}\n/*\nReturn the number of primes less than or equal\
    \ to n.\n                        \n*/\nlong pi(long n) \n{\n    long res = 0;\n\
    \    long m = (long)sqrt(n);\n    foreach (i; 2 .. m + 1) {\n        if (n % i\
    \ == 0) {\n            res += 1;\n            while (n % i == 0) {\n         \
    \       n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        res\
    \ += 1;\n    }\n    return res;\n}\n/*\nReturn the number of primes less than\
    \ or equal to n.\n                        \n*/\nlong pi(long n) \n{\n    long\
    \ res = 0;\n    long m = (long)sqrt(n);\n    foreach (i; 2 .. m + 1) {\n     \
    \   if (n % i == 0) {\n            res += 1;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n\
    \        res += 1;\n    }\n    return res;\n}\n/*\nReturn the number of primes\
    \ less than or equal to n.\n                        \n*/\nlong pi(long n) \n{\n\
    \    long res = 0;\n    long m = (long)sqrt(n);\n    foreach (i; 2 .. m + 1) {\n\
    \        if (n % i == 0) {\n            res += 1;\n            while (n % i ==\
    \ 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n >\
    \ 1) {\n\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp898n50su.d(35): Error: C style cast illegal, use cast(long)sqrt(n)\n/tmp/tmp898n50su.d(56):
    Error: C style cast illegal, use cast(long)sqrt(n)\n/tmp/tmp898n50su.d(77): Error:
    C style cast illegal, use cast(long)sqrt(n)\n/tmp/tmp898n50su.d(88): Error: found
    \''unittest\'' instead of statement\n/tmp/tmp898n50su.d(100): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp898n50su.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcofogxj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) {\n        if (n & 1)\n            r = (r\
    \ * 2) % p;\n        n >>= 1;\n        if (n > 0)\n            r = (r * r) % p;\n\
    \    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6dgmfm8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk9jc7om.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n           \
    \ r = (r * 2) % p;\n        }\n        n = n / 2;\n    }\n    return r;\n}\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpurvn1_qk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1)\n            result = (result * a) % p;\n        n = n >> 1;\n\
    \        a = (a * a) % p;\n    }\n    return result;\n}\n/*\nReturn 2^n modulo\
    \ p (be aware of numerics).\n                        \n*/\nlong modp(long n, long\
    \ p) \n{\n    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n \
    \       if (n % 2 == 1)\n            result = (result * a) % p;\n        n = n\
    \ >> 1;\n        a = (a * a) % p;\n    }\n    return result;\n}\n/*\nReturn 2^n\
    \ modulo p (be aware of numerics).\n                        \n*/\nlong modp(long\
    \ n, long p) \n{\n    long result = 1;\n    long a = 2;\n    while (n > 0) \n\
    \    {\n        if (n % 2 == 1)\n            result = (result * a) % p;\n    \
    \    n = n >> 1;\n        a = (a * a) % p;\n    }\n    return result;\n}\n/*\n\
    Return 2^n modulo p (be aware of numerics).\n                        \n*/\nlong\
    \ modp(long n, long p) \n{\n    long result = 1;\n    long a = 2;\n    while (n\
    \ > 0) \n    {\n        if (n % 2 == 1)\n            result = (result * a) % p;\n\
    \        n = n >> 1;\n        a = (a * a) % p;\n    }\n    return result;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, long p) \n{\n    long result = 1;\n    long a = 2;\n    while\
    \ (n > 0) \n    {\n        if (n % 2 == 1)\n            result = (result * a)\
    \ % p;\n        n = n >> 1;\n       \nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmn40mghz.d(85): Error: found \''unittest\'' instead of statement\n/tmp/tmpmn40mghz.d(97):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmn40mghz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n      \
    \      result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n\
    \    return result;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    \
    \                    \n*/\nlong modp(long n, long p) \n{\n    long result = 1;\n\
    \    while (n > 0) \n    {\n        if (n & 1) \n            result = (result\
    \ * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n    return result;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, long p) \n{\n    long result = 1;\n    while (n > 0) \n    {\n\
    \        if (n & 1) \n            result = (result * 2) % p;\n        n >>= 1;\n\
    \        2 %= p;\n    }\n    return result;\n}\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n      \
    \      result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n\
    \    return result;\n}\n/*\nReturn 2^n modulo p (be aware of numerics).\n    \
    \                    \n*/\nlong modp(long n, long p) \n{\n    long result = 1;\n\
    \    while (n > 0) \n    {\n        if (n & 1) \n            result = (result\
    \ * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n    return result;\n}\n\
    /*\nReturn 2^n modulo p (be aware of numerics).\n                        \n*/\n\
    long modp(long n, long p) \n{\n    long result = 1;\n    while (n > 0)\nunittest\n\
    {\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplps4remw.d(91): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplps4remw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) {\n        if (n & 1) r = (r * 2) % p;\n \
    \       n >>= 1;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplmzz1wft.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\n            r\
    \ = (r * 2) % p;\n        n /= 2;\n    }\n    return r;\n}\n/*\nReturn the number\
    \ of digits of n in base b.\n                                \n*/\nlong digits(long\
    \ n, long b) \n{\n    long d = 0;\n    while (n > 0) {\n        n /= b;\n    \
    \    d++;\n    }\n    return d;\n}\n/*\nReturn the number of digits of n in base\
    \ b.\n                                \n*/\nlong digits(long n, long b) \n{\n\
    \    long d = 0;\n    while (n > 0) {\n        n /= b;\n        d++;\n    }\n\
    \    return d;\n}\n/*\nReturn the number of digits of n in base b.\n         \
    \                       \n*/\nlong digits(long n, long b) \n{\n    long d = 0;\n\
    \    while (n > 0) {\n        n /= b;\n        d++;\n    }\n    return d;\n}\n\
    /*\nReturn the number of digits of n in base b.\n                            \
    \    \n*/\nlong digits(long n, long b) \n{\n    long d = 0;\n    while (n > 0)\
    \ {\n        n /= b;\n        d++;\n    }\n    return d;\n}\n/*\nReturn the number\
    \ of digits of n in base b.\n                                \n*/\nlong digits(long\
    \ n, long b) \n{\n    long d = 0;\n    while (n > 0) {\n        n /= b;\n    \
    \    d++;\n    }\n    return d;\n}\n/*\nReturn the number of digits of n in base\
    \ b.\n                                \n*/\nlong digits(long n, long b) \n{\n\
    \    long d = 0;\n    while (n > 0) {\n        n /= b;\n        d++;\n    }\n\
    \    return d;\n}\n/*\nReturn the number of digits of n in base b.\n         \
    \                       \n*/\nlong digits(long n, long b) \n{\n    long d = 0;\n\
    \   \nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuk47yu6n.d(103): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuk47yu6n.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) {\n        if (n & 1)\n            res =\
    \ (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpluj152tn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) res\
    \ = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbmo0s_or.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\n/*\nReturn the number of elements of the multiplicative\
    \ group modulo p.\n                        \n*/\nlong order(long p) \n{\n    long\
    \ phi = p-1;\n    long n = phi;\n    long result = n;\n    for (long i = 2; i\
    \ * i <= n; ++i)\n        if (n % i == 0) {\n            while (n % i == 0)\n\
    \                n /= i;\n            result -= result / i;\n        }\n    if\
    \ (n > 1)\n        result -= result / n;\n    return result;\n}\n/*\nReturn a\
    \ generator of the multiplicative group modulo p.\n                        \n\
    */\nlong generator(long p) \n{\n    long phi = p-1;\n    long n = phi;\n    for\
    \ (long i = 2; i * i <= n; ++i)\n        if (n % i == 0) {\n            while\
    \ (n % i == 0)\n                n /= i;\n            if ((modp(phi / i, p) ==\
    \ 1) || (modp(phi / (phi / i), p) == 1))\n                return -1;\n       \
    \ }\n    if (n > 1) {\n        if ((modp(phi / n, p) == 1) || (modp(phi / (phi\
    \ / n), p) == 1))\n            return -1;\n    }\n    long g = 2;\n    while (g\
    \ < p) {\n        if (modp(phi, p) != 1)\n            return -1;\n        ++g;\n\
    \    }\n    return g;\n}\n/*\nReturn the discrete logarithm of y to the base g\
    \ modulo p.\n                        \n*/\nlong discrete_log(long g, long y, long\
    \ p) \n{\n    long phi = p-1;\n    long m = ceil(sqrt(phi));\nunittest\n{\n  \
    \  alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx0q8txhr.d(73): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx0q8txhr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n = n / 2;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtj057uq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk9jc7om.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n      \
    \      result = (result * 2) % p;\n        n >>= 1;\n        2 %= p;\n    }\n\
    \    return result;\n}\n/*\nReturn the number of bits in the binary representation\
    \ of n.\n                        \n*/\nlong bitlength(long n) \n{\n    long len\
    \ = 0;\n    while (n > 0) \n    {\n        len++;\n        n >>= 1;\n    }\n \
    \   return len;\n}\n/*\nReturn the number of set bits in the binary representation\
    \ of n.\n                        \n*/\nlong bitcount(long n) \n{\n    long count\
    \ = 0;\n    while (n > 0) \n    {\n        count += n & 1;\n        n >>= 1;\n\
    \    }\n    return count;\n}\n/*\nReturn the parity of the number of set bits\
    \ in the binary representation of n.\n                        \n*/\nlong parity(long\
    \ n) \n{\n    long p = 0;\n    while (n > 0) \n    {\n        p = !p;\n      \
    \  n &= (n - 1);\n    }\n    return p;\n}\n/*\nReturn the number of trailing zeros\
    \ in the binary representation of n.\n                        \n*/\nlong tzcount(long\
    \ n) \n{\n    if (n == 0)\n        return 64;\n    long tz = 0;\n    while ((n\
    \ & 1) == 0) \n    {\n        tz++;\n        n >>= 1;\n    }\n    return tz;\n\
    }\n/*\nReturn the number of trailing zeros in the binary representation of n.\n\
    \                        \n*/\nlong lzcount(long n) \n{\n    if (n == 0)\n   \
    \     return 64;\n    long tz = 0;\n    while ((n & 1) == 0) \n    {\n       \
    \ tz++;\n        n >>= 1;\n    }\n    return tz;\n}\n/*\nReturn the number of\
    \ 1-bits in the binary representation of n.\n                        \n*/\nlong\
    \ popcount(long n) \n{\n    long count = 0\nunittest\n{\n    alias candidate =\
    \ modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L)\
    \ == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L)\
    \ == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcjrk2127.d(100): Error: semicolon expected, not \''unittest\''\n/tmp/tmpcjrk2127.d(100):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpcjrk2127.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n != 0) \n    {\n        if ((n & 1) != 0)\n    \
    \        r = (r * 2) % p;\n        n >>= 1;\n        if (n != 0)\n           \
    \ r = (r * r) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybu7lpne.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n           \
    \ r = (r * 2) % p;\n        n >>= 1;\n        if (n > 0) \n            r = (r\
    \ * r) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8cnqnojc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1) \n        {\n            result = (result * a) % p;\n        }\n\
    \        a = (a * a) % p;\n        n = n / 2;\n    }\n    return result;\n}\n\
    /*\nReturn the number of elements in the group of units modulo p.\n          \
    \              \n*/\nlong order(long p) \n{\n    long phi = p - 1;\n    long result\
    \ = phi;\n    long n = 2;\n    while (n * n <= p) \n    {\n        if (phi % n\
    \ == 0) \n        {\n            while (phi % n == 0) \n            {\n      \
    \          phi = phi / n;\n            }\n            result = result - result\
    \ / n;\n        }\n        n = n + 1;\n    }\n    if (phi > 1) \n    {\n     \
    \   result = result - result / phi;\n    }\n    return result;\n}\n/*\nReturn\
    \ the order of a modulo p.\n                        \n*/\nlong order(long a, long\
    \ p) \n{\n    long phi = p - 1;\n    long result = phi;\n    long n = 2;\n   \
    \ while (n * n <= p) \n    {\n        if (phi % n == 0) \n        {\n        \
    \    while (phi % n == 0) \n            {\n                phi = phi / n;\n  \
    \          }\n            result = result - result / n;\n        }\n        n\
    \ = n + 1;\n    }\n    if (phi > 1) \n    {\n        result = result - result\
    \ / phi;\n    }\n    long exponent = result;\n    long b = modp(exponent, p);\n\
    \    while (b != 1) \n    {\n        exponent = exponent * 2;\n        b = modp(exponent,\
    \ p);\n    }\n    return exponent;\n}\n/*\nReturn the order of a modulo p.\n \
    \                       \n*/\nlong order(long a, long p) \n{\n    long phi = p\n\
    unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n\
    \    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) ==\
    \ 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L)\
    \ == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L)\
    \ == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpum76ja54.d(90): Error: semicolon expected, not \''unittest\''\n/tmp/tmpum76ja54.d(90):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpum76ja54.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0) \n    {\n        if (power & 1) \n        {\n            result = (result\
    \ * value) % p;\n        }\n        value = (value * value) % p;\n        power\
    \ /= 2;\n    }\n    return result;\n}\n/*\nReturn the number of integers in the\
    \ range [a, b] that are coprime to n.\n                        \n*/\nlong eulerPhi(long\
    \ n) \n{\n    long result = n;\n    long i;\n    for (i = 2; i * i <= n; i++)\
    \ \n    {\n        if (n % i == 0) \n        {\n            while (n % i == 0)\
    \ \n            {\n                n /= i;\n            }\n            result\
    \ -= result / i;\n        }\n    }\n    if (n > 1) \n    {\n        result -=\
    \ result / n;\n    }\n    return result;\n}\n/*\nReturn the number of integers\
    \ in the range [a, b] that are coprime to n.\n                        \n*/\nlong\
    \ countCoprimes(long a, long b, long n) \n{\n    return eulerPhi(n) * (b / n -\
    \ (a - 1) / n);\n}\n/*\nReturn the number of integers in the range [a, b] that\
    \ are coprime to n.\n                        \n*/\nlong countCoprimes(long a,\
    \ long b, long n) \n{\n    return eulerPhi(n) * (b / n - (a - 1) / n);\n}\n/*\n\
    Return the number of integers in the range [a, b] that are coprime to n.\n   \
    \                     \n*/\nlong countCoprimes(long a, long b, long n) \n{\n \
    \   return eulerPhi(n) * (b / n - (a - 1) / n);\n}\n/*\nReturn the number of integers\
    \ in the range [a, b] that are coprime to n.\n                        \n*/\nlong\
    \ countCoprimes(long a, long b, long n) \n{\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9yv2u4ne.d(78): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9yv2u4ne.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpditgudcz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp96n3fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) res\
    \ = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbmo0s_or.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    for (long i = 0; i < n; i++) \n    {\n        result\
    \ = (result * 2) % p;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp27s637cp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    for (long i = 0; i < n; i++) \n    {\n        res = (res\
    \ * 2) % p;\n    }\n    return res;\n}\n/*\nReturn the number of bits in the binary\
    \ representation of n.\n                        \n*/\nlong bits(long n) \n{\n\
    \    long res = 0;\n    while (n > 0) \n    {\n        n >>= 1;\n        res++;\n\
    \    }\n    return res;\n}\n/*\nReturn the parity of the binary representation\
    \ of n.\n                        \n*/\nlong parity(long n) \n{\n    long res =\
    \ 0;\n    while (n > 0) \n    {\n        res ^= n & 1;\n        n >>= 1;\n   \
    \ }\n    return res;\n}\n/*\nReturn the number of trailing zeros in the binary\
    \ representation of n.\n                        \n*/\nlong trailingZeros(long\
    \ n) \n{\n    long res = 0;\n    while (n > 0 && (n & 1) == 0) \n    {\n     \
    \   n >>= 1;\n        res++;\n    }\n    return res;\n}\n/*\nReturn the number\
    \ of trailing ones in the binary representation of n.\n                      \
    \  \n*/\nlong trailingOnes(long n) \n{\n    long res = 0;\n    while (n > 0 &&\
    \ (n & 1) == 1) \n    {\n        n >>= 1;\n        res++;\n    }\n    return res;\n\
    }\n/*\nReturn the number of leading zeros in the binary representation of n.\n\
    \                        \n*/\nlong leadingZeros(long n) \n{\n    long res = 0;\n\
    \    while (n > 0) \n    {\n        n <<= 1;\n        res++;\n    }\n    return\
    \ res;\n}\n/*\nReturn the number of leading ones in the binary representation\
    \ of n.\n                        \n*/\nlong leadingOnes(long n) \n{\n    long\
    \ res = 0;\n    while (n > 0) \n    {\n        n <<= 1;\n        res++;\n    }\n\
    \    return res;\n}\n/*\nReturn the number of 1-bits in the binary representation\
    \ of\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L)\
    \ == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6pxg76fa.d(100): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pxg76fa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n >>= 1;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsk9jc7om.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) \n    {\n        if (n % 2 == 1)\n       \
    \     r = (r * 2) % p;\n        n /= 2;\n    }\n    return r;\n}\nunittest\n{\n\
    \    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvjgivrw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long power = n;\n    long value = 2;\n    while (power\
    \ > 0)\n    {\n        if (power & 1)\n            result = (result * value) %\
    \ p;\n        value = (value * value) % p;\n        power /= 2;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcofogxj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2 ==\
    \ 1) {\n            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n\
    \        n = n / 2;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq56_f3ha.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n & 1)\n            result = (result * a) % p;\n        a = (a * a) % p;\n\
    \        n >>= 1;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6did7p_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n           \
    \ r = (r * 2) % p;\n        n >>= 1;\n        if (n > 0) \n            r = (r\
    \ * r) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8cnqnojc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1) {\n\
    \            res = (res * a) % p;\n        }\n        a = (a * a) % p;\n     \
    \   n >>= 1;\n    }\n    return res;\n}\n/*\nReturn the number of elements in\
    \ the multiplicative group of integers modulo p that are relatively prime to p\
    \ (i.e. the group of units of Z/pZ).\n                        \n*/\nlong phi(long\
    \ p) \n{\n    long res = p;\n    long i = 2;\n    while (i * i <= p) {\n     \
    \   if (p % i == 0) {\n            while (p % i == 0) {\n                p /=\
    \ i;\n            }\n            res -= res / i;\n        }\n        i++;\n  \
    \  }\n    if (p > 1) {\n        res -= res / p;\n    }\n    return res;\n}\n/*\n\
    Return the number of elements in the multiplicative group of integers modulo p\
    \ that are relatively prime to p (i.e. the group of units of Z/pZ).\n        \
    \                \n*/\nlong phi(long p) \n{\n    long res = p;\n    long i = 2;\n\
    \    while (i * i <= p) {\n        if (p % i == 0) {\n            while (p % i\
    \ == 0) {\n                p /= i;\n            }\n            res -= res / i;\n\
    \        }\n        i++;\n    }\n    if (p > 1) {\n        res -= res / p;\n \
    \   }\n    return res;\n}\n/*\nReturn the number of elements in the multiplicative\
    \ group of integers modulo p that are relatively prime to p (i.e. the group of\
    \ units of Z/pZ).\n                        \n*/\nlong phi(long p) \n{\n    long\
    \ res = p;\n    long i = 2;\n    while (i * i <= p) {\n        if (p % i == 0)\
    \ {\n            while (p % i == 0) {\n                p /= i;\n            }\n\
    \            res -= res / i;\n        }\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5kkzuen9.d(79): Error: found \''unittest\'' instead of statement\n/tmp/tmp5kkzuen9.d(91):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kkzuen9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if\
    \ (n % 2 == 1)\n            result = (result * a) % p;\n        n = n >> 1;\n\
    \        a = (a * a) % p;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zo_qgyo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1)\n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn true if n is prime.\n        \
    \                \n*/\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzw14rjk8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1) \n         \
    \   res = (res * 2) % p;\n        n >>= 1;\n        res = (res * res) % p;\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppvhbkhw8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) \n    {\n        if (n\
    \ & 1) \n            res = (res * a) % p;\n        a = (a * a) % p;\n        n\
    \ >>= 1;\n    }\n    return res;\n}\n/*\nReturn the Jacobi symbol (a/b) (be aware\
    \ of numerics).\n                        \n*/\nlong jacobi(long a, long b) \n\
    {\n    long res = 1;\n    while (a != 0) \n    {\n        while ((a & 1) == 0)\
    \ \n        {\n            a >>= 1;\n            if ((b & 7) == 3 || (b & 7) ==\
    \ 5) \n                res = -res;\n        }\n        long t = a;\n        a\
    \ = b;\n        b = t;\n        if ((a & 3) == 3 && (b & 3) == 3) \n         \
    \   res = -res;\n        a %= b;\n    }\n    if (b == 1) \n        return res;\n\
    \    return 0;\n}\n/*\nReturn the Legendre symbol (a/p) (be aware of numerics).\n\
    \                        \n*/\nlong legendre(long a, long p) \n{\n    return jacobi(a,\
    \ p);\n}\n/*\nReturn the Kronecker symbol (a/b) (be aware of numerics).\n    \
    \                    \n*/\nlong kronecker(long a, long b) \n{\n    if (b == 0)\
    \ \n        return (a == 1 || a == -1) ? 1 : 0;\n    if (b == -1) \n        return\
    \ (a < 0) ? -1 : 1;\n    if (b == 2) \n        return (a & 7) == 1 || (a & 7)\
    \ == 7 ? 1 : 0;\n    if ((b & 1) == 0) \n        return (a & 1) == 0 ? kronecker(a\
    \ >> 1, b >> 1) : 0;\n    long t = (a % b + b) % b;\n    return (b < 0) ? kronecker(b,\
    \ t) : krone\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy5n6div_.d(70): Error: found \''unittest\'' when expecting \'';\''
    following return statement\n/tmp/tmpy5n6div_.d(82): Error: found \''EOF\'' when
    expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpy5n6div_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n & 1)\n\
    \            res = (res * a) % p;\n        a = (a * a) % p;\n        n >>= 1;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdvry33u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long r = 1;\n    long b = 2;\n    while (n > 0) {\n        if (n % 2 == 1)\
    \ {\n            r = (r * b) % p;\n        }\n        n = n / 2;\n        b =\
    \ (b * b) % p;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = modp;\n\
    \n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n\
    \    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n\
    \    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n\
    \    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5dyjkfr3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long res = 1;\n    while (n > 0) \n    {\n        if (n & 1)\n          \
    \  res = (res * 2) % p;\n        n >>= 1;\n        res = res % p;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L,\
    \ 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L,\
    \ 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L,\
    \ 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L,\
    \ 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0uayjhz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn 2^n modulo p (be aware\
    \ of numerics).\n                        \n*/\nlong modp(long n, long p) \n{\n\
    \    long result = 1;\n    long a = 2;\n    while (n > 0) {\n        if (n % 2\
    \ == 1) {\n            result = (result * a) % p;\n        }\n        n = n /\
    \ 2;\n        a = (a * a) % p;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L,\
    \ 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L,\
    \ 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L,\
    \ 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8tnf9tj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015384
