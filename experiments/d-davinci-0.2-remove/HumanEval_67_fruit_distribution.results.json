{
  "language": "d",
  "name": "HumanEval_67_fruit_distribution",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.find('A')]);\n    long oranges = to!long(s[s.find('A') + 1 .. s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_18lcwxq.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp_18lcwxq.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_18lcwxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..$-1]);\n    long apples = to!long(s[$-1..$]);\n    long mangoes = n - oranges - apples;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjz_al0yn.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpjz_al0yn.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjz_al0yn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe1xldg99.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpe1xldg99.__unittest_L29_C1() [0x427ad8]\n??:? void tmpe1xldg99.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.indexOf('A')]);\n    long oranges = to!long(s[s.indexOf('A') + 1 .. s.indexOf('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw8r3cwbh.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpw8r3cwbh.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8r3cwbh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd6milft2.d(83): Error: `tmpd6milft2.fruit_distribution` called with argument types `(string, long)` matches both:\n/tmp/tmpd6milft2.d(13):     `tmpd6milft2.fruit_distribution(string s, long n)`\nand:\n/tmp/tmpd6milft2.d(63):     `tmpd6milft2.fruit_distribution(string s, long n)`\n/tmp/tmpd6milft2.d(84): Error: `tmpd6milft2.fruit_distribution` called with argument types `(string, long)` matches both:\n/tmp/tmpd6milft2.d(13):     `tmpd6milft2.fruit_distribution(string s, long n)`\nand:\n/tmp/tmpd6milft2.d(63):     `tmpd6milft2.fruit_distribution(string s, long n)`\n/tmp/tmpd6milft2.d(85): Error: `tmpd6milft2.fruit_distribution` called with argument types `(string, long)` matches both:\n/tmp/tmpd6milft2.d(13):     `tmpd6milft2.fruit_distribution(string s, long n)`\nand:\n/tmp/tmpd6milft2.d(63):     `tmpd6milft2.fruit_distribution(string s, long n)`\n/tmp/tmpd6milft2.d(86): Error: `tmpd6milft2.fruit_distribution` called with argument types `(string, long)` matches both:\n/tmp/tmpd6milft2.d(13):     `tmpd6milft2.fruit_",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = 0;\n    long apples = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuh37m1hs.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpuh37m1hs.__unittest_L29_C1() [0x427ad8]\n??:? void tmpuh37m1hs.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - (apples + oranges);\n}\n/*\n    Given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"AO\", 5) == 2\n    fruit_distribution(\"AAO\", 5) == 1\n    fruit_distribution(\"AAO\", 6) == 2\n    fruit_distribution(\"AAO\", 7) == 3\n    fruit_distribution(\"AAO\", 8) == 4\n*/\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpenzverog.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpenzverog.__unittest_L35_C1() [0x427ac0]\n??:? void tmpenzverog.__modtest() [0x427be4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    long total_fruits = apples + oranges + mangoes;\n    long total_fruits_in_basket = n;\n    long mangoes_in_basket = total_fruits_in_basket - total_fruits;\n    return mangoes_in_basket;\n}\n/*\n    for example:\n    fruit_distribution(\"AOAM\", 10) ==> 2\n    fruit_distribution(\"AOAM\", 5) ==> 0\n    fruit_distribution(\"AOAM\", 15) ==> 7\n*/\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4c0ylgea.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp4c0ylgea.__unittest_L38_C1() [0x427adc]\n??:? void tmp4c0ylgea.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0 .. s.find(' ')]);\n    long apples = to!long(s[s.find(' ') + 1 .. $]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptwow1g9i.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmptwow1g9i.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwow1g9i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjckc1lfs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpjckc1lfs.__unittest_L25_C1() [0x427ac4]\n??:? void tmpjckc1lfs.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long total_fruits = 0;\n    long total_apples = 0;\n    long total_oranges = 0;\n    long total_mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n        {\n            total_apples++;\n        }\n        else if(c == 'O')\n        {\n            total_oranges++;\n        }\n        else\n        {\n            total_mangoes++;\n        }\n    }\n    total_fruits = total_apples + total_oranges + total_mangoes;\n    return n - total_fruits;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcimsi8m0.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmpcimsi8m0.__unittest_L37_C1() [0x427ad4]\n??:? void tmpcimsi8m0.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoli8rpc8.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpoli8rpc8.__unittest_L25_C1() [0x427abc]\n??:? void tmpoli8rpc8.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('a')]);\n    long oranges = to!long(s[s.find('a')+1..s.find('o')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppy4a2x5n.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmppy4a2x5n.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy4a2x5n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A') + 1..s.find('O')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphqiobfat.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmphqiobfat.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphqiobfat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'A')\n            count++;\n        else if (s[i] == 'O')\n            count++;\n    }\n    return n - count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr_vy2www.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpr_vy2www.__unittest_L25_C1() [0x427ae0]\n??:? void tmpr_vy2www.__modtest() [0x427c04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aab2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa89]\n??:? runModuleUnitTests [0x42b9f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428348]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        switch(c)\n        {\n            case 'a':\n                apples++;\n                break;\n            case 'o':\n                oranges++;\n                break;\n            case 'm':\n                mangoes++;\n                break;\n        }\n    }\n    return n - apples - oranges;\n}\n/*\n    Given an array of integers and an integer k, you need to find the total number of \n    continuous subarrays whose sum equals to k.\n    for example:\n*/\nlong subarraySum(int[] nums, int k) \n{\n    long count = 0;\n    long sum = 0;\n    Map!int map = new Map!int();\n    map[0] = 1;\n    foreach(num; nums)\n    {\n        sum += num;\n        if(map.contains(sum - k))\n        {\n            count += map[sum - k];\n        }\n        map[sum]++;\n    }\n    return count;\n}\n/*\n    Given a string s, find the longest palindromic substring in s. \n    You may assume that the maximum length of s is 1000.\n    for example:\n*/\nstring longestPalindrome(string s) \n{\n    if(s.length == 0)\n    {\n        return \"\";\n    }\n    int start = 0;\n    int end = 0;\n    for(int i = 0; i < s.length; i++)\n    {\n        int len1 = expandAroundCenter(s, i, i);\n        int len2 = expandAroundCenter(s, i, i + 1);\n        int len = max(len1, len2);\n        if(len > end - start)\n        {\n            start = i - (len - 1) / 2;\n            end = i + len / 2;\n        }\n    }\n    return s[start..end + 1];\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw0owtogj.d(20): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\n/tmp/tmpw0owtogj.d(44): Error: template instance `Map!int` template `Map` is not defined\n/tmp/tmpw0owtogj.d(44): Error: template instance `Map!int` template `Map` is not defined\n/tmp/tmpw0owtogj.d(72): Error: undefined identifier `expandAroundCenter`\n/tmp/tmpw0owtogj.d(73): Error: undefined identifier `expandAroundCenter`\n/tmp/tmpw0owtogj.d(74): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0owtogj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find(\"A\")]);\n    long oranges = to!long(s[s.find(\"A\")+1..s.find(\"O\")]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbkghgyiy.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpbkghgyiy.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkghgyiy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long result = 0;\n    long oranges = 0;\n    long apples = 0;\n    foreach(c; s)\n    {\n        if(c == 'o')\n            oranges++;\n        else if(c == 'a')\n            apples++;\n    }\n    result = n - (oranges + apples);\n    return result;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvcd78_b_.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpvcd78_b_.__unittest_L28_C1() [0x427ac8]\n??:? void tmpvcd78_b_.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe1xldg99.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpe1xldg99.__unittest_L29_C1() [0x427ad8]\n??:? void tmpe1xldg99.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a') apples++;\n        else oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfn1i217g.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpfn1i217g.__unittest_L23_C1() [0x427abc]\n??:? void tmpfn1i217g.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..1]);\n    long apples = to!long(s[2..3]);\n    long mango = n - oranges - apples;\n    return mango;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpywumit0k.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpywumit0k.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpywumit0k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoli8rpc8.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpoli8rpc8.__unittest_L25_C1() [0x427abc]\n??:? void tmpoli8rpc8.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(c == 'A' || c == 'O')\n            count++;\n    }\n    return n - count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp3oonlk9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpp3oonlk9.__unittest_L23_C1() [0x427ab8]\n??:? void tmpp3oonlk9.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjckc1lfs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpjckc1lfs.__unittest_L25_C1() [0x427ac4]\n??:? void tmpjckc1lfs.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    foreach(i; s)\n    {\n        if(i == 'A' || i == 'O')\n            count++;\n    }\n    return n - count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7_l01c1a.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmp7_l01c1a.__unittest_L23_C1() [0x427ab8]\n??:? void tmp7_l01c1a.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnr31orb3.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpnr31orb3.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr31orb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = 0;\n    long apples = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'o') oranges++;\n        else if(c == 'a') apples++;\n        else if(c == 'm') mango++;\n    }\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp47civy_q.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmp47civy_q.__unittest_L26_C1() [0x427ad4]\n??:? void tmp47civy_q.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2af1zx70.d(67): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2af1zx70.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv6bentcp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpv6bentcp.__unittest_L25_C1() [0x427ac4]\n??:? void tmpv6bentcp.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..s.find('a')]);\n    long apples = to!long(s[s.find('a')+1..$]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy8yyp37x.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpy8yyp37x.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8yyp37x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) \n    with at most one element deletion. In other words, you want to choose a subarray and optionally \n    delete one element from it so that there is still at least one element left and the sum of the \n    remaining elements is maximum possible.\n    Note that the subarray needs to be non-empty after deleting one element.\n    for example:\n*/\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0v_6wgq5.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp0v_6wgq5.__unittest_L33_C1() [0x427ac4]\n??:? void tmp0v_6wgq5.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..1]);\n    long apples = to!long(s[2..3]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpazq8f7c1.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpazq8f7c1.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazq8f7c1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..$-1]);\n    long apples = to!long(s[$-1..$]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1xtcfsma.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp1xtcfsma.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xtcfsma.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjckc1lfs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpjckc1lfs.__unittest_L25_C1() [0x427ac4]\n??:? void tmpjckc1lfs.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..s.find('A')]);\n    long apples = to!long(s[s.find('A')+1..$]);\n    long total = oranges + apples;\n    return n - total;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx75tx8a9.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpx75tx8a9.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx75tx8a9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(c == 'A' || c == 'O')\n            count++;\n    }\n    return n - count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp3oonlk9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpp3oonlk9.__unittest_L23_C1() [0x427ab8]\n??:? void tmpp3oonlk9.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprqu3ri9i.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmprqu3ri9i.__unittest_L25_C1() [0x427abc]\n??:? void tmprqu3ri9i.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    long total = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    total = apples + oranges + mangoes;\n    return n - total;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa8im4h61.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpa8im4h61.__unittest_L31_C1() [0x427adc]\n??:? void tmpa8im4h61.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp812c3ldp.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp812c3ldp.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp812c3ldp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..s.find('A')]);\n    long apples = to!long(s[s.find('A')+1..$]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbykoze0u.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpbykoze0u.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbykoze0u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..$-1]);\n    long apples = to!long(s[$-1..$]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1xtcfsma.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp1xtcfsma.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xtcfsma.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mango++;\n    }\n    long total = apples + oranges + mango;\n    long result = n - total;\n    return result;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzqxkewhe.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpzqxkewhe.__unittest_L31_C1() [0x427adc]\n??:? void tmpzqxkewhe.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find(\"A\")]);\n    long oranges = to!long(s[s.find(\"A\")+1..s.find(\"O\")]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcn6nxx5_.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpcn6nxx5_.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcn6nxx5_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(i; s)\n    {\n        if(i == 'A')\n            apples++;\n        else if(i == 'O')\n            oranges++;\n        else if(i == 'M')\n            mango++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw3392m96.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmpw3392m96.__unittest_L29_C1() [0x427ad4]\n??:? void tmpw3392m96.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(immutable c; s)\n    {\n        switch(c)\n        {\n            case 'a': apples++; break;\n            case 'o': oranges++; break;\n            case 'm': mangoes++; break;\n        }\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu4abokql.d(20): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4abokql.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mango++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpi1dms3gt.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpi1dms3gt.__unittest_L29_C1() [0x427ad8]\n??:? void tmpi1dms3gt.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    long total = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mango++;\n    }\n    total = apples + oranges + mango;\n    return n - total;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6zpb3g8a.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp6zpb3g8a.__unittest_L31_C1() [0x427adc]\n??:? void tmp6zpb3g8a.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(c == 'A' || c == 'O')\n            count++;\n    }\n    return n - count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp3oonlk9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpp3oonlk9.__unittest_L23_C1() [0x427ab8]\n??:? void tmpp3oonlk9.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long mango_count = 0;\n    long apple_count = 0;\n    long orange_count = 0;\n    long total_count = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n        {\n            apple_count++;\n        }\n        else if(c == 'o')\n        {\n            orange_count++;\n        }\n        else if(c == 'm')\n        {\n            mango_count++;\n        }\n    }\n    total_count = apple_count + orange_count + mango_count;\n    if(total_count > n)\n    {\n        return mango_count - (total_count - n);\n    }\n    else\n    {\n        return mango_count;\n    }\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3v6scpv0.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmp3v6scpv0.__unittest_L44_C1() [0x427afc]\n??:? void tmp3v6scpv0.__modtest() [0x427c20]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('a')]);\n    long oranges = to!long(s[s.find('a')+1..s.find('o')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppy4a2x5n.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmppy4a2x5n.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy4a2x5n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(immutable c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjalqayrw.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmpjalqayrw.__unittest_L29_C1() [0x427ad4]\n??:? void tmpjalqayrw.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    long total = apples + oranges + mangoes;\n    if(total == n)\n        return mangoes;\n    else if(total > n)\n    {\n        long diff = total - n;\n        if(diff <= mangoes)\n            return mangoes - diff;\n        else\n            return 0;\n    }\n    else\n    {\n        long diff = n - total;\n        return mangoes + diff;\n    }\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkqo1h4ss.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmpkqo1h4ss.__unittest_L44_C1() [0x427b2c]\n??:? void tmpkqo1h4ss.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..$-2]);\n    long oranges = to!long(s[$-1..$]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphuori5_8.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmphuori5_8.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphuori5_8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.find('a')]);\n    long oranges = to!long(s[s.find('a') + 1 .. s.find('o')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4y3b4spl.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp4y3b4spl.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4y3b4spl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp812c3ldp.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp812c3ldp.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp812c3ldp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoli8rpc8.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpoli8rpc8.__unittest_L25_C1() [0x427abc]\n??:? void tmpoli8rpc8.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(char c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpu3mmq1ve.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpu3mmq1ve.__unittest_L26_C1() [0x427ac8]\n??:? void tmpu3mmq1ve.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprqu3ri9i.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmprqu3ri9i.__unittest_L25_C1() [0x427abc]\n??:? void tmprqu3ri9i.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoli8rpc8.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpoli8rpc8.__unittest_L25_C1() [0x427abc]\n??:? void tmpoli8rpc8.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long total_fruits = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c == 'o')\n            total_fruits++;\n    }\n    return n - total_fruits;\n}\n/*\n    Given an array of integers, return the number of the pairs of the integers that \n    have the same value.\n    for example:\n    [1, 2, 3, 2, 1, 2, 3, 2, 1] => 4\n    [1, 2, 3, 4, 5, 6, 7, 8, 9] => 0\n*/\nlong count_pairs(int[] arr) \n{\n    long count = 0;\n    foreach(i; 0 .. arr.length)\n    {\n        foreach(j; i + 1 .. arr.length)\n        {\n            if(arr[i] == arr[j])\n                count++;\n        }\n    }\n    return count;\n}\n/*\n    Given an array of integers, return the number of the pairs of the integers that \n    have the same value.\n    for example:\n    [1, 2, 3, 2, 1, 2, 3, 2, 1] => 4\n    [1, 2, 3, 4, 5, 6, 7, 8, 9] => 0\n*/\nlong count_pairs(int[] arr) \n{\n    long count = 0;\n    foreach(i; 0 .. arr.length)\n    {\n        foreach(j; i + 1 .. arr.length)\n        {\n            if(arr[i] == arr[j])\n                count++;\n        }\n    }\n    return count;\n}\n/*\n    Given an array of integers, return the number of the pairs of the integers that \n    have the same value.\n    for example:\n    [1, 2, 3, 2, 1, 2, 3, 2, 1] => 4\n    [1, 2, 3, 4, 5, 6, 7, 8, 9] => 0\n*/\nlong count_pairs(int[] arr) \n{\n    long count = 0;\n    foreach(i; 0 .. arr.length)\n    {\n\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0tw2nj9z.d(76): Error: found `unittest` instead of statement\n/tmp/tmp0tw2nj9z.d(88): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0tw2nj9z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        switch(c)\n        {\n            case 'a':\n                apples++;\n                break;\n            case 'o':\n                oranges++;\n                break;\n            case 'm':\n                mangoes++;\n                break;\n        }\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocia7ryx.d(20): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocia7ryx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.find('a')]);\n    long oranges = to!long(s[s.find('a')+1 .. s.find('o')]);\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp52297w0d.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp52297w0d.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp52297w0d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..1]);\n    long oranges = to!long(s[2..3]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph9b1g9v4.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmph9b1g9v4.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9b1g9v4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    auto [a, o] = tuple(s.split(\" \").map!(to!long));\n    return n - a - o;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0f1wirsm.d(15): Error: basic type expected, not `[`\n/tmp/tmp0f1wirsm.d(15): Error: found `,` when expecting `]`\n/tmp/tmp0f1wirsm.d(15): Error: semicolon expected, not `]`\n/tmp/tmp0f1wirsm.d(15): Error: found `]` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0f1wirsm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = 0, apples = 0;\n    foreach(c; s)\n    {\n        if(c == 'o') oranges++;\n        else if(c == 'a') apples++;\n    }\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgpcob3ow.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpgpcob3ow.__unittest_L23_C1() [0x427ac4]\n??:? void tmpgpcob3ow.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoli8rpc8.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpoli8rpc8.__unittest_L25_C1() [0x427abc]\n??:? void tmpoli8rpc8.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long mango = 0;\n    long apple = 0;\n    long orange = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apple++;\n        else if(c == 'o')\n            orange++;\n    }\n    mango = n - (apple + orange);\n    return mango;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmps3sje33l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmps3sje33l.__unittest_L28_C1() [0x427ac8]\n??:? void tmps3sje33l.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.find('A')]);\n    long oranges = to!long(s[s.find('A') + 1 .. s.find('O')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp58vheyks.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp58vheyks.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58vheyks.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long result = 0;\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    result = n - (apples + oranges);\n    return result;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp11d9ma4z.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmp11d9ma4z.__unittest_L28_C1() [0x427ac8]\n??:? void tmp11d9ma4z.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long total_fruits = 0;\n    long total_apples = 0;\n    long total_oranges = 0;\n    long total_mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n        {\n            total_apples++;\n        }\n        else if(c == 'o')\n        {\n            total_oranges++;\n        }\n        else\n        {\n            total_mangoes++;\n        }\n    }\n    total_fruits = total_apples + total_oranges + total_mangoes;\n    return n - total_fruits;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3tz1te5i.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmp3tz1te5i.__unittest_L37_C1() [0x427ad4]\n??:? void tmp3tz1te5i.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..$-1]);\n    long apples = to!long(s[$-1..$]);\n    long mangoes = n - oranges - apples;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjz_al0yn.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpjz_al0yn.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjz_al0yn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjckc1lfs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpjckc1lfs.__unittest_L25_C1() [0x427ac4]\n??:? void tmpjckc1lfs.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..1]);\n    long oranges = to!long(s[3..4]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzhvvl0cg.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpzhvvl0cg.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzhvvl0cg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2af1zx70.d(67): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2af1zx70.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..$]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiq_kuvtt.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpiq_kuvtt.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiq_kuvtt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp226f3p98.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmp226f3p98.__unittest_L29_C1() [0x427ad4]\n??:? void tmp226f3p98.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.find(\"A\")]);\n    long oranges = to!long(s[s.find(\"A\") + 1 .. s.find(\"O\")]);\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph6yqd2bn.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmph6yqd2bn.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph6yqd2bn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz5h14b25.d(70): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5h14b25.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe1xldg99.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpe1xldg99.__unittest_L29_C1() [0x427ad8]\n??:? void tmpe1xldg99.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = 0;\n    long apples = 0;\n    foreach(c; s)\n    {\n        if(c == 'o')\n            oranges++;\n        else if(c == 'a')\n            apples++;\n    }\n    return n - oranges - apples;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = 0;\n    long apples = 0;\n    foreach(c; s)\n    {\n        if(c == 'o')\n            oranges++;\n        else if(c == 'a')\n            apples++;\n    }\n    return n - oranges - apples;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = 0;\n    long apples = 0;\n    foreach(c; s)\n    {\n        if(c == 'o')\n            oranges++;\n        else if(c == 'a')\n            apples++;\n    }\n    return n - oranges - apples;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbiy_mucb.d(70): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbiy_mucb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    Task 2:\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    Task 3:\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    Task 4:\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqwr146zp.d(69): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwr146zp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long mango_count = 0;\n    long apple_count = 0;\n    long orange_count = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apple_count++;\n        else if(c == 'o')\n            orange_count++;\n    }\n    mango_count = n - (apple_count + orange_count);\n    return mango_count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmgr4z1i5.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpmgr4z1i5.__unittest_L28_C1() [0x427ac8]\n??:? void tmpmgr4z1i5.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpboubpco5.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpboubpco5.__unittest_L25_C1() [0x427ac8]\n??:? void tmpboubpco5.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long fruit_count = 0;\n    foreach(c; s)\n    {\n        if(c == 'A' || c == 'O')\n            fruit_count++;\n    }\n    return n - fruit_count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwh19f8le.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpwh19f8le.__unittest_L23_C1() [0x427ab8]\n??:? void tmpwh19f8le.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long total = 0;\n    foreach(c; s)\n    {\n        if(c == 'a' || c == 'o')\n            total++;\n    }\n    return n - total;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7pa38bks.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmp7pa38bks.__unittest_L23_C1() [0x427ab8]\n??:? void tmp7pa38bks.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A') apples++;\n        else oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8ab34k8c.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmp8ab34k8c.__unittest_L23_C1() [0x427abc]\n??:? void tmp8ab34k8c.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find(\" \")]);\n    long oranges = to!long(s[s.find(\" \") + 1..$]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiioxnvgo.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpiioxnvgo.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiioxnvgo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long mango_count = 0;\n    long apple_count = 0;\n    long orange_count = 0;\n    foreach(i; 0 .. s.length)\n    {\n        if(s[i] == 'a')\n        {\n            apple_count++;\n        }\n        else if(s[i] == 'o')\n        {\n            orange_count++;\n        }\n    }\n    mango_count = n - (apple_count + orange_count);\n    return mango_count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp40dalvxp.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmp40dalvxp.__unittest_L32_C1() [0x427af8]\n??:? void tmp40dalvxp.__modtest() [0x427c1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc37]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc5d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43010c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbe9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa1]\n??:? runModuleUnitTests [0x42ba0d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428360]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long[] arr = s.split(\" \").map!(a => a.to!long).array;\n    long a = arr[0];\n    long o = arr[1];\n    long m = n - a - o;\n    return m;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7rpus9q8.d(15): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7rpus9q8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnr31orb3.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpnr31orb3.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr31orb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    long total = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    total = apples + oranges + mangoes;\n    if(total == n)\n        return mangoes;\n    else if(total > n)\n    {\n        if(mangoes > 0)\n            return mangoes - (total - n);\n        else\n            return 0;\n    }\n    else\n        return mangoes + (n - total);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp352vaamr.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmp352vaamr.__unittest_L41_C1() [0x427b24]\n??:? void tmp352vaamr.__modtest() [0x427c48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]\n??:? runModuleUnitTests [0x42b9c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428314]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe1xldg99.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpe1xldg99.__unittest_L29_C1() [0x427ad8]\n??:? void tmpe1xldg99.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('a')]);\n    long oranges = to!long(s[s.find('a')+1..s.find('o')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbx0ka8xz.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpbx0ka8xz.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbx0ka8xz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(c == 'A' || c == 'O')\n            count++;\n    }\n    return n - count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp3oonlk9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpp3oonlk9.__unittest_L23_C1() [0x427ab8]\n??:? void tmpp3oonlk9.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjckc1lfs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpjckc1lfs.__unittest_L25_C1() [0x427ac4]\n??:? void tmpjckc1lfs.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv6bentcp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpv6bentcp.__unittest_L25_C1() [0x427ac4]\n??:? void tmpv6bentcp.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..s.find('A')]);\n    long apples = to!long(s[s.find('A')+1..$]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbykoze0u.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpbykoze0u.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbykoze0u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp812c3ldp.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp812c3ldp.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp812c3ldp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mango++;\n    }\n    long total = apples + oranges + mango;\n    long result = n - total;\n    return result;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mango++;\n    }\n    long total = apples + oranges + mango;\n    long result = n - total;\n    return result;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == '\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplqwnhwht.d(78): Error: unterminated character constant\n/tmp/tmplqwnhwht.d(79): Error: found `unittest` when expecting `)`\n/tmp/tmplqwnhwht.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmplqwnhwht.d(91): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplqwnhwht.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long total_apples = 0;\n    long total_oranges = 0;\n    long total_mangoes = 0;\n    foreach(char c; s)\n    {\n        if(c == 'a')\n            total_apples++;\n        else if(c == 'o')\n            total_oranges++;\n    }\n    total_mangoes = n - (total_apples + total_oranges);\n    return total_mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8s3f09ax.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmp8s3f09ax.__unittest_L28_C1() [0x427ac8]\n??:? void tmp8s3f09ax.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(c == 'A' || c == 'O')\n            count++;\n    }\n    return n - count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp3oonlk9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpp3oonlk9.__unittest_L23_C1() [0x427ab8]\n??:? void tmpp3oonlk9.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.find('A')]);\n    long oranges = to!long(s[s.find('A') + 1 .. s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_18lcwxq.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp_18lcwxq.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_18lcwxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long num_of_apples = 0;\n    long num_of_oranges = 0;\n    long num_of_mangoes = 0;\n    long num_of_fruits = 0;\n    long num_of_fruits_in_basket = 0;\n    long num_of_mangoes_in_basket = 0;\n    long num_of_apples_in_basket = 0;\n    long num_of_oranges_in_basket = 0;\n    long num_of_mangoes_in_basket_1 = 0;\n    long num_of_mangoes_in_basket_2 = 0;\n    long num_of_mangoes_in_basket_3 = 0;\n    long num_of_mangoes_in_basket_4 = 0;\n    long num_of_mangoes_in_basket_5 = 0;\n    long num_of_mangoes_in_basket_6 = 0;\n    long num_of_mangoes_in_basket_7 = 0;\n    long num_of_mangoes_in_basket_8 = 0;\n    long num_of_mangoes_in_basket_9 = 0;\n    long num_of_mangoes_in_basket_10 = 0;\n    long num_of_mangoes_in_basket_11 = 0;\n    long num_of_mangoes_in_basket_12 = 0;\n    long num_of_mangoes_in_basket_13 = 0;\n    long num_of_mangoes_in_basket_14 = 0;\n    long num_of_mangoes_in_basket_15 = 0;\n    long num_of_mangoes_in_basket_16 = 0;\n    long num_of_mangoes_in_basket_17 = 0;\n    long num_of_mangoes_in_basket_18 = 0;\n    long num_of_mangoes_in_basket_19 = 0;\n    long num_of_mangoes_in\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpquij8ehn.d(43): Error: semicolon expected, not `unittest`\n/tmp/tmpquij8ehn.d(43): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpquij8ehn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..$-1]);\n    long oranges = to!long(s[$-1..$]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt7gm2ago.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpt7gm2ago.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt7gm2ago.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1 .. s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo9gmx4ia.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpo9gmx4ia.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo9gmx4ia.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find(\"A\")]);\n    long oranges = to!long(s[s.find(\"A\")+1..s.find(\"O\")]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\n/*\n    The function should return the number of mangoes in the basket.\n    For example:\n    fruit_distribution(\"2A1O\", 5) => 2\n    fruit_distribution(\"2A1O\", 4) => 0\n    fruit_distribution(\"2A1O\", 6) => 1\n*/\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5zfylfi1.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp5zfylfi1.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5zfylfi1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv6bentcp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpv6bentcp.__unittest_L25_C1() [0x427ac4]\n??:? void tmpv6bentcp.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mango++;\n    }\n    long total = apples + oranges + mango;\n    long diff = total - n;\n    return mango - diff;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt26l7bur.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpt26l7bur.__unittest_L31_C1() [0x427ae0]\n??:? void tmpt26l7bur.__modtest() [0x427c04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430080]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]\n??:? runModuleUnitTests [0x42b981]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..1]);\n    long apples = to!long(s[3..4]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxjyk2hfw.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpxjyk2hfw.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjyk2hfw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj_7kj4qf.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpj_7kj4qf.__unittest_L26_C1() [0x427ac0]\n??:? void tmpj_7kj4qf.__modtest() [0x427be4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnr31orb3.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpnr31orb3.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr31orb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    long total_fruits = apples + oranges + mangoes;\n    long total_fruits_in_basket = n;\n    long mangoes_in_basket = total_fruits_in_basket - total_fruits;\n    return mangoes_in_basket;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjd0sg7tz.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpjd0sg7tz.__unittest_L32_C1() [0x427adc]\n??:? void tmpjd0sg7tz.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution_2(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution_3(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk53li1mj.d(67): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk53li1mj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.find('A')]);\n    long oranges = to!long(s[s.find('A') + 1 .. s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_18lcwxq.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp_18lcwxq.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_18lcwxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long mango_fruits = 0;\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    mango_fruits = n - apples - oranges;\n    return mango_fruits;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprb4221if.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmprb4221if.__unittest_L28_C1() [0x427ac0]\n??:? void tmprb4221if.__modtest() [0x427be4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long result = 0;\n    long total_fruits = 0;\n    long total_apples = 0;\n    long total_oranges = 0;\n    long total_mangoes = 0;\n    long total_fruits_in_basket = 0;\n    long total_apples_in_basket = 0;\n    long total_oranges_in_basket = 0;\n    long total_mangoes_in_basket = 0;\n    long total_fruits_in_basket_after_distribution = 0;\n    long total_apples_in_basket_after_distribution = 0;\n    long total_oranges_in_basket_after_distribution = 0;\n    long total_mangoes_in_basket_after_distribution = 0;\n    long total_fruits_in_basket_after_distribution_and_removing_mangoes = 0;\n    long total_apples_in_basket_after_distribution_and_removing_mangoes = 0;\n    long total_oranges_in_basket_after_distribution_and_removing_mangoes = 0;\n    long total_mangoes_in_basket_after_distribution_and_removing_mangoes = 0;\n    long total_fruits_in_basket_after_distribution_and_removing_mangoes_and_apples = 0;\n    long total_apples_in_basket_after_distribution_and_removing_mangoes_and_apples = 0;\n    long total_oranges_in_basket_after_distribution_and_removing_mangoes_and_apples = 0;\n    long total_mangoes_in_basket_after_distribution_and_removing_mangoes_and_apples = 0;\n    long total_fruits_in_basket_after_distribution_and_removing_mangoes_and_apples_and_oranges = 0;\n    long total_apples_in_basket_after_distribution_and_removing_mangoes_\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptb38risy.d(38): Error: semicolon expected, not `unittest`\n/tmp/tmptb38risy.d(38): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptb38risy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apple = 0, orange = 0, mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apple++;\n        else if(c == 'O')\n            orange++;\n        else if(c == 'M')\n            mango++;\n    }\n    return n - (apple + orange + mango);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6eqdtw0b.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp6eqdtw0b.__unittest_L27_C1() [0x427adc]\n??:? void tmp6eqdtw0b.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    foreach(c; s)\n    {\n        if(c == 'A' || c == 'O')\n            count++;\n    }\n    return n - count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp3oonlk9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpp3oonlk9.__unittest_L23_C1() [0x427ab8]\n??:? void tmpp3oonlk9.__modtest() [0x427bdc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long result = 0;\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else\n            oranges++;\n    }\n    result = n - (apples + oranges);\n    return result;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgg9i6ts8.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpgg9i6ts8.__unittest_L28_C1() [0x427ac4]\n??:? void tmpgg9i6ts8.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long total_apples = 0;\n    long total_oranges = 0;\n    long total_mangoes = 0;\n    long total_fruits = 0;\n    long total_fruits_in_basket = 0;\n    long mangoes_in_basket = 0;\n    long total_fruits_in_string = 0;\n    long total_apples_in_string = 0;\n    long total_oranges_in_string = 0;\n    long total_mangoes_in_string = 0;\n    long total_fruits_in_basket_without_mangoes = 0;\n    long total_fruits_in_string_without_mangoes = 0;\n    long total_apples_in_string_without_mangoes = 0;\n    long total_oranges_in_string_without_mangoes = 0;\n    long total_mangoes_in_string_without_mangoes = 0;\n    long total_apples_in_basket = 0;\n    long total_oranges_in_basket = 0;\n    long total_mangoes_in_basket = 0;\n    long total_fruits_in_basket_without_apples = 0;\n    long total_fruits_in_string_without_apples = 0;\n    long total_apples_in_string_without_apples = 0;\n    long total_oranges_in_string_without_apples = 0;\n    long total_mangoes_in_string_without_apples = 0;\n    long total_apples_in_basket_without_apples = 0;\n    long total_oranges_in_basket_without_apples = 0;\n    long total_mangoes_in_basket_without_apples = 0;\n    long total_fruits_in_basket_without_oranges = 0;\n    long total_fruits_in_string_without_oranges = 0;\n    long total_apples_in_string_without_oranges = 0;\n    long total_oranges_in_string_without_oranges = 0;\n\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxewuryv0.d(46): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxewuryv0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mango++;\n    }\n    long total = apples + oranges + mango;\n    long diff = total - n;\n    if(diff < 0)\n        return 0;\n    else if(diff == 0)\n        return mango;\n    else\n    {\n        long min = min(apples, oranges);\n        if(diff > min)\n            return mango - (diff - min);\n        else\n            return mango - diff;\n    }\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpom1ygq2d.d(35): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpom1ygq2d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    auto res = s.split(\" \");\n    auto a = to!long(res[0]);\n    auto o = to!long(res[1]);\n    return n - a - o;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvzcnpyxc.d(15): Error: no property `split` for type `string`\n/tmp/tmpvzcnpyxc.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpvzcnpyxc.d(17): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvzcnpyxc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpboubpco5.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpboubpco5.__unittest_L25_C1() [0x427ac8]\n??:? void tmpboubpco5.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..$-1]);\n    long apples = to!long(s[$-1..$]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1xtcfsma.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp1xtcfsma.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xtcfsma.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long num_of_apples = 0;\n    long num_of_oranges = 0;\n    long num_of_mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            num_of_apples++;\n        else if(c == 'o')\n            num_of_oranges++;\n    }\n    num_of_mangoes = n - num_of_apples - num_of_oranges;\n    return num_of_mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkh6iueyn.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpkh6iueyn.__unittest_L28_C1() [0x427ac8]\n??:? void tmpkh6iueyn.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnr31orb3.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpnr31orb3.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr31orb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    long total = apples + oranges + mangoes;\n    long diff = n - total;\n    return diff;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplnu094g2.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmplnu094g2.__unittest_L31_C1() [0x427adc]\n??:? void tmplnu094g2.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..$-1]);\n    long oranges = to!long(s[$-1..$]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplfmn4gpx.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmplfmn4gpx.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplfmn4gpx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp812c3ldp.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp812c3ldp.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp812c3ldp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp226f3p98.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmp226f3p98.__unittest_L29_C1() [0x427ad4]\n??:? void tmp226f3p98.__modtest() [0x427bf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mango++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplsmq5ubt.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmplsmq5ubt.__unittest_L29_C1() [0x427ad8]\n??:? void tmplsmq5ubt.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long mango_count = 0;\n    long orange_count = 0;\n    long apple_count = 0;\n    foreach(c; s)\n    {\n        if(c == 'o')\n            orange_count++;\n        else if(c == 'a')\n            apple_count++;\n    }\n    mango_count = n - (orange_count + apple_count);\n    return mango_count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuungp7kh.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpuungp7kh.__unittest_L28_C1() [0x427ac8]\n??:? void tmpuungp7kh.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long total_fruits = 0;\n    long total_apples = 0;\n    long total_oranges = 0;\n    long total_mangoes = 0;\n    long total_fruits_in_basket = 0;\n    long total_apples_in_basket = 0;\n    long total_oranges_in_basket = 0;\n    long total_mangoes_in_basket = 0;\n    long total_fruits_in_basket_without_mangoes = 0;\n    long total_apples_in_basket_without_mangoes = 0;\n    long total_oranges_in_basket_without_mangoes = 0;\n    long total_mangoes_in_basket_without_mangoes = 0;\n    long total_fruits_in_basket_without_apples = 0;\n    long total_apples_in_basket_without_apples = 0;\n    long total_oranges_in_basket_without_apples = 0;\n    long total_mangoes_in_basket_without_apples = 0;\n    long total_fruits_in_basket_without_oranges = 0;\n    long total_apples_in_basket_without_oranges = 0;\n    long total_oranges_in_basket_without_oranges = 0;\n    long total_mangoes_in_basket_without_oranges = 0;\n    long total_fruits_in_basket_without_apples_and_oranges = 0;\n    long total_apples_in_basket_without_apples_and_oranges = 0;\n    long total_oranges_in_basket_without_apples_and_oranges = 0;\n    long total_mangoes_in_basket_without_apples_and_oranges = 0;\n    long total_fruits_in_basket_without_apples_and_mangoes = 0;\n    long total_apples_in_basket_without_apples_and_mangoes = 0;\n    long total_oranges_\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi9g07u77.d(42): Error: semicolon expected, not `unittest`\n/tmp/tmpi9g07u77.d(42): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9g07u77.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv6bentcp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpv6bentcp.__unittest_L25_C1() [0x427ac4]\n??:? void tmpv6bentcp.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('a')]);\n    long oranges = to!long(s[s.find('a')+1..s.find('o')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbx0ka8xz.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpbx0ka8xz.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbx0ka8xz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    auto fruit = split(s, \" \");\n    long apple = to!long(fruit[0]);\n    long orange = to!long(fruit[1]);\n    return n - apple - orange;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpocmp4up0.d(15): Error: undefined identifier `split`\n/tmp/tmpocmp4up0.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpocmp4up0.d(17): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpocmp4up0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..1]);\n    long oranges = to!long(s[2..3]);\n    long mangoes = n - (apples + oranges);\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuuvacm4q.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpuuvacm4q.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuuvacm4q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..s.find(' ')]);\n    long apples = to!long(s[s.find(' ') + 1..$]);\n    return n - oranges - apples;\n}\n/*\n    The function should return the number of the mango fruits in the basket.\n    for example:\n    fruit_distribution(\"1 2\", 5) => 2\n    fruit_distribution(\"3 2\", 5) => 0\n    fruit_distribution(\"3 2\", 7) => 2\n*/\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9aycezu0.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp9aycezu0.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9aycezu0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwasjh58f.d(77): Error: semicolon expected, not `unittest`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwasjh58f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpydcx_a90.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpydcx_a90.__unittest_L26_C1() [0x427ac4]\n??:? void tmpydcx_a90.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long result = 0;\n    long total_apples = 0;\n    long total_oranges = 0;\n    long total_mangoes = 0;\n    string[] arr = split(s, \" \");\n    foreach(string str; arr)\n    {\n        if(str == \"apple\")\n        {\n            total_apples++;\n        }\n        else if(str == \"orange\")\n        {\n            total_oranges++;\n        }\n        else if(str == \"mango\")\n        {\n            total_mangoes++;\n        }\n    }\n    result = n - (total_apples + total_oranges);\n    return result;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk5myisya.d(19): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5myisya.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe1xldg99.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpe1xldg99.__unittest_L29_C1() [0x427ad8]\n??:? void tmpe1xldg99.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..1]);\n    long oranges = to!long(s[3..4]);\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnspzpyjn.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpnspzpyjn.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnspzpyjn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    long total = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    total = apples + oranges + mangoes;\n    return n - total;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa8im4h61.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpa8im4h61.__unittest_L31_C1() [0x427adc]\n??:? void tmpa8im4h61.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnr31orb3.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpnr31orb3.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr31orb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find(' ')]);\n    long oranges = to!long(s[s.find(' ') + 1..$]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpia44n5sm.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpia44n5sm.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpia44n5sm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjckc1lfs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpjckc1lfs.__unittest_L25_C1() [0x427ac4]\n??:? void tmpjckc1lfs.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphv5iit26.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmphv5iit26.__unittest_L26_C1() [0x427ac8]\n??:? void tmphv5iit26.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe1xldg99.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpe1xldg99.__unittest_L29_C1() [0x427ad8]\n??:? void tmpe1xldg99.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long total_fruits = 0;\n    long total_apples = 0;\n    long total_oranges = 0;\n    long total_mangoes = 0;\n    foreach(immutable c; s)\n    {\n        if(c == 'A')\n        {\n            total_apples++;\n        }\n        else if(c == 'O')\n        {\n            total_oranges++;\n        }\n        else if(c == 'M')\n        {\n            total_mangoes++;\n        }\n    }\n    total_fruits = total_apples + total_oranges + total_mangoes;\n    return n - total_fruits;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyfqeh2y.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpvyfqeh2y.__unittest_L37_C1() [0x427adc]\n??:? void tmpvyfqeh2y.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else\n            mangoes++;\n    }\n    long total_fruits = apples + oranges + mangoes;\n    long total_apples_oranges = apples + oranges;\n    long total_apples_oranges_mangoes = apples + oranges + mangoes;\n    long total_apples_oranges_mangoes_in_basket = n;\n    long mangoes_in_basket = total_apples_oranges_mangoes_in_basket - total_apples_oranges;\n    return mangoes_in_basket;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9e8b6oa4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp9e8b6oa4.__unittest_L34_C1() [0x427adc]\n??:? void tmp9e8b6oa4.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojkb4mp8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpojkb4mp8.__unittest_L29_C1() [0x427ad8]\n??:? void tmpojkb4mp8.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    long total_fruits = apples + oranges + mangoes;\n    if(total_fruits == n)\n        return mangoes;\n    else if(total_fruits > n)\n    {\n        long diff = total_fruits - n;\n        if(diff > mangoes)\n            return 0;\n        else\n            return mangoes - diff;\n    }\n    else\n    {\n        long diff = n - total_fruits;\n        return mangoes + diff;\n    }\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0uipe0os.d(48): unittest failure\n----------------\n??:? _d_unittestp [0x427ecd]\n??:? void tmp0uipe0os.__unittest_L44_C1() [0x427b2c]\n??:? void tmp0uipe0os.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42831c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp812c3ldp.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp812c3ldp.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp812c3ldp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjckc1lfs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpjckc1lfs.__unittest_L25_C1() [0x427ac4]\n??:? void tmpjckc1lfs.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..1]);\n    long apples = to!long(s[3..4]);\n    long mangoes = n - oranges - apples;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpchzf0jtu.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpchzf0jtu.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchzf0jtu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0 .. s.find(' ')]);\n    long apples = to!long(s[s.find(' ') + 1 .. $]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptwow1g9i.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmptwow1g9i.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwow1g9i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('a')]);\n    long oranges = to!long(s[s.find('a')+1..s.find('o')]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppy4a2x5n.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmppy4a2x5n.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppy4a2x5n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find(\"A\")]);\n    long oranges = to!long(s[s.find(\"A\")+1..s.find(\"O\")]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbkghgyiy.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpbkghgyiy.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkghgyiy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnr31orb3.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpnr31orb3.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr31orb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('a')]);\n    long oranges = to!long(s[s.find('a')+1..s.find('o')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbx0ka8xz.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpbx0ka8xz.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbx0ka8xz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find(\"A\")]);\n    long oranges = to!long(s[s.find(\"A\")+1..$]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqh_8248x.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpqh_8248x.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqh_8248x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    Given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"AO\", 10) == 8\n    fruit_distribution(\"AAO\", 10) == 7\n    fruit_distribution(\"AAO\", 11) == 8\n    fruit_distribution(\"AAO\", 12) == 9\n    fruit_distribution(\"AAO\", 13) == 10\n    fruit_distribution(\"AAO\", 14) == 11\n    fruit_distribution(\"AAO\", 15) == 12\n    fruit_distribution(\"AAO\", 16) == 13\n    fruit_distribution(\"AAO\", 17) == 14\n    fruit_distribution(\"AAO\", 18) == 15\n    fruit_distribution(\"AAO\", 19) == 16\n    fruit_distribution(\"AAO\", 20) == 17\n    fruit_distribution(\"AAO\", 21) == 18\n    fruit_distribution(\"AAO\", 22) == 19\n    fruit_distribution(\"AAO\", 23) == 20\n    fruit_distribution(\"AAO\", 24) == 21\n    fruit_distribution(\"AAO\", 25) == 22\n    fruit_distribution(\"AAO\", 26) == 23\n    fruit_distribution(\"AAO\", 27) == 24\n    fruit_distribution(\"AAO\", 28) == 25\n    fruit_distribution(\"AAO\", 29) == 26\n    fruit_distribution(\"AAO\", 30) == 27\n    fruit_distribution(\"AAO\", 31) == 28\n    fruit_distribution(\"AAO\", 32) == 29\n    fruit_distribution(\"AAO\", 33) == 30\n    fruit_distribution(\"AAO\", 34) == 31\n\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0rufv1zs.d(26): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0rufv1zs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojkb4mp8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpojkb4mp8.__unittest_L29_C1() [0x427ad8]\n??:? void tmpojkb4mp8.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    long total = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    total = apples + oranges + mangoes;\n    return n - total;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphod_00ht.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmphod_00ht.__unittest_L31_C1() [0x427adc]\n??:? void tmphod_00ht.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    long total = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    total = apples + oranges + mangoes;\n    if(total > n)\n        return n - total;\n    else\n        return 0;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_g47ipc4.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmp_g47ipc4.__unittest_L34_C1() [0x427af0]\n??:? void tmp_g47ipc4.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430090]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]\n??:? runModuleUnitTests [0x42b991]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    long total_fruits = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    total_fruits = apples + oranges + mangoes;\n    return n - total_fruits;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6s3mfitd.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp6s3mfitd.__unittest_L31_C1() [0x427adc]\n??:? void tmp6s3mfitd.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoli8rpc8.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpoli8rpc8.__unittest_L25_C1() [0x427abc]\n??:? void tmpoli8rpc8.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv6bentcp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpv6bentcp.__unittest_L25_C1() [0x427ac4]\n??:? void tmpv6bentcp.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('a')]);\n    long oranges = to!long(s[s.find('a')+1..s.find('o')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbx0ka8xz.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpbx0ka8xz.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbx0ka8xz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..$-1]);\n    long apples = to!long(s[$-1..$]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1xtcfsma.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp1xtcfsma.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xtcfsma.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long mango = 0;\n    long apple = 0;\n    long orange = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apple++;\n        else if(c == 'O')\n            orange++;\n        else if(c == 'M')\n            mango++;\n    }\n    return n - (apple + orange + mango);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv_z21po6.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpv_z21po6.__unittest_L29_C1() [0x427adc]\n??:? void tmpv_z21po6.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    long total_fruits = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    total_fruits = apples + oranges + mangoes;\n    return n - total_fruits;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"aoo\", 5) == 2\n    fruit_distribution(\"ofo\", 10) == 4\n    fruit_distribution(\"oom\", 13) == 0\n    fruit_distribution(\"ofom\", 16) == 0\n*/\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5m54gkx7.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmp5m54gkx7.__unittest_L43_C1() [0x427adc]\n??:? void tmp5m54gkx7.__modtest() [0x427c00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    foreach(i; 0 .. s.length)\n    {\n        if(s[i] == 'A')\n            count++;\n        else if(s[i] == 'O')\n            count++;\n    }\n    return n - count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpz78vw0cb.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e95]\n??:? void tmpz78vw0cb.__unittest_L25_C1() [0x427af0]\n??:? void tmpz78vw0cb.__modtest() [0x427c14]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc2f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aac2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc55]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430104]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbe1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa99]\n??:? runModuleUnitTests [0x42ba05]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428358]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long count = 0;\n    long oranges = 0;\n    long apples = 0;\n    foreach(c; s)\n    {\n        if(c == 'o')\n            oranges++;\n        else if(c == 'a')\n            apples++;\n    }\n    count = n - oranges - apples;\n    return count;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuiznqkeq.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpuiznqkeq.__unittest_L28_C1() [0x427ac8]\n??:? void tmpuiznqkeq.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n        else if(c == 'm')\n            mangoes++;\n    }\n    return n - (apples + oranges);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe1xldg99.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e7d]\n??:? void tmpe1xldg99.__unittest_L29_C1() [0x427ad8]\n??:? void tmpe1xldg99.__modtest() [0x427bfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa36]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430078]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]\n??:? runModuleUnitTests [0x42b979]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjckc1lfs.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpjckc1lfs.__unittest_L25_C1() [0x427ac4]\n??:? void tmpjckc1lfs.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwasjh58f.d(77): Error: semicolon expected, not `unittest`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwasjh58f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv6bentcp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpv6bentcp.__unittest_L25_C1() [0x427ac4]\n??:? void tmpv6bentcp.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnr31orb3.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpnr31orb3.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr31orb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mango = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else\n            mango++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpc_vzeu72.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpc_vzeu72.__unittest_L29_C1() [0x427acc]\n??:? void tmpc_vzeu72.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0 .. s.find('a')]);\n    long oranges = to!long(s[s.find('a') + 1 .. s.find('o')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4y3b4spl.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp4y3b4spl.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4y3b4spl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoli8rpc8.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpoli8rpc8.__unittest_L25_C1() [0x427abc]\n??:? void tmpoli8rpc8.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv6bentcp.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpv6bentcp.__unittest_L25_C1() [0x427ac4]\n??:? void tmpv6bentcp.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..1]);\n    long oranges = to!long(s[3..4]);\n    long mangoes = n - apples - oranges;\n    return mangoes;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo0lumscv.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpo0lumscv.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0lumscv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163921
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = to!long(s[0..s.find('A')]);\n    long oranges = to!long(s[s.find('A')+1..s.find('O')]);\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnr31orb3.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpnr31orb3.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr31orb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163919
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\n/*\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz5h14b25.d(70): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz5h14b25.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0, oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a') apples++;\n        else oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfn1i217g.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpfn1i217g.__unittest_L23_C1() [0x427abc]\n??:? void tmpfn1i217g.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    long mangoes = 0;\n    long total = 0;\n    foreach(c; s)\n    {\n        if(c == 'A')\n            apples++;\n        else if(c == 'O')\n            oranges++;\n        else if(c == 'M')\n            mangoes++;\n    }\n    total = apples + oranges + mangoes;\n    if(total == n)\n        return mangoes;\n    else if(total > n)\n        return mangoes - (total - n);\n    else\n        return mangoes + (n - total);\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx34q8x8t.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427ebd]\n??:? void tmpx34q8x8t.__unittest_L36_C1() [0x427b18]\n??:? void tmpx34q8x8t.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42830c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163922
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long oranges = to!long(s[0..$-1]);\n    long apples = to!long(s[$-1..$]);\n    return n - oranges - apples;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1xtcfsma.d(15): Error: template instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmp1xtcfsma.d(16): Error: template instance `to!long` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1xtcfsma.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n                    \n*/\nlong fruit_distribution(string s, long n) \n{\n    long apples = 0;\n    long oranges = 0;\n    foreach(c; s)\n    {\n        if(c == 'a')\n            apples++;\n        else if(c == 'o')\n            oranges++;\n    }\n    return n - apples - oranges;\n}\nunittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7w05d1dn.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp7w05d1dn.__unittest_L26_C1() [0x427ac4]\n??:? void tmp7w05d1dn.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430060]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]\n??:? runModuleUnitTests [0x42b961]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163920
    }
  ]
}