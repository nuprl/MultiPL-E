name: HumanEval_90_next_smallest
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of\
  \ integers.\n    Write a function next_smallest() that returns the 2nd smallest\
  \ element of the list.\n    Return None if there is no such element.\n         \
  \           \n*/\nNullable!(long) next_smallest(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result\
  \ = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get\
  \ == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n    \
  \    assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result =\
  \ candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result =\
  \ candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
  \ = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get\
  \ == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n\
  }\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull\
  \ && result.get == -35L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    if (lst.length < 2)\n        return Nullable!(long)();\n   \
    \ long smallest = lst[0];\n    long second_smallest = lst[1];\n    if (smallest\
    \ > second_smallest)\n    {\n        swap(smallest, second_smallest);\n    }\n\
    \    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n\
    \            second_smallest = smallest;\n            smallest = e;\n        }\n\
    \        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n   \
    \ return Nullable!(long)(min2);\n}", "{\n    long min = lst[0];\n    long min2\
    \ = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n    \
    \        min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n\
    \        {\n            min2 = i;\n        }\n    }\n    return min2;\n}", "{\n\
    \    if (lst.length < 2) return null;\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    foreach (i; lst)\n    {\n        if (i < smallest)\n        {\n\
    \            second_smallest = smallest;\n            smallest = i;\n        }\n\
    \        else if (i < second_smallest)\n        {\n            second_smallest\
    \ = i;\n        }\n    }\n    return second_smallest;\n}", "{\n    if (lst.length\
    \ < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long\
    \ second_smallest = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < smallest)\n\
    \        {\n            second_smallest = smallest;\n            smallest = v;\n\
    \        }\n        else if (v < second_smallest)\n        {\n            second_smallest\
    \ = v;\n        }\n    }\n    if (second_smallest == smallest)\n        return\
    \ Nullable!(long)();\n    return Nullable!(long)(second_smallest);\n}", "{\n \
    \   if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 =\
    \ lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n    \
    \        min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n\
    \        {\n            min2 = i;\n        }\n    }\n    return min2;\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();\n    else\n    {\n\
    \        long min = lst[0];\n        long min2 = lst[1];\n        foreach (i;\
    \ lst)\n        {\n            if (i < min)\n            {\n                min2\
    \ = min;\n                min = i;\n            }\n            else if (i < min2)\n\
    \                min2 = i;\n        }\n        return Nullable!(long)(min2);\n\
    \    }\n}", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n \
    \   long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n\
    \        if (i < min)\n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if (i < min2)\n        {\n            min2 = i;\n   \
    \     }\n    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length\
    \ < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n\
    \            min = i;\n        }\n        else if (i < min2) \n        {\n   \
    \         min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    else\n    {\n        long min = lst[0];\n  \
    \      long min2 = lst[1];\n        if (min2 < min)\n        {\n            min\
    \ = min2;\n            min2 = lst[0];\n        }\n        foreach (i; lst[2..$])\n\
    \        {\n            if (i < min)\n            {\n                min2 = min;\n\
    \                min = i;\n            }\n            else if (i < min2)\n   \
    \             min2 = i;\n        }\n        return min2;\n    }\n}", "{\n    long\
    \ min = lst[0];\n    long min2 = lst[0];\n    foreach(l; lst)\n    {\n       \
    \ if(l < min)\n        {\n            min2 = min;\n            min = l;\n    \
    \    }\n        else if(l < min2)\n        {\n            min2 = l;\n        }\n\
    \    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n\
    \    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2) \n    {\n\
    \        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n        min2\
    \ = lst[0];\n    }\n    foreach (i; lst[2..$]) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return Nullable!(long)(min2);\n}", "{\n    long min = lst[0];\n    long min2\
    \ = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n        {\n \
    \           min2 = min;\n            min = i;\n        }\n        else if (i <\
    \ min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2) return Nullable!(long)();\n    long smallest =\
    \ lst[0];\n    long secondSmallest = lst[1];\n    foreach (i, e; lst) \n    {\n\
    \        if (e < smallest) \n        {\n            secondSmallest = smallest;\n\
    \            smallest = e;\n        } \n        else if (e < secondSmallest) \n\
    \        {\n            secondSmallest = e;\n        }\n    }\n    return Nullable!(long)(secondSmallest);\n\
    }", "{\n    Nullable!(long) result = null;\n    long min = lst[0];\n    long second_min\
    \ = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n    \
    \        second_min = min;\n            min = i;\n        }\n        else if(i\
    \ < second_min)\n        {\n            second_min = i;\n        }\n    }\n  \
    \  if(second_min == min)\n    {\n        return result;\n    }\n    else\n   \
    \ {\n        result = second_min;\n        return result;\n    }\n}", "{\n   \
    \ if (lst.length < 2)\n        return null;\n    else\n    {\n        long min\
    \ = lst[0];\n        long min2 = lst[1];\n        foreach (i; lst)\n        {\n\
    \            if (i < min)\n            {\n                min2 = min;\n      \
    \          min = i;\n            }\n            else if (i < min2)\n         \
    \       min2 = i;\n        }\n        return min2;\n    }\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long smallest = lst[0];\n    long next_smallest\
    \ = lst[1];\n    foreach (i, val; lst) \n    {\n        if (val < smallest) \n\
    \        {\n            next_smallest = smallest;\n            smallest = val;\n\
    \        }\n        else if (val < next_smallest) \n        {\n            next_smallest\
    \ = val;\n        }\n    }\n    return next_smallest;\n}", "{\n    long min =\
    \ lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i <\
    \ min)\n        {\n            min2 = min;\n            min = i;\n        }\n\
    \        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n\
    \    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i;\
    \ lst) \n    {\n        if (i < min) \n        {\n            second_min = min;\n\
    \            min = i;\n        }\n        else if (i < second_min) \n        {\n\
    \            second_min = i;\n        }\n    }\n    return second_min;\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return Nullable!(long)(min2);\n}\n/*", "{\n    long min = lst[0];\n    long\
    \ min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n\
    \            min2 = min;\n            min = i;\n        }\n        else if(i <\
    \ min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n\
    \    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long next = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n\
    \        {\n            next = min;\n            min = v;\n        }\n       \
    \ else if (v < next)\n        {\n            next = v;\n        }\n    }\n   \
    \ return next;\n}", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n\
    \    long min = lst[0];\n    long next = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            next = min;\n            min\
    \ = e;\n        }\n        else if (e < next)\n        {\n            next = e;\n\
    \        }\n    }\n    return Nullable!(long)(next);\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2)\n      \
    \  {\n            min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    if\
    \ (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long\
    \ smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, val;\
    \ lst) \n    {\n        if (val < smallest) \n        {\n            second_smallest\
    \ = smallest;\n            smallest = val;\n        }\n        else if (val <\
    \ second_smallest) \n        {\n            second_smallest = val;\n        }\n\
    \    }\n    if (second_smallest == smallest) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    return Nullable!(long)(second_smallest);\n}", "{\n    if (lst.length\
    \ < 2) return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest\
    \ = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < smallest)\n     \
    \   {\n            next_smallest = smallest;\n            smallest = v;\n    \
    \    }\n        else if (v < next_smallest)\n        {\n            next_smallest\
    \ = v;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}", "{\n\
    \    if (lst.length < 2) return Nullable!(long)();\n    long min = lst[0];\n \
    \   long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n        return\
    \ Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest =\
    \ lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n       \
    \ {\n            second_smallest = smallest;\n            smallest = e;\n    \
    \    }\n        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}", "{\n\
    \    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n\
    \    long min = lst[0];\n    long next_min = lst[1];\n    foreach (i, val; lst)\
    \ \n    {\n        if (val < min) \n        {\n            next_min = min;\n \
    \           min = val;\n        }\n        else if (val < next_min) \n       \
    \ {\n            next_min = val;\n        }\n    }\n    return next_min;\n}",
  "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    if (min > next_min)\n    {\n        min = next_min;\n\
    \        next_min = lst[0];\n    }\n    foreach (i; 2..lst.length)\n    {\n  \
    \      if (lst[i] < min)\n        {\n            next_min = min;\n           \
    \ min = lst[i];\n        }\n        else if (lst[i] < next_min)\n        {\n \
    \           next_min = lst[i];\n        }\n    }\n    return Nullable!(long)(next_min);\n\
    }", "{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n\
    \    {\n        if(i < min)\n        {\n            min2 = min;\n            min\
    \ = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n\
    \        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2)\n      \
    \  {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, val; lst) \n\
    \    {\n        if (val < smallest) \n        {\n            second_smallest =\
    \ smallest;\n            smallest = val;\n        }\n        else if (val < second_smallest)\
    \ \n        {\n            second_smallest = val;\n        }\n    }\n    return\
    \ Nullable!(long)(second_smallest);\n}", "{\n    if (lst.length < 2)\n       \
    \ return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2)\n      \
    \  {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n  \
    \      {\n            min2 = min;\n            min = i;\n        }\n        else\
    \ if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2\
    \ != min)\n    {\n        result = min2;\n    }\n    return result;\n}", "{\n\
    \    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n\
    \    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < smallest)\n        {\n            second_smallest = smallest;\n       \
    \     smallest = e;\n        }\n        else if (e < second_smallest)\n      \
    \  {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return Nullable!(long)();\n    long min = lst[0];\n    long next_min =\
    \ lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n \
    \           next_min = min;\n            min = e;\n        }\n        else if\
    \ (e < next_min)\n        {\n            next_min = e;\n        }\n    }\n   \
    \ return Nullable!(long)(next_min);\n}", "{\n    if (lst.length < 2)\n       \
    \ return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    foreach (i, elem; lst)\n    {\n        if (elem < smallest)\n\
    \        {\n            second_smallest = smallest;\n            smallest = elem;\n\
    \        }\n        else if (elem < second_smallest)\n        {\n            second_smallest\
    \ = elem;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}",
  "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n   \
    \ {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < second_smallest)\n\
    \        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n\
    \    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if\
    \ (e < smallest)\n        {\n            second_smallest = smallest;\n       \
    \     smallest = e;\n        }\n        else if (e < second_smallest)\n      \
    \  {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2)\n      \
    \  {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2) return null;\n    long smallest = lst[0];\n  \
    \  long second_smallest = lst[1];\n    if (smallest > second_smallest) \n    {\n\
    \        swap(smallest, second_smallest);\n    }\n    foreach (i, e; lst[2..$])\
    \ \n    {\n        if (e < smallest) \n        {\n            second_smallest\
    \ = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\
    \ \n        {\n            second_smallest = e;\n        }\n    }\n    return\
    \ second_smallest;\n}", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n\
    \    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach\
    \ (i, v; lst)\n    {\n        if (v < smallest)\n        {\n            second_smallest\
    \ = smallest;\n            smallest = v;\n        }\n        else if (v < second_smallest)\n\
    \        {\n            second_smallest = v;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < smallest)\n        {\n            next_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < next_smallest)\n \
    \       {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach\
    \ (i, e; lst) \n    {\n        if (e < smallest) \n        {\n            second_smallest\
    \ = smallest;\n            smallest = e;\n        } \n        else if (e < second_smallest)\
    \ \n        {\n            second_smallest = e;\n        }\n    }\n    return\
    \ second_smallest;\n}", "{\n    long min = lst[0];\n    long next_min = long.max;\n\
    \    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            next_min\
    \ = min;\n            min = i;\n        }\n        else if(i < next_min)\n   \
    \     {\n            next_min = i;\n        }\n    }\n    return next_min == long.max\
    \ ? Nullable!(long).init : Nullable!(long)(next_min);\n}", "{\n    if (lst.length\
    \ < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2\
    \ = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n  \
    \          min2 = min;\n            min = i;\n        }\n        else if (i <\
    \ min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long next_smallest = lst[1];\n    if (smallest > next_smallest)\n\
    \    {\n        long tmp = smallest;\n        smallest = next_smallest;\n    \
    \    next_smallest = tmp;\n    }\n    foreach (i, e; lst[2..$])\n    {\n     \
    \   if (e < smallest)\n        {\n            next_smallest = smallest;\n    \
    \        smallest = e;\n        }\n        else if (e < next_smallest)\n     \
    \   {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, v; lst)\n    {\n\
    \        if (v < smallest)\n        {\n            next_smallest = smallest;\n\
    \            smallest = v;\n        }\n        else if (v < next_smallest)\n \
    \       {\n            next_smallest = v;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n       \
    \ if (e < min)\n        {\n            min2 = min;\n            min = e;\n   \
    \     }\n        else if (e < min2)\n        {\n            min2 = e;\n      \
    \  }\n    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n\
    \        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min2 < min) \n\
    \    {\n        min = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i;\
    \ lst[2..$]) \n    {\n        if (i < min) \n        {\n            min2 = min;\n\
    \            min = i;\n        }\n        else if (i < min2) \n        {\n   \
    \         min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}",
  "{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n\
    \        if(i < min)\n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if(i < min2)\n        {\n            min2 = i;\n    \
    \    }\n    }\n    return min2;\n}", "{\n    long min = lst[0];\n    long min2\
    \ = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n    \
    \        min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n\
    \        {\n            min2 = i;\n        }\n    }\n    return min2;\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();", "{\n    long min\
    \ = lst[0];\n    long second = long.max;\n    foreach(i; lst) \n    {\n      \
    \  if (i < min) \n        {\n            second = min;\n            min = i;\n\
    \        }\n        else if (i < second)\n        {\n            second = i;\n\
    \        }\n    }\n    if (second == long.max)\n    {\n        return Nullable!(long)();\n\
    \    }\n    return Nullable!(long)(second);\n}", "{\n    if (lst.length < 2) return\
    \ null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n   \
    \ foreach (i; lst)\n    {\n        if (i < smallest)\n        {\n            second_smallest\
    \ = smallest;\n            smallest = i;\n        }\n        else if (i < second_smallest)\n\
    \        {\n            second_smallest = i;\n        }\n    }\n    return second_smallest;\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long second_min = lst[1];\n    foreach (i, e; lst)\n    {\n \
    \       if (e < min)\n        {\n            second_min = min;\n            min\
    \ = e;\n        }\n        else if (e < second_min)\n        {\n            second_min\
    \ = e;\n        }\n    }\n    if (second_min == min)\n        return Nullable!(long)();\n\
    \    return Nullable!(long)(second_min);\n}", "{\n    if (lst.length < 2)\n  \
    \      return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest\
    \ = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n     \
    \   {\n            next_smallest = smallest;\n            smallest = e;\n    \
    \    }\n        else if (e < next_smallest)\n        {\n            next_smallest\
    \ = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}", "{\n\
    \    if (lst.length < 2) return Nullable!(long)();\n    long min1 = lst[0];\n\
    \    long min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n\
    \        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n       \
    \ if (e < min1)\n        {\n            min2 = min1;\n            min1 = e;\n\
    \        }\n        else if (e < min2)\n        {\n            min2 = e;\n   \
    \     }\n    }\n    return Nullable!(long)(min2);\n}", "{\n    long min = lst[0];\n\
    \    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n  \
    \      {\n            min2 = min;\n            min = i;\n        }\n        else\
    \ if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2\
    \ == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    long smallest = lst[0];\n    long second_smallest = long.max;\n  \
    \  foreach(i; lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest\
    \ = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n\
    \        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest\
    \ == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n\
    \    {\n        if(i < min)\n        {\n            min2 = min;\n            min\
    \ = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n\
    \        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2)\n      \
    \  {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    long smallest = lst[0];\n    long second_smallest = long.max;\n  \
    \  foreach(i; lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest\
    \ = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n\
    \        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest\
    \ == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n   \
    \ return min2;\n}", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i;\
    \ lst) \n    {\n        if (i < min) \n        {\n            second_min = min;\n\
    \            min = i;\n        }\n        else if (i < second_min) \n        {\n\
    \            second_min = i;\n        }\n    }\n    return second_min;\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n   \
    \ {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < second_smallest)\n\
    \        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    long smallest = lst[0];\n    long second_smallest = long.max;\n  \
    \  foreach(i; lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest\
    \ = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n\
    \        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest\
    \ == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n   \
    \ {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < second_smallest)\n\
    \        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2) \n\
    \    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min > min2) \n    {\n        swap(min, min2);\n\
    \    }\n    foreach (i, v; lst[2..$]) \n    {\n        if (v < min) \n       \
    \ {\n            min2 = min;\n            min = v;\n        }\n        else if\
    \ (v < min2) \n        {\n            min2 = v;\n        }\n    }\n    return\
    \ Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2) \n    {\n        return\
    \ Nullable!(long).init;\n    }\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    foreach (i, element; lst) \n    {\n        if (element < smallest)\
    \ \n        {\n            second_smallest = smallest;\n            smallest =\
    \ element;\n        }\n        else if (element < second_smallest) \n        {\n\
    \            second_smallest = element;\n        }\n    }\n    return second_smallest;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long\
    \ min = lst[0];\n    long min2 = lst[1];\n    if (min > min2) \n    {\n      \
    \  min = min2;\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$]) \n \
    \   {\n        if (i < min) \n        {\n            min2 = min;\n           \
    \ min = i;\n        } \n        else if (i < min2) \n        {\n            min2\
    \ = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n\
    \    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n\
    \    long next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e <\
    \ min) \n        {\n            next_min = min;\n            min = e;\n      \
    \  }\n        else if (e < next_min) \n        {\n            next_min = e;\n\
    \        }\n    }\n    return next_min;\n}", "{\n    if (lst.length < 2) \n  \
    \  {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n  \
    \  long min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n   \
    \     min2 = lst[0];\n    }\n    foreach (i; lst[2..$]) \n    {\n        if (i\
    \ < min) \n        {\n            min2 = min;\n            min = i;\n        }\n\
    \        else if (i < min2) \n        {\n            min2 = i;\n        }\n  \
    \  }\n    return Nullable!(long)(min2);\n}", "{\n    long min = lst[0];\n    long\
    \ min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n       \
    \ {\n            min2 = min;\n            min = i;\n        }\n        else if\
    \ (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    Nullable!(long) result = Nullable!(long).init;\n    long\
    \ min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n       \
    \ if(i < min)\n        {\n            min2 = min;\n            min = i;\n    \
    \    }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    if(min2 == min)\n    {\n        return result;\n    }\n    else\n\
    \    {\n        result.assign(min2);\n        return result;\n    }\n}", "{\n\
    \    if (lst.length < 2) return Nullable!(long)();\n    long min = lst[0];\n \
    \   long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long next_min = lst[1];\n    if (next_min\
    \ < min)\n    {\n        min = next_min;\n        next_min = lst[0];\n    }\n\
    \    foreach (i, v; lst[2..$])\n    {\n        if (v < min)\n        {\n     \
    \       next_min = min;\n            min = v;\n        }\n        else if (v <\
    \ next_min)\n        {\n            next_min = v;\n        }\n    }\n    return\
    \ next_min;\n}", "{\n    Nullable!(long) result = null;\n    long min = lst[0];\n\
    \    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n  \
    \      {\n            min2 = min;\n            min = i;\n        }\n        else\
    \ if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2\
    \ != min)\n    {\n        result = min2;\n    }\n    return result;\n}", "{\n\
    \    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n  \
    \      {\n            second_min = min;\n            min = i;\n        }\n   \
    \     else if (i < second_min)\n        {\n            second_min = i;\n     \
    \   }\n    }\n    return second_min;\n}", "{\n    if (lst.length < 2) \n    {\n\
    \        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n\
    \        {\n            next_min = min;\n            min = e;\n        }\n   \
    \     else if (e < next_min) \n        {\n            next_min = e;\n        }\n\
    \    }\n    return next_min;\n}", "{\n    if (lst.length < 2)\n        return\
    \ Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n\
    \            min = i;\n        }\n        else if (i < min2)\n        {\n    \
    \        min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}", "{\n\
    \    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n\
    \            min2 = min;\n            min = i;\n        }\n        else if (i\
    \ < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2)\
    \ \n    {\n        min1 = lst[1];\n        min2 = lst[0];\n    }\n    foreach\
    \ (i, x; lst[2..$]) \n    {\n        if (x < min1) \n        {\n            min2\
    \ = min1;\n            min1 = x;\n        }\n        else if (x < min2) \n   \
    \     {\n            min2 = x;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n   \
    \ return min2;\n}", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n\
    \    long smallest = lst[0];\n    long second_smallest = lst[1];\n    if (smallest\
    \ > second_smallest)\n    {\n        swap(smallest, second_smallest);\n    }\n\
    \    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n\
    \            second_smallest = smallest;\n            smallest = e;\n        }\n\
    \        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}", "{\n\
    \    long smallest = lst[0];\n    long second_smallest = long.max;\n    foreach(i;\
    \ lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest\
    \ = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n\
    \        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest\
    \ == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long next_min = lst[1];\n    if (min > next_min)\n    {\n   \
    \     min = next_min;\n        next_min = lst[0];\n    }\n    foreach (i; 2..lst.length)\n\
    \    {\n        if (lst[i] < min)\n        {\n            next_min = min;\n  \
    \          min = lst[i];\n        }\n        else if (lst[i] < next_min)\n   \
    \     {\n            next_min = lst[i];\n        }\n    }\n    return Nullable!(long)(next_min);\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n   \
    \ return min2;\n}", "{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i;\
    \ lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n     \
    \       min = i;\n        }\n        else if(i < min2)\n        {\n          \
    \  min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    if (smallest > second_smallest)\n    {\n        long tmp = smallest;\n\
    \        smallest = second_smallest;\n        second_smallest = tmp;\n    }\n\
    \    foreach (i, v; lst[2..$])\n    {\n        if (v < smallest)\n        {\n\
    \            second_smallest = smallest;\n            smallest = v;\n        }\n\
    \        else if (v < second_smallest)\n        {\n            second_smallest\
    \ = v;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n   \
    \ {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < second_smallest)\n\
    \        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2) return Nullable!(long)();\n    long smallest =\
    \ lst[0];\n    long next_smallest = lst[1];\n    if (smallest > next_smallest)\n\
    \    {\n        swap(smallest, next_smallest);\n    }\n    foreach (i, e; lst[2..$])\n\
    \    {\n        if (e < smallest)\n        {\n            next_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < next_smallest)\n \
    \       {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n\
    }", "{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n  \
    \      {\n            min2 = min;\n            min = i;\n        }\n        else\
    \ if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2\
    \ == min)\n    {\n        return result;\n    }\n    else\n    {\n        result.assign(min2);\n\
    \        return result;\n    }\n}", "{\n    long min = lst[0];\n    long min2\
    \ = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n    \
    \        min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n\
    \        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n   \
    \ {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2) return Nullable!(long)();\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            second_min = min;\n            min = i;\n        }\n \
    \       else if (i < second_min)\n        {\n            second_min = i;\n   \
    \     }\n    }\n    return Nullable!(long)(second_min);\n}", "{\n    if (lst.length\
    \ < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2\
    \ = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n        {\n\
    \            min2 = min;\n            min = v;\n        }\n        else if (v\
    \ < min2)\n        {\n            min2 = v;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    for (int i = 1; i < lst.length;\
    \ i++)\n    {\n        if (lst[i] < smallest)\n        {\n            second_smallest\
    \ = smallest;\n            smallest = lst[i];\n        }\n        else if (lst[i]\
    \ < second_smallest)\n        {\n            second_smallest = lst[i];\n     \
    \   }\n    }\n    return Nullable!(long)(second_smallest);\n}", "{\n    long min\
    \ = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i\
    \ < min)\n        {\n            min2 = min;\n            min = i;\n        }\n\
    \        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n\
    \    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return\
    \ Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, v; lst)\n  \
    \  {\n        if (v < min)\n        {\n            min2 = min;\n            min\
    \ = v;\n        }\n        else if (v < min2)\n        {\n            min2 = v;\n\
    \        }\n    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n     \
    \   {\n            second_smallest = smallest;\n            smallest = e;\n  \
    \      }\n        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    return second_smallest;\n}", "{\n    if (lst.length\
    \ < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long\
    \ next_smallest = lst[1];\n    foreach (i, val; lst)\n    {\n        if (val <\
    \ smallest)\n        {\n            next_smallest = smallest;\n            smallest\
    \ = val;\n        }\n        else if (val < next_smallest)\n        {\n      \
    \      next_smallest = val;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return null;\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n      \
    \      next_smallest = smallest;\n            smallest = e;\n        }\n     \
    \   else if (e < next_smallest)\n        {\n            next_smallest = e;\n \
    \       }\n    }\n    return next_smallest;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n\
    \            min = i;\n        }\n        else if (i < min2)\n        {\n    \
    \        min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n\
    \    long second = lst[1];\n    if (min > second) \n    {\n        min = second;\n\
    \        second = lst[0];\n    }\n    foreach (i; lst[2..$]) \n    {\n       \
    \ if (i < min) \n        {\n            second = min;\n            min = i;\n\
    \        }\n        else if (i < second) \n        {\n            second = i;\n\
    \        }\n    }\n    return Nullable!(long)(second);\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2)\n      \
    \  {\n            min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    Nullable!(long)\
    \ result = Nullable!(long).init;\n    long min = long.max;\n    long min2 = long.max;\n\
    \    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if(i < min2)\n       \
    \ {\n            min2 = i;\n        }\n    }\n    if(min2 != long.max)\n    {\n\
    \        result = min2;\n    }\n    return result;\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long next_min = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ next_min = min;\n            min = e;\n        }\n        else if (e < next_min)\n\
    \        {\n            next_min = e;\n        }\n    }\n    return next_min;\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    else\n\
    \    {\n        long min = lst[0];\n        long min2 = lst[1];\n        foreach\
    \ (i; lst)\n        {\n            if (i < min)\n            {\n             \
    \   min2 = min;\n                min = i;\n            }\n            else if\
    \ (i < min2)\n                min2 = i;\n        }\n        return Nullable!(long)(min2);\n\
    \    }\n}", "{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i;\
    \ lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n     \
    \       min = i;\n        }\n        else if(i < min2)\n        {\n          \
    \  min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2) return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n\
    \    {\n        if (i < min)\n        {\n            min2 = min;\n           \
    \ min = i;\n        }\n        else if (i < min2)\n        {\n            min2\
    \ = i;\n        }\n    }\n    return min2;\n}", "{\n    long min = lst[0];\n \
    \   long min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  return min2;\n}", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n  \
    \  {\n        if (e < min)\n        {\n            min2 = min;\n            min\
    \ = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n\
    \        }\n    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2)\n      \
    \  {\n            min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    long\
    \ min = lst[0];\n    long next_min = long.max;\n    foreach(idx, val; lst)\n \
    \   {\n        if(val < min)\n        {\n            next_min = min;\n       \
    \     min = val;\n        }\n        else if(val < next_min)\n        {\n    \
    \        next_min = val;\n        }\n    }\n    if(next_min == long.max)\n   \
    \ {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(next_min);\n\
    }", "{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n  \
    \  if (min2 != min) \n    {\n        result = min2;\n    }\n    return result;\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return null;\n    long smallest = lst[0];\n    long second_smallest =\
    \ lst[1];\n    if (smallest > second_smallest)\n    {\n        swap(smallest,\
    \ second_smallest);\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < smallest)\n        {\n            second_smallest = smallest;\n          \
    \  smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n\
    \            second_smallest = e;\n        }\n    }\n    return second_smallest;\n\
    }", "{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long\
    \ sec_min = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n     \
    \   {\n            sec_min = min;\n            min = i;\n        }\n        else\
    \ if (i < sec_min)\n        {\n            sec_min = i;\n        }\n    }\n  \
    \  return sec_min;\n}", "{\n    if (lst.length < 2)\n        return null;\n  \
    \  long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n\
    \        if (i < min)\n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if (i < min2)\n        {\n            min2 = i;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n\
    \    {\n        if (i < min)\n        {\n            min2 = min;\n           \
    \ min = i;\n        }\n        else if (i < min2)\n        {\n            min2\
    \ = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2\
    \ = min;\n            min = i;\n        }\n        else if (i < min2)\n      \
    \  {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n   \
    \ return min2;\n}", "{\n    if (lst.length < 2) return Nullable!(long)();\n  \
    \  long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i,\
    \ e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest\
    \ = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n\
    \        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i;\
    \ lst) \n    {\n        if (i < min) \n        {\n            second_min = min;\n\
    \            min = i;\n        } \n        else if (i < second_min) \n       \
    \ {\n            second_min = i;\n        }\n    }\n    return second_min;\n}",
  "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n\
    \    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach\
    \ (i, e; lst) \n    {\n        if (e < smallest) \n        {\n            second_smallest\
    \ = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\
    \ \n        {\n            second_smallest = e;\n        }\n    }\n    return\
    \ Nullable!(long)(second_smallest);\n}", "{\n    if (lst.length < 2)\n       \
    \ return Nullable!(long)();\n    \n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n\
    \    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n  \
    \      {\n            min2 = min;\n            min = i;\n        }\n        else\
    \ if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2\
    \ == min)\n    {\n        return result;\n    }\n    else\n    {\n        result.assign(min2);\n\
    \        return result;\n    }\n}", "{\n    long min = lst[0];\n    long min2\
    \ = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n    \
    \        min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n\
    \        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n   \
    \ {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n\
    \    {\n        if(i < min)\n        {\n            min2 = min;\n            min\
    \ = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n\
    \        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n\
    \            min = i;\n        }\n        else if (i < min2)\n        {\n    \
    \        min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    auto min =\
    \ lst[0];\n    auto min2 = long.max;\n    foreach(i; lst)\n    {\n        if(i\
    \ < min)\n        {\n            min2 = min;\n            min = i;\n        }\n\
    \        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n\
    \    if(min2 == long.max)\n    {\n        return Nullable!(long)();\n    }\n \
    \   return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n        return\
    \ null;\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach\
    \ (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            next_smallest\
    \ = smallest;\n            smallest = e;\n        }\n        else if (e < next_smallest)\n\
    \        {\n            next_smallest = e;\n        }\n    }\n    return next_smallest;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n   \
    \ return min2;\n}", "{\n    Nullable!(long) result = Nullable!(long).init;\n \
    \   long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n\
    \        if(i < min)\n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if(i < min2)\n        {\n            min2 = i;\n    \
    \    }\n    }\n    if(min2 != min)\n    {\n        result = min2;\n    }\n   \
    \ return result;\n}", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\
    \ \n    {\n        if (i < min) \n        {\n            min2 = min;\n       \
    \     min = i;\n        }\n        else if (i < min2) \n        {\n          \
    \  min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length <\
    \ 2) \n    {\n        return Nullable!(long).init;\n    }\n    else \n    {\n\
    \        long min = lst[0];\n        long min2 = lst[1];\n        foreach (i;\
    \ lst) \n        {\n            if (i < min) \n            {\n               \
    \ min2 = min;\n                min = i;\n            }\n            else if (i\
    \ < min2) \n            {\n                min2 = i;\n            }\n        }\n\
    \        return Nullable!(long)(min2);\n    }\n}", "{\n    if (lst.length < 2)\
    \ return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < smallest) \n   \
    \     {\n            second_smallest = smallest;\n            smallest = e;\n\
    \        }\n        else if (e < second_smallest) \n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n  \
    \      min2 = lst[0];\n    }\n    foreach (i; lst[2..$])\n    {\n        if (i\
    \ < min)\n        {\n            min2 = min;\n            min = i;\n        }\n\
    \        else if (i < min2)\n        {\n            min2 = i;\n        }\n   \
    \ }\n    return Nullable!(long)(min2);\n}", "{\n    long min = lst[0];\n    long\
    \ min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n       \
    \ {\n            min2 = min;\n            min = i;\n        }\n        else if\
    \ (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2)\n        return null;\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    if (min > min2)\n    {\n        min =\
    \ min2;\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$])\n    {\n  \
    \      if (i < min)\n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if (i < min2)\n        {\n            min2 = i;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    Nullable!(long) result = Nullable!(long).init;\n\
    \    if (lst.length < 2)\n        return result;\n    long min = lst[0];\n   \
    \ long min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n     \
    \   min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < min)\n        {\n            min2 = min;\n            min = e;\n        }\n\
    \        else if (e < min2)\n        {\n            min2 = e;\n        }\n   \
    \ }\n    result.set(min2);\n    return result;\n}", "{\n    if (lst.length < 2)\
    \ \n    {\n        return null;\n    }\n    long min = lst[0];\n    long min2\
    \ = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n\
    \            min2 = min;\n            min = i;\n        }\n        else if (i\
    \ < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\
    \ \n    {\n        if (i < min) \n        {\n            min2 = min;\n       \
    \     min = i;\n        }\n        else if (i < min2) \n        {\n          \
    \  min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length <\
    \ 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long\
    \ next_smallest = lst[1];\n    if (smallest > next_smallest)\n    {\n        long\
    \ tmp = smallest;\n        smallest = next_smallest;\n        next_smallest =\
    \ tmp;\n    }\n    foreach (i, x; lst[2..$])\n    {\n        if (x < smallest)\n\
    \        {\n            next_smallest = smallest;\n            smallest = x;\n\
    \        }\n        else if (x < next_smallest)\n        {\n            next_smallest\
    \ = x;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}", "{\n\
    \    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long\
    \ min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n\
    \            min2 = min;\n            min = i;\n        }\n        else if (i\
    \ < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n\
    \        if (e < smallest)\n        {\n            next_smallest = smallest;\n\
    \            smallest = e;\n        }\n        else if (e < next_smallest)\n \
    \       {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2) return\
    \ Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n\
    \    if (smallest > next_smallest) \n    {\n        smallest = lst[1];\n     \
    \   next_smallest = lst[0];\n    }\n    foreach (i, v; lst[2..$]) \n    {\n  \
    \      if (v < smallest) \n        {\n            next_smallest = smallest;\n\
    \            smallest = v;\n        }\n        else if (v < next_smallest) \n\
    \        {\n            next_smallest = v;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long next_min = lst[1];\n    foreach (i, v; lst)\n    {\n   \
    \     if (v < min)\n        {\n            next_min = min;\n            min =\
    \ v;\n        }\n        else if (v < next_min)\n        {\n            next_min\
    \ = v;\n        }\n    }\n    return Nullable!(long)(next_min);\n}", "{\n    long\
    \ min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n       \
    \ if(i < min)\n        {\n            min2 = min;\n            min = i;\n    \
    \    }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n\
    \    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n        return\
    \ Nullable!(long)();\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ second_min = min;\n            min = e;\n        }\n        else if (e < second_min)\n\
    \        {\n            second_min = e;\n        }\n    }\n    return Nullable!(long)(second_min);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    if (min > min2)\n    {\n        min\
    \ = min2;\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$])\n    {\n\
    \        if (i < min)\n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if (i < min2)\n        {\n            min2 = i;\n   \
    \     }\n    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    \n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    \n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n     \
    \       min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n\
    \        {\n            min2 = e;\n        }\n    }\n    \n    return min2;\n}",
  "{\n    if (lst.length < 2) return null;\n    long smallest = lst[0];\n    long\
    \ second_smallest = lst[1];\n    foreach (i; lst)\n    {\n        if (i < smallest)\n\
    \        {\n            second_smallest = smallest;\n            smallest = i;\n\
    \        }\n        else if (i < second_smallest)\n        {\n            second_smallest\
    \ = i;\n        }\n    }\n    return second_smallest;\n}", "{\n    if (lst.length\
    \ < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long\
    \ next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n\
    \        {\n            next_smallest = smallest;\n            smallest = e;\n\
    \        }\n        else if (e < next_smallest)\n        {\n            next_smallest\
    \ = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n   \
    \ return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2) \n    {\n   \
    \     return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long min2\
    \ = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n\
    \            min2 = min;\n            min = i;\n        } \n        else if (i\
    \ < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n\
    }", "{\n    if (lst.length < 2) return Nullable!(long)();\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n\
    \        {\n            min2 = min;\n            min = e;\n        }\n       \
    \ else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n   \
    \ return Nullable!(long)(min2);\n}", "{\n    long min1 = long.max;\n    long min2\
    \ = long.max;\n    foreach(e; lst)\n    {\n        if(e < min1)\n        {\n \
    \           min2 = min1;\n            min1 = e;\n        }\n        else if(e\
    \ < min2)\n        {\n            min2 = e;\n        }\n    }\n    if(min2 ==\
    \ long.max)\n    {\n        return Nullable!(long)();\n    }\n    else\n    {\n\
    \        return Nullable!(long)(min2);\n    }\n}", "{\n    if (lst.length < 2)\
    \ \n    {\n        return Nullable!(long).init;\n    }\n    long first = lst[0];\n\
    \    long second = lst[1];\n    if (first > second) \n    {\n        first = lst[1];\n\
    \        second = lst[0];\n    }\n    foreach (i; 2..lst.length) \n    {\n   \
    \     if (lst[i] < first) \n        {\n            second = first;\n         \
    \   first = lst[i];\n        } \n        else if (lst[i] < second) \n        {\n\
    \            second = lst[i];\n        }\n    }\n    return second;\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i, val; lst)\n    {\n        if (val <\
    \ min)\n        {\n            min2 = min;\n            min = val;\n        }\n\
    \        else if (val < min2)\n        {\n            min2 = val;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n\
    \    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n           \
    \ min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n \
    \       {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n\
    \    {\n        if(i < min)\n        {\n            min2 = min;\n            min\
    \ = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n\
    \        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return Nullable!(long)();\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (size_t i = 1; i < lst.length; i++)\n    {\n        if (lst[i]\
    \ < min)\n        {\n            second_min = min;\n            min = lst[i];\n\
    \        }\n        else if (lst[i] < second_min)\n        {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (second_min == min)\n        return Nullable!(long)();\n\
    \    return Nullable!(long)(second_min);\n}", "{\n    if (lst.length < 2)\n  \
    \      return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    foreach (i, elem; lst)\n    {\n        if (elem < smallest)\n\
    \        {\n            second_smallest = smallest;\n            smallest = elem;\n\
    \        }\n        else if (elem < second_smallest)\n        {\n            second_smallest\
    \ = elem;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}",
  "{\n    long min = lst[0];\n    long sec_min = long.max;\n    foreach(i; lst)\n\
    \    {\n        if(i < min)\n        {\n            sec_min = min;\n         \
    \   min = i;\n        }\n        else if(i < sec_min)\n        {\n           \
    \ sec_min = i;\n        }\n    }\n    if(sec_min == long.max)\n    {\n       \
    \ return Nullable!(long)();\n    }\n    else\n    {\n        return Nullable!(long)(sec_min);\n\
    \    }\n}", "{\n    if (lst.length < 2) return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i, v; lst)\n    {\n       \
    \ if (v < min)\n        {\n            min2 = min;\n            min = v;\n   \
    \     }\n        else if (v < min2)\n        {\n            min2 = v;\n      \
    \  }\n    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\
    \ return Nullable!(long)();\n    long min1 = lst[0];\n    long min2 = lst[1];\n\
    \    if (min1 > min2) swap(min1, min2);\n    foreach (i, e; lst[2..$]) \n    {\n\
    \        if (e < min1) \n        {\n            min2 = min1;\n            min1\
    \ = e;\n        }\n        else if (e < min2) \n        {\n            min2 =\
    \ e;\n        }\n    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length\
    \ < 2)\n        return null;\n    long smallest = lst[0];\n    long secondSmallest\
    \ = lst[1];\n    if (smallest > secondSmallest)\n    {\n        swap(smallest,\
    \ secondSmallest);\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e\
    \ < smallest)\n        {\n            secondSmallest = smallest;\n           \
    \ smallest = e;\n        }\n        else if (e < secondSmallest)\n        {\n\
    \            secondSmallest = e;\n        }\n    }\n    return secondSmallest;\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2)\n \
    \       return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n\
    \            min = i;\n        }\n        else if (i < min2)\n        {\n    \
    \        min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length\
    \ < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach\
    \ (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n\
    \            min = i;\n        }\n        else if (i < min2)\n        {\n    \
    \        min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    long smallest\
    \ = lst[0];\n    long second_smallest = long.max;\n    foreach(i; lst)\n    {\n\
    \        if(i < smallest)\n        {\n            second_smallest = smallest;\n\
    \            smallest = i;\n        }\n        else if(i < second_smallest)\n\
    \        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest\
    \ == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long second = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            second = min;\n            min = i;\n        }\n     \
    \   else if (i < second)\n        {\n            second = i;\n        }\n    }\n\
    \    return second;\n}", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n\
    \    long smallest = lst[0];\n    long secondSmallest = lst[1];\n    if (smallest\
    \ > secondSmallest)\n    {\n        swap(smallest, secondSmallest);\n    }\n \
    \   foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n \
    \           secondSmallest = smallest;\n            smallest = e;\n        }\n\
    \        else if (e < secondSmallest)\n        {\n            secondSmallest =\
    \ e;\n        }\n    }\n    return Nullable!(long)(secondSmallest);\n}", "{\n\
    \    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n\
    \        if (i < min) \n        {\n            min2 = min;\n            min =\
    \ i;\n        } \n        else if (i < min2) \n        {\n            min2 = i;\n\
    \        }\n    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length\
    \ < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long\
    \ second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n\
    \        {\n            second_smallest = smallest;\n            smallest = e;\n\
    \        }\n        else if (e < second_smallest)\n        {\n            second_smallest\
    \ = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}", "{\n\
    \    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest\
    \ = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, v; lst) \n  \
    \  {\n        if (v < smallest) \n        {\n            second_smallest = smallest;\n\
    \            smallest = v;\n        }\n        else if (v < second_smallest) \n\
    \        {\n            second_smallest = v;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst) \n\
    \    {\n        if (i < min) \n        {\n            min2 = min;\n          \
    \  min = i;\n        }\n        else if (i < min2) \n        {\n            min2\
    \ = i;\n        }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n\
    \        return null;\n    \n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    \n    foreach (i, e; lst)\n    {\n        if (i < 2)\n      \
    \      continue;\n        if (e < smallest)\n        {\n            second_smallest\
    \ = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n\
    \        {\n            second_smallest = e;\n        }\n    }\n    \n    return\
    \ second_smallest;\n}", "{\n    if (lst.length < 2) return null;\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return min2;\n}", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n\
    \    long min = lst[0];\n    long sec = lst[1];\n    foreach (i; lst)\n    {\n\
    \        if (i < min)\n        {\n            sec = min;\n            min = i;\n\
    \        }\n        else if (i < sec)\n        {\n            sec = i;\n     \
    \   }\n    }\n    return Nullable!(long)(sec);\n}", "{\n    if (lst.length < 2)\n\
    \        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest\
    \ = lst[1];\n    for (long i = 2; i < lst.length; i++) \n    {\n        if (lst[i]\
    \ < smallest) \n        {\n            second_smallest = smallest;\n         \
    \   smallest = lst[i];\n        }\n        else if (lst[i] < second_smallest)\
    \ \n        {\n            second_smallest = lst[i];\n        }\n    }\n    return\
    \ Nullable!(long)(second_smallest);\n}", "{\n    if (lst.length < 2) return null;\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n\
    \        if (i < min)\n        {\n            min2 = min;\n            min = i;\n\
    \        }\n        else if (i < min2)\n        {\n            min2 = i;\n   \
    \     }\n    }\n    return min2;\n}", "{\n    if (lst.length < 2) \n    {\n  \
    \      return Nullable!(long).init;\n    }\n    long smallest = lst[0];\n    long\
    \ second_smallest = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e <\
    \ smallest) \n        {\n            second_smallest = smallest;\n           \
    \ smallest = e;\n        }\n        else if (e < second_smallest) \n        {\n\
    \            second_smallest = e;\n        }\n    }\n    return second_smallest;\n\
    }", "{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n\
    \    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n\
    \        {\n            min2 = min;\n            min = i;\n        }\n       \
    \ else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n   \
    \ return min2;\n}", "{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i;\
    \ lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n     \
    \       min = i;\n        }\n        else if(i < min2)\n        {\n          \
    \  min2 = i;\n        }\n    }\n    return min2;\n}", "{\n    long smallest =\
    \ lst[0];\n    long second_smallest = long.max;\n    foreach(i; lst)\n    {\n\
    \        if(i < smallest)\n        {\n            second_smallest = smallest;\n\
    \            smallest = i;\n        }\n        else if(i < second_smallest)\n\
    \        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest\
    \ == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}", "{\n    if (lst.length < 2) \n\
    \    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i <\
    \ min) \n        {\n            second_min = min;\n            min = i;\n    \
    \    }\n        else if (i < second_min) \n        {\n            second_min =\
    \ i;\n        }\n    }\n    return second_min;\n}", "{\n    long min = lst[0];\n\
    \    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n  \
    \      {\n            min2 = min;\n            min = i;\n        }\n        else\
    \ if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return\
    \ min2;\n}", "{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n\
    \    }\n    return lst.minElement!((a, b) => a > b);\n}", "{\n    if (lst.length\
    \ < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2\
    \ = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n  \
    \          min2 = min;\n            min = i;\n        }\n        else if (i <\
    \ min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n\
    }", "{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min\
    \ = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if\
    \ (i < min)\n        {\n            min2 = min;\n            min = i;\n      \
    \  }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n\
    \    }\n    return Nullable!(long)(min2);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
