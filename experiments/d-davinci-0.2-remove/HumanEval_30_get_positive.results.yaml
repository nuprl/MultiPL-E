language: d
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long n; l)\n    {\n        if (n > 0)\n        {\n\
    \            res[i] = n;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp82q4l9mx.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284cd]

    ??:? void tmp82q4l9mx.__unittest_L20_C1() [0x427fb1]

    ??:? void tmp82q4l9mx.__modtest() [0x428250]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430655]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b415]

    ??:? runModuleUnitTests [0x42c381]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e > 0)\n        {\n\
    \            res[i] = e;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            ret[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return ret[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            result[i] = x;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ujx82ir.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ujx82ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            res[count] = i;\n            count++;\n        }\n    }\n  \
    \  return res[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    long count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(i; l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e > 0)\n        {\n\
    \            res[i] = e;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            res[count] = i;\n            count++;\n        }\n    }\n  \
    \  return res[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    long count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n            ret ~= i;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ujx82ir.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ujx82ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret;\n    foreach(i;\
    \ l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = [];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n            ret ~= i;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(i; l)\n    {\n        if(i > 0)\n        {\n            ret ~= i;\n\
    \        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = [];\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n            ret ~= i;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = [];\n    foreach(long\
    \ x; l)\n    {\n        if(x > 0)\n            res ~= x;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(var item; l)\n    {\n        if(item > 0)\n        {\n          \
    \  result ~= item;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L])\
    \ == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfztdkjev.d(9): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfztdkjev.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] a = new long[l.length];\n\
    \    int j = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            a[j] = i;\n            j++;\n        }\n    }\n    return a[0..j];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n      \
    \  {\n            result[count] = x;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret;\n    foreach(long\
    \ i; l)\n    {\n        if(i > 0)\n            ret ~= i;\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    long count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n     \
    \   {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\n/*\nReturn only negative numbers in the list.\n\
    \            \n*/\nlong[] get_negative(long[] l) \n{\n    long[] result = new\
    \ long[l.length];\n    long count = 0;\n    foreach(long i; l)\n    {\n      \
    \  if(i < 0)\n        {\n            result[count] = i;\n            count++;\n\
    \        }\n    }\n    return result[0..count];\n}\n/*\nReturn only even numbers\
    \ in the list.\n            \n*/\nlong[] get_even(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    long count = 0;\n    foreach(long i; l)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            result[count] = i;\n         \
    \   count++;\n        }\n    }\n    return result[0..count];\n}\n/*\nReturn only\
    \ odd numbers in the list.\n            \n*/\nlong[] get_odd(long[] l) \n{\n \
    \   long[] result = new long[l.length];\n    long count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(i % 2 != 0)\n        {\n            result[count] =\
    \ i;\n            count++;\n        }\n    }\n    return result[0..count];\n}\n\
    /*\nReturn only prime numbers in the list.\n            \n*/\nlong[] get_prime(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    long count = 0;\n    foreach(long\
    \ i; l)\n    {\n        if(is_prime(i))\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n    }\n    return result[0..count];\n\
    }\n/*\nReturn only numbers that are divisible by the given number in the list.\n\
    unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6cypwbhd.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6cypwbhd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            ret[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return ret[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    long ret_index = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n \
    \       {\n            ret[ret_index] = i;\n            ret_index++;\n       \
    \ }\n    }\n    return ret[0..ret_index];\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret;\n    foreach(e;\
    \ l)\n    {\n        if(e > 0)\n        {\n            ret ~= e;\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            ret[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return ret[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ujx82ir.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ujx82ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(long n; l)\n    {\n        if(n > 0)\n        {\n\
    \            result[i] = n;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e > 0)\n        {\n\
    \            res[i] = e;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res;\n    foreach(e;\
    \ l)\n    {\n        if(e > 0)\n        {\n            res ~= e;\n        }\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res;\n    foreach(num;\
    \ l)\n    {\n        if(num > 0)\n        {\n            res ~= num;\n       \
    \ }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp82q4l9mx.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284cd]

    ??:? void tmp82q4l9mx.__unittest_L20_C1() [0x427fb1]

    ??:? void tmp82q4l9mx.__modtest() [0x428250]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430655]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b415]

    ??:? runModuleUnitTests [0x42c381]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(num; l)\n    {\n        if(num > 0)\n        {\n            result\
    \ ~= num;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(e; l)\n    {\n        if(e > 0)\n        {\n    \
    \        result[i] = e;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpitqjs0ul.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpitqjs0ul.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            ret[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return ret;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n\
    \    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0glw27ol.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284cd]

    ??:? void tmp0glw27ol.__unittest_L20_C1() [0x427fb1]

    ??:? void tmp0glw27ol.__modtest() [0x428250]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430655]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b415]

    ??:? runModuleUnitTests [0x42c381]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ujx82ir.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ujx82ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(long n; l)\n    {\n        if(n > 0)\n        {\n\
    \            result[i] = n;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e > 0)\n        {\n\
    \            res[i] = e;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ujx82ir.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ujx82ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = [];\n  \
    \  foreach(i; l)\n    {\n        if(i > 0)\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = [];\n    foreach(long\
    \ x; l)\n    {\n        if(x > 0)\n            res ~= x;\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e > 0)\n        {\n\
    \            ret[i] = e;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(e; l)\n    {\n        if(e > 0)\n        {\n    \
    \        ret[i] = e;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n            res\
    \ ~= x;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ujx82ir.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ujx82ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(i; l)\n    {\n        if(i > 0)\n        {\n\
    \            result[count] = i;\n            count++;\n        }\n    }\n    return\
    \ result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(e; l)\n    {\n        if(e > 0)\n        {\n            result ~=\
    \ e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ujx82ir.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ujx82ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    long i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            res[i] = x;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\n/*\nReturn only negative numbers\
    \ in the list.\n            \n*/\nlong[] get_negative(long[] l) \n{\n    long[]\
    \ ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i < 0)\n     \
    \   {\n            ret ~= i;\n        }\n    }\n    return ret;\n}\n/*\nReturn\
    \ only even numbers in the list.\n            \n*/\nlong[] get_even(long[] l)\
    \ \n{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            ret ~= i;\n        }\n    }\n    return ret;\n\
    }\n/*\nReturn only odd numbers in the list.\n            \n*/\nlong[] get_odd(long[]\
    \ l) \n{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n     \
    \   if(i % 2 != 0)\n        {\n            ret ~= i;\n        }\n    }\n    return\
    \ ret;\n}\n/*\nReturn only prime numbers in the list.\n            \n*/\nlong[]\
    \ get_prime(long[] l) \n{\n    long[] ret = new long[0];\n    foreach(long i;\
    \ l)\n    {\n        if(is_prime(i))\n        {\n            ret ~= i;\n     \
    \   }\n    }\n    return ret;\n}\n/*\nReturn only numbers that are divisible by\
    \ the given number in the list.\n            \n*/\nlong[] get_divisible(long[]\
    \ l, long n) \n{\n    long[] ret = new long[0];\n    foreach(long i; l)\n    {\n\
    \        if(i % n == 0)\n        {\n            ret ~= i;\n        }\n    }\n\
    \    return ret;\n}\n/*\nReturn only numbers that are not divisible by the given\
    \ number in\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjhmu6xst.d(98): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhmu6xst.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result;\n    int\
    \ i;\n    foreach(i, l)\n    {\n        if(l[i] > 0)\n        {\n            result\
    \ ~= l[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp60lva955.d(10): Error: no identifier for declarator `l`

    /tmp/tmp60lva955.d(10): Error: found `)` when expecting `;`

    /tmp/tmp60lva955.d(17): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60lva955.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret;\n    foreach(x;\
    \ l)\n    {\n        if(x > 0)\n        {\n            ret ~= x;\n        }\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    auto result = new long[];\n\
    \    foreach(e; l)\n    {\n        if(e > 0)\n            result ~= e;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4hpcfy_.d(8): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4hpcfy_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    long j = 0;\n    for (long i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            ret[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return ret[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    long j = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n\
    \            res[j] = i;\n            j++;\n        }\n    }\n    return res[0..j];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = [];\n  \
    \  foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    auto result = new long[];\n\
    \    foreach(e; l)\n    {\n        if(e > 0)\n            result ~= e;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\n \
    \   assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4hpcfy_.d(8): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4hpcfy_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long n; l)\n    {\n        if(n > 0)\n        {\n\
    \            res[i] = n;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(long e; l)\n    {\n        if(e > 0)\n        {\n\
    \            ret[i] = e;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            ret[i] = x;\n            i++;\n        }\n    }\n    return ret[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(long n; l) {\n        if (n > 0) {\n            result[i]\
    \ = n;\n            i++;\n        }\n    }\n    return result[0..i];\n}\nunittest\n\
    {\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L,\
    \ 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L,\
    \ -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            res[i] = x;\n            i++;\n        }\n    }\n    return res[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            res\
    \ ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int i = 0;\n    foreach(long x; l)\n    {\n        if(x > 0)\n        {\n\
    \            result[i] = x;\n            i++;\n        }\n    }\n    return result[0..i];\n\
    }\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvs7a5v35.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvs7a5v35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            result[j] = l[i];\n            j++;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp82q4l9mx.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284cd]

    ??:? void tmp82q4l9mx.__unittest_L20_C1() [0x427fb1]

    ??:? void tmp82q4l9mx.__modtest() [0x428250]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5ab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b43e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430655]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b415]

    ??:? runModuleUnitTests [0x42c381]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428990]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; i++)\n    {\n        if (l[i]\
    \ > 0)\n        {\n            res[j] = l[i];\n            j++;\n        }\n \
    \   }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(x => x\
    \ > 0);\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpitqjs0ul.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpitqjs0ul.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    int count = 0;\n    foreach(long i; l)\n    {\n        if(i > 0)\n      \
    \  {\n            result[count] = i;\n            count++;\n        }\n    }\n\
    \    return result[0..count];\n}\nunittest\n{\n    alias candidate = get_positive;\n\
    \n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L,\
    \ 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L,\
    \ 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) ==\
    \ []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 1
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a\
    \ > 0)();\n}\nunittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L,\
    \ -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L,\
    \ 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n \
    \   assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sod8x2_.d(8): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sod8x2_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163051
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] ret = new long[0];\n\
    \    foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            ret\
    \ ~= i;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
- exit_code: 0
  program: "import std.math;\n/*\nReturn only positive numbers in the list.\n    \
    \        \n*/\nlong[] get_positive(long[] l) \n{\n    long[] result = [];\n  \
    \  foreach(long i; l)\n    {\n        if(i > 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L,\
    \ 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L])\
    \ == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) ==\
    \ []);\n    assert(candidate([]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163052
