{
  "language": "d",
  "name": "HumanEval_79_decimal_to_binary",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary;\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpeo8d64mg.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmpeo8d64mg.d(22): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeo8d64mg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppabqgiru.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppabqgiru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzy8nkipa.d(19): Error: no property `to` for type `long`\n/tmp/tmpzy8nkipa.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzy8nkipa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0) {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv2is6ych.d(18): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2is6ych.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy9r78ysx.d(19): Error: no property `to` for type `long`\n/tmp/tmpy9r78ysx.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9r78ysx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph1506ffp.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmph1506ffp.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1506ffp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppabqgiru.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppabqgiru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0) {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpddsfx4rh.d(18): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpddsfx4rh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv5i4qc56.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpv5i4qc56.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5i4qc56.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppabqgiru.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppabqgiru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzy8nkipa.d(19): Error: no property `to` for type `long`\n/tmp/tmpzy8nkipa.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzy8nkipa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzwflrivl.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwflrivl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp13l51inf.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13l51inf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string res = \"db\";\n    while(decimal > 0)\n    {\n        res ~= decimal % 2;\n        decimal /= 2;\n    }\n    res ~= \"db\";\n    return res.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprnkgkvwe.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprnkgkvwe.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnkgkvwe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal > 0)\n    {\n        binary = to!string(decimal % 2) ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmblzw3l7.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmblzw3l7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppabqgiru.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppabqgiru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcwudduk9.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwudduk9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa5u_dxzv.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5u_dxzv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0) {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpga1l_jzn.d(18): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga1l_jzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpduksot6d.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpduksot6d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0) {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpddsfx4rh.d(18): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpddsfx4rh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal > 0)\n    {\n        binary = to!string(decimal % 2) ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmblzw3l7.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmblzw3l7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0aicq17l.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0aicq17l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0) {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpddsfx4rh.d(18): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpddsfx4rh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0) {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpga1l_jzn.d(18): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga1l_jzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    if (decimal == 0)\n        return \"db0db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgb2sd7s7.d(21): Error: no property `to` for type `long`\n/tmp/tmpgb2sd7s7.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgb2sd7s7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcwudduk9.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwudduk9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal > 0)\n    {\n        binary = to!string(decimal % 2) ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmblzw3l7.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmblzw3l7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        if (decimal % 2 == 0)\n            result = \"0\" ~ result;\n        else\n            result = \"1\" ~ result;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfx7iquii.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427f75]\n??:? void tmpfx7iquii.__unittest_L27_C1() [0x427b85]\n??:? void tmpfx7iquii.__modtest() [0x427cf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd67]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ac76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac4d]\n??:? runModuleUnitTests [0x42bb3d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcwudduk9.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwudduk9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0) {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf4uyiou6.d(18): Error: no property `to` for type `long`\n/tmp/tmpf4uyiou6.d(21): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4uyiou6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal & 1).to!string;\n        decimal >>= 1;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoj5f9pvf.d(19): Error: no property `to` for type `long`\n/tmp/tmpoj5f9pvf.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoj5f9pvf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal != 0)\n    {\n        binary = to!string(decimal % 2) ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9qhi7cct.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qhi7cct.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcwudduk9.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwudduk9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm2lofuo5.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2lofuo5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp13l51inf.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13l51inf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0) {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbm4iqb7h.d(18): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbm4iqb7h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv9qxm1cq.d(19): Error: no property `to` for type `long`\n/tmp/tmpv9qxm1cq.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9qxm1cq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal != 0)\n    {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8y5iajfv.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427f6d]\n??:? void tmp8y5iajfv.__unittest_L24_C1() [0x427b7d]\n??:? void tmp8y5iajfv.__modtest() [0x427cf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ac6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc3d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300ec]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbc9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac45]\n??:? runModuleUnitTests [0x42bb35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary.dup.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdih5cqx2.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmpdih5cqx2.d(22): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdih5cqx2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzk0kthyb.d(19): Error: no property `to` for type `long`\n/tmp/tmpzk0kthyb.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzk0kthyb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv9qxm1cq.d(19): Error: no property `to` for type `long`\n/tmp/tmpv9qxm1cq.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9qxm1cq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpva_rfx40.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva_rfx40.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0) {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp42skvt1y.d(18): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42skvt1y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzk0kthyb.d(19): Error: no property `to` for type `long`\n/tmp/tmpzk0kthyb.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzk0kthyb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcwudduk9.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwudduk9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph1506ffp.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmph1506ffp.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1506ffp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result;\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return \"db\" ~ result.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzvgisk__.d(19): Error: no property `to` for type `long`\n/tmp/tmpzvgisk__.d(22): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzvgisk__.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzk0kthyb.d(19): Error: no property `to` for type `long`\n/tmp/tmpzk0kthyb.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzk0kthyb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpem_2lzom.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpem_2lzom.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqpk24plu.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmpqpk24plu.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpk24plu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwbtluyq7.d(19): Error: no property `to` for type `long`\n/tmp/tmpwbtluyq7.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbtluyq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa5u_dxzv.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5u_dxzv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzk0kthyb.d(19): Error: no property `to` for type `long`\n/tmp/tmpzk0kthyb.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzk0kthyb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcwudduk9.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwudduk9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8myxfs4y.d(19): Error: no property `to` for type `long`\n/tmp/tmp8myxfs4y.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8myxfs4y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcwudduk9.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwudduk9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string res = \"db\";\n    while(decimal > 0)\n    {\n        res ~= decimal % 2;\n        decimal /= 2;\n    }\n    res ~= \"db\";\n    return res.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprnkgkvwe.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprnkgkvwe.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprnkgkvwe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_crtu94m.d(19): Error: no property `to` for type `long`\n/tmp/tmp_crtu94m.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_crtu94m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpduksot6d.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpduksot6d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp13l51inf.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13l51inf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    if (decimal == 0)\n        return result ~ \"0db\";\n    while (decimal != 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    return result.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4_6kd8rj.d(21): Error: cannot append type `long` to type `string`\n/tmp/tmp4_6kd8rj.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_6kd8rj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt6a52tqq.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6a52tqq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    if (decimal == 0)\n        return result ~ \"0db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp302vqjff.d(21): Error: no property `to` for type `long`\n/tmp/tmp302vqjff.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp302vqjff.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    if (decimal == 0)\n        return \"db0db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpohyeai_v.d(21): Error: cannot append type `long` to type `string`\n/tmp/tmpohyeai_v.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohyeai_v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm2lofuo5.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2lofuo5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    // your code here\n    string result = \"db\";\n    if(decimal == 0)\n        return \"db0db\";\n    while(decimal != 0)\n    {\n        if(decimal % 2 == 0)\n            result = \"0\" ~ result;\n        else\n            result = \"1\" ~ result;\n        decimal /= 2;\n    }\n    return \"db\" ~ result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8unbuehp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427fad]\n??:? void tmp8unbuehp.__unittest_L30_C1() [0x427bfe]\n??:? void tmp8unbuehp.__modtest() [0x427d30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42acae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc7d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43012c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc09]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac85]\n??:? runModuleUnitTests [0x42bb75]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283fc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164129
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp13l51inf.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13l51inf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm2lofuo5.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2lofuo5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0) {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpga1l_jzn.d(18): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga1l_jzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal > 0)\n    {\n        binary = to!string(decimal % 2) ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmblzw3l7.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmblzw3l7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result;\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return \"db\" ~ result.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzvgisk__.d(19): Error: no property `to` for type `long`\n/tmp/tmpzvgisk__.d(22): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzvgisk__.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    if (decimal == 0)\n        return \"db0db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppkd1qvec.d(21): Error: cannot append type `long` to type `string`\n/tmp/tmppkd1qvec.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppkd1qvec.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv5i4qc56.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpv5i4qc56.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5i4qc56.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    reverse(binary);\n    binary ~= \"db\";\n    return binary;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsz5nnyqz.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmpsz5nnyqz.d(22): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsz5nnyqz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpduksot6d.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpduksot6d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8myxfs4y.d(19): Error: no property `to` for type `long`\n/tmp/tmp8myxfs4y.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8myxfs4y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal != 0)\n    {\n        binary = (decimal % 2).to!string + binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpooch2mxl.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpooch2mxl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_crtu94m.d(19): Error: no property `to` for type `long`\n/tmp/tmp_crtu94m.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_crtu94m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    if (decimal == 0)\n        return result ~ \"0db\";\n    while (decimal != 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxbuuzusv.d(21): Error: no property `to` for type `long`\n/tmp/tmpxbuuzusv.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbuuzusv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp13l51inf.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13l51inf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwbtluyq7.d(19): Error: no property `to` for type `long`\n/tmp/tmpwbtluyq7.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbtluyq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppabqgiru.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppabqgiru.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv9qxm1cq.d(19): Error: no property `to` for type `long`\n/tmp/tmpv9qxm1cq.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9qxm1cq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjofiuya6.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmpjofiuya6.d(22): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjofiuya6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwbtluyq7.d(19): Error: no property `to` for type `long`\n/tmp/tmpwbtluyq7.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbtluyq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzwflrivl.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwflrivl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_crtu94m.d(19): Error: no property `to` for type `long`\n/tmp/tmp_crtu94m.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_crtu94m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.idup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv5lehmi3.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpv5lehmi3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5lehmi3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result;\n    while (decimal > 0)\n    {\n        result ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return \"db\" ~ result.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4a4jpbuh.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmp4a4jpbuh.d(22): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a4jpbuh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    if (decimal == 0)\n        return result ~ \"0db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp302vqjff.d(21): Error: no property `to` for type `long`\n/tmp/tmp302vqjff.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp302vqjff.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqpk24plu.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmpqpk24plu.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpk24plu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt908280n.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt908280n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164129
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprx9elc3r.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmprx9elc3r.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx9elc3r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwbtluyq7.d(19): Error: no property `to` for type `long`\n/tmp/tmpwbtluyq7.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwbtluyq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm2lofuo5.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm2lofuo5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzwflrivl.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwflrivl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8myxfs4y.d(19): Error: no property `to` for type `long`\n/tmp/tmp8myxfs4y.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8myxfs4y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv9qxm1cq.d(19): Error: no property `to` for type `long`\n/tmp/tmpv9qxm1cq.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv9qxm1cq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzxg2ubvr.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpzxg2ubvr.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxg2ubvr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal > 0)\n    {\n        binary = (decimal % 2).to!string ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_p729hr1.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_p729hr1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164129
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph1506ffp.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmph1506ffp.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1506ffp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0) {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpga1l_jzn.d(18): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpga1l_jzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm3r28uez.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3r28uez.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164129
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0) {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpddsfx4rh.d(18): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpddsfx4rh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0) {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv2is6ych.d(18): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv2is6ych.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    if (decimal == 0)\n        return result ~ \"0db\";\n    while (decimal != 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result.reverse ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxbuuzusv.d(21): Error: no property `to` for type `long`\n/tmp/tmpxbuuzusv.d(24): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxbuuzusv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpva_rfx40.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva_rfx40.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph_wneqw7.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_wneqw7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164129
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcwudduk9.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwudduk9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv5i4qc56.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpv5i4qc56.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5i4qc56.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcwudduk9.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcwudduk9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_crtu94m.d(19): Error: no property `to` for type `long`\n/tmp/tmp_crtu94m.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_crtu94m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal > 0)\n    {\n        binary = to!string(decimal % 2) ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmblzw3l7.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmblzw3l7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzwflrivl.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwflrivl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pj0v8qr.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pj0v8qr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        if (decimal % 2 == 0)\n            result ~= \"0\";\n        else\n            result ~= \"1\";\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpu6ne__9x.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427f55]\n??:? void tmpu6ne__9x.__unittest_L28_C1() [0x427b61]\n??:? void tmpu6ne__9x.__modtest() [0x427cd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c69b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fed1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430380]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c471]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164129
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        if (decimal % 2 == 0)\n            result ~= \"0\";\n        else\n            result ~= \"1\";\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpli9t7hoe.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427f55]\n??:? void tmpli9t7hoe.__unittest_L28_C1() [0x427b61]\n??:? void tmpli9t7hoe.__modtest() [0x427cd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c69b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5aa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fed1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430380]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b581]\n??:? runModuleUnitTests [0x42c471]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164129
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph1506ffp.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmph1506ffp.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph1506ffp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphpk7enc3.d(19): Error: no property `to` for type `long`\n/tmp/tmphpk7enc3.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphpk7enc3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp13l51inf.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13l51inf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"\";\n    while (decimal != 0)\n    {\n        binary = to!string(decimal % 2) ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9qhi7cct.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9qhi7cct.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzy8nkipa.d(19): Error: no property `to` for type `long`\n/tmp/tmpzy8nkipa.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(string)`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzy8nkipa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqpk24plu.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmpqpk24plu.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpk24plu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal > 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9x1i2w_n.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmp9x1i2w_n.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9x1i2w_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal > 0)\n    {\n        result ~= to!string(decimal % 2);\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv5i4qc56.d(19): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpv5i4qc56.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5i4qc56.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string binary = \"db\";\n    while (decimal != 0)\n    {\n        binary ~= decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzwflrivl.d(19): Error: cannot append type `long` to type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwflrivl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n            \n*/\nstring decimal_to_binary(long decimal) \n{\n    string result = \"db\";\n    while (decimal != 0)\n    {\n        result ~= decimal % 2;\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqpk24plu.d(19): Error: cannot append type `long` to type `string`\n/tmp/tmpqpk24plu.d(23): Error: template `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`, candidates are:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T t) if (isTuple!T)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqpk24plu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164128
    }
  ]
}