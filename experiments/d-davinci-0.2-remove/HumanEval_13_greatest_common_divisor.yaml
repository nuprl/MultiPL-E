name: HumanEval_13_greatest_common_divisor
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Return a greatest common divisor\
  \ of two integers a and b\n            \n*/\nlong greatest_common_divisor(long a,\
  \ long b) \n"
tests: "unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L,\
  \ 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L,\
  \ 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}"
completions: ["{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n\
    \        return b;\n    else if (b == 0)\n        return a;\n    else if (a >\
    \ b)\n        return greatest_common_divisor(a % b, b);\n    else\n        return\
    \ greatest_common_divisor(a, b % a);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n        return\
    \ b;\n    if (b == 0)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ % b, b);\n    else\n        return greatest_common_divisor(a, b % a);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    else\n        return greatest_common_divisor(b\
    \ % a, a);\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n   \
    \ if (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a == 2 ||\
    \ b == 2) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}\n/*\n Return a least common multiple of two integers a\
    \ and b\n            \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest\
    \ common divisor of two integers a and b\n            \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a == 2 || b\
    \ == 2) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}\n/*\n Return a least common multiple of two integers a\
    \ and b\n            \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest\
    \ common divis", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n  \
    \  return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n      \
    \  return b;\n    else\n        return greatest_common_divisor(b % a, a);\n}",
  "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n   \
    \ return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0) return b;\n\
    \    if (b == 0) return a;\n    if (a == b) return a;\n    if (a == 1 || b ==\
    \ 1) return 1;\n    if (a == 2 || b == 2) return 1;\n    if (a % 2 == 0 && b %\
    \ 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2 ==\
    \ 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0) return greatest_common_divisor(a,\
    \ b / 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if ((a & 1) == 0)\n        return ((b & 1) == 0) ?\n            2 * greatest_common_divisor(a\
    \ >> 1, b >> 1) :\n            greatest_common_divisor(a >> 1, b);\n    else\n\
    \        return ((b & 1) == 0) ?\n            greatest_common_divisor(a, b >>\
    \ 1) :\n            greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a % 2 == 0\
    \ && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0) return\
    \ greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    return greatest_common_divisor(b % a,\
    \ a);\n}", "{\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) \n        return b;\n    else if (b == 0) \n\
    \        return a;\n    else \n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n    if\
    \ (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n\
    }", "{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}", "{\n \
    \   if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a > b) return greatest_common_divisor(a - b, b);\n\
    \    if (a < b) return greatest_common_divisor(a, b - a);\n}", "{\n    if (a ==\
    \ 0)\n        return b;\n    else if (b == 0)\n        return a;\n    else\n \
    \       return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n \
    \       return b;\n    else\n        return greatest_common_divisor(b % a, a);\n\
    }", "{\n    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}", "{\n \
    \   if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n     \
    \   return greatest_common_divisor(a, b % a);\n}", "{\n    long c;\n    while\
    \ (a != 0) {\n        c = a;\n        a = b % a;\n        b = c;\n    }\n    return\
    \ b;\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return\
    \ 1;\n    if (a == 2 || b == 2)\n        return 1;\n    if (a % 2 == 0 && b %\
    \ 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n    if (b % 2\
    \ == 0)\n        return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (b == 0)\n        return a;\n    else\n  \
    \      return greatest_common_divisor(b, a % b);\n}", "{\n    long c;\n    while\
    \ (a != 0) {\n        c = a; a = b%a;  b = c;\n    }\n    return b;\n}", "{\n\
    \    if (a == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return\
    \ a;\n    if (a == 1 || b == 1) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return\
    \ 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n  \
    \  if (a > b) return greatest_common_divisor((a - b) / 2, b);\n    return greatest_common_divisor((b\
    \ - a) / 2, a);\n}", "{\n    if (b == 0)\n        return a;\n    else\n      \
    \  return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n      \
    \  return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n        return\
    \ a;\n    if (a == 1 || b == 1)\n        return 1;\n    if (a % 2 == 0 && b %\
    \ 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n    if (b % 2\
    \ == 0)\n        return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ % b, b);\n    else\n        return greatest_common_divisor(a, b % a);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    else\n        return greatest_common_divisor(b\
    \ % a, a);\n}", "{\n    if (a < b) \n    {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) \n    {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if (a %\
    \ 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b /\
    \ 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0)\n        return greatest_common_divisor(a, b / 2);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2, b);\n    return\
    \ greatest_common_divisor((b - a) / 2, a);\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n            \n*/\nlong least_common_multiple(long a,\
    \ long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a range of integers\n            \n*/\nlong least_common_multiple(R)(R\
    \ range) \n{\n    long lcm = 1;\n    foreach (i; range)\n        lcm = least_common_multiple(lcm,\
    \ i);\n    return lcm;\n}\n/*\n Return a greatest common divisor of a range of\
    \ integers\n            \n*/\nlong greatest_common_divisor(R)(R range) \n{\n \
    \   long gcd = 0;\n    foreach (i; range)\n        gcd = greatest_common_divisor(gcd,\
    \ i);\n    return gcd;\n}\n/*\n Return a greatest common divisor of a range of\
    \ integers\n            \n*/\nlong greatest_common_divisor(R)(R range) \n{\n \
    \   long gcd = 0;\n    foreach (i; range)\n        gcd = greatest_common_divisor(gcd,\
    \ i);\n    return gcd;\n}\n/*\n Return a least common multiple of a range of integers\n\
    \            \n*/\nlong least_", "{\n    if (a == 0)\n        return b;\n    if\
    \ (b == 0)\n        return a;\n    if (a == b)\n        return a;\n    if (a ==\
    \ 1 || b == 1)\n        return 1;\n    if (a == 2 || b == 2)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n        return\
    \ b;\n    if (b == 0)\n        return a;\n    if (a == b)\n        return a;\n\
    \    if (a == 1 || b == 1)\n        return 1;\n    if (a % 2 == 0 && b % 2 ==\
    \ 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2\
    \ == 0)\n        return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0)\n\
    \        return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    else if (b\
    \ == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    else if (b == 0)\n        return a;\n    else\n\
    \        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0) return\
    \ b;\n    if (b == 0) return a;\n    if (a == b) return a;\n    if (a == 1 ||\
    \ b == 1) return 1;\n    if (a == 2 || b == 2) return 1;\n    if (a % 2 == 0 &&\
    \ b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2\
    \ == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0) return\
    \ greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}\n/*\n Return a least common multiple of two integers a\
    \ and b\n            \n*/\nlong least_common_multiple(long a, long b) \n{\n  \
    \  return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return a least common\
    \ multiple of a sequence of integers\n            \n*/\nlong least_common_multiple(long[]\
    \ a) \n{\n    long result = 1;\n    foreach (i; a) \n    {\n        result = least_common_multiple(result,\
    \ i);\n    }\n    return result;\n}\n/*\n Return a greatest common divisor of\
    \ a sequence of integers\n            \n*/\nlong greatest_common_divisor(long[]\
    \ a) \n{\n    long result = a[0];\n    foreach (i; a) \n    {\n        result\
    \ = greatest_common_divisor(result, i);\n    }\n    return result;\n}\n/*\n Return\
    \ a least common multiple of a sequence of integers\n            \n*/\nlong least_common_multiple(long[][]\
    \ a) \n{\n    long result = 1;\n    foreach (i; a) \n    {\n        result = least_common_multiple(result,\
    \ least_common_multiple(i));\n    }\n    return result;\n}\n/*\n Return a greatest\
    \ common divisor of a sequence of integers\n            \n*/\nlong greatest_common_divisor(long[][]\
    \ a) \n", "{\n    if (a == 0)\n        return b;\n    return greatest_common_divisor(b\
    \ % a, a);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if (a == 2 || b == 2)\n        return 1;\n    if (a %\
    \ 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b /\
    \ 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0)\n        return greatest_common_divisor(a, b / 2);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a < b)\n  \
    \      return greatest_common_divisor(b, a);\n    if (b == 0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n\
    \        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n    \
    \    return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a & 1)\
    \ == 0)\n        return ((b & 1) == 0) ?\n            greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1 :\n            greatest_common_divisor(a >> 1, b);\n    else\n\
    \        return ((b & 1) == 0) ?\n            greatest_common_divisor(a, b >>\
    \ 1) :\n            greatest_common_divisor(b, abs(a - b));\n}", "{\n    if (b\
    \ == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    long t;\n    while (b != 0) \n    {\n        t = b;\n \
    \       b = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a ==\
    \ 0) return b;\n    if (b == 0) return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n    \
    \    return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}",
  "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n   \
    \ if (a < 0)\n        return greatest_common_divisor(-a, b);\n    if (b < 0)\n\
    \        return greatest_common_divisor(a, -b);\n    if (a > b)\n        return\
    \ greatest_common_divisor(b, a);\n    return greatest_common_divisor(b % a, a);\n\
    }", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n\
    \    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return\
    \ 1;\n    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2, b);\n\
    \    else\n        return greatest_common_divisor((b - a) / 2, a);\n}", "{\n \
    \   if (a == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return a;\n\
    \    if (a == 1 || b == 1) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return\
    \ 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n  \
    \  if (a > b) return greatest_common_divisor((a - b) / 2, b);\n    return greatest_common_divisor((b\
    \ - a) / 2, a);\n}", "{\n    if (a == 0)\n        return b;\n    else if (b ==\
    \ 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a\
    \ % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n       \
    \ return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n \
    \       return 1;\n    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    else if (b == 0)\n        return a;\n \
    \   else\n        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if (a %\
    \ 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b /\
    \ 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0)\n        return greatest_common_divisor(a, b / 2);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a == 0)\n \
    \       return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n     \
    \   return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if (a % 2 ==\
    \ 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n\
    \    if (a % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n    if\
    \ (b % 2 == 0)\n        return greatest_common_divisor(a, b / 2);\n    if (a >\
    \ b)\n        return greatest_common_divisor((a - b) / 2, b);\n    return greatest_common_divisor((b\
    \ - a) / 2, a);\n}\n/*\n Return a least common multiple of two integers a and\
    \ b\n            \n*/\nlong least_common_multiple(long a, long b) \n{\n    return\
    \ (a * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a greatest common divisor\
    \ of two integers a and b\n            \n*/\nlong greatest_common_divisor(long\
    \ a, long b) \n{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2, b);\n\
    \    return greatest_common_divisor((b - a) / 2, a);\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n            \n*/\n", "{\n    if (a == 0)\n\
    \        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n    \
    \    return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if (a % 2 ==\
    \ 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n\
    \    if (a % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n    if\
    \ (b % 2 == 0)\n        return greatest_common_divisor(a, b / 2);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a == 0) return\
    \ b;\n    if (b == 0) return a;\n    return greatest_common_divisor(b, a % b);\n\
    }\n/*\n Return a least common multiple of two integers a and b\n            \n\
    */\nlong least_common_multiple(long a, long b) \n{\n    return a * b / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n        \
    \    \n*/\nlong least_common_multiple(long[] arr) \n{\n    long res = arr[0];\n\
    \    for (int i = 1; i < arr.length; i++) \n    {\n        res = least_common_multiple(res,\
    \ arr[i]);\n    }\n    return res;\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n            \n*/\nlong greatest_common_divisor(long[] arr)\
    \ \n{\n    long res = arr[0];\n    for (int i = 1; i < arr.length; i++) \n   \
    \ {\n        res = greatest_common_divisor(res, arr[i]);\n    }\n    return res;\n\
    }\n/*\n Return a greatest common divisor of a list of integers\n            \n\
    */\nlong greatest_common_divisor(long[] arr) \n{\n    long res = arr[0];\n   \
    \ for (int i = 1; i < arr.length; i++) \n    {\n        res = greatest_common_divisor(res,\
    \ arr[i]);\n    }\n    return res;\n}\n/*\n Return a greatest common divisor of\
    \ a list of integers\n            \n*/\nlong greatest_common_divisor(long[] arr)\
    \ \n{\n    long res = arr[0];\n    for (int i = 1; i < arr.length; i++) \n   \
    \ {\n        res = greatest_common_divisor(res, arr[i]);\n    }\n    return res;\n\
    }\n/*\n Return a greatest common divisor of a list of integers\n            \n\
    */\nlong greatest_common_divisor(long[] arr) \n{\n    long res = arr[", "{\n \
    \   if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}\n/*\n Return\
    \ a least common multiple of two integers a and b\n            \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n            \n*/\nlong least_common_multiple(long[]\
    \ a) \n{\n    long result = a[0];\n    foreach (i; 1 .. a.length)\n        result\
    \ = least_common_multiple(result, a[i]);\n    return result;\n}\n/*\n Return a\
    \ least common multiple of a list of integers\n            \n*/\nlong least_common_multiple(Tuple!(long[])\
    \ a) \n{\n    long result = a[0];\n    foreach (i; 1 .. a.length)\n        result\
    \ = least_common_multiple(result, a[i]);\n    return result;\n}\n/*\n Return a\
    \ least common multiple of a list of integers\n            \n*/\nlong least_common_multiple(Tuple!(long[])\
    \ a, long b) \n{\n    long result = a[0];\n    foreach (i; 1 .. a.length)\n  \
    \      result = least_common_multiple(result, a[i]);\n    return least_common_multiple(result,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n        \
    \    \n*/\nlong least_common_multiple(long[] a, long", "{\n    if (a == 0)\n \
    \       return b;\n    return greatest_common_divisor(b % a, a);\n}", "{\n   \
    \ if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n        return\
    \ b;\n    if (b == 0)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ % b, b);\n    else\n        return greatest_common_divisor(a, b % a);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    long c;\n    while (a != 0) {\n        c = a;\n        a = b % a;\n\
    \        b = c;\n    }\n    return b;\n}\n/*\n Return a least common multiple\
    \ of two integers a and b\n            \n*/\nlong least_common_multiple(long a,\
    \ long b) \n{\n    return a * b / greatest_common_divisor(a, b);\n}\n/*\n Return\
    \ a least common multiple of a list of integers\n            \n*/\nlong least_common_multiple(long[]\
    \ a) \n{\n    long lcm = a[0];\n    foreach (long x; a) {\n        lcm = least_common_multiple(lcm,\
    \ x);\n    }\n    return lcm;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n            \n*/\nlong least_common_multiple(long[] a) \n{\n  \
    \  long lcm = a[0];\n    foreach (long x; a) {\n        lcm = least_common_multiple(lcm,\
    \ x);\n    }\n    return lcm;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n            \n*/\nlong least_common_multiple(long[] a) \n{\n  \
    \  long lcm = a[0];\n    foreach (long x; a) {\n        lcm = least_common_multiple(lcm,\
    \ x);\n    }\n    return lcm;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n            \n*/\nlong least_common_multiple(long[] a) \n{\n  \
    \  long lcm = a[0];\n    foreach (long x; a) {\n        lcm = least_common_multiple(lcm,\
    \ x);\n    }\n    return lcm;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n            \n*/\nlong least_common_multiple(long[] a) \n{\n  \
    \  long lcm = a[0];\n    foreach (long x; a) {\n        lcm = least_common_multiple(lcm,\
    \ x);\n    }\n    return lcm;\n}\n/*\n Return a least common multiple of a", "{\n\
    \    if (a == 0)\n        return b;\n    else if (b == 0)\n        return a;\n\
    \    else\n        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return a;\n    if\
    \ (a == 1 || b == 1) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return\
    \ a;\n    if (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a\
    \ == 2 || b == 2) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    return b == 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (b == 0) return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0) \n        return b;\n    return greatest_common_divisor(b\
    \ % a, a);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n\
    \    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return\
    \ 1;\n    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    else\n        return greatest_common_divisor(b\
    \ % a, a);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n    \
    \    return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    else if (b == 0)\n        return a;\n \
    \   else\n        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    return greatest_common_divisor(b % a, a);\n}",
  "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n   \
    \ if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a == 2 || b == 2)\n        return 1;\n    if (a % 2 == 0 && b % 2 ==\
    \ 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2\
    \ == 0)\n        return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0)\n\
    \        return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if ((a & 1) == 0)\n        return ((b & 1) == 0) ?\n            greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1 :\n            greatest_common_divisor(a >> 1, b);\n    else\n\
    \        return ((b & 1) == 0) ?\n            greatest_common_divisor(a, b >>\
    \ 1) :\n            greatest_common_divisor(b, abs(a - b));\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a &\
    \ 1) == 0)\n        return (b & 1) == 0 ? greatest_common_divisor(a >> 1, b >>\
    \ 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n        return (b &\
    \ 1) == 0 ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b, abs(a\
    \ - b));\n}", "{\n    if (a == 0)\n        return b;\n    else\n        return\
    \ greatest_common_divisor(b % a, a);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    else if (b == 0)\n        return a;\n    else\n\
    \        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n\
    \        return b;\n    else if (b == 0)\n        return a;\n    else\n      \
    \  return greatest_common_divisor(b, a % b);\n}", "{\n    long t;\n    while (b\
    \ != 0) \n    {\n        t = b;\n        b = a % b;\n        a = t;\n    }\n \
    \   return a;\n}", "{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return\
    \ 1;\n    if (a == 2 || b == 2)\n        return 1;\n    if (a % 2 == 0 && b %\
    \ 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n    if (b % 2\
    \ == 0)\n        return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b,\
    \ a);\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2, b);\n\
    \    return greatest_common_divisor((b - a) / 2, a);\n}", "{\n    if (a == 0)\n\
    \        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n    \
    \    return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if (a % 2 ==\
    \ 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n\
    \    if (a % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n    if\
    \ (b % 2 == 0)\n        return greatest_common_divisor(a, b / 2);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a == 0)\n \
    \       return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n     \
    \   return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if (a % 2 ==\
    \ 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n\
    \    if (a % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n    if\
    \ (b % 2 == 0)\n        return greatest_common_divisor(a, b / 2);\n    return\
    \ greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a < b)\n  \
    \      return greatest_common_divisor(b, a);\n    if (b == 0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n\
    \        return b;\n    else if (b == 0)\n        return a;\n    else\n      \
    \  return greatest_common_divisor(b, a % b);\n}", "{\n    if (b == 0)\n      \
    \  return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}",
  "{\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    while (b != 0) \n    {\n        long t = b;\n        b\
    \ = a % b;\n        a = t;\n    }\n    return a;\n}", "{\n    if (a == 0)\n  \
    \      return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    long gcd = 1;\n    long min = min(a, b);\n    for (long\
    \ i = 2; i <= min; i++) \n    {\n        if (a % i == 0 && b % i == 0) \n    \
    \    {\n            gcd = i;\n        }\n    }\n    return gcd;\n}", "{\n    if\
    \ (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n\
    \        return greatest_common_divisor(a, b % a);\n}", "{\n    if (a == 0) return\
    \ b;\n    if (b == 0) return a;\n    if (a == b) return a;\n    if (a == 1 ||\
    \ b == 1) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    if (a == b)\n        return a;\n    if (a == 1 ||\
    \ b == 1)\n        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) ==\
    \ 0 ? greatest_common_divisor(a >> 1, b >> 1) << 1 : greatest_common_divisor(a\
    \ >> 1, b);\n    else\n        return (b & 1) == 0 ? greatest_common_divisor(a,\
    \ b >> 1) : greatest_common_divisor(b, a > b ? a - b : b - a);\n}", "{\n    if\
    \ (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a ==\
    \ b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if\
    \ ((a & 1) == 0)\n        return (b & 1) == 0 ? greatest_common_divisor(a >> 1,\
    \ b >> 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n        return\
    \ (b & 1) == 0 ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ a > b ? a - b : b - a);\n}", "{\n    if (a == 0)\n        return b;\n    if\
    \ (b == 0)\n        return a;\n    if (a == b)\n        return a;\n    if (a ==\
    \ 1 || b == 1)\n        return 1;\n    if ((a & 1) == 0)\n        return (b &\
    \ 1) == 0 ? greatest_common_divisor(a >> 1, b >> 1) << 1 : greatest_common_divisor(a\
    \ >> 1, b);\n    else\n        return (b & 1) == 0 ? greatest_common_divisor(a,\
    \ b >> 1) : greatest_common_divisor(b, abs(a - b));\n}", "{\n    if (a == 0)\n\
    \        return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n\
    \        return greatest_common_divisor(a, b % a);\n}", "{\n    if (a < b) \n\
    \    {\n        return greatest_common_divisor(b, a);\n    }\n    if (b == 0)\
    \ \n    {\n        return a;\n    }\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a % 2 == 0\
    \ && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0) return\
    \ greatest_common_divisor(a, b / 2);\n    if (a > b) return greatest_common_divisor((a\
    \ - b) / 2, b);\n    return greatest_common_divisor((b - a) / 2, a);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n     \
    \   return greatest_common_divisor(a, b % a);\n}", "{\n    if (a == 0)\n     \
    \   return b;\n    return greatest_common_divisor(b % a, a);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    else if (b == 0)\n        return a;\n    else\n\
    \        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n\
    \        return b;\n    if (b == 0)\n        return a;\n    if (a > b)\n     \
    \   return greatest_common_divisor(a % b, b);\n    else\n        return greatest_common_divisor(a,\
    \ b % a);\n}", "{\n    if (b == 0)\n        return a;\n    else\n        return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (b == 0)\n        return\
    \ a;\n    else\n        return greatest_common_divisor(b, a % b);\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    else if (b == 0)\n        return a;\n \
    \   else\n        return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return a;\n    if\
    \ (a == 1 || b == 1) return 1;\n    if (a == 2 || b == 2) return 1;\n    if (a\
    \ % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n\
    \    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2\
    \ == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    if (a == b)\n        return a;\n    if (a == 1 ||\
    \ b == 1)\n        return 1;\n    if (a % 2 == 0 && b % 2 == 0)\n        return\
    \ 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2 == 0)\n        return\
    \ greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a,\
    \ b / 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2, b);\n\
    \    return greatest_common_divisor((b - a) / 2, a);\n}\n/*\n Return a least common\
    \ multiple of two integers a and b\n            \n*/\nlong least_common_multiple(long\
    \ a, long b) \n{\n    return (a * b) / greatest_common_divisor(a, b);\n}\n/*\n\
    \ Return a least common multiple of a range of integers\n            \n*/\nlong\
    \ least_common_multiple(R)(R range) \n{\n    long result = 1;\n    foreach (i;\
    \ range)\n        result = least_common_multiple(result, i);\n    return result;\n\
    }\n/*\n Return a greatest common divisor of a range of integers\n            \n\
    */\nlong greatest_common_divisor(R)(R range) \n{\n    long result = 0;\n    foreach\
    \ (i; range)\n        result = greatest_common_divisor(result, i);\n    return\
    \ result;\n}\n/*\n Return a least common multiple of a range of integers\n   \
    \         \n*/\nlong least_common_multiple(R)(R range) \n{\n    long result =\
    \ 1;\n    foreach (i; range)\n        result = least_common_multiple(result, i);\n\
    \    return result;\n}\n/*\n Return a least common multiple of a range of integers\n\
    \            \n*/\nlong least_common_multiple(R)(R range) \n{\n    long result\
    \ = 1", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n\
    \        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n    \
    \    return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a & 1)\
    \ == 0)\n        return ((b & 1) == 0) ? greatest_common_divisor(a >> 1, b >>\
    \ 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n        return ((b\
    \ & 1) == 0) ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ abs(a - b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n\
    \        return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b ==\
    \ 1)\n        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) == 0 ?\
    \ greatest_common_divisor(a >> 1, b >> 1) << 1 : greatest_common_divisor(a >>\
    \ 1, b);\n    else\n        return (b & 1) == 0 ? greatest_common_divisor(a, b\
    \ >> 1) : greatest_common_divisor(b, abs(a - b));\n}", "{\n    if (a < b)\n  \
    \      return greatest_common_divisor(b, a);\n    if (b == 0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a < b)\n\
    \        return greatest_common_divisor(b, a);\n    if (b == 0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0) return\
    \ b;\n    if (b == 0) return a;\n    return greatest_common_divisor(b, a % b);\n\
    }\n/*\n Return a least common multiple of two integers a and b\n            \n\
    */\nlong least_common_multiple(long a, long b) \n{\n    return (a * b) / greatest_common_divisor(a,\
    \ b);\n}\n/*\n Return a least common multiple of a list of integers\n        \
    \    \n*/\nlong least_common_multiple(long[] a) \n{\n    long lcm = a[0];\n  \
    \  foreach (i; a[1 .. $]) \n    {\n        lcm = least_common_multiple(lcm, i);\n\
    \    }\n    return lcm;\n}\n/*\n Return a greatest common divisor of a list of\
    \ integers\n            \n*/\nlong greatest_common_divisor(long[] a) \n{\n   \
    \ long gcd = a[0];\n    foreach (i; a[1 .. $]) \n    {\n        gcd = greatest_common_divisor(gcd,\
    \ i);\n    }\n    return gcd;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n            \n*/\nlong least_common_multiple(int[] a) \n{\n   \
    \ long lcm = a[0];\n    foreach (i; a[1 .. $]) \n    {\n        lcm = least_common_multiple(lcm,\
    \ i);\n    }\n    return lcm;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n            \n*/\nlong greatest_common_divisor(int[] a) \n{\n \
    \   long gcd = a[0];\n    foreach (i; a[1 .. $]) \n    {\n        gcd = greatest_common_divisor(gcd,\
    \ i);\n    }\n    return gcd;\n}\n/*\n Return a least common multiple of a list\
    \ of integers\n            \n*/\nlong least_common_multiple(short[] a) \n{\n \
    \   long lcm = a[0];\n    foreach (i; a[1 .. $])", "{\n    if (a == 0)\n     \
    \   return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return (b & 1) == 0 ? greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n       \
    \ return (b & 1) == 0 ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ a > b ? a - b : b - a);\n}", "{\n    if (a == 0)\n        return b;\n    else\
    \ if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) \n        return b;\n    else if (b == 0) \n\
    \        return a;\n    else \n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n\
    \    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n    \
    \    return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n        return\
    \ a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a & 1) == 0)\n  \
    \      return (b & 1) == 0 ? greatest_common_divisor(a >> 1, b >> 1) << 1 : greatest_common_divisor(a\
    \ >> 1, b);\n    else\n        return (b & 1) == 0 ? greatest_common_divisor(a,\
    \ b >> 1) : greatest_common_divisor(b, a > b ? a - b : b - a);\n}", "{\n    if\
    \ (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0) return b;\n    if\
    \ (b == 0) return a;\n    if (a == b) return a;\n    if (a == 1 || b == 1) return\
    \ 1;\n    if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a /\
    \ 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0) \n        return b;\n    if (b ==\
    \ 0) \n        return a;\n    if (a == b) \n        return a;\n    if (a == 1\
    \ || b == 1) \n        return 1;\n    if ((a % 2 == 0) && (b % 2 == 0)) \n   \
    \     return 2 * greatest_common_divisor(a / 2, b / 2);\n    if ((a % 2 == 0)\
    \ && (b % 2 != 0)) \n        return greatest_common_divisor(a / 2, b);\n    if\
    \ ((a % 2 != 0) && (b % 2 == 0)) \n        return greatest_common_divisor(a, b\
    \ / 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (a == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return a;\n\
    \    if (a == 1 || b == 1) return 1;\n    if (a == 2 || b == 2) return 1;\n  \
    \  if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b /\
    \ 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b\
    \ % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    if (a == b)\n        return a;\n    if (a == 1 ||\
    \ b == 1)\n        return 1;\n    if (a % 2 == 0 && b % 2 == 0)\n        return\
    \ 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2 == 0)\n        return\
    \ greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a,\
    \ b / 2);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2,\
    \ b);\n    return greatest_common_divisor((b - a) / 2, a);\n}", "{\n    if (a\
    \ == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return a;\n    if\
    \ (a == 1 || b == 1) return 1;\n    if (a == 2 || b == 2) return 1;\n    if (a\
    \ % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n\
    \    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2\
    \ == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n        return\
    \ b;\n    else if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n\
    \        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n\
    }", "{\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0) return b;\n    if\
    \ (b == 0) return a;\n    if (a == b) return a;\n    if (a == 1 || b == 1) return\
    \ 1;\n    if (a == 2 || b == 2) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return\
    \ 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n  \
    \  return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a ==\
    \ 0)\n        return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n     \
    \   return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n\
    \        return 1;\n    if ((a & 1) == 0)\n        return ((b & 1) == 0) ? greatest_common_divisor(a\
    \ >> 1, b >> 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n       \
    \ return ((b & 1) == 0) ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b,\
    \ abs(a - b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n\
    \        return a;\n    if (a == b)\n        return a;\n    if (a > b)\n     \
    \   return greatest_common_divisor(a - b, b);\n    return greatest_common_divisor(a,\
    \ b - a);\n}", "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n\
    \    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a %\
    \ b);\n}", "{\n    if (a == 0)\n        return b;\n    else if (b == 0)\n    \
    \    return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}",
  "{\n    if (a < b)\n        return greatest_common_divisor(b, a);\n    if (b ==\
    \ 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n     \
    \   return greatest_common_divisor(a, b % a);\n}", "{\n    if (a == 0)\n     \
    \   return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n        return\
    \ a;\n    if (a == 1 || b == 1)\n        return 1;\n    if (a % 2 == 0 && b %\
    \ 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n    if (b % 2\
    \ == 0)\n        return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a == 2 || b == 2)\n        return 1;\n    if (a % 2 == 0 && b % 2 ==\
    \ 0)\n        return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2\
    \ == 0)\n        return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0)\n\
    \        return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b ==\
    \ 0)\n        return a;\n    if (a == b)\n        return a;\n    if (a == 1 ||\
    \ b == 1)\n        return 1;\n    if (a % 2 == 0 && b % 2 == 0)\n        return\
    \ 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2 == 0)\n        return\
    \ greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a,\
    \ b / 2);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2,\
    \ b);\n    return greatest_common_divisor((b - a) / 2, a);\n}", "{\n    if (a\
    \ < b)\n        return greatest_common_divisor(b, a);\n    if (b == 0)\n     \
    \   return a;\n    return greatest_common_divisor(b, a % b);\n}", "{\n    if (a\
    \ == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if (a %\
    \ 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a / 2, b /\
    \ 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a / 2, b);\n\
    \    if (b % 2 == 0)\n        return greatest_common_divisor(a, b / 2);\n    if\
    \ (a > b)\n        return greatest_common_divisor((a - b) / 2, b);\n    return\
    \ greatest_common_divisor((b - a) / 2, a);\n}", "{\n    if (a == 0)\n        return\
    \ b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n/*\n Return a least common multiple of two integers a and b\n  \
    \          \n*/\nlong least_common_multiple(long a, long b) \n{\n    return (a\
    \ * b) / greatest_common_divisor(a, b);\n}\n/*\n Return a least common multiple\
    \ of a list of integers\n            \n*/\nlong least_common_multiple(long[] a)\
    \ \n{\n    long result = a[0];\n    foreach (long i; a)\n        result = least_common_multiple(result,\
    \ i);\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n            \n*/\nlong greatest_common_divisor(long[] a) \n{\n\
    \    long result = a[0];\n    foreach (long i; a)\n        result = greatest_common_divisor(result,\
    \ i);\n    return result;\n}\n/*\n Return a least common multiple of a list of\
    \ integers\n            \n*/\nlong least_common_multiple(int[] a) \n{\n    long\
    \ result = a[0];\n    foreach (int i; a)\n        result = least_common_multiple(result,\
    \ i);\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n            \n*/\nlong greatest_common_divisor(int[] a) \n{\n \
    \   long result = a[0];\n    foreach (int i; a)\n        result = greatest_common_divisor(result,\
    \ i);\n    return result;\n}\n/*\n Return a least common multiple of a list of\
    \ integers\n            \n*/\nlong least_common_multiple(short[] a) \n{\n    long\
    \ result = a[0];\n    foreach (short i; a)\n        result = least_common_multiple(result,\
    \ i);\n    return result;\n}\n/*\n Return a greatest common divisor of a list\
    \ of integers\n            \n*/\nlong greatest_common_divisor(short[] a) \n",
  "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n   \
    \ if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    if (a > b)\n        return greatest_common_divisor((a - b) / 2, b);\n\
    \    return greatest_common_divisor((b - a) / 2, a);\n}", "{\n    if (a == 0)\
    \ \n        return b;\n    if (b == 0) \n        return a;\n    if (a == b) \n\
    \        return a;\n    if (a == 1 || b == 1) \n        return 1;\n    if ((a\
    \ & 1) == 0 && (b & 1) == 0) \n        return 2 * greatest_common_divisor(a >>\
    \ 1, b >> 1);\n    if ((a & 1) == 0 && (b & 1) != 0) \n        return greatest_common_divisor(a\
    \ >> 1, b);\n    if ((a & 1) != 0 && (b & 1) == 0) \n        return greatest_common_divisor(a,\
    \ b >> 1);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n\
    \    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    long c;\n    while (a != 0) \n    {\n        c = a;\n \
    \       a = b % a;\n        b = c;\n    }\n    return b;\n}", "{\n    if (a ==\
    \ 0)\n        return b;\n    else if (b == 0)\n        return a;\n    else\n \
    \       return greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0)\n \
    \       return b;\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}", "{\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if\
    \ (a == b) return a;\n    if (a == 1 || b == 1) return 1;\n    if (a % 2 == 0\
    \ && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a\
    \ % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b % 2 == 0) return\
    \ greatest_common_divisor(a, b / 2);\n    if (a > b) return greatest_common_divisor((a\
    \ - b) / 2, b);\n    return greatest_common_divisor((b - a) / 2, a);\n}", "{\n\
    \    if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    if\
    \ (a == b)\n        return a;\n    if (a == 1 || b == 1)\n        return 1;\n\
    \    if (a % 2 == 0 && b % 2 == 0)\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2);\n    if (a % 2 == 0)\n        return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0)\n        return greatest_common_divisor(a, b /\
    \ 2);\n    return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n  \
    \  if (a == 0)\n        return b;\n    if (b == 0)\n        return a;\n    return\
    \ greatest_common_divisor(b, a % b);\n}", "{\n    if (a == 0) return b;\n    if\
    \ (b == 0) return a;\n    if (a == b) return a;\n    if (a == 1 || b == 1) return\
    \ 1;\n    if (a == 2 || b == 2) return 1;\n    if (a % 2 == 0 && b % 2 == 0) return\
    \ 2 * greatest_common_divisor(a / 2, b / 2);\n    if (a % 2 == 0) return greatest_common_divisor(a\
    \ / 2, b);\n    if (b % 2 == 0) return greatest_common_divisor(a, b / 2);\n  \
    \  return greatest_common_divisor(abs(a - b), min(a, b));\n}", "{\n    if (a ==\
    \ 0)\n        return b;\n    if (b == 0)\n        return a;\n    if (a == b)\n\
    \        return a;\n    if (a == 1 || b == 1)\n        return 1;\n    if ((a &\
    \ 1) == 0)\n        return (b & 1) == 0 ? greatest_common_divisor(a >> 1, b >>\
    \ 1) << 1 : greatest_common_divisor(a >> 1, b);\n    else\n        return (b &\
    \ 1) == 0 ? greatest_common_divisor(a, b >> 1) : greatest_common_divisor(b, abs(a\
    \ - b));\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n      \
    \  return a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return\
    \ greatest_common_divisor(a - b, b);\n    return greatest_common_divisor(a, b\
    \ - a);\n}", "{\n    if (a == 0)\n        return b;\n    if (b == 0)\n       \
    \ return a;\n    if (a == b)\n        return a;\n    if (a == 1 || b == 1)\n \
    \       return 1;\n    if ((a & 1) == 0)\n        return ((b & 1) == 0) ?\n  \
    \          greatest_common_divisor(a >> 1, b >> 1) << 1 :\n            greatest_common_divisor(a\
    \ >> 1, b);\n    else\n        return ((b & 1) == 0) ?\n            greatest_common_divisor(a,\
    \ b >> 1) :\n            greatest_common_divisor(b, abs(a - b));\n}", "{\n   \
    \ if (a == 0) return b;\n    if (b == 0) return a;\n    if (a == b) return a;\n\
    \    if (a == 1 || b == 1) return 1;\n    if (a == 2 || b == 2) return 1;\n  \
    \  if (a % 2 == 0 && b % 2 == 0) return 2 * greatest_common_divisor(a / 2, b /\
    \ 2);\n    if (a % 2 == 0) return greatest_common_divisor(a / 2, b);\n    if (b\
    \ % 2 == 0) return greatest_common_divisor(a, b / 2);\n    return greatest_common_divisor(abs(a\
    \ - b), min(a, b));\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
