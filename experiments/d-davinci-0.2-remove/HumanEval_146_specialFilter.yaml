name: HumanEval_146_specialFilter
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an\
  \ array of numbers as input and returns \n    the number of elements in the array\
  \ that are greater than 10 and both \n    first and last digits of a number are\
  \ odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[]\
  \ nums) \n"
tests: "unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L,\
  \ -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n\
  \    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L,\
  \ -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L,\
  \ 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([])\
  \ == 0L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num\
    \ > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n    \
    \    {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  return nums.filter!(n => n > 10 && n.toString().front.to!long % 2 && n.toString().back.to!long\
    \ % 2).length;\n}", "{\n    long result = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10 && num.toString.front.to!long % 2 != 0 && num.toString.back.to!long\
    \ % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            long firstDigit = num / 10;\n            long lastDigit\
    \ = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n   \
    \         {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd\
    \ && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n\
    \ > 10 && isOdd(n % 10) && isOdd(n / pow(10, (int)log10(n))))\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num\
    \ % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0]\
    \ % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num)\
    \ && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10)\n        {\n            long first = num / pow(10, floor(log10(num)));\n\
    \            long last = num % 10;\n            if(first % 2 != 0 && last % 2\
    \ != 0)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0]\
    \ % 2 && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = num.to!string.to!long[];\n            if(digits[0]\
    \ % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0]\
    \ % 2 && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = num.toString().map!(a => a.to!long).array;\n\
    \            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 &&\
    \ isOdd(n) && isOdd(n % 10))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10)\n        {\n            auto firstDigit = num % 10;\n\
    \            auto lastDigit = num / pow(10, floor(log10(num)));\n            if(firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num\
    \ % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = num.toString().to!immutable(dchar[]);\n\
    \            if(digits[0].isOdd && digits[$-1].isOdd)\n            {\n       \
    \         count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n      \
    \  {\n            long firstDigit = n / 10;\n            long lastDigit = n %\
    \ 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n           \
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto first = num.to!string[0];\n            auto last\
    \ = num.to!string[$-1];\n            if(first.to!long.isOdd && last.to!long.isOdd)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10 && (num % 2 != 0) && (num % 10 % 2 != 0))\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    return nums.filter!(n\
    \ => n > 10 && n.toString().front.to!long % 2 && n.toString().back.to!long % 2).length;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = num.toString().to!(immutable(char)[])[];\n\
    \            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = num.digits;\n            if(digits[0] %\
    \ 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10 && (n % 2 == 1) && (n / pow(10,\
    \ floor(log10(n))) % 2 == 1))\n        {\n            count++;\n        }\n  \
    \  }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n        \
    \    count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 &&\
    \ num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(n; nums)\n    {\n        if(n > 10 && n.toString().front.to!long\
    \ % 2 != 0 && n.toString().back.to!long % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!(immutable(int))[];\n\
    \            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits.front.isOdd\
    \ && num.digits.back.isOdd)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long result = 0;\n    foreach(num; nums)\n   \
    \ {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long\
    \ % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            long first = num / pow(10, (int)log10(num));\n       \
    \     long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10)\n        {\n            string str = to!string(num);\n \
    \           if(str[0] % 2 == 1 && str[$-1] % 2 == 1)\n            {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num\
    \ % 2 != 0) && (num / cast(long)pow(10, floor(log10(num))) % 2 != 0))\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0]\
    \ % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1]\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = num.toString.map!(a => a.to!long)().array;\n\
    \            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n        \
    \    count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    return nums.filter!(n\
    \ => n > 10 && n.toString().front.to!long % 2 && n.toString().back.to!long % 2).length;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num % 2 != 0 && num % 10 != 0)\n        {\n            count++;\n       \
    \ }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1]\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto numStr = num.to!string;\n            if(numStr[0]\
    \ % 2 != 0 && numStr[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd &&\
    \ num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n       \
    \ {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0]\
    \ % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 !=\
    \ 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit =\
    \ num / 10;\n            auto lastDigit = num % 10;\n            if(firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ firstDigit = num / 10;\n            auto lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}", "{\n   \
    \ long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0]\
    \ % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 !=\
    \ 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            long first = num\
    \ / (long)pow(10, (int)log10(num));\n            long last = num % 10;\n     \
    \       if(first % 2 != 0 && last % 2 != 0)\n            {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n       \
    \     auto firstDigit = num % 10;\n            auto lastDigit = num / pow(10,\
    \ floor(log10(num)));\n            if(firstDigit % 2 != 0 && lastDigit % 2 !=\
    \ 0)\n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long result = 0;\n    foreach(num; nums)\n   \
    \ {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long\
    \ % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    foreach(num; nums) \n    {\n        if(num >\
    \ 10) \n        {\n            int first = num / cast(int) pow(10, floor(log10(num)));\n\
    \            int last = num % 10;\n            if(first % 2 != 0 && last % 2 !=\
    \ 0) \n            {\n                result++;\n            }\n        }\n  \
    \  }\n    return result;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string()[0]\
    \ % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    return nums.filter!(n\
    \ => n > 10 && n.toString().front.to!long.isOdd && n.toString().back.to!long.isOdd).length;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            long first = num / 10;\n            long last = num %\
    \ 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n  \
    \      {\n            int firstDigit = num / 10;\n            int lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = to!string(num);\n            if(digits[0]\
    \ % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits.front %\
    \ 2 != 0 && num.digits.back % 2 != 0)\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!(ulong[]);\n\
    \            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 &&\
    \ n % 2 != 0 && n / 10 % 2 != 0)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long()\
    \ % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10 && num.digits.front % 2 != 0 && num.digits.back\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num >\
    \ 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long %\
    \ 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto first = num.to!string[0];\n            auto last\
    \ = num.to!string[$-1];\n            if(first.to!long % 2 != 0 && last.to!long\
    \ % 2 != 0)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(n; nums)\n\
    \    {\n        if(n > 10 && n.toString.front.to!long % 2 != 0 && n.toString.back.to!long\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            string num_str = num.to!string;\n            if(num_str[0]\
    \ % 2 != 0 && num_str[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long result =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long\
    \ % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 !=\
    \ 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit =\
    \ num / pow(10, floor(log10(num)));\n            auto lastDigit = num % 10;\n\
    \            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n  \
    \              result++;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = num.toString().to!immutable(dchar[]);\n\
    \            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            string str = num.to!string;\n            if(str[0] % 2\
    \ != 0 && str[$-1] % 2 != 0)\n            {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n \
    \   foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num\
    \ % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num % 2 != 0 && num / pow(10, floor(log10(num))) % 2 != 0)\n        {\n \
    \           count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0]\
    \ % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            string s = num.to!string;\n\
    \            if(s[0] % 2 != 0 && s[$-1] % 2 != 0)\n            {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}", "{\n \
    \   return nums.filter!(n => n > 10 && (n % 2 == 1) && (n / pow(10, n.stringof.length\
    \ - 1) % 2 == 1)).length;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n   \
    \         count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd\
    \ && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10)\n        {\n            auto first = num.to!string[0];\n      \
    \      auto last = num.to!string[$-1];\n            if(first.to!long.isOdd &&\
    \ last.to!long.isOdd)\n            {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            string s = num.to!string;\n\
    \            if(s[0] % 2 == 1 && s[$-1] % 2 == 1)\n            {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}", "{\n \
    \   long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n   \
    \     {\n            long firstDigit = num / 10;\n            long lastDigit =\
    \ num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long result = 0;\n    foreach(num; nums)\n    {\n      \
    \  if(num > 10 && isOdd(num % 10) && isOdd(num / pow(10, num.to!string.length\
    \ - 1)))\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && (num % 2 != 0) && (num / 10 % 2 != 0))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10 && (num % 2 != 0) && (num / 10 % 2 != 0))\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd\
    \ && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n       \
    \ if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            int first = num / cast(int)pow(10, floor(log10(num)));\n\
    \            int last = num % 10;\n            if(first % 2 != 0 && last % 2 !=\
    \ 0)\n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long[] result = new long[nums.length];\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            long first = num\
    \ / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last\
    \ % 2 != 0)\n            {\n                result[count] = num;\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}", "{\n \
    \   long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n  \
    \      {\n            auto digits = num.toString().to!(immutable(int)[])();\n\
    \            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n \
    \               result++;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto first = num.to!string[0];\n            auto last\
    \ = num.to!string[$-1];\n            if(first.to!long % 2 != 0 && last.to!long\
    \ % 2 != 0)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long\
    \ % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    return nums.filter!(n => n > 10 && (n % 2 == 1) && (n % 10 == 1 ||\
    \ n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)).length;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num)\
    \ && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10 && num.to!string()[0] % 2 && num.to!string()[$-1] % 2)\n\
    \            count++;\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = num.toString.to!long;\n            if(digits[0] % 2 != 0 && digits[$-1]\
    \ % 2 != 0)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n  \
    \          count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n     \
    \       long first = num / 10;\n            long last = num % 10;\n          \
    \  if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num\
    \ % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = num.toString().to!long[];\n            if(digits[0]\
    \ % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n       \
    \     auto digits = num.toString().to!long[];\n            if(digits[0] % 2 !=\
    \ 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n \
    \   foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = num.digits();\n            if(digits[0] % 2 != 0 && digits[$-1] % 2\
    \ != 0)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(n; nums)\n\
    \    {\n        if(n > 10 && n.toString().front.to!long % 2 != 0 && n.toString().back.to!long\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long counter = 0;\n    foreach(num; nums)\n    {\n        if(num >\
    \ 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n      \
    \  {\n            counter++;\n        }\n    }\n    return counter;\n}", "{\n\
    \    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n \
    \       {\n            if(num % 2 != 0)\n            {\n                long first\
    \ = num;\n                long last = num;\n                while(first >= 10)\n\
    \                {\n                    first /= 10;\n                }\n    \
    \            while(last >= 10)\n                {\n                    last %=\
    \ 10;\n                }\n                if(first % 2 != 0 && last % 2 != 0)\n\
    \                {\n                    result++;\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long\
    \ % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 !=\
    \ 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(n;\
    \ nums)\n    {\n        if(n > 10 && (n % 2 != 0) && (n / pow(10, floor(log10(n)))\
    \ % 2 != 0))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 &&\
    \ (n % 2 != 0) && (n % 10 != 0))\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    return nums.filter!(a => a > 10 && a.toString().front.to!long % 2\
    \ && a.toString().back.to!long % 2).length;\n}", "{\n    long count = 0;\n   \
    \ foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = num.toString().to!long[];\n            if(digits[0] % 2 != 0 && digits[$-1]\
    \ % 2 != 0)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10)\n        {\n            long first = num / cast(long)pow(10,\
    \ floor(log10(num)));\n            long last = num % 10;\n            if(first\
    \ % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n \
    \   foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto\
    \ digits = to!string(num);\n            if(digits[0] % 2 == 1 && digits[$-1] %\
    \ 2 == 1)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10)\n        {\n            auto digits = num.toString.to!long[];\n\
    \            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num >\
    \ 10 && num.toString().front.to!long % 2 && num.toString().back.to!long % 2)\n\
    \        {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n  \
    \      {\n            auto digits = num.digits;\n            if(digits[0] % 2\
    \ != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2\
    \ && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num >\
    \ 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long %\
    \ 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string[0] % 2 && num.to!string[$-1] % 2)\n            count++;\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.to!string().front.to!int() % 2 != 0 && num.to!string().back.to!int()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto firstDigit = num / 10;\n            auto lastDigit\
    \ = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n   \
    \         {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    return nums.filter!(n => n > 10 && (n % 2 == 1) && (n %\
    \ 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)).length;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n        \
    \    count++;\n        }\n    }\n    return count;\n}", "{\n    long result =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long\
    \ % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            long first = num\
    \ / pow(10, (int)log10(num));\n            long last = num % 10;\n           \
    \ if(first % 2 != 0 && last % 2 != 0)\n            {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n     \
    \       long firstDigit = num / pow(10, (int)log10(num));\n            long lastDigit\
    \ = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n   \
    \         {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n      \
    \  if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string[0].to!long.isOdd && num.to!string[$-1].to!long.isOdd)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}", "{\n \
    \   long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n   \
    \     {\n            string str = num.to!string;\n            if(str[0] % 2 ==\
    \ 1 && str[$-1] % 2 == 1)\n            {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit =\
    \ num % 10;\n            auto lastDigit = num / pow(10, floor(log10(num)));\n\
    \            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;\n}",
  "{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto first = num.toString()[0];\n            auto last\
    \ = num.toString()[$-1];\n            if(first % 2 != 0 && last % 2 != 0)\n  \
    \          {\n                result++;\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n  \
    \      {\n            auto digits = num.digits;\n            if(digits[0] % 2\
    \ == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n  \
    \      {\n            auto digits = to!string(num);\n            if(digits[0]\
    \ % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 2 == 1) &&\
    \ (num / pow(10, floor(log10(num))) % 2 == 1))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            auto digits = to!string(num);\n\
    \            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}", "{\n    long result = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 &&\
    \ num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n  \
    \      }\n    }\n    return result;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!long[];\n\
    \            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            auto digits = num.toString().to!long;\n            if(digits[0]\
    \ % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}", "{\n    long count =\
    \ 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 2 != 0) &&\
    \ (num / 10 % 2 != 0))\n        {\n            count++;\n        }\n    }\n  \
    \  return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10 && num % 2 == 1 && num / pow(10, ceil(log10(num))) == 1)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num)\
    \ && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n\
    \        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string()[0] % 2 && num.to!string()[$-1] % 2)\n            count++;\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10)\n        {\n            auto digits = num.digits;\n\
    \            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0]\
    \ % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num;\
    \ nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().map!(a\
    \ => a.to!long()).array;\n            if(digits[0] % 2 != 0 && digits[$-1] % 2\
    \ != 0)\n            {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n\
    \        {\n            if(num.to!string()[0] % 2 != 0 && num.to!string()[$-1]\
    \ % 2 != 0)\n            {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits()[0]\
    \ % 2 != 0 && num.digits()[$-1] % 2 != 0)\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}", "{\n    return nums.filter!(n => n >\
    \ 10 && n.toString().front.to!long % 2 && n.toString().back.to!long % 2).length;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long()\
    \ % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && (num % 2 != 0) && (num % 10 % 2 != 0))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    foreach(n;\
    \ nums)\n    {\n        if(n > 10 && n % 2 != 0 && n / 10 % 2 != 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && isOdd(n) && isOdd(n\
    \ % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10\
    \ && num.digits.front.isOdd && num.digits.back.isOdd)\n        {\n           \
    \ count++;\n        }\n    }\n    return count;\n}", "{\n    long count = 0;\n\
    \    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long\
    \ firstDigit = num / 10;\n            long lastDigit = num % 10;\n           \
    \ if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;\n}", "{\n   \
    \ long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits().front.isOdd\
    \ && num.digits().back.isOdd)\n        {\n            count++;\n        }\n  \
    \  }\n    return count;\n}", "{\n    long result = 0;\n    foreach(num; nums)\n\
    \    {\n        if(num > 10)\n        {\n            auto first = num.toString().front;\n\
    \            auto last = num.toString().back;\n            if(first.to!long %\
    \ 2 != 0 && last.to!long % 2 != 0)\n            {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num % 10)\
    \ && isOdd(num / pow(10, floor(log10(num)))) )\n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
