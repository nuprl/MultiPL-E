language: d
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n      \
    \      result ~= i;\n    }\n    return result.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmnoi6kmb.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpmnoi6kmb.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnoi6kmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i == 0)\n     \
    \   {\n            res[count] = i;\n            count++;\n        }\n        else\n\
    \        {\n            int flag = 0;\n            while(i != 0)\n           \
    \ {\n                if(i % 2 == 0)\n                {\n                    flag\
    \ = 1;\n                    break;\n                }\n                i /= 10;\n\
    \            }\n            if(flag == 0)\n            {\n                res[count]\
    \ = i;\n                count++;\n            }\n        }\n    }\n    res = res[0..count];\n\
    \    sort(res);\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq3qwdp3h.d(42): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3qwdp3h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int % 2 == 0)\n                {\n            \
    \        isEven = true;\n                    break;\n                }\n     \
    \       }\n            if(!isEven)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result.sort();\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt0r8b25l.d(16): Error: no property `toString` for type `long`

    /tmp/tmpt0r8b25l.d(23): Error: no property `toString` for type `long`

    /tmp/tmpt0r8b25l.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0r8b25l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] evens = [0,2,4,6,8];\n\
    \    int[] odds = [1,3,5,7,9];\n    long[] result = [];\n    foreach(long i; x)\n\
    \    {\n        bool even = false;\n        foreach(long j; evens)\n        {\n\
    \            if(i.toString().contains(j.toString()))\n            {\n        \
    \        even = true;\n                break;\n            }\n        }\n    \
    \    if(!even)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp47bno222.d(21): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47bno222.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n \
    \       {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpps600zqo.d(16): Error: no property `digits` for type `long`

    /tmp/tmpps600zqo.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpps600zqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a.isOdd))\n    \
    \    {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl52rbbaw.d(16): Error: no property `digits` for type `long`

    /tmp/tmpl52rbbaw.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl52rbbaw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto res = new long[];\n \
    \   foreach(i; x)\n    {\n        if(i.digits.filter!(a => a % 2 == 0).empty)\n\
    \            res ~= i;\n    }\n    return res.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8jti_wnc.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp8jti_wnc.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jti_wnc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] evens = [0,2,4,6,8];\n\
    \    auto res = new long[];\n    foreach(num; x)\n    {\n        bool hasEven\
    \ = false;\n        foreach(digit; num.toString())\n        {\n            if(evens.canFind(digit.to!int))\n\
    \            {\n                hasEven = true;\n                break;\n    \
    \        }\n        }\n        if(!hasEven)\n        {\n            res ~= num;\n\
    \        }\n    }\n    return res.sort();\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxrtn913d.d(14): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpxrtn913d.d(18): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxrtn913d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int() % 2 == 0)\n                {\n          \
    \          isEven = true;\n                    break;\n                }\n   \
    \         }\n            if(!isEven)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6a7jjodk.d(16): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(23): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a7jjodk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] result = new int[0];\n\
    \    foreach(int i; x)\n    {\n        if(i % 2 == 0)\n        {\n           \
    \ continue;\n        }\n        result ~= i;\n    }\n    sort(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp14uh8v1v.d(14): Error: cannot implicitly convert expression `__r16[__key17]`
    of type `long` to `int`

    /tmp/tmp14uh8v1v.d(22): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp14uh8v1v.d(23): Error: cannot implicitly convert expression `result` of
    type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp14uh8v1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n      \
    \      result ~= i;\n    }\n    return result.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmnoi6kmb.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpmnoi6kmb.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnoi6kmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            res[count] = i;\n            count++;\n        }\n    }\n\
    \    return res[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8i22fii2.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmp8i22fii2.__unittest_L25_C1() [0x427f86]

    ??:? void tmp8i22fii2.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int j = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i]\
    \ % 2 != 0)\n        {\n            res[j] = x[i];\n            j++;\n       \
    \ }\n    }\n    res = res.sort();\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_np2jyh.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_np2jyh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n    \
    \        result ~= i;\n        }\n    }\n    sort(result);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8_q2ihts.d(16): Error: undefined identifier `hasEvenDigit`

    /tmp/tmp8_q2ihts.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_q2ihts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto evenDigits = [](long\
    \ n) {\n        while (n > 0) {\n            if (n % 2 == 0) return true;\n  \
    \          n /= 10;\n        }\n        return false;\n    };\n    return x.filter!(n\
    \ => !evenDigits(n)).sort();\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0imvg7_1.d(13): Error: found `n` when expecting `.` following long

    /tmp/tmp0imvg7_1.d(13): Error: found `)` when expecting identifier following `long`.

    /tmp/tmp0imvg7_1.d(13): Error: found `{` when expecting `,`

    /tmp/tmp0imvg7_1.d(14): Error: expression expected, not `while`

    /tmp/tmp0imvg7_1.d(14): Error: found `{` when expecting `,`

    /tmp/tmp0imvg7_1.d(15): Error: expression expected, not `if`

    /tmp/tmp0imvg7_1.d(15): Error: found `return` when expecting `,`

    /tmp/tmp0imvg7_1.d(15): Error: found `;` when expecting `,`

    /tmp/tmp0imvg7_1.d(16): Error: found `;` when expecting `,`

    /tmp/tmp0imvg7_1.d(17): Error: expression expected, not `}`

    /tmp/tmp0imvg7_1.d(18): Error: found `return` when expecting `,`

    /tmp/tmp0imvg7_1.d(18): Error: found `;` when expecting `,`

    /tmp/tmp0imvg7_1.d(19): Error: expression expected, not `}`

    /tmp/tmp0imvg7_1.d(19): Error: found `;` when expecting `,`

    /tmp/tmp0imvg7_1.d(20): Error: expression expected, not `return`

    /tmp/tmp0imvg7_1.d(20): Error: found `x` when expecting `,`

    /tmp'
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().count(\"2\") == 0 && i.toString().count(\"\
    4\") == 0 && i.toString().count(\"6\") == 0 && i.toString().count(\"8\") == 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptp95szcr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto evenDigits = [](long\
    \ n) {\n        while (n > 0) {\n            if (n % 2 == 0) {\n             \
    \   return true;\n            }\n            n /= 10;\n        }\n        return\
    \ false;\n    };\n    return x.filter!(a => !evenDigits(a)).sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphisv0jn4.d(13): Error: found `n` when expecting `.` following long

    /tmp/tmphisv0jn4.d(13): Error: found `)` when expecting identifier following `long`.

    /tmp/tmphisv0jn4.d(13): Error: found `{` when expecting `,`

    /tmp/tmphisv0jn4.d(14): Error: expression expected, not `while`

    /tmp/tmphisv0jn4.d(14): Error: found `{` when expecting `,`

    /tmp/tmphisv0jn4.d(15): Error: expression expected, not `if`

    /tmp/tmphisv0jn4.d(15): Error: found `{` when expecting `,`

    /tmp/tmphisv0jn4.d(16): Error: expression expected, not `return`

    /tmp/tmphisv0jn4.d(16): Error: found `true` when expecting `,`

    /tmp/tmphisv0jn4.d(16): Error: expression expected, not `;`

    /tmp/tmphisv0jn4.d(17): Error: found `}` when expecting `,`

    /tmp/tmphisv0jn4.d(18): Error: found `;` when expecting `,`

    /tmp/tmphisv0jn4.d(19): Error: expression expected, not `}`

    /tmp/tmphisv0jn4.d(20): Error: found `return` when expecting `,`

    /tmp/tmphisv0jn4.d(20): Error: found `;` when expecting `,`

    /tmp/tmphisv0jn4.d(21): Error: expression expected, not `}`

    /tmp/t'
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = [];\n    foreach(i;\
    \ x)\n    {\n        if(i.to!string.count!(a => a.isDigit && a.isEven) == 0)\n\
    \            result ~= i;\n    }\n    return result.sort;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3knhm3pp.d(16): Error: no property `to` for type `long`

    /tmp/tmp3knhm3pp.d(17): Error: cannot append type `long` to type `void[]`

    /tmp/tmp3knhm3pp.d(19): Error: no property `sort` for type `void[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3knhm3pp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result[count] = i;\n            count++;\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8becdby.d(17): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8becdby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = [];\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString().length == 1)\n        {\n            result\
    \ ~= i;\n        }\n        else\n        {\n            bool isEven = false;\n\
    \            foreach(char c; i.toString())\n            {\n                if(c\
    \ == '0' || c == '2' || c == '4' || c == '6' || c == '8')\n                {\n\
    \                    isEven = true;\n                    break;\n            \
    \    }\n            }\n            if(!isEven)\n            {\n              \
    \  result ~= i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpstpe1ggk.d(16): Error: no property `toString` for type `long`

    /tmp/tmpstpe1ggk.d(23): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpstpe1ggk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] even = [0,2,4,6,8];\n\
    \    int[] odd = [1,3,5,7,9];\n    int[] result = [];\n    foreach(int i; x)\n\
    \    {\n        int[] digits = [];\n        int n = i;\n        while(n > 0)\n\
    \        {\n            digits ~= n % 10;\n            n /= 10;\n        }\n \
    \       bool is_even = false;\n        foreach(int d; digits)\n        {\n   \
    \         if(even.canFind(d))\n            {\n                is_even = true;\n\
    \                break;\n            }\n        }\n        if(!is_even)\n    \
    \    {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpub6r1xm7.d(16): Error: cannot implicitly convert expression `__r16[__key17]`
    of type `long` to `int`

    /tmp/tmpub6r1xm7.d(28): Error: no property `canFind` for type `int[]`

    /tmp/tmpub6r1xm7.d(39): Error: no property `sort` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpub6r1xm7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result[count] = i;\n            count++;\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8becdby.d(17): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8becdby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int j = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i]\
    \ % 2 != 0)\n        {\n            result[j] = x[i];\n            j++;\n    \
    \    }\n    }\n    result = result.dup[0..j];\n    sort(result);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjh3tnqfl.d(24): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjh3tnqfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto res = new long[];\n \
    \   foreach(i; x)\n    {\n        if(i.digits.filter!(a => a % 2 == 0).empty)\n\
    \            res ~= i;\n    }\n    return res.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8jti_wnc.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp8jti_wnc.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jti_wnc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbe3lptd.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbe3lptd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!has_even_digit(i))\n        {\n  \
    \          result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph67c7sv3.d(16): Error: undefined identifier `has_even_digit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph67c7sv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int % 2 == 0)\n                {\n            \
    \        isEven = true;\n                    break;\n                }\n     \
    \       }\n            if(!isEven)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result.sort();\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt0r8b25l.d(16): Error: no property `toString` for type `long`

    /tmp/tmpt0r8b25l.d(23): Error: no property `toString` for type `long`

    /tmp/tmpt0r8b25l.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt0r8b25l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int j = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i]\
    \ % 2 != 0)\n        {\n            res[j] = x[i];\n            j++;\n       \
    \ }\n    }\n    res = res.sort();\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_np2jyh.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_np2jyh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.all!(a => a % 2 == 1))\n      \
    \      result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy_aptbk.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpxy_aptbk.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy_aptbk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n        {\n          \
    \  res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprc9cjh27.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x42843d]

    ??:? void tmprc9cjh27.__unittest_L23_C1() [0x427f5a]

    ??:? void tmprc9cjh27.__modtest() [0x4281c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd02]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43084d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcd9]

    ??:? runModuleUnitTests [0x42cc45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42888c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n \
    \       {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpps600zqo.d(16): Error: no property `digits` for type `long`

    /tmp/tmpps600zqo.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpps600zqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int i = 0;\n    foreach(long num; x)\n    {\n        string s = num.to!string;\n\
    \        bool isEven = false;\n        foreach(char c; s)\n        {\n       \
    \     if(c.to!int % 2 == 0)\n            {\n                isEven = true;\n \
    \               break;\n            }\n        }\n        if(!isEven)\n      \
    \  {\n            res[i] = num;\n            i++;\n        }\n    }\n    res =\
    \ res[0..i];\n    std.algorithm.sort(res);\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1uzm12vx.d(17): Error: no property `to` for type `long`

    /tmp/tmp1uzm12vx.d(21): Error: no property `to` for type `char`

    /tmp/tmp1uzm12vx.d(34): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1uzm12vx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.isDigit && c.to!int % 2 == 0)\n                {\n\
    \                    isEven = true;\n                    break;\n            \
    \    }\n            }\n            if(!isEven)\n            {\n              \
    \  result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeooqqhvk.d(16): Error: no property `toString` for type `long`

    /tmp/tmpeooqqhvk.d(23): Error: no property `toString` for type `long`

    /tmp/tmpeooqqhvk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeooqqhvk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            res ~= i;\n        }\n        else\n        {\n            bool\
    \ isEven = false;\n            foreach(char c; i.toString())\n            {\n\
    \                if(c.to!int % 2 == 0)\n                {\n                  \
    \  isEven = true;\n                    break;\n                }\n           \
    \ }\n            if(!isEven)\n            {\n                res ~= i;\n     \
    \       }\n        }\n    }\n    return res.sort();\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwgtjawh7.d(16): Error: no property `toString` for type `long`

    /tmp/tmpwgtjawh7.d(23): Error: no property `toString` for type `long`

    /tmp/tmpwgtjawh7.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgtjawh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = [];\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 == 0)\n            continue;\n        else\n\
    \            result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv4l57bzm.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmpv4l57bzm.__unittest_L23_C1() [0x427f5e]

    ??:? void tmpv4l57bzm.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc85]

    ??:? runModuleUnitTests [0x42cbf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428894]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto evenDigits = [](long\
    \ n) {\n        while (n > 0) {\n            if (n % 2 == 0) {\n             \
    \   return true;\n            }\n            n /= 10;\n        }\n        return\
    \ false;\n    };\n    return x.filter!(n => !evenDigits(n)).sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptrmz0qlr.d(13): Error: found `n` when expecting `.` following long

    /tmp/tmptrmz0qlr.d(13): Error: found `)` when expecting identifier following `long`.

    /tmp/tmptrmz0qlr.d(13): Error: found `{` when expecting `,`

    /tmp/tmptrmz0qlr.d(14): Error: expression expected, not `while`

    /tmp/tmptrmz0qlr.d(14): Error: found `{` when expecting `,`

    /tmp/tmptrmz0qlr.d(15): Error: expression expected, not `if`

    /tmp/tmptrmz0qlr.d(15): Error: found `{` when expecting `,`

    /tmp/tmptrmz0qlr.d(16): Error: expression expected, not `return`

    /tmp/tmptrmz0qlr.d(16): Error: found `true` when expecting `,`

    /tmp/tmptrmz0qlr.d(16): Error: expression expected, not `;`

    /tmp/tmptrmz0qlr.d(17): Error: found `}` when expecting `,`

    /tmp/tmptrmz0qlr.d(18): Error: found `;` when expecting `,`

    /tmp/tmptrmz0qlr.d(19): Error: expression expected, not `}`

    /tmp/tmptrmz0qlr.d(20): Error: found `return` when expecting `,`

    /tmp/tmptrmz0qlr.d(20): Error: found `;` when expecting `,`

    /tmp/tmptrmz0qlr.d(21): Error: expression expected, not `}`

    /tmp/t'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i < 10)\n        {\n            res\
    \ ~= i;\n        }\n        else\n        {\n            bool flag = true;\n \
    \           while(i > 0)\n            {\n                if(i % 2 == 0)\n    \
    \            {\n                    flag = false;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag)\n\
    \            {\n                res ~= i;\n            }\n        }\n    }\n \
    \   return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkceezsqi.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ad]

    ??:? void tmpkceezsqi.__unittest_L40_C1() [0x427fc6]

    ??:? void tmpkceezsqi.__modtest() [0x42822c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cedf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd49]

    ??:? runModuleUnitTests [0x42ccb5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    // your code here\n    long[]\
    \ result = new long[x.length];\n    int count = 0;\n    for(int i = 0; i < x.length;\
    \ i++)\n    {\n        if(x[i] % 2 != 0)\n        {\n            result[count]\
    \ = x[i];\n            count++;\n        }\n    }\n    result = result[0..count];\n\
    \    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmproc557er.d(25): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmproc557er.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] evenDigits = [0,2,4,6,8];\n\
    \    int[] oddDigits = [1,3,5,7,9];\n    int[] digits;\n    int[] result;\n  \
    \  int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int\
    \ o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n\
    \    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int\
    \ b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n\
    \    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int mm;\n    int nn;\n\
    \    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int ss;\n    int tt;\n\
    \    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int yy;\n    int zz;\n\
    \    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n\
    \    int gg;\n    int hh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n\
    \    int mmm;\n    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int\
    \ rrr;\n    int sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n\
    \    int xxx;\n    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int\
    \ cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n\
    \    int iiii;\n    int jjjj;\n    int kkkk;\n    int ll\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpec4_15ek.d(99): Error: semicolon expected, not `unittest`

    /tmp/tmpec4_15ek.d(99): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpec4_15ek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int() % 2 == 0)\n                {\n          \
    \          isEven = true;\n                    break;\n                }\n   \
    \         }\n            if(!isEven)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6a7jjodk.d(16): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(23): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a7jjodk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result[count] = i;\n            count++;\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8becdby.d(17): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8becdby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if\
    \ (x[i] % 2 != 0)\n        {\n            result[count] = x[i];\n            count++;\n\
    \        }\n    }\n    result = result[0..count];\n    result.sort;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp030b7i1f.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp030b7i1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        bool flag = true;\n        foreach(long\
    \ j; i.digits)\n        {\n            if(j % 2 == 0)\n            {\n       \
    \         flag = false;\n                break;\n            }\n        }\n  \
    \      if(flag)\n        {\n            res ~= i;\n        }\n    }\n    res.sort;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5mtuhr2c.d(17): Error: no property `digits` for type `long`

    /tmp/tmp5mtuhr2c.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5mtuhr2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 == 1))\n \
    \       {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2nd7839y.d(16): Error: no property `digits` for type `long`

    /tmp/tmp2nd7839y.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2nd7839y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            res[count] = i;\n            count++;\n        }\n    }\n\
    \    res = res[0..count];\n    res = res.sort();\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4hrf9zeh.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4hrf9zeh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 == 1))\n \
    \           res ~= i;\n    }\n    return res.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1p2rujrb.d(16): Error: no property `digits` for type `long`

    /tmp/tmp1p2rujrb.d(19): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p2rujrb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            res ~= i;\n        }\n        else\n        {\n            bool\
    \ is_even = false;\n            foreach(char c; i.toString())\n            {\n\
    \                if(c.to!int % 2 == 0)\n                {\n                  \
    \  is_even = true;\n                    break;\n                }\n          \
    \  }\n            if(!is_even)\n            {\n                res ~= i;\n   \
    \         }\n        }\n    }\n    return res.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqr9ald3w.d(16): Error: no property `toString` for type `long`

    /tmp/tmpqr9ald3w.d(23): Error: no property `toString` for type `long`

    /tmp/tmpqr9ald3w.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqr9ald3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int j = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i]\
    \ % 2 != 0)\n        {\n            result[j] = x[i];\n            j++;\n    \
    \    }\n    }\n    result = result.sort();\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppc8lcgsi.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppc8lcgsi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int % 2 == 0)\n                {\n            \
    \        isEven = true;\n                    break;\n                }\n     \
    \       }\n            if(!isEven)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result.sort;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa54_23xh.d(16): Error: no property `toString` for type `long`

    /tmp/tmpa54_23xh.d(23): Error: no property `toString` for type `long`

    /tmp/tmpa54_23xh.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa54_23xh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = [];\n    foreach(long\
    \ i; x)\n    {\n        if(!hasEvenDigit(i))\n            result ~= i;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkdp7oai.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkdp7oai.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] evenDigits = {0, 2,\
    \ 4, 6, 8};\n    int[] oddDigits = {1, 3, 5, 7, 9};\n    int[] digits = new int[10];\n\
    \    int[] result = new int[x.length];\n    int count = 0;\n    for (int i = 0;\
    \ i < x.length; i++)\n    {\n        int temp = x[i];\n        while (temp !=\
    \ 0)\n        {\n            digits[temp % 10]++;\n            temp /= 10;\n \
    \       }\n        bool isEven = false;\n        for (int j = 0; j < evenDigits.length;\
    \ j++)\n        {\n            if (digits[evenDigits[j]] != 0)\n            {\n\
    \                isEven = true;\n                break;\n            }\n     \
    \   }\n        if (!isEven)\n        {\n            result[count] = x[i];\n  \
    \          count++;\n        }\n        for (int j = 0; j < digits.length; j++)\n\
    \        {\n            digits[j] = 0;\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp65o0oo4l.d(13): Error: a struct is not a valid initializer for
    a `int[]`

    /tmp/tmp65o0oo4l.d(14): Error: a struct is not a valid initializer for a `int[]`

    /tmp/tmp65o0oo4l.d(20): Error: cannot implicitly convert expression `x[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp65o0oo4l.d(37): Error: cannot implicitly convert expression `x[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp65o0oo4l.d(45): Error: cannot implicitly convert expression `result[0..cast(ulong)count]`
    of type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp65o0oo4l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    return x.filter!(a => a.toString().all!(b\
    \ => b % 2 == 1)).sort();\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_n0tbao5.d(13): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_n0tbao5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto even_digits = [](long\
    \ n) {\n        while (n > 0) {\n            if (n % 2 == 0) return true;\n  \
    \          n /= 10;\n        }\n        return false;\n    };\n    return x.filter!(n\
    \ => !even_digits(n)).sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_8mqtq6o.d(13): Error: found `n` when expecting `.` following long

    /tmp/tmp_8mqtq6o.d(13): Error: found `)` when expecting identifier following `long`.

    /tmp/tmp_8mqtq6o.d(13): Error: found `{` when expecting `,`

    /tmp/tmp_8mqtq6o.d(14): Error: expression expected, not `while`

    /tmp/tmp_8mqtq6o.d(14): Error: found `{` when expecting `,`

    /tmp/tmp_8mqtq6o.d(15): Error: expression expected, not `if`

    /tmp/tmp_8mqtq6o.d(15): Error: found `return` when expecting `,`

    /tmp/tmp_8mqtq6o.d(15): Error: found `;` when expecting `,`

    /tmp/tmp_8mqtq6o.d(16): Error: found `;` when expecting `,`

    /tmp/tmp_8mqtq6o.d(17): Error: expression expected, not `}`

    /tmp/tmp_8mqtq6o.d(18): Error: found `return` when expecting `,`

    /tmp/tmp_8mqtq6o.d(18): Error: found `;` when expecting `,`

    /tmp/tmp_8mqtq6o.d(19): Error: expression expected, not `}`

    /tmp/tmp_8mqtq6o.d(19): Error: found `;` when expecting `,`

    /tmp/tmp_8mqtq6o.d(20): Error: expression expected, not `return`

    /tmp/tmp_8mqtq6o.d(20): Error: found `x` when expecting `,`

    /tmp'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n      \
    \      result ~= i;\n    }\n    return result.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmnoi6kmb.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpmnoi6kmb.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnoi6kmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.filter!(a => a % 2 == 0).length\
    \ == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrk04s9s.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpgrk04s9s.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrk04s9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        bool isEven = false;\n        while(i\
    \ > 0)\n        {\n            if((i % 10) % 2 == 0)\n            {\n        \
    \        isEven = true;\n                break;\n            }\n            i\
    \ /= 10;\n        }\n        if(!isEven)\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpivyh6h0v.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42847d]

    ??:? void tmpivyh6h0v.__unittest_L33_C1() [0x427f96]

    ??:? void tmpivyh6h0v.__modtest() [0x4281fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ceaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43088d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430819]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd19]

    ??:? runModuleUnitTests [0x42cc85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    // your code here\n    int[]\
    \ even = {0,2,4,6,8};\n    int[] odd = {1,3,5,7,9};\n    int[] digits = new int[10];\n\
    \    for(int i = 0; i < x.length; i++)\n    {\n        int temp = x[i];\n    \
    \    while(temp > 0)\n        {\n            digits[temp%10]++;\n            temp\
    \ /= 10;\n        }\n    }\n    int[] result = new int[x.length];\n    int index\
    \ = 0;\n    for(int i = 0; i < x.length; i++)\n    {\n        int temp = x[i];\n\
    \        bool flag = true;\n        while(temp > 0)\n        {\n            if(digits[temp%10]\
    \ > 1)\n            {\n                flag = false;\n                break;\n\
    \            }\n            temp /= 10;\n        }\n        if(flag)\n       \
    \ {\n            result[index++] = x[i];\n        }\n    }\n    return result[0..index];\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpykx20tve.d(14): Error: a struct is not a valid initializer for
    a `int[]`

    /tmp/tmpykx20tve.d(15): Error: a struct is not a valid initializer for a `int[]`

    /tmp/tmpykx20tve.d(19): Error: cannot implicitly convert expression `x[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmpykx20tve.d(30): Error: cannot implicitly convert expression `x[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmpykx20tve.d(43): Error: cannot implicitly convert expression `x[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmpykx20tve.d(46): Error: cannot implicitly convert expression `result[0..cast(ulong)index]`
    of type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpykx20tve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] even = {0,2,4,6,8};\n\
    \    int[] odd = {1,3,5,7,9};\n    int[] temp = new int[x.length];\n    int count\
    \ = 0;\n    int j = 0;\n    for(int i = 0; i < x.length; i++)\n    {\n       \
    \ temp[i] = x[i];\n    }\n    for(int i = 0; i < x.length; i++)\n    {\n     \
    \   for(int k = 0; k < even.length; k++)\n        {\n            if(temp[i] %\
    \ 10 == even[k])\n            {\n                temp[i] = 0;\n            }\n\
    \        }\n        temp[i] /= 10;\n    }\n    for(int i = 0; i < x.length; i++)\n\
    \    {\n        if(temp[i] != 0)\n        {\n            count++;\n        }\n\
    \    }\n    long[] result = new long[count];\n    for(int i = 0; i < x.length;\
    \ i++)\n    {\n        if(temp[i] != 0)\n        {\n            result[j] = x[i];\n\
    \            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2fer22cn.d(13): Error: a struct is not a valid initializer for
    a `int[]`

    /tmp/tmp2fer22cn.d(14): Error: a struct is not a valid initializer for a `int[]`

    /tmp/tmp2fer22cn.d(20): Error: cannot implicitly convert expression `x[cast(ulong)i]`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2fer22cn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n \
    \       {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpps600zqo.d(16): Error: no property `digits` for type `long`

    /tmp/tmpps600zqo.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpps600zqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result[count] = i;\n            count++;\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8becdby.d(17): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8becdby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int() % 2 == 0)\n                {\n          \
    \          isEven = true;\n                    break;\n                }\n   \
    \         }\n            if(!isEven)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6a7jjodk.d(16): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(23): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a7jjodk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.to!string.length.all!(a => a % 2 == 1))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa8vg5t_k.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpa8vg5t_k.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa8vg5t_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().count(\"[02468]\") ==\
    \ 0)\n        {\n            result ~= i;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps45x4bh6.d(16): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps45x4bh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] even = {0,2,4,6,8};\n\
    \    int[] odd = {1,3,5,7,9};\n    int[] digits;\n    int[] result;\n    int[]\
    \ temp;\n    int count = 0;\n    int index = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int p = 0;\n\
    \    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n\
    \    int v = 0;\n    int w = 0;\n    int x1 = 0;\n    int y = 0;\n    int z =\
    \ 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int\
    \ e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n  \
    \  int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn\
    \ = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n \
    \   int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww\
    \ = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa = 0;\n \
    \   int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff\
    \ = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n\
    \    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int\
    \ ooo = 0;\n    int ppp = 0;\n    int qqq =\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxzull2n8.d(80): Error: expression expected, not `unittest`

    /tmp/tmpxzull2n8.d(81): Error: semicolon expected, not `{`

    /tmp/tmpxzull2n8.d(89): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzull2n8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n            result ~=\
    \ i;\n    }\n    std.algorithm.sort(result);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd3szduse.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpd3szduse.d(16): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpd3szduse.d(19): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3szduse.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int % 2 == 0)\n                {\n            \
    \        isEven = true;\n                    break;\n                }\n     \
    \       }\n            if(!isEven)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result.sort;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa54_23xh.d(16): Error: no property `toString` for type `long`

    /tmp/tmpa54_23xh.d(23): Error: no property `toString` for type `long`

    /tmp/tmpa54_23xh.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa54_23xh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] even = {0,2,4,6,8};\n\
    \    int[] odd = {1,3,5,7,9};\n    int[] digits = new int[10];\n    int[] result\
    \ = new int[x.length];\n    int count = 0;\n    foreach(int i; x)\n    {\n   \
    \     int temp = i;\n        while(temp > 0)\n        {\n            digits[temp\
    \ % 10]++;\n            temp /= 10;\n        }\n        bool isOdd = true;\n \
    \       foreach(int j; even)\n        {\n            if(digits[j] > 0)\n     \
    \       {\n                isOdd = false;\n                break;\n          \
    \  }\n        }\n        if(isOdd)\n        {\n            result[count] = i;\n\
    \            count++;\n        }\n        foreach(int j; digits)\n        {\n\
    \            j = 0;\n        }\n    }\n    return result[0..count];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp89veusdt.d(13): Error: a struct is not a valid initializer for
    a `int[]`

    /tmp/tmp89veusdt.d(14): Error: a struct is not a valid initializer for a `int[]`

    /tmp/tmp89veusdt.d(18): Error: cannot implicitly convert expression `__r16[__key17]`
    of type `long` to `int`

    /tmp/tmp89veusdt.d(45): Error: cannot implicitly convert expression `result[0..cast(ulong)count]`
    of type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89veusdt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if\
    \ (x[i] % 2 != 0)\n        {\n            result[count] = x[i];\n            count++;\n\
    \        }\n    }\n    long[] finalResult = new long[count];\n    for (int i =\
    \ 0; i < count; i++)\n    {\n        finalResult[i] = result[i];\n    }\n    return\
    \ finalResult;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpog5p1rob.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpog5p1rob.__unittest_L30_C1() [0x428012]

    ??:? void tmpog5p1rob.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c5af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b442]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430659]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b419]

    ??:? runModuleUnitTests [0x42c385]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int j = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if(x[i]\
    \ % 2 != 0)\n        {\n            result[j] = x[i];\n            j++;\n    \
    \    }\n    }\n    result = result.sort();\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexo_pmbf.d(23): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexo_pmbf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long num; x)\n    {\n        if(num % 2 != 0)\n\
    \        {\n            result[count] = num;\n            count++;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz4mksz5x.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42844d]

    ??:? void tmpz4mksz5x.__unittest_L25_C1() [0x427f66]

    ??:? void tmpz4mksz5x.__modtest() [0x4281cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c507]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b39a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430625]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ad4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b371]

    ??:? runModuleUnitTests [0x42c2dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428910]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(e; x)\n    {\n        if(e.digits.all!(a => a % 2 == 1))\n      \
    \      result ~= e;\n    }\n    return result.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzr02tgw1.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpzr02tgw1.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzr02tgw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n        {\n          \
    \  result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqk9dep6q.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x42843d]

    ??:? void tmpqk9dep6q.__unittest_L23_C1() [0x427f5a]

    ??:? void tmpqk9dep6q.__modtest() [0x4281c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd02]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43084d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcd9]

    ??:? runModuleUnitTests [0x42cc45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42888c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        bool found = false;\n        foreach(long\
    \ j; i.digits)\n        {\n            if(j % 2 == 0)\n            {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if(!found)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort();\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyae08o4t.d(17): Error: no property `digits` for type `long`

    /tmp/tmpyae08o4t.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyae08o4t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int() % 2 == 0)\n                {\n          \
    \          isEven = true;\n                    break;\n                }\n   \
    \         }\n            if(!isEven)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6a7jjodk.d(16): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(23): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a7jjodk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc253rtec.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc253rtec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.filter!(a => a % 2 == 0).length\
    \ == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrk04s9s.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpgrk04s9s.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrk04s9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int j = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i]\
    \ % 2 != 0)\n        {\n            result[j] = x[i];\n            j++;\n    \
    \    }\n    }\n    result = result.take(j);\n    result.sort();\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuihykgu2.d(23): Error: no property `take` for type `long[]`

    /tmp/tmpuihykgu2.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuihykgu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool even = false;\n            foreach(char c; i.toString())\n           \
    \ {\n                if(c.to!int % 2 == 0)\n                {\n              \
    \      even = true;\n                    break;\n                }\n         \
    \   }\n            if(!even)\n            {\n                result ~= i;\n  \
    \          }\n        }\n    }\n    return result.sort();\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_3t4tvi.d(16): Error: no property `toString` for type `long`

    /tmp/tmp2_3t4tvi.d(23): Error: no property `toString` for type `long`

    /tmp/tmp2_3t4tvi.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_3t4tvi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int j = 0;\n    foreach(long i; x)\n    {\n        if(i%2 != 0)\n       \
    \ {\n            result[j] = i;\n            j++;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzssq05zj.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42844d]

    ??:? void tmpzssq05zj.__unittest_L25_C1() [0x427f66]

    ??:? void tmpzssq05zj.__modtest() [0x4281cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c507]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b39a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430625]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ad4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b371]

    ??:? runModuleUnitTests [0x42c2dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428910]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = [];\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqzgq_3f1.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmpqzgq_3f1.__unittest_L23_C1() [0x427f5e]

    ??:? void tmpqzgq_3f1.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc85]

    ??:? runModuleUnitTests [0x42cbf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428894]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(num; x)\n    {\n        if(num.digits.all!(a => a % 2 != 0))\n  \
    \          result ~= num;\n    }\n    return result.sort;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc7foxp7_.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpc7foxp7_.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7foxp7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        auto hasEven = false;\n        auto num = i;\n\
    \        while(num > 0)\n        {\n            if(num % 2 == 0)\n           \
    \ {\n                hasEven = true;\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if(!hasEven)\n        {\n        \
    \    result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_und08rh.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_und08rh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        auto s = to!string(i);\n        bool isEven\
    \ = false;\n        foreach(c; s)\n        {\n            if(c == '2' || c ==\
    \ '4' || c == '6' || c == '8' || c == '0')\n            {\n                isEven\
    \ = true;\n                break;\n            }\n        }\n        if(!isEven)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_ktpl72.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpl_ktpl72.d(16): Error: template instance `to!string` template `to` is
    not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_ktpl72.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(num; x)\n    {\n        if(num.digits.filter!(a => a % 2 == 0).length\
    \ == 0)\n            result ~= num;\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7z_di2f_.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp7z_di2f_.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7z_di2f_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int % 2 == 0)\n                {\n            \
    \        isEven = true;\n                    break;\n                }\n     \
    \       }\n            if(!isEven)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result.sort;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa54_23xh.d(16): Error: no property `toString` for type `long`

    /tmp/tmpa54_23xh.d(23): Error: no property `toString` for type `long`

    /tmp/tmpa54_23xh.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa54_23xh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long n; x)\n    {\n        bool hasEven = false;\n        while(n\
    \ > 0)\n        {\n            if(n % 2 == 0)\n            {\n               \
    \ hasEven = true;\n                break;\n            }\n            n /= 10;\n\
    \        }\n        if(!hasEven)\n        {\n            result ~= n;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5cvwd70_.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428475]

    ??:? void tmp5cvwd70_.__unittest_L33_C1() [0x427f8e]

    ??:? void tmp5cvwd70_.__modtest() [0x4281f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cea7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd3a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430885]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430811]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd11]

    ??:? runModuleUnitTests [0x42cc7d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n            result ~=\
    \ i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprdfcgywz.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmprdfcgywz.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdfcgywz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.filter!(a => a % 2 == 0).length\
    \ == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrk04s9s.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpgrk04s9s.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrk04s9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(e; x)\n    {\n        if(!e.to!string.canFind(\"2\") && !e.to!string.canFind(\"\
    4\") && !e.to!string.canFind(\"6\") && !e.to!string.canFind(\"8\"))\n        {\n\
    \            result ~= e;\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpced_ud8o.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpced_ud8o.d(16): Error: no property `to` for type `long`

    /tmp/tmpced_ud8o.d(16): Error: no property `to` for type `long`

    /tmp/tmpced_ud8o.d(16): Error: no property `to` for type `long`

    /tmp/tmpced_ud8o.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpced_ud8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isUnique = true;\n            foreach(char c; i.toString())\n        \
    \    {\n                if(c.isDigit && c.to!int % 2 == 0)\n                {\n\
    \                    isUnique = false;\n                    break;\n         \
    \       }\n            }\n            if(isUnique)\n            {\n          \
    \      result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31ncuxgp.d(16): Error: no property `toString` for type `long`

    /tmp/tmp31ncuxgp.d(23): Error: no property `toString` for type `long`

    /tmp/tmp31ncuxgp.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31ncuxgp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n        {\n          \
    \  result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqk9dep6q.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x42843d]

    ??:? void tmpqk9dep6q.__unittest_L23_C1() [0x427f5a]

    ??:? void tmpqk9dep6q.__modtest() [0x4281c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd02]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43084d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcd9]

    ??:? runModuleUnitTests [0x42cc45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42888c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool is_even = false;\n            foreach(char c; i.toString())\n        \
    \    {\n                if(c.to!int() % 2 == 0)\n                {\n         \
    \           is_even = true;\n                    break;\n                }\n \
    \           }\n            if(!is_even)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7log4awk.d(16): Error: no property `toString` for type `long`

    /tmp/tmp7log4awk.d(23): Error: no property `toString` for type `long`

    /tmp/tmp7log4awk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7log4awk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n            result ~=\
    \ i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprdfcgywz.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmprdfcgywz.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdfcgywz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = [];\n    foreach(i;\
    \ x)\n    {\n        if(i % 2 != 0)\n        {\n            result ~= i;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbns7ap36.d(18): Error: cannot append type `long` to type `void[]`

    /tmp/tmpbns7ap36.d(21): Error: cannot implicitly convert expression `result` of
    type `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbns7ap36.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int j = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n     \
    \   {\n            res[j] = i;\n            j++;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphot09a3q.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42844d]

    ??:? void tmphot09a3q.__unittest_L25_C1() [0x427f66]

    ??:? void tmphot09a3q.__modtest() [0x4281cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c507]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b39a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430625]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ad4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b371]

    ??:? runModuleUnitTests [0x42c2dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428910]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n \
    \       {\n            res ~= i;\n        }\n    }\n    return res.sort;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo51h6sns.d(16): Error: no property `digits` for type `long`

    /tmp/tmpo51h6sns.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo51h6sns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long n; x)\n    {\n        if(n.digits.all!(d => d % 2 != 0))\n \
    \       {\n            result ~= n;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ujbjxhc.d(16): Error: no property `digits` for type `long`

    /tmp/tmp0ujbjxhc.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ujbjxhc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result[count] = i;\n            count++;\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8becdby.d(17): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8becdby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc253rtec.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc253rtec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.all!(a => a % 2 == 1))\n      \
    \      result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy_aptbk.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpxy_aptbk.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy_aptbk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n \
    \       {\n            res ~= i;\n        }\n    }\n    return res.sort;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo51h6sns.d(16): Error: no property `digits` for type `long`

    /tmp/tmpo51h6sns.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo51h6sns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long num; x)\n    {\n        if(num.toString.length == 1)\n     \
    \   {\n            result ~= num;\n        }\n        else\n        {\n      \
    \      bool isEven = false;\n            foreach(char c; num.toString)\n     \
    \       {\n                if(c.to!int % 2 == 0)\n                {\n        \
    \            isEven = true;\n                    break;\n                }\n \
    \           }\n            if(!isEven)\n            {\n                result\
    \ ~= num;\n            }\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbtst96kh.d(16): Error: no property `toString` for type `long`

    /tmp/tmpbtst96kh.d(23): Error: no property `toString` for type `long`

    /tmp/tmpbtst96kh.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtst96kh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.filter!(a => a % 2 == 0).length\
    \ == 0)\n        {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrk04s9s.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpgrk04s9s.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrk04s9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = [];\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqzgq_3f1.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmpqzgq_3f1.__unittest_L23_C1() [0x427f5e]

    ??:? void tmpqzgq_3f1.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc85]

    ??:? runModuleUnitTests [0x42cbf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428894]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] even = {0,2,4,6,8};\n\
    \    auto evenDigits = new bool[x.length];\n    foreach(i, v; x)\n    {\n    \
    \    foreach(e; even)\n        {\n            if(v.to!string.indexOf(e.to!string)\
    \ != -1)\n            {\n                evenDigits[i] = true;\n             \
    \   break;\n            }\n        }\n    }\n    return x.filter!(a => !evenDigits[a.index]).array;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpyz16sq.d(13): Error: a struct is not a valid initializer for
    a `int[]`

    /tmp/tmpwpyz16sq.d(19): Error: no property `to` for type `long`

    /tmp/tmpwpyz16sq.d(26): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpyz16sq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbe3lptd.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbe3lptd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        bool hasEven = false;\n\
    \        foreach(char c; i.to!string)\n        {\n            if(c.to!int % 2\
    \ == 0)\n            {\n                hasEven = true;\n                break;\n\
    \            }\n        }\n        if(!hasEven)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n    }\n    return result[0..count].sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp64xzzixb.d(18): Error: no property `to` for type `long`

    /tmp/tmp64xzzixb.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64xzzixb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] res = new int[x.length];\n\
    \    int count = 0;\n    foreach(int i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res[count] = i;\n            count++;\n        }\n   \
    \ }\n    return res[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnts16myw.d(15): Error: cannot implicitly convert expression `__r16[__key17]`
    of type `long` to `int`

    /tmp/tmpnts16myw.d(17): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpnts16myw.d(23): Error: cannot implicitly convert expression `res[0..cast(ulong)count]`
    of type `int[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnts16myw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(num; x)\n    {\n        if(num.digits.filter!(a => a % 2 == 0).length\
    \ == 0)\n            result ~= num;\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7z_di2f_.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp7z_di2f_.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7z_di2f_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int j = 0;\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            result[j] = i;\n\
    \            j++;\n        }\n    }\n    result = result[0..j];\n    result.sort;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw6xudk8b.d(17): Error: no property `toString` for type `long`

    /tmp/tmpw6xudk8b.d(17): Error: no property `toString` for type `long`

    /tmp/tmpw6xudk8b.d(17): Error: no property `toString` for type `long`

    /tmp/tmpw6xudk8b.d(17): Error: no property `toString` for type `long`

    /tmp/tmpw6xudk8b.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6xudk8b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto evenDigits = [](long\
    \ n) {\n        while (n > 0) {\n            if (n % 2 == 0) return true;\n  \
    \          n /= 10;\n        }\n        return false;\n    };\n    return x.filter!(n\
    \ => !evenDigits(n)).sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmggjiy9_.d(13): Error: found `n` when expecting `.` following long

    /tmp/tmpmggjiy9_.d(13): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpmggjiy9_.d(13): Error: found `{` when expecting `,`

    /tmp/tmpmggjiy9_.d(14): Error: expression expected, not `while`

    /tmp/tmpmggjiy9_.d(14): Error: found `{` when expecting `,`

    /tmp/tmpmggjiy9_.d(15): Error: expression expected, not `if`

    /tmp/tmpmggjiy9_.d(15): Error: found `return` when expecting `,`

    /tmp/tmpmggjiy9_.d(15): Error: found `;` when expecting `,`

    /tmp/tmpmggjiy9_.d(16): Error: found `;` when expecting `,`

    /tmp/tmpmggjiy9_.d(17): Error: expression expected, not `}`

    /tmp/tmpmggjiy9_.d(18): Error: found `return` when expecting `,`

    /tmp/tmpmggjiy9_.d(18): Error: found `;` when expecting `,`

    /tmp/tmpmggjiy9_.d(19): Error: expression expected, not `}`

    /tmp/tmpmggjiy9_.d(19): Error: found `;` when expecting `,`

    /tmp/tmpmggjiy9_.d(20): Error: expression expected, not `return`

    /tmp/tmpmggjiy9_.d(20): Error: found `x` when expecting `,`

    /tmp'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long num; x)\n    {\n        bool isEven = false;\n        while(num\
    \ > 0)\n        {\n            if(num % 2 == 0)\n            {\n             \
    \   isEven = true;\n                break;\n            }\n            num /=\
    \ 10;\n        }\n        if(!isEven)\n        {\n            result ~= num;\n\
    \        }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L])\
    \ == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n\
    \    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf4onsju6.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4onsju6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc253rtec.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc253rtec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto evenDigits = [](long\
    \ n) {\n        while (n > 0) {\n            if (n % 2 == 0) {\n             \
    \   return true;\n            }\n            n /= 10;\n        }\n        return\
    \ false;\n    };\n    return x.filter!(a => !evenDigits(a)).sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgvkizu16.d(13): Error: found `n` when expecting `.` following long

    /tmp/tmpgvkizu16.d(13): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpgvkizu16.d(13): Error: found `{` when expecting `,`

    /tmp/tmpgvkizu16.d(14): Error: expression expected, not `while`

    /tmp/tmpgvkizu16.d(14): Error: found `{` when expecting `,`

    /tmp/tmpgvkizu16.d(15): Error: expression expected, not `if`

    /tmp/tmpgvkizu16.d(15): Error: found `{` when expecting `,`

    /tmp/tmpgvkizu16.d(16): Error: expression expected, not `return`

    /tmp/tmpgvkizu16.d(16): Error: found `true` when expecting `,`

    /tmp/tmpgvkizu16.d(16): Error: expression expected, not `;`

    /tmp/tmpgvkizu16.d(17): Error: found `}` when expecting `,`

    /tmp/tmpgvkizu16.d(18): Error: found `;` when expecting `,`

    /tmp/tmpgvkizu16.d(19): Error: expression expected, not `}`

    /tmp/tmpgvkizu16.d(20): Error: found `return` when expecting `,`

    /tmp/tmpgvkizu16.d(20): Error: found `;` when expecting `,`

    /tmp/tmpgvkizu16.d(21): Error: expression expected, not `}`

    /tmp/t'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i < 10)\n     \
    \   {\n            result[count] = i;\n            count++;\n        }\n     \
    \   else\n        {\n            bool even = false;\n            while(i > 0)\n\
    \            {\n                if(i % 2 == 0)\n                {\n          \
    \          even = true;\n                    break;\n                }\n     \
    \           i /= 10;\n            }\n            if(!even)\n            {\n  \
    \              result[count] = i;\n                count++;\n            }\n \
    \       }\n    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjerlju2x.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284dd]

    ??:? void tmpjerlju2x.__unittest_L43_C1() [0x427ff6]

    ??:? void tmpjerlju2x.__modtest() [0x42825c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c597]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b42a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430641]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b401]

    ??:? runModuleUnitTests [0x42c36d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    long[] temp = new long[x.length];\n    int count = 0;\n    int count2 = 0;\n\
    \    for(int i = 0; i < x.length; i++)\n    {\n        long num = x[i];\n    \
    \    while(num > 0)\n        {\n            long digit = num % 10;\n         \
    \   if(digit % 2 == 0)\n            {\n                temp[count] = x[i];\n \
    \               count++;\n                break;\n            }\n            num\
    \ /= 10;\n        }\n    }\n    for(int i = 0; i < x.length; i++)\n    {\n   \
    \     bool found = false;\n        for(int j = 0; j < temp.length; j++)\n    \
    \    {\n            if(x[i] == temp[j])\n            {\n                found\
    \ = true;\n                break;\n            }\n        }\n        if(!found)\n\
    \        {\n            result[count2] = x[i];\n            count2++;\n      \
    \  }\n    }\n    result = result[0..count2];\n    sort(result);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0455v50z.d(50): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0455v50z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().count(\"2\") == 0 && i.toString().count(\"\
    4\") == 0 && i.toString().count(\"6\") == 0 && i.toString().count(\"8\") == 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptp95szcr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = [];\n    foreach(long\
    \ i; x)\n    {\n        if(i == 0)\n        {\n            result ~= i;\n    \
    \        continue;\n        }\n        while(i > 0)\n        {\n            if(i\
    \ % 2 == 0)\n            {\n                break;\n            }\n          \
    \  i /= 10;\n        }\n        if(i == 0)\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1zy13pl3.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x42849d]

    ??:? void tmp1zy13pl3.__unittest_L36_C1() [0x427fba]

    ??:? void tmp1zy13pl3.__modtest() [0x428220]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430759]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c08]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcdd]

    ??:? runModuleUnitTests [0x42cc49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbe3lptd.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbe3lptd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().count(\"2\") == 0 && i.toString().count(\"\
    4\") == 0 && i.toString().count(\"6\") == 0 && i.toString().count(\"8\") == 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptp95szcr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            res[count] = i;\n            count++;\n        }\n    }\n\
    \    res = res[0..count];\n    res.sort;\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2bjabcmr.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2bjabcmr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.to!string.length.all!(a => a % 2 == 1))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa8vg5t_k.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpa8vg5t_k.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa8vg5t_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto evenDigits = [](long\
    \ n)\n    {\n        while (n != 0)\n        {\n            if ((n % 10) % 2 ==\
    \ 0)\n                return true;\n            n /= 10;\n        }\n        return\
    \ false;\n    };\n    return x.filter!(a => !evenDigits(a)).sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3cv0lo1.d(13): Error: found `n` when expecting `.` following long

    /tmp/tmpa3cv0lo1.d(13): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpa3cv0lo1.d(14): Error: found `{` when expecting `,`

    /tmp/tmpa3cv0lo1.d(15): Error: expression expected, not `while`

    /tmp/tmpa3cv0lo1.d(16): Error: found `{` when expecting `,`

    /tmp/tmpa3cv0lo1.d(17): Error: expression expected, not `if`

    /tmp/tmpa3cv0lo1.d(18): Error: found `return` when expecting `,`

    /tmp/tmpa3cv0lo1.d(18): Error: found `;` when expecting `,`

    /tmp/tmpa3cv0lo1.d(19): Error: found `;` when expecting `,`

    /tmp/tmpa3cv0lo1.d(20): Error: expression expected, not `}`

    /tmp/tmpa3cv0lo1.d(21): Error: found `return` when expecting `,`

    /tmp/tmpa3cv0lo1.d(21): Error: found `;` when expecting `,`

    /tmp/tmpa3cv0lo1.d(22): Error: expression expected, not `}`

    /tmp/tmpa3cv0lo1.d(22): Error: found `;` when expecting `,`

    /tmp/tmpa3cv0lo1.d(23): Error: expression expected, not `return`

    /tmp/tmpa3cv0lo1.d(23): Error: found `x` when expecting `,`

    /tmp'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n      \
    \      result ~= i;\n    }\n    return result.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmnoi6kmb.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpmnoi6kmb.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnoi6kmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if\
    \ (isUnique(x[i]))\n        {\n            result[count] = x[i];\n           \
    \ count++;\n        }\n    }\n    return result[0..count];\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpun_x64qv.d(17): Error: undefined identifier `isUnique`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpun_x64qv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result[count] = i;\n            count++;\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8becdby.d(17): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8becdby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n      \
    \      result ~= i;\n    }\n    return result.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmnoi6kmb.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpmnoi6kmb.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnoi6kmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = [];\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            res\
    \ ~= i;\n        }\n        else\n        {\n            bool is_even = false;\n\
    \            foreach(char c; i.toString)\n            {\n                if(c.to!int\
    \ % 2 == 0)\n                {\n                    is_even = true;\n        \
    \            break;\n                }\n            }\n            if(!is_even)\n\
    \            {\n                res ~= i;\n            }\n        }\n    }\n \
    \   return res.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2frxafj.d(16): Error: no property `toString` for type `long`

    /tmp/tmpd2frxafj.d(23): Error: no property `toString` for type `long`

    /tmp/tmpd2frxafj.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2frxafj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = [];\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqzgq_3f1.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmpqzgq_3f1.__unittest_L23_C1() [0x427f5e]

    ??:? void tmpqzgq_3f1.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc85]

    ??:? runModuleUnitTests [0x42cbf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428894]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            res[count] = i;\n            count++;\n        }\n    }\n\
    \    res = res[0..count];\n    sort(res);\n    return res;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrq_7yia.d(24): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrq_7yia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n      \
    \      result ~= i;\n    }\n    return result.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmnoi6kmb.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpmnoi6kmb.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnoi6kmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        bool hasEven = false;\n        foreach(char\
    \ c; to!string(i))\n        {\n            if(c == '0' || c == '2' || c == '4'\
    \ || c == '6' || c == '8')\n            {\n                hasEven = true;\n \
    \               break;\n            }\n        }\n        if(!hasEven)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return sort(result);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6thnasst.d(17): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmp6thnasst.d(30): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6thnasst.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i % 2 == 0)\n            continue;\n   \
    \     auto digits = new long[];\n        auto temp = i;\n        while(temp >\
    \ 0)\n        {\n            digits ~= temp % 10;\n            temp /= 10;\n \
    \       }\n        if(digits.length == digits.unique.length)\n            result\
    \ ~= i;\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnuvptj5o.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpnuvptj5o.d(18): Error: new can only create structs, dynamic arrays or
    class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnuvptj5o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = [];\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 == 0)\n            continue;\n        else\n\
    \            result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv4l57bzm.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x428445]

    ??:? void tmpv4l57bzm.__unittest_L23_C1() [0x427f5e]

    ??:? void tmpv4l57bzm.__modtest() [0x4281c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bcae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430701]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43068d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc85]

    ??:? runModuleUnitTests [0x42cbf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428894]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result;\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppn97oxpn.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmppn97oxpn.__unittest_L23_C1() [0x427f52]

    ??:? void tmppn97oxpn.__modtest() [0x4281b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bc9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ba0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43067d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bc75]

    ??:? runModuleUnitTests [0x42cbe1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428884]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"2\") || i.to!string.canFind(\"\
    4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"8\"))\n        {\n\
    \            continue;\n        }\n        else\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2paxavf3.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp2paxavf3.d(16): Error: no property `to` for type `long`

    /tmp/tmp2paxavf3.d(16): Error: no property `to` for type `long`

    /tmp/tmp2paxavf3.d(16): Error: no property `to` for type `long`

    /tmp/tmp2paxavf3.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2paxavf3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().count(\"2\") == 0 && i.toString().count(\"\
    4\") == 0 && i.toString().count(\"6\") == 0 && i.toString().count(\"8\") == 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    /tmp/tmptp95szcr.d(16): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptp95szcr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int() % 2 == 0)\n                {\n          \
    \          isEven = true;\n                    break;\n                }\n   \
    \         }\n            if(!isEven)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6a7jjodk.d(16): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(23): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a7jjodk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc253rtec.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc253rtec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long num; x)\n    {\n        if(num % 2 != 0)\n\
    \        {\n            result[count] = num;\n            count++;\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz07e3kb5.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpz07e3kb5.__unittest_L25_C1() [0x427f86]

    ??:? void tmpz07e3kb5.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    return x.filter!(a => a.toString().chars.all!(b\
    \ => b.toString().toLong() % 2 == 1)).array;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4gngjhe7.d(13): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4gngjhe7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    long[] temp = new long[x.length];\n    int count = 0;\n    for (int i = 0;\
    \ i < x.length; i++)\n    {\n        long num = x[i];\n        bool isUnique =\
    \ true;\n        while (num > 0)\n        {\n            long digit = num % 10;\n\
    \            if (digit % 2 == 0)\n            {\n                isUnique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (isUnique)\n        {\n            result[count] = x[i];\n         \
    \   count++;\n        }\n    }\n    temp = new long[count];\n    for (int i =\
    \ 0; i < count; i++)\n    {\n        temp[i] = result[i];\n    }\n    return temp;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2y5xguet.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x42854d]

    ??:? void tmp2y5xguet.__unittest_L43_C1() [0x428066]

    ??:? void tmp2y5xguet.__modtest() [0x4282cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c607]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b49a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430725]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430bd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b471]

    ??:? runModuleUnitTests [0x42c3dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.to!string.length.filter!(a => a % 2 ==\
    \ 0).length == 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp95x8znp.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpp95x8znp.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp95x8znp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n            result ~=\
    \ i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprdfcgywz.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmprdfcgywz.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdfcgywz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i.to!string.countif!(a\
    \ => a.isEven))\n        {\n            res[count] = i;\n            count++;\n\
    \        }\n    }\n    return res[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp13w2_9sd.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13w2_9sd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 == 1))\n \
    \       {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2nd7839y.d(16): Error: no property `digits` for type `long`

    /tmp/tmp2nd7839y.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2nd7839y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        bool is_unique = true;\n        foreach(long\
    \ j; i.digits)\n        {\n            if(j % 2 == 0)\n            {\n       \
    \         is_unique = false;\n                break;\n            }\n        }\n\
    \        if(is_unique)\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgovzaxot.d(17): Error: no property `digits` for type `long`

    /tmp/tmpgovzaxot.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgovzaxot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(!isEven(i))\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7uim_3h6.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp7uim_3h6.d(16): Error: undefined identifier `isEven`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7uim_3h6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc253rtec.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc253rtec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if\
    \ (x[i] % 2 != 0)\n        {\n            result[count] = x[i];\n            count++;\n\
    \        }\n    }\n    result = result[0..count];\n    result.sort;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp030b7i1f.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp030b7i1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] even = [0,2,4,6,8];\n\
    \    int[] odd = [1,3,5,7,9];\n    int[] digits = [];\n    int[] result = [];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x1 = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb\
    \ = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n \
    \   int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt\
    \ = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n \
    \   int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int\
    \ ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg\
    \ = 0;\n    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n\
    \    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int\
    \ ppp = 0;\n    int qqq = 0;\n\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2uvelvvm.d(79): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2uvelvvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.to!string.length.filter!(a => a % 2 ==\
    \ 0).length == 0)\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp95x8znp.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpp95x8znp.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp95x8znp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result;\n    foreach(long\
    \ i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunafq49a.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunafq49a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool is_even = false;\n            foreach(char c; i.toString())\n        \
    \    {\n                if(c.to!int() % 2 == 0)\n                {\n         \
    \           is_even = true;\n                    break;\n                }\n \
    \           }\n            if(!is_even)\n            {\n                result\
    \ ~= i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7log4awk.d(16): Error: no property `toString` for type `long`

    /tmp/tmp7log4awk.d(23): Error: no property `toString` for type `long`

    /tmp/tmp7log4awk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7log4awk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto res = new long[];\n \
    \   foreach(i; x)\n    {\n        if(i.to!string.length.filter!(a => a % 2 ==\
    \ 0).empty)\n            res ~= i;\n    }\n    return res.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfpb4c_19.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpfpb4c_19.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpb4c_19.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] even = new int[10];\n\
    \    even[0] = 1;\n    even[2] = 1;\n    even[4] = 1;\n    even[6] = 1;\n    even[8]\
    \ = 1;\n    int[] odd = new int[10];\n    odd[1] = 1;\n    odd[3] = 1;\n    odd[5]\
    \ = 1;\n    odd[7] = 1;\n    odd[9] = 1;\n    int[] result = new int[x.length];\n\
    \    int count = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        long\
    \ num = x[i];\n        bool isEven = false;\n        while (num > 0)\n       \
    \ {\n            int digit = (int)(num % 10);\n            if (even[digit] ==\
    \ 1)\n            {\n                isEven = true;\n                break;\n\
    \            }\n            num /= 10;\n        }\n        if (!isEven)\n    \
    \    {\n            result[count] = (int)x[i];\n            count++;\n       \
    \ }\n    }\n    long[] res = new long[count];\n    for (int i = 0; i < count;\
    \ i++)\n    {\n        res[i] = result[i];\n    }\n    sort(res);\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_a3hcall.d(33): Error: C style cast illegal, use `cast(int)(num
    % 10)`

    /tmp/tmp_a3hcall.d(43): Error: C style cast illegal, use `cast(int)x[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_a3hcall.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int() % 2 == 0)\n                {\n          \
    \          isEven = true;\n                    break;\n                }\n   \
    \         }\n            if(!isEven)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6a7jjodk.d(16): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(23): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a7jjodk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 != 0)\n        {\n            count++;\n    \
    \    }\n    }\n    long[] result = new long[count];\n    int j = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result[j] = i;\n\
    \            j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmsrbcgh9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ad]

    ??:? void tmpmsrbcgh9.__unittest_L33_C1() [0x427fca]

    ??:? void tmpmsrbcgh9.__modtest() [0x428230]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c567]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430685]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430611]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3d1]

    ??:? runModuleUnitTests [0x42c33d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428970]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n      \
    \      result ~= i;\n    }\n    return result.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmnoi6kmb.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmpmnoi6kmb.d(16): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnoi6kmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    for (long i = 0; i < x.length; i++)\n    {\n        auto temp = x[i];\n \
    \       bool flag = true;\n        while (temp > 0)\n        {\n            if\
    \ (temp % 2 == 0)\n            {\n                flag = false;\n            \
    \    break;\n            }\n            temp /= 10;\n        }\n        if (flag)\n\
    \            result ~= x[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9jb11a7w.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9jb11a7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().indexOf(\"2\") == -1 &&\n\
    \           i.toString().indexOf(\"4\") == -1 &&\n           i.toString().indexOf(\"\
    6\") == -1 &&\n           i.toString().indexOf(\"8\") == -1)\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldrwqouh.d(16): Error: no property `toString` for type `long`

    /tmp/tmpldrwqouh.d(17): Error: no property `toString` for type `long`

    /tmp/tmpldrwqouh.d(18): Error: no property `toString` for type `long`

    /tmp/tmpldrwqouh.d(19): Error: no property `toString` for type `long`

    /tmp/tmpldrwqouh.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldrwqouh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long num; x)\n    {\n        if(num % 2 != 0)\n\
    \        {\n            result[count] = num;\n            count++;\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz07e3kb5.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpz07e3kb5.__unittest_L25_C1() [0x427f86]

    ??:? void tmpz07e3kb5.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            res[count] = i;\n            count++;\n        }\n    }\n\
    \    res = res[0..count];\n    sort(res);\n    return res;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrq_7yia.d(24): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrq_7yia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    // your code here\n    long[]\
    \ res = new long[x.length];\n    int count = 0;\n    foreach(long i; x)\n    {\n\
    \        if(i % 2 != 0)\n        {\n            res[count] = i;\n            count++;\n\
    \        }\n    }\n    return res[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3rvl2_pr.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmp3rvl2_pr.__unittest_L26_C1() [0x427f86]

    ??:? void tmp3rvl2_pr.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n        {\n          \
    \  result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqk9dep6q.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x42843d]

    ??:? void tmpqk9dep6q.__unittest_L23_C1() [0x427f5a]

    ??:? void tmpqk9dep6q.__modtest() [0x4281c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce6f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd02]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43084d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcd9]

    ??:? runModuleUnitTests [0x42cc45]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42888c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n    \
    \        result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc253rtec.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc253rtec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto evenDigits = [](long\
    \ n) {\n        while (n > 0) {\n            if (n % 2 == 0) {\n             \
    \   return true;\n            }\n            n /= 10;\n        }\n        return\
    \ false;\n    };\n    auto result = x.filter!(n => !evenDigits(n)).array;\n  \
    \  result.sort;\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_7iji20.d(13): Error: found `n` when expecting `.` following long

    /tmp/tmpv_7iji20.d(13): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpv_7iji20.d(13): Error: found `{` when expecting `,`

    /tmp/tmpv_7iji20.d(14): Error: expression expected, not `while`

    /tmp/tmpv_7iji20.d(14): Error: found `{` when expecting `,`

    /tmp/tmpv_7iji20.d(15): Error: expression expected, not `if`

    /tmp/tmpv_7iji20.d(15): Error: found `{` when expecting `,`

    /tmp/tmpv_7iji20.d(16): Error: expression expected, not `return`

    /tmp/tmpv_7iji20.d(16): Error: found `true` when expecting `,`

    /tmp/tmpv_7iji20.d(16): Error: expression expected, not `;`

    /tmp/tmpv_7iji20.d(17): Error: found `}` when expecting `,`

    /tmp/tmpv_7iji20.d(18): Error: found `;` when expecting `,`

    /tmp/tmpv_7iji20.d(19): Error: expression expected, not `}`

    /tmp/tmpv_7iji20.d(20): Error: found `return` when expecting `,`

    /tmp/tmpv_7iji20.d(20): Error: found `;` when expecting `,`

    /tmp/tmpv_7iji20.d(21): Error: expression expected, not `}`

    /tmp/t'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        bool flag = true;\n\
    \        while(i > 0)\n        {\n            if((i % 10) % 2 == 0)\n        \
    \    {\n                flag = false;\n                break;\n            }\n\
    \            i /= 10;\n        }\n        if(flag)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n    }\n    result = result[0..count];\n\
    \    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwrlnx152.d(34): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwrlnx152.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        auto isEven = false;\n        auto temp = i;\n\
    \        while(temp != 0)\n        {\n            if((temp % 10) % 2 == 0)\n \
    \           {\n                isEven = true;\n                break;\n      \
    \      }\n            temp /= 10;\n        }\n        if(!isEven)\n          \
    \  result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1p8ka0x.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1p8ka0x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    // Write your code here\n\
    \    long[] result = new long[x.length];\n    int count = 0;\n    for(int i =\
    \ 0; i < x.length; i++)\n    {\n        long temp = x[i];\n        while(temp\
    \ > 0)\n        {\n            if(temp % 2 == 0)\n            {\n            \
    \    break;\n            }\n            temp /= 10;\n        }\n        if(temp\
    \ == 0)\n        {\n            result[count] = x[i];\n            count++;\n\
    \        }\n    }\n    long[] finalResult = new long[count];\n    for(int i =\
    \ 0; i < count; i++)\n    {\n        finalResult[i] = result[i];\n    }\n    sort(finalResult);\n\
    \    return finalResult;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg7471dxh.d(38): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7471dxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    // your code here\n    long[]\
    \ result = [];\n    foreach(long n; x)\n    {\n        if(!hasEvenDigit(n))\n\
    \            result ~= n;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpebx37a10.d(17): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebx37a10.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result[count] = i;\n            count++;\n   \
    \     }\n        else\n        {\n            bool isEven = false;\n         \
    \   foreach(char c; i.toString())\n            {\n                if(c.to!int()\
    \ % 2 == 0)\n                {\n                    isEven = true;\n         \
    \           break;\n                }\n            }\n            if(!isEven)\n\
    \            {\n                result[count] = i;\n                count++;\n\
    \            }\n        }\n    }\n    return result[0..count].sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_pz4le3t.d(17): Error: no property `toString` for type `long`

    /tmp/tmp_pz4le3t.d(25): Error: no property `toString` for type `long`

    /tmp/tmp_pz4le3t.d(40): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_pz4le3t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(num; x)\n    {\n        if(num.to!string.length.all!(a\
    \ => a.to!int % 2 != 0))\n        {\n            result[count] = num;\n      \
    \      count++;\n        }\n    }\n    return result[0..count];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph_vsm4vr.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_vsm4vr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n        {\n    \
    \        res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0ekro6p.d(16): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0ekro6p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    int[] evens = [0,2,4,6,8];\n\
    \    int[] odds = [1,3,5,7,9];\n    long[] result = [];\n    foreach(long i; x)\n\
    \    {\n        bool even = false;\n        foreach(int j; evens)\n        {\n\
    \            if(i.toString().contains(j.toString()))\n            {\n        \
    \        even = true;\n                break;\n            }\n        }\n    \
    \    if(!even)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd6o7cnrm.d(21): Error: no property `toString` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6o7cnrm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result\
    \ ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbe3lptd.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbe3lptd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto res = new long[];\n \
    \   foreach(i; x)\n    {\n        if(i.to!string.length.all!(a => a % 2 == 1))\n\
    \            res ~= i;\n    }\n    return res.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9zz1e68a.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp9zz1e68a.d(16): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zz1e68a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i < 10)\n        {\n            result\
    \ ~= i;\n        }\n        else\n        {\n            bool isEven = false;\n\
    \            while(i > 0)\n            {\n                if(i % 2 == 0)\n   \
    \             {\n                    isEven = true;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(!isEven)\n\
    \            {\n                result ~= i;\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7kkap2nw.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ad]

    ??:? void tmp7kkap2nw.__unittest_L40_C1() [0x427fca]

    ??:? void tmp7kkap2nw.__modtest() [0x428230]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cedf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd49]

    ??:? runModuleUnitTests [0x42ccb5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.toString().length == 1)\n       \
    \ {\n            result ~= i;\n        }\n        else\n        {\n          \
    \  bool isEven = false;\n            foreach(char c; i.toString())\n         \
    \   {\n                if(c.to!int() % 2 == 0)\n                {\n          \
    \          isEven = true;\n                    break;\n                }\n   \
    \         }\n            if(!isEven)\n            {\n                result ~=\
    \ i;\n            }\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6a7jjodk.d(16): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(23): Error: no property `toString` for type `long`

    /tmp/tmp6a7jjodk.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a7jjodk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n \
    \       {\n            result ~= i;\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpps600zqo.d(16): Error: no property `digits` for type `long`

    /tmp/tmpps600zqo.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpps600zqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163917
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[0];\n\
    \    foreach(long i; x)\n    {\n        if(i.digits.all!(a => a % 2 != 0))\n \
    \       {\n            res ~= i;\n        }\n    }\n    return res.sort;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo51h6sns.d(16): Error: no property `digits` for type `long`

    /tmp/tmpo51h6sns.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo51h6sns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    return x.filter!(a => a.toString().chars.all!(b\
    \ => b.toString().toLong() % 2 == 1)).sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk087a7n6.d(13): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk087a7n6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result[count] = i;\n            count++;\n   \
    \     }\n        else\n        {\n            bool isEven = false;\n         \
    \   foreach(char c; i.toString())\n            {\n                if(c.to!int()\
    \ % 2 == 0)\n                {\n                    isEven = true;\n         \
    \           break;\n                }\n            }\n            if(!isEven)\n\
    \            {\n                result[count] = i;\n                count++;\n\
    \            }\n        }\n    }\n    return result[0..count].sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_pz4le3t.d(17): Error: no property `toString` for type `long`

    /tmp/tmp_pz4le3t.d(25): Error: no property `toString` for type `long`

    /tmp/tmp_pz4le3t.d(40): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_pz4le3t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long num; x)\n    {\n        if(!hasEvenDigit(num))\n        {\n\
    \            result ~= num;\n        }\n    }\n    return result.sort();\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpljndcnwq.d(16): Error: undefined identifier `hasEvenDigit`

    /tmp/tmpljndcnwq.d(21): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpljndcnwq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result[count] = i;\n            count++;\n        }\n\
    \    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8becdby.d(17): Error: undefined identifier `hasEvenDigit`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8becdby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] res = new long[x.length];\n\
    \    int j = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i]\
    \ % 2 != 0)\n        {\n            res[j] = x[i];\n            j++;\n       \
    \ }\n    }\n    return res[0..j];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptb9mtxvm.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42848d]

    ??:? void tmptb9mtxvm.__unittest_L25_C1() [0x427fa6]

    ??:? void tmptb9mtxvm.__modtest() [0x42820c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c547]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430665]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b14]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305f1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b1]

    ??:? runModuleUnitTests [0x42c31d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428950]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[0];\n\
    \    foreach(long i; x)\n    {\n        bool isEven = false;\n        foreach(char\
    \ c; to!string(i))\n        {\n            if(c == '0' || c == '2' || c == '4'\
    \ || c == '6' || c == '8')\n            {\n                isEven = true;\n  \
    \              break;\n            }\n        }\n        if(!isEven)\n       \
    \ {\n            result ~= i;\n        }\n    }\n    return result.sort;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptblb1ck8.d(17): Error: template instance `to!string` template `to`
    is not defined

    /tmp/tmptblb1ck8.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptblb1ck8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    long[] result = new long[x.length];\n\
    \    int count = 0;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n \
    \       {\n            result[count] = i;\n            count++;\n        }\n \
    \   }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkg0g8__0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42846d]

    ??:? void tmpkg0g8__0.__unittest_L25_C1() [0x427f86]

    ??:? void tmpkg0g8__0.__modtest() [0x4281ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c527]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430645]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430af4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b391]

    ??:? runModuleUnitTests [0x42c2fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    auto result = new long[];\n\
    \    foreach(num; x)\n    {\n        if(num < 10)\n        {\n            result\
    \ ~= num;\n        }\n        else\n        {\n            auto digits = new long[];\n\
    \            while(num > 0)\n            {\n                digits ~= num % 10;\n\
    \                num /= 10;\n            }\n            if(all!(d => d % 2 !=\
    \ 0)(digits))\n            {\n                result ~= num;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1371k4f5.d(13): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    /tmp/tmp1371k4f5.d(22): Error: new can only create structs, dynamic arrays or
    class objects, not `long[]`''s

    /tmp/tmp1371k4f5.d(28): Error: template instance `all!((d) => d % 2 != 0)` template
    `all` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1371k4f5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.math;\n/*\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any even digit.\n\n    Note: Returned\
    \ list should be sorted in increasing order.\n    \n    For example:\n       \
    \     \n*/\nlong[] unique_digits(long[] x) \n{\n    return x.filter!(a => a.toString().all!(b\
    \ => b % 2 != 0)).sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjgvy0spe.d(13): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgvy0spe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
