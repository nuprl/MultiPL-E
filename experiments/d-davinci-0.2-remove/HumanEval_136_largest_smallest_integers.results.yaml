language: d
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0) \n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp407ybo9h.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp407ybo9h.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp407ybo9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst) \n    {\n    \
    \    if(i < 0) \n        {\n            if(largestNegative.isNull || i > largestNegative.get)\
    \ \n            {\n                largestNegative = i;\n            }\n     \
    \   }\n        else if(i > 0) \n        {\n            if(smallestPositive.isNull\
    \ || i < smallestPositive.get) \n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null)\n            {\n        \
    \        largest_negative = num;\n            }\n            else\n          \
    \  {\n                largest_negative = max(largest_negative, num);\n       \
    \     }\n        }\n        else\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = num;\n        \
    \    }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ num);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphwyyhogt.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphwyyhogt.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphwyyhogt.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmphwyyhogt.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmphwyyhogt.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmphwyyhogt.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphwyyhogt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_neg is null || num > largest_neg)\n            {\n       \
    \         largest_neg = num;\n            }\n        }\n        else if(num >\
    \ 0)\n        {\n            if(smallest_pos is null || num < smallest_pos)\n\
    \            {\n                smallest_pos = num;\n            }\n        }\n\
    \    }\n    return tuple(largest_neg, smallest_pos);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps6p82kyb.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmps6p82kyb.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmps6p82kyb.d(21): Error: incompatible types for `(largest_neg) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmps6p82kyb.d(28): Error: incompatible types for `(smallest_pos) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6p82kyb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst) \n    {\n        if(elem < 0) \n        {\n\
    \            if(largestNegative.isNull) \n            {\n                largestNegative\
    \ = elem;\n            } \n            else \n            {\n                largestNegative\
    \ = max(largestNegative, elem);\n            }\n        } \n        else if(elem\
    \ > 0) \n        {\n            if(smallestPositive.isNull) \n            {\n\
    \                smallestPositive = elem;\n            } \n            else \n\
    \            {\n                smallestPositive = min(smallestPositive, elem);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4fprabxe.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp4fprabxe.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp4fprabxe.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp4fprabxe.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4fprabxe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbhh5m39.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpxbhh5m39.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbhh5m39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull || i > largest_negative.get)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp014vtb5w.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp014vtb5w.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp014vtb5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else\n        {\n            if(smallest_positive is null || i <\
    \ smallest_positive)\n            {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx6hvhsf7.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpx6hvhsf7.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6hvhsf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n \
    \       {\n            if(largest_negative is null || l > largest_negative)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else if(l > 0)\n        {\n            if(smallest_positive is null\
    \ || l < smallest_positive)\n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpusp8sq7r.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpusp8sq7r.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpusp8sq7r.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpusp8sq7r.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusp8sq7r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_pos = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(largest_neg.isNull || i > largest_neg.get)\n\
    \            {\n                largest_neg = i;\n            }\n        }\n \
    \       else\n        {\n            if(smallest_pos.isNull || i < smallest_pos.get)\n\
    \            {\n                smallest_pos = i;\n            }\n        }\n\
    \    }\n    return tuple(largest_neg, smallest_pos);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeydy_0b6.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmpeydy_0b6.__unittest_L36_C1() [0x441fb6]

    ??:? void tmpeydy_0b6.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\n\
    \        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvn9focim.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpvn9focim.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpvn9focim.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpvn9focim.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvn9focim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(i; lst) \n    {\n        if(i\
    \ < 0) \n        {\n            if(largest.isNull) \n            {\n         \
    \       largest = i;\n            }\n            else \n            {\n      \
    \          largest = max(largest, i);\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest.isNull) \n            {\n   \
    \             smallest = i;\n            }\n            else \n            {\n\
    \                smallest = min(smallest, i);\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi16c00ge.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpi16c00ge.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi16c00ge.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largestNegative is null || num > largestNegative) \n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0) \n        {\n            if(smallestPositive is null || num\
    \ < smallestPositive) \n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4_czolp.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa4_czolp.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa4_czolp.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpa4_czolp.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4_czolp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(l; lst) \n    {\n        if(l < 0) \n\
    \        {\n            if(largest_negative is null || l > largest_negative) \n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else \n        {\n            if(smallest_positive is null || l <\
    \ smallest_positive) \n            {\n                smallest_positive = l;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5j216ve0.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp5j216ve0.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp5j216ve0.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp5j216ve0.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j216ve0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_neg is null || i > largest_neg)\n            {\n             \
    \   largest_neg = i;\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(smallest_pos is null || i < smallest_pos)\n            {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_neg, smallest_pos);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0gncgsf5.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0gncgsf5.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0gncgsf5.d(21): Error: incompatible types for `(largest_neg) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp0gncgsf5.d(28): Error: incompatible types for `(smallest_pos) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0gncgsf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbhh5m39.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpxbhh5m39.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbhh5m39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull)\n            {\n          \
    \      largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \      else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmenr9aw6.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmenr9aw6.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmenr9aw6.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpmenr9aw6.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmenr9aw6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbhh5m39.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpxbhh5m39.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbhh5m39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i <\
    \ 0)\n        {\n            if(largest.isNull || i > largest.get)\n         \
    \   {\n                largest = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallest.isNull || i < smallest.get)\n            {\n\
    \                smallest = i;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnj7efc20.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmpnj7efc20.__unittest_L36_C1() [0x441fb6]

    ??:? void tmpnj7efc20.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) a = null;\n    Nullable!(long) b = null;\n   \
    \ foreach(e; lst)\n    {\n        if(e < 0)\n        {\n            if(a is null\
    \ || e > a)\n                a = e;\n        }\n        else\n        {\n    \
    \        if(b is null || e < b)\n                b = e;\n        }\n    }\n  \
    \  return tuple(a, b);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphwtkkyfq.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphwtkkyfq.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphwtkkyfq.d(21): Error: incompatible types for `(a) is (null)`: `Nullable!long`
    and `typeof(null)`

    /tmp/tmphwtkkyfq.d(26): Error: incompatible types for `(b) is (null)`: `Nullable!long`
    and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphwtkkyfq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest is null || i > largest) \n            {\n                largest\
    \ = i;\n            }\n        }\n        else if(i > 0) \n        {\n       \
    \     if(smallest is null || i < smallest) \n            {\n                smallest\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest, smallest);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsdxyle76.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpsdxyle76.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpsdxyle76.d(21): Error: incompatible types for `(largest) is (null)`: `Nullable!long`
    and `typeof(null)`

    /tmp/tmpsdxyle76.d(28): Error: incompatible types for `(smallest) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsdxyle76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n \
    \       {\n            if(largest_negative.isNull || l > largest_negative.get)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else if(l > 0)\n        {\n            if(smallest_positive.isNull\
    \ || l < smallest_positive.get)\n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd1o380v.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpbd1o380v.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd1o380v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull || i > largest_negative.get)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp014vtb5w.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp014vtb5w.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp014vtb5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative.isNull || num > largestNegative.get)\n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else\n        {\n            if(smallestPositive.isNull || num < smallestPositive.get)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8f4ji5o.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpw8f4ji5o.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8f4ji5o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164244
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largestNegative is null || elem > largestNegative)\n           \
    \ {\n                largestNegative = elem;\n            }\n        }\n     \
    \   else if(elem > 0)\n        {\n            if(smallestPositive is null || elem\
    \ < smallestPositive)\n            {\n                smallestPositive = elem;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9awd8p3u.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp9awd8p3u.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp9awd8p3u.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp9awd8p3u.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9awd8p3u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(l; lst) \n    {\n        if(l < 0) \n\
    \        {\n            if(largest_negative is null || l > largest_negative) \n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else \n        {\n            if(smallest_positive is null || l <\
    \ smallest_positive) \n            {\n                smallest_positive = l;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5j216ve0.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp5j216ve0.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp5j216ve0.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp5j216ve0.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j216ve0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || l < smallestPositive)\n  \
    \          {\n                smallestPositive = l;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n{\n\
    \    alias candidate = largest_smallest_integers;\n\n{\n        auto result =\
    \ candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n  \
    \      assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87al83xs.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp87al83xs.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp87al83xs.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp87al83xs.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87al83xs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null)\n            {\n        \
    \        largest_negative = num;\n            }\n            else\n          \
    \  {\n                largest_negative = max(largest_negative, num);\n       \
    \     }\n        }\n        else if(num > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = num;\n        \
    \    }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ num);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzuc9wuts.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpzuc9wuts.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpzuc9wuts.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpzuc9wuts.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpzuc9wuts.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmpzuc9wuts.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzuc9wuts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n{\n\
    \    alias candidate = largest_smallest_integers;\n\n{\n        auto result =\
    \ candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n  \
    \      assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23rxnh8g.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp23rxnh8g.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23rxnh8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0) \n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp407ybo9h.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp407ybo9h.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp407ybo9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest\
    \ = null;\n    foreach(item; lst) \n    {\n        if(item < 0) \n        {\n\
    \            if(largest is null || item > largest) \n            {\n         \
    \       largest = item;\n            }\n        }\n        else if(item > 0) \n\
    \        {\n            if(smallest is null || item < smallest) \n           \
    \ {\n                smallest = item;\n            }\n        }\n    }\n    return\
    \ tuple(largest, smallest);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87do2u5k.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp87do2u5k.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp87do2u5k.d(21): Error: incompatible types for `(largest) is (null)`: `Nullable!long`
    and `typeof(null)`

    /tmp/tmp87do2u5k.d(28): Error: incompatible types for `(smallest) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87do2u5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst) \n    {\n        if(l < 0) \n        {\n      \
    \      if(largestNegative is null || l > largestNegative) \n            {\n  \
    \              largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0) \n        {\n            if(smallestPositive is null || l < smallestPositive)\
    \ \n            {\n                smallestPositive = l;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa99s7td8.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa99s7td8.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa99s7td8.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpa99s7td8.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa99s7td8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpur0sg68k.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpur0sg68k.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpur0sg68k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else\n        {\n            if(smallest_positive is null || i <\
    \ smallest_positive)\n            {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx6hvhsf7.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpx6hvhsf7.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6hvhsf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative.isNull || num > largest_negative.get)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else\n        {\n            if(smallest_positive.isNull || num\
    \ < smallest_positive.get)\n            {\n                smallest_positive =\
    \ num;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37f582iz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp37f582iz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37f582iz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(l; lst) \n    {\n    \
    \    if(l < 0) \n        {\n            if(!largestNegative.isNull) \n       \
    \     {\n                if(l > largestNegative.get) \n                {\n   \
    \                 largestNegative.set(l);\n                }\n            }\n\
    \            else \n            {\n                largestNegative.set(l);\n \
    \           }\n        }\n        else if(l > 0) \n        {\n            if(!smallestPositive.isNull)\
    \ \n            {\n                if(l < smallestPositive.get) \n           \
    \     {\n                    smallestPositive.set(l);\n                }\n   \
    \         }\n            else \n            {\n                smallestPositive.set(l);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7c2c4hkj.d(25): Error: no property `set` for type `Nullable!long`,
    did you mean `std.typecons.Nullable!long.Nullable.get`?

    /tmp/tmp7c2c4hkj.d(30): Error: no property `set` for type `Nullable!long`, did
    you mean `std.typecons.Nullable!long.Nullable.get`?

    /tmp/tmp7c2c4hkj.d(39): Error: no property `set` for type `Nullable!long`, did
    you mean `std.typecons.Nullable!long.Nullable.get`?

    /tmp/tmp7c2c4hkj.d(44): Error: no property `set` for type `Nullable!long`, did
    you mean `std.typecons.Nullable!long.Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c2c4hkj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null || num > largest_negative)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else if(num > 0)\n        {\n            if(smallest_positive is\
    \ null || num < smallest_positive)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv947hggz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpv947hggz.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv947hggz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst) \n    {\n        if(num < 0)\
    \ \n        {\n            if(largest_negative is null || num > largest_negative)\
    \ \n            {\n                largest_negative = num;\n            }\n  \
    \      } \n        else if(num > 0) \n        {\n            if(smallest_positive\
    \ is null || num < smallest_positive) \n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnatmy76u.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpnatmy76u.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpnatmy76u.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpnatmy76u.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnatmy76u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0) \n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp407ybo9h.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp407ybo9h.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp407ybo9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null || num > largest_negative)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else if(num > 0)\n        {\n            if(smallest_positive is\
    \ null || num < smallest_positive)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv947hggz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpv947hggz.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv947hggz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else\n        {\n            if(smallestPositive.isNull || num <\
    \ smallestPositive.get)\n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnh2e35pi.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmpnh2e35pi.__unittest_L36_C1() [0x441fb6]

    ??:? void tmpnh2e35pi.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n   \
    \ Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(l; lst)\n\
    \    {\n        if(l < 0)\n        {\n            if(largest_negative.isNull ||\
    \ l > largest_negative.get)\n            {\n                largest_negative =\
    \ l;\n            }\n        }\n        else\n        {\n            if(smallest_positive.isNull\
    \ || l < smallest_positive.get)\n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb18gojwz.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmpb18gojwz.__unittest_L36_C1() [0x441fb6]

    ??:? void tmpb18gojwz.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__1lvc7q.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp__1lvc7q.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__1lvc7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    auto a = Nullable!(long)();\n    auto b = Nullable!(long)();\n\
    \    foreach(e; lst)\n    {\n        if(e < 0)\n        {\n            if(a.isNull\
    \ || e > a.get)\n                a = e;\n        }\n        else\n        {\n\
    \            if(b.isNull || e < b.get)\n                b = e;\n        }\n  \
    \  }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpei49a97z.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmpei49a97z.__unittest_L32_C1() [0x441fb6]

    ??:? void tmpei49a97z.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative;\n    Nullable!(long) smallestPositive;\n\
    \    foreach(item; lst)\n    {\n        if(item > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = item;\n            }\n    \
    \        else\n            {\n                smallestPositive = min(smallestPositive,\
    \ item);\n            }\n        }\n        else if(item < 0)\n        {\n   \
    \         if(largestNegative.isNull)\n            {\n                largestNegative\
    \ = item;\n            }\n            else\n            {\n                largestNegative\
    \ = max(largestNegative, item);\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqovz_nvw.d(27): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpqovz_nvw.d(38): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqovz_nvw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative_integer = null;\n    Nullable!(long)\
    \ smallest_positive_integer = null;\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(largest_negative_integer.isNull || i > largest_negative_integer.get)\n\
    \            {\n                largest_negative_integer = i;\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive_integer.isNull\
    \ || i < smallest_positive_integer.get)\n            {\n                smallest_positive_integer\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative_integer,\
    \ smallest_positive_integer);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvrb3i5nw.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpvrb3i5nw.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvrb3i5nw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else \n        {\n            if(smallest_positive is null || i <\
    \ smallest_positive) \n            {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ud3d0y9.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp_ud3d0y9.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp_ud3d0y9.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp_ud3d0y9.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ud3d0y9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164246
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n   \
    \ Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull ||\
    \ i > largest_negative.get)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0)\n        {\n          \
    \  if(smallest_positive.isNull || i < smallest_positive.get)\n            {\n\
    \                smallest_positive = i;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else\n        {\n            if(smallest_positive is null || i <\
    \ smallest_positive)\n            {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx6hvhsf7.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpx6hvhsf7.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6hvhsf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbhh5m39.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpxbhh5m39.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbhh5m39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvklcsv6.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpbvklcsv6.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvklcsv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164246
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(n; lst)\n    {\n        if(n < 0)\n \
    \       {\n            if(largest_negative is null || n > largest_negative)\n\
    \            {\n                largest_negative = n;\n            }\n       \
    \ }\n        else if(n > 0)\n        {\n            if(smallest_positive is null\
    \ || n < smallest_positive)\n            {\n                smallest_positive\
    \ = n;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvyomxitl.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpvyomxitl.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpvyomxitl.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpvyomxitl.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvyomxitl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else\n        {\n            if(smallest_positive is null || i <\
    \ smallest_positive)\n            {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx6hvhsf7.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpx6hvhsf7.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6hvhsf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(l; lst)\n    {\n     \
    \   if(l < 0)\n        {\n            if(largestNegative.isNull || largestNegative.get\
    \ > l)\n            {\n                largestNegative = l;\n            }\n \
    \       }\n        else if(l > 0)\n        {\n            if(smallestPositive.isNull\
    \ || smallestPositive.get < l)\n            {\n                smallestPositive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpltd3sx6c.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmpltd3sx6c.__unittest_L36_C1() [0x441f11]

    ??:? void tmpltd3sx6c.__modtest() [0x454488]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_pos = Nullable!(long).init;\n    foreach(elem; lst)\n    {\n      \
    \  if(elem < 0)\n        {\n            if(largest_neg.isNull || elem > largest_neg.get)\n\
    \            {\n                largest_neg = elem;\n            }\n        }\n\
    \        else if(elem > 0)\n        {\n            if(smallest_pos.isNull || elem\
    \ < smallest_pos.get)\n            {\n                smallest_pos = elem;\n \
    \           }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst) \n    {\n        if(num < 0)\
    \ \n        {\n            if(largest_negative is null || num > largest_negative)\
    \ \n            {\n                largest_negative = num;\n            }\n  \
    \      }\n        else if(num > 0) \n        {\n            if(smallest_positive\
    \ is null || num < smallest_positive) \n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphvu5tbst.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphvu5tbst.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphvu5tbst.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmphvu5tbst.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphvu5tbst.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbhh5m39.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpxbhh5m39.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbhh5m39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__1lvc7q.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp__1lvc7q.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__1lvc7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n   \
    \ Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull ||\
    \ i > largest_negative.get)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0ruvtebr.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmp0ruvtebr.__unittest_L36_C1() [0x441fb6]

    ??:? void tmp0ruvtebr.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_neg is null || i > largest_neg) \n            {\n          \
    \      largest_neg = i;\n            }\n        }\n        else if(i > 0) \n \
    \       {\n            if(smallest_pos is null || i < smallest_pos) \n       \
    \     {\n                smallest_pos = i;\n            }\n        }\n    }\n\
    \    return tuple(largest_neg, smallest_pos);\n}\nunittest\n{\n    alias candidate\
    \ = largest_smallest_integers;\n\n{\n        auto result = candidate([2L, 4L,\
    \ 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjhpjeqs2.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpjhpjeqs2.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpjhpjeqs2.d(21): Error: incompatible types for `(largest_neg) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpjhpjeqs2.d(28): Error: incompatible types for `(smallest_pos) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhpjeqs2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num > 0)\n        {\n            if(!smallestPositive.isNull)\n     \
    \       {\n                if(num < smallestPositive.get)\n                {\n\
    \                    smallestPositive.set(num);\n                }\n         \
    \   }\n            else\n            {\n                smallestPositive.set(num);\n\
    \            }\n        }\n        else if(num < 0)\n        {\n            if(!largestNegative.isNull)\n\
    \            {\n                if(num > largestNegative.get)\n              \
    \  {\n                    largestNegative.set(num);\n                }\n     \
    \       }\n            else\n            {\n                largestNegative.set(num);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8pknvrx.d(25): Error: no property `set` for type `Nullable!long`,
    did you mean `std.typecons.Nullable!long.Nullable.get`?

    /tmp/tmps8pknvrx.d(30): Error: no property `set` for type `Nullable!long`, did
    you mean `std.typecons.Nullable!long.Nullable.get`?

    /tmp/tmps8pknvrx.d(39): Error: no property `set` for type `Nullable!long`, did
    you mean `std.typecons.Nullable!long.Nullable.get`?

    /tmp/tmps8pknvrx.d(44): Error: no property `set` for type `Nullable!long`, did
    you mean `std.typecons.Nullable!long.Nullable.get`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8pknvrx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null || num > largest_negative)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else if(num > 0)\n        {\n            if(smallest_positive is\
    \ null || num < smallest_positive)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv947hggz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpv947hggz.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv947hggz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    long largestNegative = long.min;\n    long smallestPositive =\
    \ long.max;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n      \
    \      largestNegative = max(largestNegative, i);\n        }\n        else\n \
    \       {\n            smallestPositive = min(smallestPositive, i);\n        }\n\
    \    }\n    return tuple(largestNegative == long.min ? null : largestNegative,\
    \ smallestPositive == long.max ? null : smallestPositive);\n}\nunittest\n{\n \
    \   alias candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv52cywpu.d(21): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpv52cywpu.d(25): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpv52cywpu.d(28): Error: incompatible types for `(null) : (largestNegative)`:
    `typeof(null)` and `long`

    /tmp/tmpv52cywpu.d(28): Error: incompatible types for `(null) : (smallestPositive)`:
    `typeof(null)` and `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv52cywpu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i > 0)\n        {\n        \
    \    if(smallest.isNull)\n            {\n                smallest = i;\n     \
    \       }\n            else\n            {\n                smallest = min(smallest,\
    \ i);\n            }\n        }\n        else if(i < 0)\n        {\n         \
    \   if(largest.isNull)\n            {\n                largest = i;\n        \
    \    }\n            else\n            {\n                largest = max(largest,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest, smallest);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbv98ds4r.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpbv98ds4r.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpbv98ds4r.d(27): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpbv98ds4r.d(38): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbv98ds4r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i <\
    \ 0)\n        {\n            if(largest.isNull || largest.get > i)\n         \
    \       largest = i;\n        }\n        else\n        {\n            if(smallest.isNull\
    \ || smallest.get < i)\n                smallest = i;\n        }\n    }\n    return\
    \ tuple(largest, smallest);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3cxo6n4r.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmp3cxo6n4r.__unittest_L32_C1() [0x441f0d]

    ??:? void tmp3cxo6n4r.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0) \n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp407ybo9h.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp407ybo9h.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp407ybo9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ } \n        else if(i > 0) \n        {\n            if(smallest_positive is\
    \ null || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ofaz8f8.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp1ofaz8f8.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp1ofaz8f8.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp1ofaz8f8.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ofaz8f8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative.isNull || num > largestNegative.get)\n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0)\n        {\n            if(smallestPositive.isNull || num\
    \ < smallestPositive.get)\n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgfgap2a9.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpgfgap2a9.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfgap2a9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull || largest_negative.get > i)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull\
    \ || smallest_positive.get < i)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpasyrh6d2.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpasyrh6d2.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpasyrh6d2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__1lvc7q.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp__1lvc7q.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__1lvc7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_neg is null || num > largest_neg)\n            {\n       \
    \         largest_neg = num;\n            }\n        }\n        else\n       \
    \ {\n            if(smallest_pos is null || num < smallest_pos)\n            {\n\
    \                smallest_pos = num;\n            }\n        }\n    }\n    return\
    \ tuple(largest_neg, smallest_pos);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9udvju6d.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp9udvju6d.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp9udvju6d.d(21): Error: incompatible types for `(largest_neg) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp9udvju6d.d(28): Error: incompatible types for `(smallest_pos) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9udvju6d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) min = null;\n    Nullable!(long) max = null;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(max\
    \ is null || i > max)\n                max = i;\n        }\n        else if(i\
    \ > 0)\n        {\n            if(min is null || i < min)\n                min\
    \ = i;\n        }\n    }\n    return tuple(max, min);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb15uy0j5.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpb15uy0j5.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpb15uy0j5.d(21): Error: incompatible types for `(max) is (null)`: `Nullable!long`
    and `typeof(null)`

    /tmp/tmpb15uy0j5.d(26): Error: incompatible types for `(min) is (null)`: `Nullable!long`
    and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb15uy0j5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ub9bsmp.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ub9bsmp.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ub9bsmp.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp0ub9bsmp.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ub9bsmp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n   \
    \ Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(num;\
    \ lst)\n    {\n        if(num < 0)\n        {\n            if(largest_negative.isNull\
    \ || num > largest_negative.get)\n            {\n                largest_negative\
    \ = num;\n            }\n        }\n        else if(num > 0)\n        {\n    \
    \        if(smallest_positive.isNull || num < smallest_positive.get)\n       \
    \     {\n                smallest_positive = num;\n            }\n        }\n\
    \    }\n    return tuple(largest_negative, smallest_positive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164250
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(item; lst)\n    {\n        if(item <\
    \ 0)\n        {\n            if(largest_negative is null || item > largest_negative)\n\
    \            {\n                largest_negative = item;\n            }\n    \
    \    }\n        else if(item > 0)\n        {\n            if(smallest_positive\
    \ is null || item < smallest_positive)\n            {\n                smallest_positive\
    \ = item;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi26ngtwy.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpi26ngtwy.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpi26ngtwy.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpi26ngtwy.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi26ngtwy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164248
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i <\
    \ 0)\n        {\n            if(largest.isNull)\n            {\n             \
    \   largest = i;\n            }\n            else\n            {\n           \
    \     largest = max(largest, i);\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest.isNull)\n            {\n          \
    \      smallest = i;\n            }\n            else\n            {\n       \
    \         smallest = min(smallest, i);\n            }\n        }\n    }\n    return\
    \ tuple(largest, smallest);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjx1hgo5k.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpjx1hgo5k.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjx1hgo5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164248
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__1lvc7q.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp__1lvc7q.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__1lvc7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative.isNull || num > largest_negative.get)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else if(num > 0)\n        {\n            if(smallest_positive.isNull\
    \ || num < smallest_positive.get)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb3xtzkix.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpb3xtzkix.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3xtzkix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst) \n    {\n        if(l < 0) \n        {\n      \
    \      if(largestNegative is null || l > largestNegative) \n            {\n  \
    \              largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0) \n        {\n            if(smallestPositive is null || l < smallestPositive)\
    \ \n            {\n                smallestPositive = l;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa99s7td8.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa99s7td8.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa99s7td8.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpa99s7td8.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa99s7td8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3um1d6uj.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmp3um1d6uj.__unittest_L36_C1() [0x441fb6]

    ??:? void tmp3um1d6uj.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164251
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largestNegative is null || elem > largestNegative)\n           \
    \ {\n                largestNegative = elem;\n            }\n        }\n     \
    \   else if(elem > 0)\n        {\n            if(smallestPositive is null || elem\
    \ < smallestPositive)\n            {\n                smallestPositive = elem;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9awd8p3u.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp9awd8p3u.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp9awd8p3u.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp9awd8p3u.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9awd8p3u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null)\n            {\n        \
    \        largest_negative = num;\n            }\n            else\n          \
    \  {\n                largest_negative = max(largest_negative, num);\n       \
    \     }\n        }\n        else if(num > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = num;\n        \
    \    }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ num);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzuc9wuts.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpzuc9wuts.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpzuc9wuts.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpzuc9wuts.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpzuc9wuts.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmpzuc9wuts.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzuc9wuts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largestNegative is null || num > largestNegative) \n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0) \n        {\n            if(smallestPositive is null || num\
    \ < smallestPositive) \n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4_czolp.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa4_czolp.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa4_czolp.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpa4_czolp.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4_czolp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull)\n            {\n          \
    \      largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else\n        {\n            if(smallest_positive.isNull)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \      else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7y83077p.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp7y83077p.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp7y83077p.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp7y83077p.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7y83077p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largestNegative is null || num > largestNegative) \n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0) \n        {\n            if(smallestPositive is null || num\
    \ < smallestPositive) \n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4_czolp.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa4_czolp.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpa4_czolp.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpa4_czolp.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4_czolp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n   \
    \ Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull ||\
    \ largest_negative.get > i)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else\n        {\n            if(smallest_positive.isNull\
    \ || smallest_positive.get < i)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpctip32ld.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmpctip32ld.__unittest_L36_C1() [0x441f0d]

    ??:? void tmpctip32ld.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164251
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n   \
    \ Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\
    \ \n    {\n        if(i < 0) \n        {\n            if(largest_negative.isNull\
    \ || i > largest_negative.get) \n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else \n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmvoz0e1o.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmpmvoz0e1o.__unittest_L36_C1() [0x441fb6]

    ??:? void tmpmvoz0e1o.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164251
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null || num > largest_negative)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else if(num > 0)\n        {\n            if(smallest_positive is\
    \ null || num < smallest_positive)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv947hggz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpv947hggz.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv947hggz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative.isNull) \n            {\n        \
    \        largest_negative = i;\n            }\n            else \n           \
    \ {\n                largest_negative = max(largest_negative, i);\n          \
    \  }\n        }\n        else if(i > 0) \n        {\n            if(smallest_positive.isNull)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \         else \n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyxpswnri.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpyxpswnri.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpyxpswnri.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpyxpswnri.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxpswnri.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3um1d6uj.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmp3um1d6uj.__unittest_L36_C1() [0x441fb6]

    ??:? void tmp3um1d6uj.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164251
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvklcsv6.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpbvklcsv6.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvklcsv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164246
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else \n        {\n            if(smallest_positive is null || i <\
    \ smallest_positive) \n            {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ud3d0y9.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp_ud3d0y9.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp_ud3d0y9.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp_ud3d0y9.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ud3d0y9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164246
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ub9bsmp.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ub9bsmp.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ub9bsmp.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp0ub9bsmp.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ub9bsmp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest is null || i > largest) \n            {\n                largest\
    \ = i;\n            }\n        }\n        else if(i > 0) \n        {\n       \
    \     if(smallest is null || i < smallest) \n            {\n                smallest\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest, smallest);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsdxyle76.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpsdxyle76.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpsdxyle76.d(21): Error: incompatible types for `(largest) is (null)`: `Nullable!long`
    and `typeof(null)`

    /tmp/tmpsdxyle76.d(28): Error: incompatible types for `(smallest) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsdxyle76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ } \n        else if(i > 0) \n        {\n            if(smallest_positive is\
    \ null || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ofaz8f8.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp1ofaz8f8.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp1ofaz8f8.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp1ofaz8f8.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ofaz8f8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0) \n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp407ybo9h.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp407ybo9h.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp407ybo9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null || num > largest_negative)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else\n        {\n            if(smallest_positive is null || num\
    \ < smallest_positive)\n            {\n                smallest_positive = num;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqi4t3o4.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpaqi4t3o4.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpaqi4t3o4.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpaqi4t3o4.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqi4t3o4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull)\n            {\n          \
    \      largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \      else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmenr9aw6.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmenr9aw6.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmenr9aw6.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpmenr9aw6.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmenr9aw6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(value; lst)\n    {\n        if(value < 0)\n        {\n\
    \            if(largestNegative.isNull || value > largestNegative.get)\n     \
    \       {\n                largestNegative = value;\n            }\n        }\n\
    \        else if(value > 0)\n        {\n            if(smallestPositive.isNull\
    \ || value < smallestPositive.get)\n            {\n                smallestPositive\
    \ = value;\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpochhuyhe.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpochhuyhe.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpochhuyhe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n   \
    \ Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \     else\n            {\n                largest_negative = max(largest_negative,\
    \ i);\n            }\n        }\n        else if(i > 0)\n        {\n         \
    \   if(smallest_positive.isNull)\n            {\n                smallest_positive\
    \ = i;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, i);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp854hv4au.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp854hv4au.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp854hv4au.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(n; lst) \n    {\n        if(n < 0) \n\
    \        {\n            if(largest_negative is null || n > largest_negative) \n\
    \            {\n                largest_negative = n;\n            }\n       \
    \ } \n        else if(n > 0) \n        {\n            if(smallest_positive is\
    \ null || n < smallest_positive) \n            {\n                smallest_positive\
    \ = n;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphu18sav3.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphu18sav3.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphu18sav3.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmphu18sav3.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphu18sav3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(n; lst)\n    {\n        if(n < 0)\n        {\n        \
    \    if(largestNegative is null || n > largestNegative)\n            {\n     \
    \           largestNegative = n;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || n < smallestPositive)\n  \
    \          {\n                smallestPositive = n;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n{\n\
    \    alias candidate = largest_smallest_integers;\n\n{\n        auto result =\
    \ candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n  \
    \      assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1svbejsl.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp1svbejsl.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp1svbejsl.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp1svbejsl.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1svbejsl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ub9bsmp.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ub9bsmp.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ub9bsmp.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp0ub9bsmp.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ub9bsmp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbhh5m39.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpxbhh5m39.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbhh5m39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n{\n\
    \    alias candidate = largest_smallest_integers;\n\n{\n        auto result =\
    \ candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n  \
    \      assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23rxnh8g.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp23rxnh8g.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23rxnh8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0) \n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp407ybo9h.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp407ybo9h.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp407ybo9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largestNegative is null || i > largestNegative) \n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0) \n        {\n            if(smallestPositive is null || i < smallestPositive)\
    \ \n            {\n                smallestPositive = i;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpywl1r8yu.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpywl1r8yu.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpywl1r8yu.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpywl1r8yu.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywl1r8yu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_neg is null || num > largest_neg)\n            {\n       \
    \         largest_neg = num;\n            }\n        }\n        else if(num >\
    \ 0)\n        {\n            if(smallest_pos is null || num < smallest_pos)\n\
    \            {\n                smallest_pos = num;\n            }\n        }\n\
    \    }\n    return tuple(largest_neg, smallest_pos);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps6p82kyb.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmps6p82kyb.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmps6p82kyb.d(21): Error: incompatible types for `(largest_neg) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmps6p82kyb.d(28): Error: incompatible types for `(smallest_pos) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6p82kyb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ub9bsmp.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ub9bsmp.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ub9bsmp.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp0ub9bsmp.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ub9bsmp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164247
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghzxhdo8.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpghzxhdo8.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpghzxhdo8.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpghzxhdo8.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghzxhdo8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghzxhdo8.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpghzxhdo8.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpghzxhdo8.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpghzxhdo8.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghzxhdo8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else\n        {\n            if(smallest_positive is null || i <\
    \ smallest_positive)\n            {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx6hvhsf7.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpx6hvhsf7.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpx6hvhsf7.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6hvhsf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n{\n\
    \    alias candidate = largest_smallest_integers;\n\n{\n        auto result =\
    \ candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n  \
    \      assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23rxnh8g.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp23rxnh8g.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23rxnh8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__1lvc7q.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp__1lvc7q.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__1lvc7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null)\n            {\n        \
    \        largest_negative = num;\n            }\n            else if(num > largest_negative)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else if(num > 0)\n        {\n            if(smallest_positive is\
    \ null)\n            {\n                smallest_positive = num;\n           \
    \ }\n            else if(num < smallest_positive)\n            {\n           \
    \     smallest_positive = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmhe0v1rm.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmhe0v1rm.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmhe0v1rm.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpmhe0v1rm.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhe0v1rm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(item; lst)\n    {\n        if(item <\
    \ 0)\n        {\n            if(largest_negative is null)\n            {\n   \
    \             largest_negative = item;\n            }\n            else\n    \
    \        {\n                largest_negative = max(largest_negative, item);\n\
    \            }\n        }\n        else if(item > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = item;\n       \
    \     }\n            else\n            {\n                smallest_positive =\
    \ min(smallest_positive, item);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_l4dci2c.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp_l4dci2c.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp_l4dci2c.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp_l4dci2c.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp_l4dci2c.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmp_l4dci2c.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_l4dci2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null || num > largest_negative)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else if(num > 0)\n        {\n            if(smallest_positive is\
    \ null || num < smallest_positive)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv947hggz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpv947hggz.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv947hggz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null || num > largest_negative)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else if(num > 0)\n        {\n            if(smallest_positive is\
    \ null || num < smallest_positive)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv947hggz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpv947hggz.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv947hggz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0) \n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp407ybo9h.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp407ybo9h.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp407ybo9h.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp407ybo9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull)\n            {\n          \
    \      largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \      else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmenr9aw6.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmenr9aw6.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmenr9aw6.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpmenr9aw6.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmenr9aw6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull)\n            {\n          \
    \      largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \      else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmenr9aw6.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmenr9aw6.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpmenr9aw6.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpmenr9aw6.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmenr9aw6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__1lvc7q.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp__1lvc7q.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__1lvc7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest\
    \ = null;\n    foreach(e; lst)\n    {\n        if(e < 0)\n        {\n        \
    \    if(largest is null || e > largest)\n            {\n                largest\
    \ = e;\n            }\n        }\n        else if(e > 0)\n        {\n        \
    \    if(smallest is null || e < smallest)\n            {\n                smallest\
    \ = e;\n            }\n        }\n    }\n    return tuple(largest, smallest);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo16jfm5_.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpo16jfm5_.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpo16jfm5_.d(21): Error: incompatible types for `(largest) is (null)`: `Nullable!long`
    and `typeof(null)`

    /tmp/tmpo16jfm5_.d(28): Error: incompatible types for `(smallest) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo16jfm5_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largestNegative is null || elem > largestNegative)\n           \
    \ {\n                largestNegative = elem;\n            }\n        }\n     \
    \   else if(elem > 0)\n        {\n            if(smallestPositive is null || elem\
    \ < smallestPositive)\n            {\n                smallestPositive = elem;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9awd8p3u.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp9awd8p3u.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp9awd8p3u.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp9awd8p3u.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9awd8p3u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n   \
    \ Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull ||\
    \ i > largest_negative.get)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0)\n        {\n          \
    \  if(smallest_positive.isNull || i < smallest_positive.get)\n            {\n\
    \                smallest_positive = i;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(item; lst)\n    {\n        if(item <\
    \ 0)\n        {\n            if(largest_negative is null)\n            {\n   \
    \             largest_negative = item;\n            }\n            else\n    \
    \        {\n                largest_negative = max(largest_negative, item);\n\
    \            }\n        }\n        else if(item > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = item;\n       \
    \     }\n            else\n            {\n                smallest_positive =\
    \ min(smallest_positive, item);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_l4dci2c.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp_l4dci2c.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp_l4dci2c.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp_l4dci2c.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp_l4dci2c.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmp_l4dci2c.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_l4dci2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(item; lst)\n    {\n        if(item <\
    \ 0)\n        {\n            if(largest_negative is null || item > largest_negative)\n\
    \            {\n                largest_negative = item;\n            }\n    \
    \    }\n        else if(item > 0)\n        {\n            if(smallest_positive\
    \ is null || item < smallest_positive)\n            {\n                smallest_positive\
    \ = item;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi26ngtwy.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpi26ngtwy.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpi26ngtwy.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpi26ngtwy.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi26ngtwy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164248
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n   \
    \ Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull ||\
    \ i > largest_negative.get)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0ruvtebr.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x456979]

    ??:? void tmp0ruvtebr.__unittest_L36_C1() [0x441fb6]

    ??:? void tmp0ruvtebr.__modtest() [0x454484]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x45f97b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x455fa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x45b1bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x45b24c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x45b149]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455f7d]

    ??:? runModuleUnitTests [0x45f751]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x457904]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative.isNull || i > largest_negative.get)\
    \ \n            {\n                largest_negative = i;\n            }\n    \
    \    }\n        else if(i > 0) \n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3l3rkt_j.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp3l3rkt_j.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3l3rkt_j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(x; lst)\n    {\n        if(x < 0)\n        {\n        \
    \    if(largestNegative is null || x > largestNegative)\n            {\n     \
    \           largestNegative = x;\n            }\n        }\n        else if(x\
    \ > 0)\n        {\n            if(smallestPositive is null || x < smallestPositive)\n\
    \            {\n                smallestPositive = x;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1roomsq0.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp1roomsq0.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp1roomsq0.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp1roomsq0.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1roomsq0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_neg is null || num > largest_neg)\n            {\n       \
    \         largest_neg = num;\n            }\n        }\n        else if(num >\
    \ 0)\n        {\n            if(smallest_pos is null || num < smallest_pos)\n\
    \            {\n                smallest_pos = num;\n            }\n        }\n\
    \    }\n    return tuple(largest_neg, smallest_pos);\n}\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps6p82kyb.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmps6p82kyb.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmps6p82kyb.d(21): Error: incompatible types for `(largest_neg) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmps6p82kyb.d(28): Error: incompatible types for `(smallest_pos) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6p82kyb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else\n        {\n            if(smallest_positive is null)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \      else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphidxxwci.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphidxxwci.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmphidxxwci.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmphidxxwci.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmphidxxwci.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmphidxxwci.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphidxxwci.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative.isNull || num > largest_negative.get)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else\n        {\n            if(smallest_positive.isNull || num\
    \ < smallest_positive.get)\n            {\n                smallest_positive =\
    \ num;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37f582iz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp37f582iz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37f582iz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull || i > largest_negative.get)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp014vtb5w.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp014vtb5w.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp014vtb5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\n\
    \        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvn9focim.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpvn9focim.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpvn9focim.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpvn9focim.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvn9focim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n \
    \       {\n            if(largest_negative is null || l > largest_negative)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else if(l > 0)\n        {\n            if(smallest_positive is null\
    \ || l < smallest_positive)\n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpusp8sq7r.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpusp8sq7r.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpusp8sq7r.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpusp8sq7r.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpusp8sq7r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(elem; lst)\n    {\n        if(elem <\
    \ 0)\n        {\n            if(largest_negative is null || elem > largest_negative)\n\
    \            {\n                largest_negative = elem;\n            }\n    \
    \    }\n        else\n        {\n            if(smallest_positive is null || elem\
    \ < smallest_positive)\n            {\n                smallest_positive = elem;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpco7f5rc3.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpco7f5rc3.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpco7f5rc3.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpco7f5rc3.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpco7f5rc3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n{\n\
    \    alias candidate = largest_smallest_integers;\n\n{\n        auto result =\
    \ candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n  \
    \      assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23rxnh8g.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp23rxnh8g.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23rxnh8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_neg is null || i > largest_neg)\n            {\n             \
    \   largest_neg = i;\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(smallest_pos is null || i < smallest_pos)\n            {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_neg, smallest_pos);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0gncgsf5.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0gncgsf5.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0gncgsf5.d(21): Error: incompatible types for `(largest_neg) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp0gncgsf5.d(28): Error: incompatible types for `(smallest_pos) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0gncgsf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative.isNull || i > largest_negative.get)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp014vtb5w.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp014vtb5w.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp014vtb5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_pos = Nullable!(long).init;\n    foreach(elem; lst)\n    {\n      \
    \  if(elem < 0)\n        {\n            if(largest_neg.isNull || elem > largest_neg.get)\n\
    \            {\n                largest_neg = elem;\n            }\n        }\n\
    \        else if(elem > 0)\n        {\n            if(smallest_pos.isNull || elem\
    \ < smallest_pos.get)\n            {\n                smallest_pos = elem;\n \
    \           }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n{\n\
    \    alias candidate = largest_smallest_integers;\n\n{\n        auto result =\
    \ candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n  \
    \      assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23rxnh8g.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp23rxnh8g.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23rxnh8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(l; lst) \n    {\n        if(l < 0) \n\
    \        {\n            if(largest_negative is null || l > largest_negative) \n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else \n        {\n            if(smallest_positive is null || l <\
    \ smallest_positive) \n            {\n                smallest_positive = l;\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5j216ve0.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp5j216ve0.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp5j216ve0.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp5j216ve0.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j216ve0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(long i; lst) \n    {\n        if(i <\
    \ 0) \n        {\n            if(largest_negative is null || i > largest_negative)\
    \ \n            {\n                largest_negative = i;\n            }\n    \
    \    }\n        else \n        {\n            if(smallest_positive is null ||\
    \ i < smallest_positive) \n            {\n                smallest_positive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4j5cqjoe.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp4j5cqjoe.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp4j5cqjoe.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp4j5cqjoe.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4j5cqjoe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(item; lst)\n    {\n        if(item < 0)\n        {\n  \
    \          if(largestNegative is null || item > largestNegative)\n           \
    \ {\n                largestNegative = item;\n            }\n        }\n     \
    \   else\n        {\n            if(smallestPositive is null || item < smallestPositive)\n\
    \            {\n                smallestPositive = item;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzpm7ir5.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpzzpm7ir5.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpzzpm7ir5.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpzzpm7ir5.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzpm7ir5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__1lvc7q.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmp__1lvc7q.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__1lvc7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(item; lst)\n    {\n        if(item\
    \ < 0)\n        {\n            if(largest.isNull || item > largest.get)\n    \
    \        {\n                largest = item;\n            }\n        }\n      \
    \  else if(item > 0)\n        {\n            if(smallest.isNull || item < smallest.get)\n\
    \            {\n                smallest = item;\n            }\n        }\n \
    \   }\n    return tuple(largest, smallest);\n}\nunittest\n{\n    alias candidate\
    \ = largest_smallest_integers;\n\n{\n        auto result = candidate([2L, 4L,\
    \ 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164252
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_neg is null || i > largest_neg)\n            {\n             \
    \   largest_neg = i;\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(smallest_pos is null || i < smallest_pos)\n            {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_neg, smallest_pos);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0gncgsf5.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0gncgsf5.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0gncgsf5.d(21): Error: incompatible types for `(largest_neg) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp0gncgsf5.d(28): Error: incompatible types for `(smallest_pos) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0gncgsf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = l;\n            }\n            else if(l > largest_negative)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else if(l > 0)\n        {\n            if(smallest_positive is null)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \      else if(l < smallest_positive)\n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqn3ghs1z.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpqn3ghs1z.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpqn3ghs1z.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpqn3ghs1z.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqn3ghs1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative is null || num > largest_negative)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else if(num > 0)\n        {\n            if(smallest_positive is\
    \ null || num < smallest_positive)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv947hggz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpv947hggz.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpv947hggz.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv947hggz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n\
    \        {\n            if(largest_negative.isNull || num > largest_negative.get)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \   }\n        else\n        {\n            if(smallest_positive.isNull || num\
    \ < smallest_positive.get)\n            {\n                smallest_positive =\
    \ num;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37f582iz.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp37f582iz.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37f582iz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpli88rh8s.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpli88rh8s.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpli88rh8s.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpli88rh8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(l; lst)\n    {\n     \
    \   if(l < 0)\n        {\n            if(largestNegative.isNull || l > largestNegative.get)\n\
    \            {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ l < smallestPositive.get)\n            {\n                smallestPositive =\
    \ l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164252
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest is null || num > largest)\n            {\n               \
    \ largest = num;\n            }\n        }\n        else if(num > 0)\n       \
    \ {\n            if(smallest is null || num < smallest)\n            {\n     \
    \           smallest = num;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ae1p0zv.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ae1p0zv.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp0ae1p0zv.d(21): Error: incompatible types for `(largest) is (null)`: `Nullable!long`
    and `typeof(null)`

    /tmp/tmp0ae1p0zv.d(28): Error: incompatible types for `(smallest) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ae1p0zv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbhh5m39.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpxbhh5m39.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpxbhh5m39.d(32): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    /tmp/tmpxbhh5m39.d(38): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbhh5m39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghzxhdo8.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpghzxhdo8.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpghzxhdo8.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpghzxhdo8.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghzxhdo8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164249
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}\nunittest\n{\n\
    \    alias candidate = largest_smallest_integers;\n\n{\n        auto result =\
    \ candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n  \
    \      assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23rxnh8g.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp23rxnh8g.d(21): Error: incompatible types for `(largestNegative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp23rxnh8g.d(28): Error: incompatible types for `(smallestPositive) is (null)`:
    `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23rxnh8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164245
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || i > largest_negative)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fdbxeo.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmp92fdbxeo.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmp92fdbxeo.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fdbxeo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164243
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \              \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null || largest_negative < i)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive is null\
    \ || smallest_positive > i)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnj0sw7p3.d(15): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpnj0sw7p3.d(16): Error: `inout` method `std.typecons.Nullable!long.Nullable.this`
    is not callable using a mutable object

    /tmp/tmpnj0sw7p3.d(21): Error: incompatible types for `(largest_negative) is (null)`:
    `Nullable!long` and `typeof(null)`

    /tmp/tmpnj0sw7p3.d(28): Error: incompatible types for `(smallest_positive) is
    (null)`: `Nullable!long` and `typeof(null)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnj0sw7p3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164250
