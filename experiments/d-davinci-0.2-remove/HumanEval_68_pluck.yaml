name: HumanEval_68_pluck
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
  \ a branch of a tree that has non-negative integer nodes\n    your task is to pluck\
  \ one of the nodes and return it.\n    The plucked node should be the node with\
  \ the smallest even value.\n    If multiple nodes with the same smallest even value\
  \ are found return the node that has smallest index.\n\n    The plucked node should\
  \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
  \ values or the given array is empty, return [].\n\n    Example 1:\n        Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n\
  \        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \n    Example 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n                 so we will choose the first\
  \ zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
  \ <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
  \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
  \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
  \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
completions: ["{\n    long[] result = [0,0];\n    long min = 0;\n    long index =\
    \ 0;\n    long minIndex = 0;\n    long count = 0;\n    foreach(i, v; arr)\n  \
    \  {\n        if(v % 2 == 0)\n        {\n            if(count == 0)\n        \
    \    {\n                min = v;\n                minIndex = i;\n            \
    \    count++;\n            }\n            else\n            {\n              \
    \  if(v < min)\n                {\n                    min = v;\n            \
    \        minIndex = i;\n                }\n            }\n        }\n    }\n \
    \   if(count == 0)\n    {\n        return result;\n    }\n    else\n    {\n  \
    \      result[0] = min;\n        result[1] = minIndex;\n        return result;\n\
    \    }\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}", "{\n\
    \    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n\
    \    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n  \
    \  long min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n\
    \    return [min, index];\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n     \
    \   return result;\n    long smallestEven = arr[0];\n    long smallestEvenIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n\
    \                smallestEven = arr[i];\n                smallestEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n    \
    \    result[0] = smallestEven;\n        result[1] = smallestEvenIndex;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(index == -1)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return new long[0];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long[] result = [arr[0], 0];\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < result[0])\n        {\n            result[0] = v;\n     \
    \       result[1] = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n      \
    \  return [];\n    return result;\n}", "{\n    if (arr.length == 0) return new\
    \ long[0];\n    long[] result = new long[2];\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 ==\
    \ 0 && v < min)\n        {\n            min = v;\n            minIndex = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n  \
    \  return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1)\n        return [];\n   \
    \ return [min, index];\n}", "{\n    if (arr.length == 0) return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ index = i;\n        }\n    }\n    if (index == -1) return [];\n    return [min,\
    \ index];\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return result;\n    result[0] = min;\n  \
    \  result[1] = index;\n    return result;\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    \n    long min = long.max;\n    long index =\
    \ 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2\
    \ == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    \n    if (min == long.max)\n        return new long[0];\n\
    \    \n    return new long[] { min, index };\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = long.max;\n    long index = -1;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n\
    \        return [];\n    return [min, index];\n}", "{\n    long[] result = new\
    \ long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n\
    \    int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    if (arr.length == 0) return [];\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2\
    \ == 0)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        return [min, minIndex];\n    }\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return new long[0];\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    long min = long.max;\n    long index = -1;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return new long[0];\n    return [min, index];\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (index == -1)\n        return [];\n    return [min, index];\n}", "{\n \
    \   if (arr.length == 0)\n        return new long[0];\n    \n    long min = long.max;\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    \n    if (min == long.max)\n        return new long[0];\n    \n  \
    \  return [min, index];\n}", "{\n    long[] result = new long[2];\n    long min\
    \ = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if(index == -1)\n        return [];\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}", "{\n\
    \    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n\
    \    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (index == -1)\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    if (arr.length == 0) return [];\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (index == -1) return [];\n    return [min, index];\n}", "{\n    if (arr.length\
    \ == 0) return [];\n    long min = long.max;\n    long index = -1;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (index == -1)\
    \ return [];\n    return [min, index];\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    long[] ret = new long[2];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(index == -1)\n        return [];\n \
    \   return [min, index];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n\
    \        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n       \
    \     index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return [];\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n     \
    \   if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if(index == -1)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    long[] result\
    \ = [0, 0];\n    if (arr.length == 0)\n        return result;\n    long min =\
    \ arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n  \
    \  {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = long.max;\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min == long.max)\n        return [];\n    return\
    \ [min, index];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    long[] result = new\
    \ long[2];\n    long min = long.max;\n    long index = long.max;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min == long.max)\n    {\n        return result;\n    }\n \
    \   result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n   \
    \ long[] result = new long[2];\n    long min = long.max;\n    long index = -1;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if(index\
    \ == -1)\n        return [];\n    result[0] = min;\n    result[1] = index;\n \
    \   return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = long.max;\n    long minEvenIndex\
    \ = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n\
    \        {\n            minEven = v;\n            minEvenIndex = i;\n        }\n\
    \    }\n    if (minEven == long.max)\n        return [];\n    return [minEven,\
    \ minEvenIndex];\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = long.max;\n    long index = -1;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (index == -1)\n\
    \        return [];\n    return [min, index];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = long.max;\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min == long.max)\n\
    \        return [];\n    return [min, index];\n}", "{\n    long[] result = new\
    \ long[2];\n    long min = long.max;\n    long index = long.max;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min == long.max)\n    {\n        return result;\n    }\n \
    \   result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n   \
    \ if (arr.length == 0)\n        return [];\n    long smallestEven = arr[0];\n\
    \    long smallestEvenIndex = 0;\n    foreach (i, val; arr)\n    {\n        if\
    \ (val % 2 == 0 && val < smallestEven)\n        {\n            smallestEven =\
    \ val;\n            smallestEvenIndex = i;\n        }\n    }\n    if (smallestEven\
    \ % 2 == 0)\n        return [smallestEven, smallestEvenIndex];\n    return [];\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    for (int i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n        return new long[] { min, index };\n    return\
    \ new long[0];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long[] result = new long[2];\n    long min = long.max;\n    for (int i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            result[0] = min;\n        \
    \    result[1] = i;\n        }\n    }\n    if (min == long.max)\n        return\
    \ new long[0];\n    return result;\n}", "{\n    if (arr.length == 0)\n       \
    \ return new long[0];\n    long min = long.max;\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min == long.max)\n\
    \        return new long[0];\n    return [min, index];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min,\
    \ minIndex };\n    return new long[0];\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    if (arr.length == 0) \n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++) \n    {\n    \
    \    if (arr[i] < min && arr[i] % 2 == 0) \n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0) \n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long index = 0;\n    for (int i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n        return new long[] { min, index };\n    return\
    \ new long[0];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long minEven = long.max;\n    long minEvenIndex = long.max;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n    \
    \    {\n            minEven = v;\n            minEvenIndex = i;\n        }\n \
    \   }\n    if (minEven == long.max)\n        return [];\n    return [minEven,\
    \ minEvenIndex];\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n    \
    \    {\n            min = v;\n            index = i;\n        }\n    }\n    if(index\
    \ == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = long.max;\n    long minEvenIndex\
    \ = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < minEven)\n        {\n            minEven = arr[i];\n  \
    \          minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    \n    long min = long.max;\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    \n    if (min == long.max)\n        return new long[0];\n    \n  \
    \  return [min, minIndex];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return [];\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    int index = -1;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(index != -1)\n    {\n        result[0] = min;\n    \
    \    result[1] = index;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long[] result = new long[2];\n    result[0]\
    \ = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < result[0])\n\
    \        {\n            result[0] = v;\n            result[1] = i;\n        }\n\
    \    }\n    if (result[0] == long.max)\n        return new long[0];\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long minEven\
    \ = arr[0];\n    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < minEven)\n            {\n                minEven = arr[i];\n             \
    \   minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven % 2 ==\
    \ 0)\n        return [minEven, minEvenIndex];\n    return [];\n}", "{\n    long[]\
    \ result = new long[2];\n    if (arr.length == 0)\n        return result;\n  \
    \  long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] res = new long[2];\n    if (arr.length\
    \ == 0) return res;\n    long min = arr[0];\n    long idx = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            idx = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n\
    \        res[0] = min;\n        res[1] = idx;\n    }\n    return res;\n}", "{\n\
    \    long[] result = new long[2];\n    long min = long.max;\n    long minIndex\
    \ = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    if(min == long.max)\n        return result;\n    result[0] = min;\n    result[1]\
    \ = minIndex;\n    return result;\n}", "{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    \n    long min = long.max;\n    long minIndex = -1;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    \n    if (minIndex == -1)\n        return new long[0];\n\
    \    \n    return [min, minIndex];\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0) return new long[0];\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    for (int i = 0; i < arr.length; i++)\n    {\n   \
    \     if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            result[0] = min;\n            result[1] = i;\n        }\n    }\n\
    \    if (min == long.max) return new long[0];\n    return result;\n}", "{\n  \
    \  if (arr.length == 0) return [];\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr) \n    {\n        if (v % 2 == 0 && v < min) \n      \
    \  {\n            min = v;\n            index = i;\n        }\n    }\n    if (min\
    \ % 2 == 0) return [min, index];\n    return [];\n}", "{\n    long[] result =\
    \ new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return\
    \ [];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n    long\
    \ min = long.max;\n    long minIndex = -1;\n    foreach (i, v; arr)\n    {\n \
    \       if (v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    minIndex = i;\n        }\n    }\n    if (minIndex == -1)\n        return\
    \ new long[0];\n    return [min, minIndex];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    long count\
    \ = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0)\n        {\n \
    \           if (e < min)\n            {\n                min = e;\n          \
    \      index = i;\n                count = 1;\n            }\n            else\
    \ if (e == min)\n            {\n                count++;\n            }\n    \
    \    }\n    }\n    if (count == 0)\n        return [];\n    return [min, index];\n\
    }", "{\n    if (arr.length == 0)\n        return [0L, 0L];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [0L, 0L];\n}", "{\n    if (arr.length == 0)\n    \
    \    return [];\n    \n    long[] result = [arr[0], 0];\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < result[0])\n        {\n            result[0]\
    \ = v;\n            result[1] = i;\n        }\n    }\n    if (result[0] % 2 !=\
    \ 0)\n        return [];\n    return result;\n}", "{\n    long[] result = new\
    \ long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n \
    \       return [min, minIndex];\n    return new long[0];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, value; arr)\n    {\n        if (value % 2 == 0 && value < min)\n\
    \        {\n            min = value;\n            minIndex = i;\n        }\n \
    \   }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0) return new long[0];\n    long min = long.max;\n   \
    \ long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v\
    \ < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min == long.max) return new long[0];\n    return [min, index];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    auto min = arr[0];\n\
    \    auto minIndex = 0;\n    foreach (index, value; arr)\n    {\n        if (value\
    \ % 2 == 0 && value < min)\n        {\n            min = value;\n            minIndex\
    \ = index;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long smallestEven = arr[0];\n    long smallestIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n            {\n\
    \                smallestEven = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n    \
    \    result[0] = smallestEven;\n        result[1] = smallestIndex;\n    }\n  \
    \  return result;\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 ==\
    \ 0 && v < min)\n        {\n            min = v;\n            index = i;\n   \
    \     }\n    }\n    if(min == long.max)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0) return new long[0];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min &&\
    \ v % 2 == 0)\n        {\n            min = v;\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        return [min, minIndex];\n\
    \    }\n    return new long[0];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    \n    long[] res = new long[2];\n    long min = long.max;\n\
    \    long minIndex = long.max;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex\
    \ = i;\n        }\n    }\n    \n    if (min == long.max)\n        return new long[0];\n\
    \    \n    res[0] = min;\n    res[1] = minIndex;\n    return res;\n}", "{\n  \
    \  if (arr.length == 0)\n        return new long[0];\n    \n    long minEven =\
    \ long.max;\n    long minEvenIndex = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n \
    \           minEven = arr[i];\n            minEvenIndex = i;\n        }\n    }\n\
    \    \n    if (minEvenIndex == -1)\n        return new long[0];\n    \n    return\
    \ [minEven, minEvenIndex];\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    long index = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return new\
    \ long[0];\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n  \
    \      {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = long.max;\n    long minIndex\
    \ = long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    if (min == long.max)\n        return new long[0];\n    return [min, minIndex];\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long min =\
    \ arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return new long[] { min, minIndex };\n    return new long[0];\n}", "{\n\
    \    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long minEven = -1;\n    long minIndex = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (minEven\
    \ == -1)\n            {\n                minEven = arr[i];\n                minIndex\
    \ = i;\n            }\n            else\n            {\n                if (arr[i]\
    \ < minEven)\n                {\n                    minEven = arr[i];\n     \
    \               minIndex = i;\n                }\n            }\n        }\n \
    \   }\n    if (minEven != -1)\n    {\n        result[0] = minEven;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n \
    \       return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min,\
    \ minIndex };\n    return new long[0];\n}", "{\n    if (arr.length == 0)\n   \
    \     return new long[2];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return new long[2];\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long minEven\
    \ = long.max;\n    long minEvenIndex = 0;\n    foreach (i, e; arr)\n    {\n  \
    \      if (e % 2 == 0 && e < minEven)\n        {\n            minEven = e;\n \
    \           minEvenIndex = i;\n        }\n    }\n    if (minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    long[] result\
    \ = new long[2];\n    long smallestEven = long.max;\n    long smallestEvenIndex\
    \ = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < smallestEven)\n        {\n            smallestEven = arr[i];\n\
    \            smallestEvenIndex = i;\n        }\n    }\n    if (smallestEven ==\
    \ long.max)\n    {\n        return result;\n    }\n    result[0] = smallestEven;\n\
    \    result[1] = smallestEvenIndex;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    bool hasEven = false;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0)\n        {\n            hasEven = true;\n            if (v < min)\n\
    \            {\n                min = v;\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    if (hasEven)\n        return [min, minIndex];\n\
    \    return new long[0];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n\
    \        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n       \
    \     index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long smallestEven = arr[0];\n    long smallestEvenIndex = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < smallestEven)\n        {\n\
    \            smallestEven = v;\n            smallestEvenIndex = i;\n        }\n\
    \    }\n    if (smallestEven % 2 == 0)\n        return [smallestEven, smallestEvenIndex];\n\
    \    return [];\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            index = i;\n     \
    \   }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if(index != -1)\n    {\n        result[0] = min;\n    \
    \    result[1] = index;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0) return new long[0];\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            result[0] = v;\n            result[1]\
    \ = i;\n        }\n    }\n    if (min == long.max) return new long[0];\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, minIndex];\n    return [];\n}", "{\n    if (arr.length ==\
    \ 0)\n        return [];\n    \n    long min = long.max;\n    long index = -1;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    \n    if\
    \ (index == -1)\n        return [];\n    \n    return [min, index];\n}", "{\n\
    \    if (arr.length == 0)\n        return new long[0];\n    \n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ new long[] { min, index };\n    else\n        return new long[0];\n}", "{\n\
    \    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return new long[] { min, minIndex };\n\
    \    return new long[0];\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    \n    long[] res = new long[2];\n    long min = long.max;\n  \
    \  long minIndex = long.max;\n    long index = 0;\n    foreach (e; arr)\n    {\n\
    \        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n       \
    \     minIndex = index;\n        }\n        index++;\n    }\n    if (min == long.max)\n\
    \        return new long[0];\n    res[0] = min;\n    res[1] = minIndex;\n    return\
    \ res;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            index = i;\n     \
    \   }\n    }\n    if (index == -1)\n        return [];\n    return [min, index];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    \n    long min = long.max;\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    \n    if (min == long.max)\n        return [];\n    \n    return [min,\
    \ index];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (index == -1)\n        return [];\n    return\
    \ [min, index];\n}", "{\n    long[] ret = new long[2];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return ret;\n    ret[0] = min;\n    ret[1]\
    \ = index;\n    return ret;\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (index == -1)\n        return new long[0];\n    return [min, index];\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n\
    \    if (arr.length == 0)\n        return new long[0];\n    long min = long.max;\n\
    \    long index = -1;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            index = i;\n     \
    \   }\n    }\n    if (index == -1)\n        return new long[0];\n    return [min,\
    \ index];\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\
    \ return result;\n    long min = arr[0];\n    int index = 0;\n    for (int i =\
    \ 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n    \
    \    return [];\n    long min = arr[0];\n    long index = 0;\n    bool found =\
    \ false;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n\
    \            if (!found)\n            {\n                min = v;\n          \
    \      index = i;\n                found = true;\n            }\n            else\n\
    \            {\n                if (v < min)\n                {\n            \
    \        min = v;\n                    index = i;\n                }\n       \
    \     }\n        }\n    }\n    if (found)\n        return [min, index];\n    return\
    \ [];\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n    long[]\
    \ result = new long[2];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n        \
    \    min = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0) return new long[0];\n    long min\
    \ = long.max;\n    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (min == long.max)\
    \ return new long[0];\n    return [min, index];\n}", "{\n    if (arr.length ==\
    \ 0)\n        return new long[0];\n    long smallest = arr[0];\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ smallest && arr[i] % 2 == 0)\n        {\n            smallest = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (smallest % 2 == 0)\n        return\
    \ new long[] { smallest, index };\n    return new long[0];\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    long index = -1;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(index != -1)\n    {\n\
    \        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n\
    \            {\n                min = arr[i];\n                result[0] = min;\n\
    \                result[1] = i;\n            }\n        }\n    }\n    if (min\
    \ % 2 != 0)\n        return result;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = long.max;\n    long minIndex\
    \ = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n          \
    \  minIndex = i;\n        }\n    }\n    if (min == long.max)\n        return new\
    \ long[0];\n    return [min, minIndex];\n}", "{\n    if (arr.length == 0)\n  \
    \      return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i,\
    \ e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    long[] result = new long[2];\n    result[0]\
    \ = long.max;\n    result[1] = long.max;\n    foreach (i, e; arr)\n    {\n   \
    \     if (e % 2 == 0 && e < result[0])\n        {\n            result[0] = e;\n\
    \            result[1] = i;\n        }\n    }\n    if (result[0] == long.max)\n\
    \        return new long[0];\n    return result;\n}", "{\n    if (arr.length ==\
    \ 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex =\
    \ 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n   \
    \     {\n            min = v;\n            minIndex = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long min =\
    \ long.max;\n    long index = -1;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (index == -1)\n        return new long[0];\n\
    \    return [min, index];\n}", "{\n    if (arr.length == 0)\n        return new\
    \ long[0];\n    long[] res = new long[2];\n    res[0] = long.max;\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < res[0])\n        {\n     \
    \       res[0] = v;\n            res[1] = i;\n        }\n    }\n    if (res[0]\
    \ == long.max)\n        return new long[0];\n    return res;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min,\
    \ minIndex };\n    return new long[0];\n}", "{\n    if (arr.length == 0)\n   \
    \     return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    int index = 0;\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n    \
    \    {\n            min = arr[i];\n            index = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    int minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    if (arr.length == 0)\n        return result;\n  \
    \  long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long[] res = new long[2];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] %\
    \ 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n         \
    \       min = arr[i];\n                minIndex = i;\n            }\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] =\
    \ minIndex;\n    }\n    return res;\n}", "{\n    if (arr.length == 0)\n      \
    \  return [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    long[] result = [0, 0];\n    long min = long.max;\n    long index\
    \ = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n   \
    \     {\n            min = e;\n            index = i;\n        }\n    }\n    if(min\
    \ != long.max)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = long.max;\n    long index = 0;\n \
    \   foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min ==\
    \ long.max)\n        return [];\n    return [min, index];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = long.max;\n    long index = -1;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return [];\n    return [min, index];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long index =\
    \ 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min\
    \ && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min,\
    \ index };\n    return new long[0];\n}", "{\n    if (arr.length == 0)\n      \
    \  return [];\n    long min = long.max;\n    long index = -1;\n    foreach (i,\
    \ e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if (index == -1)\n     \
    \   return [];\n    return [min, index];\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  int index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n     \
    \   {\n            min = v;\n            index = i;\n        }\n    }\n    if(min\
    \ == long.max)\n        return result;\n    result[0] = min;\n    result[1] =\
    \ index;\n    return result;\n}", "{\n    if (arr.length == 0) return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    return [min, minIndex];\n    }\n    return new long[0];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = long.max;\n    long index\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            index = i;\n        }\n    }\n  \
    \  if (min == long.max)\n        return new long[0];\n    return [min, index];\n\
    }", "{\n    if (arr.length == 0) return new long[0];\n    long min = long.max;\n\
    \    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (index == -1) return new long[0];\n\
    \    return [min, index];\n}", "{\n    long[] ret = new long[2];\n    long min\
    \ = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(index != -1)\n    {\n        ret[0] = min;\n       \
    \ ret[1] = index;\n    }\n    return ret;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n       \
    \ if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 ==\
    \ 0 && e < min)\n        {\n            min = e;\n            minIndex = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n  \
    \  return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return [];\n    return [min, index];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, value; arr)\n    {\n        if (value % 2 == 0 && value < min)\n\
    \        {\n            min = value;\n            minIndex = i;\n        }\n \
    \   }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }", "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index != -1)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long minIndex = long.max;\n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min == long.max)\n    {\n        return result;\n    }\n    result[0]\
    \ = min;\n    result[1] = minIndex;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    \n    long[] result = new long[2];\n\
    \    long minEven = long.max;\n    long minEvenIndex = long.max;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    \n    if (minEven == long.max)\n        return new\
    \ long[0];\n    \n    result[0] = minEven;\n    result[1] = minEvenIndex;\n  \
    \  return result;\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return new long[0];\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long smallestEven = arr[0];\n\
    \    long smallestEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < smallestEven)\n\
    \            {\n                smallestEven = arr[i];\n                smallestEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (smallestEven % 2 == 0)\n    {\n\
    \        result[0] = smallestEven;\n        result[1] = smallestEvenIndex;\n \
    \   }\n    return result;\n}", "{\n    long[] result = [0, 0];\n    long min =\
    \ long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if(min == long.max)\n        return [];\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min,\
    \ minIndex };\n    return new long[0];\n}", "{\n    if (arr.length == 0) return\
    \ new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        return new long[] { min, minIndex\
    \ };\n    }\n    return new long[0];\n}", "{\n    if (arr.length == 0)\n     \
    \   return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min,\
    \ minIndex };\n    return new long[0];\n}", "{\n    if (arr.length == 0)\n   \
    \     return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n  \
    \  for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 &&\
    \ arr[i] < min)\n        {\n            min = arr[i];\n            minIndex =\
    \ i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min,\
    \ minIndex };\n    return new long[0];\n}", "{\n    if (arr.length == 0)\n   \
    \     return new long[0];\n    \n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return new long[] { min,\
    \ minIndex };\n    else\n        return new long[0];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(min == long.max)\n  \
    \      return result;\n    result[0] = min;\n    result[1] = index;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    int index = 0;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
