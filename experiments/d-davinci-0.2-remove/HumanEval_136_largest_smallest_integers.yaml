name: HumanEval_136_largest_smallest_integers
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and\
  \ 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative\
  \ or positive integers, return them as None.\n\n    Examples:\n                \n\
  */\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst)\
  \ \n"
tests: "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n     \
  \   auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
  \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
  \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
  \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n\
  \        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto\
  \ result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
  }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
  \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
  \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
  \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
  \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
  \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
  \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get ==\
  \ 1L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n\
    \        {\n            if(largest_negative is null || i > largest_negative) \n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0) \n        {\n            if(smallest_positive is null\
    \ || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst) \n    {\n    \
    \    if(i < 0) \n        {\n            if(largestNegative.isNull || i > largestNegative.get)\
    \ \n            {\n                largestNegative = i;\n            }\n     \
    \   }\n        else if(i > 0) \n        {\n            if(smallestPositive.isNull\
    \ || i < smallestPositive.get) \n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null)\n            {\n                largest_negative\
    \ = num;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, num);\n            }\n        }\n        else\n    \
    \    {\n            if(smallest_positive is null)\n            {\n           \
    \     smallest_positive = num;\n            }\n            else\n            {\n\
    \                smallest_positive = min(smallest_positive, num);\n          \
    \  }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_neg is null || num > largest_neg)\n            {\n       \
    \         largest_neg = num;\n            }\n        }\n        else if(num >\
    \ 0)\n        {\n            if(smallest_pos is null || num < smallest_pos)\n\
    \            {\n                smallest_pos = num;\n            }\n        }\n\
    \    }\n    return tuple(largest_neg, smallest_pos);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(elem;\
    \ lst) \n    {\n        if(elem < 0) \n        {\n            if(largestNegative.isNull)\
    \ \n            {\n                largestNegative = elem;\n            } \n \
    \           else \n            {\n                largestNegative = max(largestNegative,\
    \ elem);\n            }\n        } \n        else if(elem > 0) \n        {\n \
    \           if(smallestPositive.isNull) \n            {\n                smallestPositive\
    \ = elem;\n            } \n            else \n            {\n                smallestPositive\
    \ = min(smallestPositive, elem);\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative is null)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \     else\n            {\n                largest_negative = max(largest_negative,\
    \ i);\n            }\n        }\n        else if(i > 0)\n        {\n         \
    \   if(smallest_positive is null)\n            {\n                smallest_positive\
    \ = i;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, i);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n    {\n \
    \       if(i < 0)\n        {\n            if(largest_negative.isNull || i > largest_negative.get)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null || l > largest_negative)\n            {\n   \
    \             largest_negative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallest_positive is null || l < smallest_positive)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_neg = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_pos = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(largest_neg.isNull || i > largest_neg.get)\n\
    \            {\n                largest_neg = i;\n            }\n        }\n \
    \       else\n        {\n            if(smallest_pos.isNull || i < smallest_pos.get)\n\
    \            {\n                smallest_pos = i;\n            }\n        }\n\
    \    }\n    return tuple(largest_neg, smallest_pos);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(num; lst)\n\
    \    {\n        if(num < 0)\n        {\n            if(largestNegative is null\
    \ || num > largestNegative)\n            {\n                largestNegative =\
    \ num;\n            }\n        }\n        else\n        {\n            if(smallestPositive\
    \ is null || num < smallestPositive)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(i; lst) \n    {\n        if(i\
    \ < 0) \n        {\n            if(largest.isNull) \n            {\n         \
    \       largest = i;\n            }\n            else \n            {\n      \
    \          largest = max(largest, i);\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest.isNull) \n            {\n   \
    \             smallest = i;\n            }\n            else \n            {\n\
    \                smallest = min(smallest, i);\n            }\n        }\n    }\n\
    \    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(num; lst)\
    \ \n    {\n        if(num < 0) \n        {\n            if(largestNegative is\
    \ null || num > largestNegative) \n            {\n                largestNegative\
    \ = num;\n            }\n        }\n        else if(num > 0) \n        {\n   \
    \         if(smallestPositive is null || num < smallestPositive) \n          \
    \  {\n                smallestPositive = num;\n            }\n        }\n    }\n\
    \    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(l; lst) \n    {\n        if(l < 0) \n        {\n            if(largest_negative\
    \ is null || l > largest_negative) \n            {\n                largest_negative\
    \ = l;\n            }\n        }\n        else \n        {\n            if(smallest_positive\
    \ is null || l < smallest_positive) \n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_neg is null || i > largest_neg)\n            {\n             \
    \   largest_neg = i;\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(smallest_pos is null || i < smallest_pos)\n            {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_neg, smallest_pos);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative is null)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \     else\n            {\n                largest_negative = max(largest_negative,\
    \ i);\n            }\n        }\n        else if(i > 0)\n        {\n         \
    \   if(smallest_positive is null)\n            {\n                smallest_positive\
    \ = i;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, i);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n    {\n \
    \       if(i < 0)\n        {\n            if(largest_negative.isNull)\n      \
    \      {\n                largest_negative = i;\n            }\n            else\n\
    \            {\n                largest_negative = max(largest_negative, i);\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \      else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i <\
    \ 0)\n        {\n            if(largest.isNull || i > largest.get)\n         \
    \   {\n                largest = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallest.isNull || i < smallest.get)\n            {\n\
    \                smallest = i;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) a = null;\n    Nullable!(long) b = null;\n\
    \    foreach(e; lst)\n    {\n        if(e < 0)\n        {\n            if(a is\
    \ null || e > a)\n                a = e;\n        }\n        else\n        {\n\
    \            if(b is null || e < b)\n                b = e;\n        }\n    }\n\
    \    return tuple(a, b);\n}", "{\n    Nullable!(long) largest = null;\n    Nullable!(long)\
    \ smallest = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n\
    \            if(largest is null || i > largest) \n            {\n            \
    \    largest = i;\n            }\n        }\n        else if(i > 0) \n       \
    \ {\n            if(smallest is null || i < smallest) \n            {\n      \
    \          smallest = i;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n \
    \       {\n            if(largest_negative.isNull || l > largest_negative.get)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else if(l > 0)\n        {\n            if(smallest_positive.isNull\
    \ || l < smallest_positive.get)\n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull || i > largest_negative.get)\n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative.isNull || num > largestNegative.get)\n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else\n        {\n            if(smallestPositive.isNull || num < smallestPositive.get)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largestNegative is null || elem > largestNegative)\n           \
    \ {\n                largestNegative = elem;\n            }\n        }\n     \
    \   else if(elem > 0)\n        {\n            if(smallestPositive is null || elem\
    \ < smallestPositive)\n            {\n                smallestPositive = elem;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst) \n    {\n        if(l < 0) \n        {\n      \
    \      if(largest_negative is null || l > largest_negative) \n            {\n\
    \                largest_negative = l;\n            }\n        }\n        else\
    \ \n        {\n            if(smallest_positive is null || l < smallest_positive)\
    \ \n            {\n                smallest_positive = l;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || l < smallestPositive)\n  \
    \          {\n                smallestPositive = l;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative\
    \ is null || i > largest_negative)\n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallest_positive is null || i < smallest_positive)\n            {\n \
    \               smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(num; lst)\n\
    \    {\n        if(num < 0)\n        {\n            if(largest_negative is null)\n\
    \            {\n                largest_negative = num;\n            }\n     \
    \       else\n            {\n                largest_negative = max(largest_negative,\
    \ num);\n            }\n        }\n        else if(num > 0)\n        {\n     \
    \       if(smallest_positive is null)\n            {\n                smallest_positive\
    \ = num;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, num);\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n \
    \   foreach(item; lst) \n    {\n        if(item < 0) \n        {\n           \
    \ if(largest is null || item > largest) \n            {\n                largest\
    \ = item;\n            }\n        }\n        else if(item > 0) \n        {\n \
    \           if(smallest is null || item < smallest) \n            {\n        \
    \        smallest = item;\n            }\n        }\n    }\n    return tuple(largest,\
    \ smallest);\n}", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n\
    \    Nullable!(long) smallestPositive = Nullable!(long).init;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull\
    \ || i > largestNegative.get)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive.isNull || i < smallestPositive.get)\n            {\n\
    \                smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(l; lst) \n\
    \    {\n        if(l < 0) \n        {\n            if(largestNegative is null\
    \ || l > largestNegative) \n            {\n                largestNegative = l;\n\
    \            }\n        }\n        else if(l > 0) \n        {\n            if(smallestPositive\
    \ is null || l < smallestPositive) \n            {\n                smallestPositive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative.isNull || num > largest_negative.get)\n         \
    \   {\n                largest_negative = num;\n            }\n        }\n   \
    \     else\n        {\n            if(smallest_positive.isNull || num < smallest_positive.get)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \    }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(l; lst) \n    {\n    \
    \    if(l < 0) \n        {\n            if(!largestNegative.isNull) \n       \
    \     {\n                if(l > largestNegative.get) \n                {\n   \
    \                 largestNegative.set(l);\n                }\n            }\n\
    \            else \n            {\n                largestNegative.set(l);\n \
    \           }\n        }\n        else if(l > 0) \n        {\n            if(!smallestPositive.isNull)\
    \ \n            {\n                if(l < smallestPositive.get) \n           \
    \     {\n                    smallestPositive.set(l);\n                }\n   \
    \         }\n            else \n            {\n                smallestPositive.set(l);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null || num > largest_negative)\n            {\n\
    \                largest_negative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallest_positive is null || num < smallest_positive)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \    }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largest_negative is null || num > largest_negative) \n         \
    \   {\n                largest_negative = num;\n            }\n        } \n  \
    \      else if(num > 0) \n        {\n            if(smallest_positive is null\
    \ || num < smallest_positive) \n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst) \n    {\n\
    \        if(i < 0) \n        {\n            if(largest_negative is null || i >\
    \ largest_negative) \n            {\n                largest_negative = i;\n \
    \           }\n        }\n        else if(i > 0) \n        {\n            if(smallest_positive\
    \ is null || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null || num > largest_negative)\n            {\n\
    \                largest_negative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallest_positive is null || num < smallest_positive)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \    }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else\n        {\n            if(smallestPositive.isNull || num <\
    \ smallestPositive.get)\n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long).init;\n    foreach(l; lst)\n    {\n    \
    \    if(l < 0)\n        {\n            if(largest_negative.isNull || l > largest_negative.get)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \ }\n        else\n        {\n            if(smallest_positive.isNull || l < smallest_positive.get)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    auto a = Nullable!(long)();\n    auto b = Nullable!(long)();\n   \
    \ foreach(e; lst)\n    {\n        if(e < 0)\n        {\n            if(a.isNull\
    \ || e > a.get)\n                a = e;\n        }\n        else\n        {\n\
    \            if(b.isNull || e < b.get)\n                b = e;\n        }\n  \
    \  }\n    return tuple(a, b);\n}", "{\n    Nullable!(long) largestNegative;\n\
    \    Nullable!(long) smallestPositive;\n    foreach(item; lst)\n    {\n      \
    \  if(item > 0)\n        {\n            if(smallestPositive.isNull)\n        \
    \    {\n                smallestPositive = item;\n            }\n            else\n\
    \            {\n                smallestPositive = min(smallestPositive, item);\n\
    \            }\n        }\n        else if(item < 0)\n        {\n            if(largestNegative.isNull)\n\
    \            {\n                largestNegative = item;\n            }\n     \
    \       else\n            {\n                largestNegative = max(largestNegative,\
    \ item);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative_integer = null;\n    Nullable!(long)\
    \ smallest_positive_integer = null;\n    foreach(i; lst)\n    {\n        if(i\
    \ < 0)\n        {\n            if(largest_negative_integer.isNull || i > largest_negative_integer.get)\n\
    \            {\n                largest_negative_integer = i;\n            }\n\
    \        }\n        else if(i > 0)\n        {\n            if(smallest_positive_integer.isNull\
    \ || i < smallest_positive_integer.get)\n            {\n                smallest_positive_integer\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative_integer,\
    \ smallest_positive_integer);\n}", "{\n    Nullable!(long) largest_negative =\
    \ null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst) \n\
    \    {\n        if(i < 0) \n        {\n            if(largest_negative is null\
    \ || i > largest_negative) \n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else \n        {\n            if(smallest_positive\
    \ is null || i < smallest_positive) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n    \
    \    if(i < 0)\n        {\n            if(largest_negative.isNull || i > largest_negative.get)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(n; lst)\n    {\n        if(n < 0)\n        {\n        \
    \    if(largest_negative is null || n > largest_negative)\n            {\n   \
    \             largest_negative = n;\n            }\n        }\n        else if(n\
    \ > 0)\n        {\n            if(smallest_positive is null || n < smallest_positive)\n\
    \            {\n                smallest_positive = n;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(l; lst)\n    {\n     \
    \   if(l < 0)\n        {\n            if(largestNegative.isNull || largestNegative.get\
    \ > l)\n            {\n                largestNegative = l;\n            }\n \
    \       }\n        else if(l > 0)\n        {\n            if(smallestPositive.isNull\
    \ || smallestPositive.get < l)\n            {\n                smallestPositive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_neg = Nullable!(long).init;\n    Nullable!(long) smallest_pos\
    \ = Nullable!(long).init;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n\
    \        {\n            if(largest_neg.isNull || elem > largest_neg.get)\n   \
    \         {\n                largest_neg = elem;\n            }\n        }\n \
    \       else if(elem > 0)\n        {\n            if(smallest_pos.isNull || elem\
    \ < smallest_pos.get)\n            {\n                smallest_pos = elem;\n \
    \           }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largest_negative is null || num > largest_negative) \n         \
    \   {\n                largest_negative = num;\n            }\n        }\n   \
    \     else if(num > 0) \n        {\n            if(smallest_positive is null ||\
    \ num < smallest_positive) \n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n    {\n \
    \       if(i < 0)\n        {\n            if(largest_negative is null)\n     \
    \       {\n                largest_negative = i;\n            }\n            else\n\
    \            {\n                largest_negative = max(largest_negative, i);\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallest_positive\
    \ is null)\n            {\n                smallest_positive = i;\n          \
    \  }\n            else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n    \
    \    if(i < 0)\n        {\n            if(largest_negative.isNull || i > largest_negative.get)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else\n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos = null;\n\
    \    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n            if(largest_neg\
    \ is null || i > largest_neg) \n            {\n                largest_neg = i;\n\
    \            }\n        }\n        else if(i > 0) \n        {\n            if(smallest_pos\
    \ is null || i < smallest_pos) \n            {\n                smallest_pos =\
    \ i;\n            }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num > 0)\n        {\n            if(!smallestPositive.isNull)\n     \
    \       {\n                if(num < smallestPositive.get)\n                {\n\
    \                    smallestPositive.set(num);\n                }\n         \
    \   }\n            else\n            {\n                smallestPositive.set(num);\n\
    \            }\n        }\n        else if(num < 0)\n        {\n            if(!largestNegative.isNull)\n\
    \            {\n                if(num > largestNegative.get)\n              \
    \  {\n                    largestNegative.set(num);\n                }\n     \
    \       }\n            else\n            {\n                largestNegative.set(num);\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null || num > largest_negative)\n            {\n\
    \                largest_negative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallest_positive is null || num < smallest_positive)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \    }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    long largestNegative = long.min;\n    long smallestPositive = long.max;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            largestNegative\
    \ = max(largestNegative, i);\n        }\n        else\n        {\n           \
    \ smallestPositive = min(smallestPositive, i);\n        }\n    }\n    return tuple(largestNegative\
    \ == long.min ? null : largestNegative, smallestPositive == long.max ? null :\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largestNegative = null;\n  \
    \  Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n    {\n    \
    \    if(i < 0)\n        {\n            if(largestNegative is null || i > largestNegative)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive is null ||\
    \ i < smallestPositive)\n            {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(i; lst)\n    {\n        if(i > 0)\n        {\n            if(smallest.isNull)\n\
    \            {\n                smallest = i;\n            }\n            else\n\
    \            {\n                smallest = min(smallest, i);\n            }\n\
    \        }\n        else if(i < 0)\n        {\n            if(largest.isNull)\n\
    \            {\n                largest = i;\n            }\n            else\n\
    \            {\n                largest = max(largest, i);\n            }\n  \
    \      }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largest = Nullable!(long).init;\n    Nullable!(long) smallest = Nullable!(long).init;\n\
    \    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest.isNull\
    \ || largest.get > i)\n                largest = i;\n        }\n        else\n\
    \        {\n            if(smallest.isNull || smallest.get < i)\n            \
    \    smallest = i;\n        }\n    }\n    return tuple(largest, smallest);\n}",
  "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        } \n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative.isNull || num > largestNegative.get)\n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0)\n        {\n            if(smallestPositive.isNull || num\
    \ < smallestPositive.get)\n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull || largest_negative.get > i)\n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest_positive.isNull || smallest_positive.get\
    \ < i)\n            {\n                smallest_positive = i;\n            }\n\
    \        }\n    }\n    return tuple(largest_negative, smallest_positive);\n}",
  "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_neg is null || num > largest_neg)\n            {\n       \
    \         largest_neg = num;\n            }\n        }\n        else\n       \
    \ {\n            if(smallest_pos is null || num < smallest_pos)\n            {\n\
    \                smallest_pos = num;\n            }\n        }\n    }\n    return\
    \ tuple(largest_neg, smallest_pos);\n}", "{\n    Nullable!(long) min = null;\n\
    \    Nullable!(long) max = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n\
    \        {\n            if(max is null || i > max)\n                max = i;\n\
    \        }\n        else if(i > 0)\n        {\n            if(min is null || i\
    \ < min)\n                min = i;\n        }\n    }\n    return tuple(max, min);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largest_negative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n  \
    \      if(num < 0)\n        {\n            if(largest_negative.isNull || num >\
    \ largest_negative.get)\n            {\n                largest_negative = num;\n\
    \            }\n        }\n        else if(num > 0)\n        {\n            if(smallest_positive.isNull\
    \ || num < smallest_positive.get)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(item; lst)\n    {\n\
    \        if(item < 0)\n        {\n            if(largest_negative is null || item\
    \ > largest_negative)\n            {\n                largest_negative = item;\n\
    \            }\n        }\n        else if(item > 0)\n        {\n            if(smallest_positive\
    \ is null || item < smallest_positive)\n            {\n                smallest_positive\
    \ = item;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest = Nullable!(long).init;\n\
    \    Nullable!(long) smallest = Nullable!(long).init;\n    foreach(i; lst)\n \
    \   {\n        if(i < 0)\n        {\n            if(largest.isNull)\n        \
    \    {\n                largest = i;\n            }\n            else\n      \
    \      {\n                largest = max(largest, i);\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallest.isNull)\n        \
    \    {\n                smallest = i;\n            }\n            else\n     \
    \       {\n                smallest = min(smallest, i);\n            }\n     \
    \   }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largestNegative = Nullable!(long).init;\n    Nullable!(long) smallestPositive\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(largestNegative.isNull)\n            {\n             \
    \   largestNegative = i;\n            }\n            else\n            {\n   \
    \             largestNegative = max(largestNegative, i);\n            }\n    \
    \    }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative.isNull || num > largest_negative.get)\n         \
    \   {\n                largest_negative = num;\n            }\n        }\n   \
    \     else if(num > 0)\n        {\n            if(smallest_positive.isNull ||\
    \ num < smallest_positive.get)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = null;\n \
    \   Nullable!(long) smallestPositive = null;\n    foreach(l; lst) \n    {\n  \
    \      if(l < 0) \n        {\n            if(largestNegative is null || l > largestNegative)\
    \ \n            {\n                largestNegative = l;\n            }\n     \
    \   }\n        else if(l > 0) \n        {\n            if(smallestPositive is\
    \ null || l < smallestPositive) \n            {\n                smallestPositive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largestNegative is null || elem > largestNegative)\n           \
    \ {\n                largestNegative = elem;\n            }\n        }\n     \
    \   else if(elem > 0)\n        {\n            if(smallestPositive is null || elem\
    \ < smallestPositive)\n            {\n                smallestPositive = elem;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null)\n            {\n                largest_negative\
    \ = num;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, num);\n            }\n        }\n        else if(num\
    \ > 0)\n        {\n            if(smallest_positive is null)\n            {\n\
    \                smallest_positive = num;\n            }\n            else\n \
    \           {\n                smallest_positive = min(smallest_positive, num);\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largestNegative is null || num > largestNegative) \n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0) \n        {\n            if(smallestPositive is null || num\
    \ < smallestPositive) \n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else\n      \
    \  {\n            if(smallest_positive.isNull)\n            {\n              \
    \  smallest_positive = i;\n            }\n            else\n            {\n  \
    \              smallest_positive = min(smallest_positive, i);\n            }\n\
    \        }\n    }\n    return tuple(largest_negative, smallest_positive);\n}",
  "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst) \n    {\n        if(num < 0) \n        {\n  \
    \          if(largestNegative is null || num > largestNegative) \n           \
    \ {\n                largestNegative = num;\n            }\n        }\n      \
    \  else if(num > 0) \n        {\n            if(smallestPositive is null || num\
    \ < smallestPositive) \n            {\n                smallestPositive = num;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n    \
    \    if(i < 0)\n        {\n            if(largest_negative.isNull || largest_negative.get\
    \ > i)\n            {\n                largest_negative = i;\n            }\n\
    \        }\n        else\n        {\n            if(smallest_positive.isNull ||\
    \ smallest_positive.get < i)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_positive = Nullable!(long).init;\n    foreach(i; lst) \n    {\n   \
    \     if(i < 0) \n        {\n            if(largest_negative.isNull || i > largest_negative.get)\
    \ \n            {\n                largest_negative = i;\n            }\n    \
    \    }\n        else \n        {\n            if(smallest_positive.isNull || i\
    \ < smallest_positive.get) \n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null || num > largest_negative)\n            {\n\
    \                largest_negative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallest_positive is null || num < smallest_positive)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \    }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative.isNull) \n            {\n                largest_negative\
    \ = i;\n            }\n            else \n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\
    \ \n        {\n            if(smallest_positive.isNull) \n            {\n    \
    \            smallest_positive = i;\n            }\n            else \n      \
    \      {\n                smallest_positive = min(smallest_positive, i);\n   \
    \         }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else\n        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative.isNull || i > largestNegative.get)\n            {\n  \
    \              largestNegative = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallestPositive.isNull || i < smallestPositive.get)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n  \
    \  foreach(i; lst) \n    {\n        if(i < 0) \n        {\n            if(largest\
    \ is null || i > largest) \n            {\n                largest = i;\n    \
    \        }\n        }\n        else if(i > 0) \n        {\n            if(smallest\
    \ is null || i < smallest) \n            {\n                smallest = i;\n  \
    \          }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        } \n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative is null || i > largest_negative) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null || num > largest_negative)\n            {\n\
    \                largest_negative = num;\n            }\n        }\n        else\n\
    \        {\n            if(smallest_positive is null || num < smallest_positive)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \    }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(num; lst)\n    {\n   \
    \     if(num < 0)\n        {\n            if(largestNegative.isNull || num > largestNegative.get)\n\
    \            {\n                largestNegative = num;\n            }\n      \
    \  }\n        else if(num > 0)\n        {\n            if(smallestPositive.isNull\
    \ || num < smallestPositive.get)\n            {\n                smallestPositive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive.isNull)\n            {\n        \
    \        smallest_positive = i;\n            }\n            else\n           \
    \ {\n                smallest_positive = min(smallest_positive, i);\n        \
    \    }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(value; lst)\n    {\n        if(value < 0)\n        {\n\
    \            if(largestNegative.isNull || value > largestNegative.get)\n     \
    \       {\n                largestNegative = value;\n            }\n        }\n\
    \        else if(value > 0)\n        {\n            if(smallestPositive.isNull\
    \ || value < smallestPositive.get)\n            {\n                smallestPositive\
    \ = value;\n            }\n        }\n    }\n    return tuple(largestNegative,\
    \ smallestPositive);\n}", "{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n\
    \    Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \     else\n            {\n                largest_negative = max(largest_negative,\
    \ i);\n            }\n        }\n        else if(i > 0)\n        {\n         \
    \   if(smallest_positive.isNull)\n            {\n                smallest_positive\
    \ = i;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, i);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n\
    \    Nullable!(long) smallestPositive = Nullable!(long).init;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative.isNull\
    \ || i > largestNegative.get)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive.isNull || i < smallestPositive.get)\n            {\n\
    \                smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(n; lst)\
    \ \n    {\n        if(n < 0) \n        {\n            if(largest_negative is null\
    \ || n > largest_negative) \n            {\n                largest_negative =\
    \ n;\n            }\n        } \n        else if(n > 0) \n        {\n        \
    \    if(smallest_positive is null || n < smallest_positive) \n            {\n\
    \                smallest_positive = n;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(n;\
    \ lst)\n    {\n        if(n < 0)\n        {\n            if(largestNegative is\
    \ null || n > largestNegative)\n            {\n                largestNegative\
    \ = n;\n            }\n        }\n        else\n        {\n            if(smallestPositive\
    \ is null || n < smallestPositive)\n            {\n                smallestPositive\
    \ = n;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(i; lst) \n    {\n        if(i < 0) \n        {\n            if(largest_negative\
    \ is null || i > largest_negative) \n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else if(i > 0) \n        {\n       \
    \     if(smallest_positive is null || i < smallest_positive) \n            {\n\
    \                smallest_positive = i;\n            }\n        }\n    }\n   \
    \ return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst) \n    {\n        if(i < 0) \n        {\n            if(largestNegative\
    \ is null || i > largestNegative) \n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0) \n        {\n       \
    \     if(smallestPositive is null || i < smallestPositive) \n            {\n \
    \               smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largest_neg\
    \ = null;\n    Nullable!(long) smallest_pos = null;\n    foreach(num; lst)\n \
    \   {\n        if(num < 0)\n        {\n            if(largest_neg is null || num\
    \ > largest_neg)\n            {\n                largest_neg = num;\n        \
    \    }\n        }\n        else if(num > 0)\n        {\n            if(smallest_pos\
    \ is null || num < smallest_pos)\n            {\n                smallest_pos\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\
    \ if(num > 0)\n        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else\n\
    \        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = Nullable!(long).init;\n    Nullable!(long) smallestPositive\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(largestNegative.isNull)\n            {\n             \
    \   largestNegative = i;\n            }\n            else\n            {\n   \
    \             largestNegative = max(largestNegative, i);\n            }\n    \
    \    }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative is null)\n            {\n                largest_negative\
    \ = num;\n            }\n            else if(num > largest_negative)\n       \
    \     {\n                largest_negative = num;\n            }\n        }\n \
    \       else if(num > 0)\n        {\n            if(smallest_positive is null)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \        else if(num < smallest_positive)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(item; lst)\n    {\n\
    \        if(item < 0)\n        {\n            if(largest_negative is null)\n \
    \           {\n                largest_negative = item;\n            }\n     \
    \       else\n            {\n                largest_negative = max(largest_negative,\
    \ item);\n            }\n        }\n        else if(item > 0)\n        {\n   \
    \         if(smallest_positive is null)\n            {\n                smallest_positive\
    \ = item;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, item);\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(num; lst)\n\
    \    {\n        if(num < 0)\n        {\n            if(largest_negative is null\
    \ || num > largest_negative)\n            {\n                largest_negative\
    \ = num;\n            }\n        }\n        else if(num > 0)\n        {\n    \
    \        if(smallest_positive is null || num < smallest_positive)\n          \
    \  {\n                smallest_positive = num;\n            }\n        }\n   \
    \ }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest_negative\
    \ is null || num > largest_negative)\n            {\n                largest_negative\
    \ = num;\n            }\n        }\n        else if(num > 0)\n        {\n    \
    \        if(smallest_positive is null || num < smallest_positive)\n          \
    \  {\n                smallest_positive = num;\n            }\n        }\n   \
    \ }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largestNegative is\
    \ null || i > largestNegative)\n            {\n                largestNegative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallestPositive is null || i < smallestPositive)\n            {\n   \
    \             smallestPositive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\
    \ \n    {\n        if(i < 0) \n        {\n            if(largest_negative is null\
    \ || i > largest_negative) \n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0) \n        {\n         \
    \   if(smallest_positive is null || i < smallest_positive) \n            {\n \
    \               smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \     else\n            {\n                largest_negative = max(largest_negative,\
    \ i);\n            }\n        }\n        else if(i > 0)\n        {\n         \
    \   if(smallest_positive.isNull)\n            {\n                smallest_positive\
    \ = i;\n            }\n            else\n            {\n                smallest_positive\
    \ = min(smallest_positive, i);\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = null;\n\
    \    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n    {\n \
    \       if(i < 0)\n        {\n            if(largest_negative.isNull)\n      \
    \      {\n                largest_negative = i;\n            }\n            else\n\
    \            {\n                largest_negative = max(largest_negative, i);\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \      else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n    foreach(e;\
    \ lst)\n    {\n        if(e < 0)\n        {\n            if(largest is null ||\
    \ e > largest)\n            {\n                largest = e;\n            }\n \
    \       }\n        else if(e > 0)\n        {\n            if(smallest is null\
    \ || e < smallest)\n            {\n                smallest = e;\n           \
    \ }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long)\
    \ largestNegative = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(elem;\
    \ lst)\n    {\n        if(elem < 0)\n        {\n            if(largestNegative\
    \ is null || elem > largestNegative)\n            {\n                largestNegative\
    \ = elem;\n            }\n        }\n        else if(elem > 0)\n        {\n  \
    \          if(smallestPositive is null || elem < smallestPositive)\n         \
    \   {\n                smallestPositive = elem;\n            }\n        }\n  \
    \  }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = Nullable!(long).init;\n    Nullable!(long) smallest_positive\
    \ = Nullable!(long).init;\n    foreach(i; lst)\n    {\n        if(i < 0)\n   \
    \     {\n            if(largest_negative.isNull || i > largest_negative.get)\n\
    \            {\n                largest_negative = i;\n            }\n       \
    \ }\n        else if(i > 0)\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(item; lst)\n    {\n        if(item < 0)\n        {\n  \
    \          if(largest_negative is null)\n            {\n                largest_negative\
    \ = item;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, item);\n            }\n        }\n        else if(item\
    \ > 0)\n        {\n            if(smallest_positive is null)\n            {\n\
    \                smallest_positive = item;\n            }\n            else\n\
    \            {\n                smallest_positive = min(smallest_positive, item);\n\
    \            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(item; lst)\n    {\n        if(item < 0)\n        {\n  \
    \          if(largest_negative is null || item > largest_negative)\n         \
    \   {\n                largest_negative = item;\n            }\n        }\n  \
    \      else if(item > 0)\n        {\n            if(smallest_positive is null\
    \ || item < smallest_positive)\n            {\n                smallest_positive\
    \ = item;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largest_negative = Nullable!(long).init;\n\
    \    Nullable!(long) smallest_positive = Nullable!(long).init;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative.isNull\
    \ || i > largest_negative.get)\n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else\n        {\n            if(smallest_positive.isNull\
    \ || i < smallest_positive.get)\n            {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst) \n    {\n        if(i < 0) \n        {\n      \
    \      if(largest_negative.isNull || i > largest_negative.get) \n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0) \n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(x; lst)\n    {\n        if(x < 0)\n        {\n        \
    \    if(largestNegative is null || x > largestNegative)\n            {\n     \
    \           largestNegative = x;\n            }\n        }\n        else if(x\
    \ > 0)\n        {\n            if(smallestPositive is null || x < smallestPositive)\n\
    \            {\n                smallestPositive = x;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos = null;\n\
    \    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest_neg\
    \ is null || num > largest_neg)\n            {\n                largest_neg =\
    \ num;\n            }\n        }\n        else if(num > 0)\n        {\n      \
    \      if(smallest_pos is null || num < smallest_pos)\n            {\n       \
    \         smallest_pos = num;\n            }\n        }\n    }\n    return tuple(largest_neg,\
    \ smallest_pos);\n}", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long)\
    \ smallest_positive = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n \
    \       {\n            if(largest_negative is null)\n            {\n         \
    \       largest_negative = i;\n            }\n            else\n            {\n\
    \                largest_negative = max(largest_negative, i);\n            }\n\
    \        }\n        else\n        {\n            if(smallest_positive is null)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \      else\n            {\n                smallest_positive = min(smallest_positive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largest_negative.isNull || num > largest_negative.get)\n         \
    \   {\n                largest_negative = num;\n            }\n        }\n   \
    \     else\n        {\n            if(smallest_positive.isNull || num < smallest_positive.get)\n\
    \            {\n                smallest_positive = num;\n            }\n    \
    \    }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull || i > largest_negative.get)\n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n    \
    \        if(largestNegative is null || num > largestNegative)\n            {\n\
    \                largestNegative = num;\n            }\n        }\n        else\n\
    \        {\n            if(smallestPositive is null || num < smallestPositive)\n\
    \            {\n                smallestPositive = num;\n            }\n     \
    \   }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n \
    \   Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallestPositive is null || i < smallestPositive)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largest_negative is null || l > largest_negative)\n            {\n   \
    \             largest_negative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallest_positive is null || l < smallest_positive)\n\
    \            {\n                smallest_positive = l;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(elem; lst)\n    {\n        if(elem < 0)\n        {\n  \
    \          if(largest_negative is null || elem > largest_negative)\n         \
    \   {\n                largest_negative = elem;\n            }\n        }\n  \
    \      else\n        {\n            if(smallest_positive is null || elem < smallest_positive)\n\
    \            {\n                smallest_positive = elem;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largest_neg = null;\n    Nullable!(long) smallest_pos = null;\n    foreach(i;\
    \ lst)\n    {\n        if(i < 0)\n        {\n            if(largest_neg is null\
    \ || i > largest_neg)\n            {\n                largest_neg = i;\n     \
    \       }\n        }\n        else if(i > 0)\n        {\n            if(smallest_pos\
    \ is null || i < smallest_pos)\n            {\n                smallest_pos =\
    \ i;\n            }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative.isNull || i > largest_negative.get)\n            {\n\
    \                largest_negative = i;\n            }\n        }\n        else\
    \ if(i > 0)\n        {\n            if(smallest_positive.isNull || i < smallest_positive.get)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_neg = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest_pos = Nullable!(long).init;\n    foreach(elem; lst)\n    {\n      \
    \  if(elem < 0)\n        {\n            if(largest_neg.isNull || elem > largest_neg.get)\n\
    \            {\n                largest_neg = elem;\n            }\n        }\n\
    \        else if(elem > 0)\n        {\n            if(smallest_pos.isNull || elem\
    \ < smallest_pos.get)\n            {\n                smallest_pos = elem;\n \
    \           }\n        }\n    }\n    return tuple(largest_neg, smallest_pos);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(l; lst) \n    {\n        if(l < 0) \n        {\n            if(largest_negative\
    \ is null || l > largest_negative) \n            {\n                largest_negative\
    \ = l;\n            }\n        }\n        else \n        {\n            if(smallest_positive\
    \ is null || l < smallest_positive) \n            {\n                smallest_positive\
    \ = l;\n            }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null || i > largest_negative)\n            {\n   \
    \             largest_negative = i;\n            }\n        }\n        else if(i\
    \ > 0)\n        {\n            if(smallest_positive is null || i < smallest_positive)\n\
    \            {\n                smallest_positive = i;\n            }\n      \
    \  }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(long i; lst) \n    {\n        if(i < 0) \n        {\n \
    \           if(largest_negative is null || i > largest_negative) \n          \
    \  {\n                largest_negative = i;\n            }\n        }\n      \
    \  else \n        {\n            if(smallest_positive is null || i < smallest_positive)\
    \ \n            {\n                smallest_positive = i;\n            }\n   \
    \     }\n    }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n\
    \    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(item; lst)\n    {\n        if(item < 0)\n        {\n  \
    \          if(largestNegative is null || item > largestNegative)\n           \
    \ {\n                largestNegative = item;\n            }\n        }\n     \
    \   else\n        {\n            if(smallestPositive is null || item < smallestPositive)\n\
    \            {\n                smallestPositive = item;\n            }\n    \
    \    }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull)\n           \
    \ {\n                largestNegative = i;\n            }\n            else\n \
    \           {\n                largestNegative = max(largestNegative, i);\n  \
    \          }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive.isNull)\n\
    \            {\n                smallestPositive = i;\n            }\n       \
    \     else\n            {\n                smallestPositive = min(smallestPositive,\
    \ i);\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = Nullable!(long).init;\n    Nullable!(long)\
    \ smallest = Nullable!(long).init;\n    foreach(item; lst)\n    {\n        if(item\
    \ < 0)\n        {\n            if(largest.isNull || item > largest.get)\n    \
    \        {\n                largest = item;\n            }\n        }\n      \
    \  else if(item > 0)\n        {\n            if(smallest.isNull || item < smallest.get)\n\
    \            {\n                smallest = item;\n            }\n        }\n \
    \   }\n    return tuple(largest, smallest);\n}", "{\n    Nullable!(long) largestNegative\
    \ = null;\n    Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largestNegative is null ||\
    \ i > largestNegative)\n            {\n                largestNegative = i;\n\
    \            }\n        }\n        else if(i > 0)\n        {\n            if(smallestPositive\
    \ is null || i < smallestPositive)\n            {\n                smallestPositive\
    \ = i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_neg = null;\n    Nullable!(long) smallest_pos\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_neg is null || i > largest_neg)\n            {\n             \
    \   largest_neg = i;\n            }\n        }\n        else if(i > 0)\n     \
    \   {\n            if(smallest_pos is null || i < smallest_pos)\n            {\n\
    \                smallest_pos = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_neg, smallest_pos);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(l; lst)\n\
    \    {\n        if(l < 0)\n        {\n            if(largest_negative is null)\n\
    \            {\n                largest_negative = l;\n            }\n       \
    \     else if(l > largest_negative)\n            {\n                largest_negative\
    \ = l;\n            }\n        }\n        else if(l > 0)\n        {\n        \
    \    if(smallest_positive is null)\n            {\n                smallest_positive\
    \ = l;\n            }\n            else if(l < smallest_positive)\n          \
    \  {\n                smallest_positive = l;\n            }\n        }\n    }\n\
    \    return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest_negative\
    \ is null || num > largest_negative)\n            {\n                largest_negative\
    \ = num;\n            }\n        }\n        else if(num > 0)\n        {\n    \
    \        if(smallest_positive is null || num < smallest_positive)\n          \
    \  {\n                smallest_positive = num;\n            }\n        }\n   \
    \ }\n    return tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest_negative.isNull\
    \ || num > largest_negative.get)\n            {\n                largest_negative\
    \ = num;\n            }\n        }\n        else\n        {\n            if(smallest_positive.isNull\
    \ || num < smallest_positive.get)\n            {\n                smallest_positive\
    \ = num;\n            }\n        }\n    }\n    return tuple(largest_negative,\
    \ smallest_positive);\n}", "{\n    Nullable!(long) largestNegative = null;\n \
    \   Nullable!(long) smallestPositive = null;\n    foreach(i; lst)\n    {\n   \
    \     if(i < 0)\n        {\n            if(largestNegative is null || i > largestNegative)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive is null ||\
    \ i < smallestPositive)\n            {\n                smallestPositive = i;\n\
    \            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(l; lst)\n    {\n     \
    \   if(l < 0)\n        {\n            if(largestNegative.isNull || l > largestNegative.get)\n\
    \            {\n                largestNegative = l;\n            }\n        }\n\
    \        else if(l > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ l < smallestPositive.get)\n            {\n                smallestPositive =\
    \ l;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest = null;\n    Nullable!(long) smallest = null;\n\
    \    foreach(num; lst)\n    {\n        if(num < 0)\n        {\n            if(largest\
    \ is null || num > largest)\n            {\n                largest = num;\n \
    \           }\n        }\n        else if(num > 0)\n        {\n            if(smallest\
    \ is null || num < smallest)\n            {\n                smallest = num;\n\
    \            }\n        }\n    }\n    return tuple(largest, smallest);\n}", "{\n\
    \    Nullable!(long) largestNegative = Nullable!(long).init;\n    Nullable!(long)\
    \ smallestPositive = Nullable!(long).init;\n    foreach(i; lst)\n    {\n     \
    \   if(i < 0)\n        {\n            if(largestNegative.isNull || i > largestNegative.get)\n\
    \            {\n                largestNegative = i;\n            }\n        }\n\
    \        else if(i > 0)\n        {\n            if(smallestPositive.isNull ||\
    \ i < smallestPositive.get)\n            {\n                smallestPositive =\
    \ i;\n            }\n        }\n    }\n    return tuple(largestNegative, smallestPositive);\n\
    }", "{\n    Nullable!(long) largest_negative = null;\n    Nullable!(long) smallest_positive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largest_negative is null)\n            {\n                largest_negative\
    \ = i;\n            }\n            else\n            {\n                largest_negative\
    \ = max(largest_negative, i);\n            }\n        }\n        else if(i > 0)\n\
    \        {\n            if(smallest_positive is null)\n            {\n       \
    \         smallest_positive = i;\n            }\n            else\n          \
    \  {\n                smallest_positive = min(smallest_positive, i);\n       \
    \     }\n        }\n    }\n    return tuple(largest_negative, smallest_positive);\n\
    }", "{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(l; lst)\n    {\n        if(l < 0)\n        {\n        \
    \    if(largestNegative is null || l > largestNegative)\n            {\n     \
    \           largestNegative = l;\n            }\n        }\n        else if(l\
    \ > 0)\n        {\n            if(smallestPositive is null || l < smallestPositive)\n\
    \            {\n                smallestPositive = l;\n            }\n       \
    \ }\n    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n   \
    \ Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive\
    \ = null;\n    foreach(i; lst)\n    {\n        if(i < 0)\n        {\n        \
    \    if(largestNegative is null || i > largestNegative)\n            {\n     \
    \           largestNegative = i;\n            }\n        }\n        else\n   \
    \     {\n            if(smallestPositive is null || i < smallestPositive)\n  \
    \          {\n                smallestPositive = i;\n            }\n        }\n\
    \    }\n    return tuple(largestNegative, smallestPositive);\n}", "{\n    Nullable!(long)\
    \ largest_negative = null;\n    Nullable!(long) smallest_positive = null;\n  \
    \  foreach(i; lst)\n    {\n        if(i < 0)\n        {\n            if(largest_negative\
    \ is null || i > largest_negative)\n            {\n                largest_negative\
    \ = i;\n            }\n        }\n        else if(i > 0)\n        {\n        \
    \    if(smallest_positive is null || i < smallest_positive)\n            {\n \
    \               smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}", "{\n    Nullable!(long) largest_negative\
    \ = null;\n    Nullable!(long) smallest_positive = null;\n    foreach(i; lst)\n\
    \    {\n        if(i < 0)\n        {\n            if(largest_negative is null\
    \ || largest_negative < i)\n            {\n                largest_negative =\
    \ i;\n            }\n        }\n        else if(i > 0)\n        {\n          \
    \  if(smallest_positive is null || smallest_positive > i)\n            {\n   \
    \             smallest_positive = i;\n            }\n        }\n    }\n    return\
    \ tuple(largest_negative, smallest_positive);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
