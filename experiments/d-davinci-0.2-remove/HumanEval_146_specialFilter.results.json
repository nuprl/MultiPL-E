{
  "language": "d",
  "name": "HumanEval_146_specialFilter",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n => n > 10 && n.toString().front.to!long % 2 && n.toString().back.to!long % 2).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq4dtfrak.d(12): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4dtfrak.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString.front.to!long % 2 != 0 && num.toString.back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbs0lwkqq.d(15): Error: no property `toString` for type `long`\n/tmp/tmpbs0lwkqq.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbs0lwkqq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx7h4my1k.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpx7h4my1k.__unittest_L27_C1() [0x427ed1]\n??:? void tmpx7h4my1k.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu26ypp_l.d(15): Error: no property `front` for type `long`\n/tmp/tmpu26ypp_l.d(15): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu26ypp_l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && isOdd(n % 10) && isOdd(n / pow(10, (int)log10(n))))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptzgkctzn.d(15): Error: C style cast illegal, use `cast(int)log10(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzgkctzn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphing58pl.d(15): Error: no property `to` for type `long`\n/tmp/tmphing58pl.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphing58pl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf1ma3vqt.d(17): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf1ma3vqt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\n/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoclihhr0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.to!string.to!long[];\n            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ybceeyn.d(17): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ybceeyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\n/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoclihhr0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().map!(a => a.to!long).array;\n            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1kf1we7a.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kf1we7a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && isOdd(n) && isOdd(n % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp42zr3rwq.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp42zr3rwq.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42zr3rwq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit = num % 10;\n            auto lastDigit = num / pow(10, floor(log10(num)));\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsyqaop4z.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428fed]\n??:? void tmpsyqaop4z.__unittest_L27_C1() [0x4282fd]\n??:? void tmpsyqaop4z.__modtest() [0x428d6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d1ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c03e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431680]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43115d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c015]\n??:? runModuleUnitTests [0x42cf81]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42943c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!immutable(dchar[]);\n            if(digits[0].isOdd && digits[$-1].isOdd)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4tpdjv8d.d(17): Error: template argument expected following `!`\n/tmp/tmp4tpdjv8d.d(17): Error: semicolon expected following auto declaration, not `immutable`\n/tmp/tmp4tpdjv8d.d(17): Error: no identifier for declarator `immutable(dstring)`\n/tmp/tmp4tpdjv8d.d(17): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4tpdjv8d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            long firstDigit = n / 10;\n            long lastDigit = n % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5lp6r0pd.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp5lp6r0pd.__unittest_L27_C1() [0x427ed1]\n??:? void tmp5lp6r0pd.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto first = num.to!string[0];\n            auto last = num.to!string[$-1];\n            if(first.to!long.isOdd && last.to!long.isOdd)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5gq1d1mi.d(17): Error: no property `to` for type `long`\n/tmp/tmp5gq1d1mi.d(18): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5gq1d1mi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 2 != 0) && (num % 10 % 2 != 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcbqmjtwl.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpcbqmjtwl.__unittest_L22_C1() [0x427eb1]\n??:? void tmpcbqmjtwl.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n => n > 10 && n.toString().front.to!long % 2 && n.toString().back.to!long % 2).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq4dtfrak.d(12): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4dtfrak.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!(immutable(char)[])[];\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm1vdc7ol.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm1vdc7ol.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.digits;\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4e2tb098.d(17): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4e2tb098.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && (n % 2 == 1) && (n / pow(10, floor(log10(n))) % 2 == 1))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp04oj636x.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp04oj636x.__unittest_L22_C1() [0x42826a]\n??:? void tmp04oj636x.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\n/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48xjboei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 && num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwze9fdvg.d(15): Error: no property `to` for type `long`\n/tmp/tmpwze9fdvg.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwze9fdvg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && n.toString().front.to!long % 2 != 0 && n.toString().back.to!long % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwxcreclv.d(15): Error: no property `toString` for type `long`\n/tmp/tmpwxcreclv.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxcreclv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!(immutable(int))[];\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphro6iven.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphro6iven.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphing58pl.d(15): Error: no property `to` for type `long`\n/tmp/tmphing58pl.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphing58pl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits.front.isOdd && num.digits.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptua_bt3c.d(15): Error: no property `digits` for type `long`\n/tmp/tmptua_bt3c.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptua_bt3c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\n/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr69u6tuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / pow(10, (int)log10(num));\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpulpzrkyn.d(17): Error: C style cast illegal, use `cast(int)log10(num)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulpzrkyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            string str = to!string(num);\n            if(str[0] % 2 == 1 && str[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpde_ag0uq.d(17): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde_ag0uq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 2 != 0) && (num / cast(long)pow(10, floor(log10(num))) % 2 != 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\n/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48xjboei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString.map!(a => a.to!long)().array;\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyc5kswa4.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyc5kswa4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\n/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48xjboei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n => n > 10 && n.toString().front.to!long % 2 && n.toString().back.to!long % 2).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq4dtfrak.d(12): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4dtfrak.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzsxi5od8.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428275]\n??:? void tmpzsxi5od8.__unittest_L22_C1() [0x427ea1]\n??:? void tmpzsxi5od8.__modtest() [0x427ff8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430285]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430211]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto numStr = num.to!string;\n            if(numStr[0] % 2 != 0 && numStr[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6t_wj8e7.d(17): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6t_wj8e7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu26ypp_l.d(15): Error: no property `front` for type `long`\n/tmp/tmpu26ypp_l.d(15): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu26ypp_l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\n/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48xjboei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit = num / 10;\n            auto lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvrnxj6rn.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpvrnxj6rn.__unittest_L27_C1() [0x427ed1]\n??:? void tmpvrnxj6rn.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit = num / 10;\n            auto lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvrnxj6rn.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpvrnxj6rn.__unittest_L27_C1() [0x427ed1]\n??:? void tmpvrnxj6rn.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\n/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48xjboei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / (long)pow(10, (int)log10(num));\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprotlyg2u.d(17): Error: C style cast illegal, use `cast(int)log10(num)`\n/tmp/tmprotlyg2u.d(17): Error: C style cast illegal, use `cast(long)pow(10, cast(int)log10(num))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprotlyg2u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit = num % 10;\n            auto lastDigit = num / pow(10, floor(log10(num)));\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsyqaop4z.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428fed]\n??:? void tmpsyqaop4z.__unittest_L27_C1() [0x4282fd]\n??:? void tmpsyqaop4z.__modtest() [0x428d6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d1ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c03e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431680]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43115d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c015]\n??:? runModuleUnitTests [0x42cf81]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42943c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\n/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr69u6tuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums) \n    {\n        if(num > 10) \n        {\n            int first = num / cast(int) pow(10, floor(log10(num)));\n            int last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0) \n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm8l5rc5a.d(17): Error: cannot implicitly convert expression `num / cast(long)cast(int)pow(10, floor(log10(cast(real)num)))` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm8l5rc5a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpew5_lxoq.d(17): Error: no property `to` for type `long`\n/tmp/tmpew5_lxoq.d(17): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpew5_lxoq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n => n > 10 && n.toString().front.to!long.isOdd && n.toString().back.to!long.isOdd).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_r2_qn21.d(12): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_r2_qn21.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0dng4b0q.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp0dng4b0q.__unittest_L27_C1() [0x427ed1]\n??:? void tmp0dng4b0q.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            int firstDigit = num / 10;\n            int lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpki0e71_3.d(17): Error: cannot implicitly convert expression `num / 10L` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpki0e71_3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = to!string(num);\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptxybtkct.d(17): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxybtkct.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits.front % 2 != 0 && num.digits.back % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_ihhbvo3.d(15): Error: no property `digits` for type `long`\n/tmp/tmp_ihhbvo3.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ihhbvo3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!(ulong[]);\n            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq629fh5g.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq629fh5g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && n % 2 != 0 && n / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5or7hhdb.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmp5or7hhdb.__unittest_L22_C1() [0x427eb1]\n??:? void tmp5or7hhdb.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu26ypp_l.d(15): Error: no property `front` for type `long`\n/tmp/tmpu26ypp_l.d(15): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu26ypp_l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits.front % 2 != 0 && num.digits.back % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_ihhbvo3.d(15): Error: no property `digits` for type `long`\n/tmp/tmp_ihhbvo3.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ihhbvo3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\n/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr69u6tuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto first = num.to!string[0];\n            auto last = num.to!string[$-1];\n            if(first.to!long % 2 != 0 && last.to!long % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplbqs1nb3.d(17): Error: no property `to` for type `long`\n/tmp/tmplbqs1nb3.d(18): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbqs1nb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && n.toString.front.to!long % 2 != 0 && n.toString.back.to!long % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx0nnyq5y.d(15): Error: no property `toString` for type `long`\n/tmp/tmpx0nnyq5y.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0nnyq5y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            string num_str = num.to!string;\n            if(num_str[0] % 2 != 0 && num_str[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptrjz02ek.d(17): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptrjz02ek.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\n/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr69u6tuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit = num / pow(10, floor(log10(num)));\n            auto lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgoeuu9k.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428fe5]\n??:? void tmpdgoeuu9k.__unittest_L27_C1() [0x4282f9]\n??:? void tmpdgoeuu9k.__modtest() [0x428d68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d1a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c036]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431678]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431155]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c00d]\n??:? runModuleUnitTests [0x42cf79]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429434]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!immutable(dchar[]);\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6wvdj0sw.d(17): Error: template argument expected following `!`\n/tmp/tmp6wvdj0sw.d(17): Error: semicolon expected following auto declaration, not `immutable`\n/tmp/tmp6wvdj0sw.d(17): Error: no identifier for declarator `immutable(dstring)`\n/tmp/tmp6wvdj0sw.d(17): Deprecation: use `{ }` for an empty statement, not `;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wvdj0sw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            string str = num.to!string;\n            if(str[0] % 2 != 0 && str[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsnj1rt_x.d(17): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsnj1rt_x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / pow(10, floor(log10(num))) % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6gyq776q.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6gyq776q.__unittest_L22_C1() [0x4282d9]\n??:? void tmp6gyq776q.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            string s = num.to!string;\n            if(s[0] % 2 != 0 && s[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbpso2tc7.d(17): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbpso2tc7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n => n > 10 && (n % 2 == 1) && (n / pow(10, n.stringof.length - 1) % 2 == 1)).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk15h7moc.d(12): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk15h7moc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppm8mjhim.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42827d]\n??:? void tmppm8mjhim.__unittest_L22_C1() [0x427e36]\n??:? void tmppm8mjhim.__modtest() [0x427ffc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c267]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43028d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430219]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]\n??:? runModuleUnitTests [0x42c03d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu26ypp_l.d(15): Error: no property `front` for type `long`\n/tmp/tmpu26ypp_l.d(15): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu26ypp_l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto first = num.to!string[0];\n            auto last = num.to!string[$-1];\n            if(first.to!long.isOdd && last.to!long.isOdd)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5gq1d1mi.d(17): Error: no property `to` for type `long`\n/tmp/tmp5gq1d1mi.d(18): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5gq1d1mi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            string s = num.to!string;\n            if(s[0] % 2 == 1 && s[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpddh0yw5f.d(17): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpddh0yw5f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx7h4my1k.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpx7h4my1k.__unittest_L27_C1() [0x427ed1]\n??:? void tmpx7h4my1k.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num % 10) && isOdd(num / pow(10, num.to!string.length - 1)))\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpra46k9zj.d(15): Error: undefined identifier `isOdd`\n/tmp/tmpra46k9zj.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpra46k9zj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 2 != 0) && (num / 10 % 2 != 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppb_3hv9_.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmppb_3hv9_.__unittest_L22_C1() [0x427eb1]\n??:? void tmppb_3hv9_.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 2 != 0) && (num / 10 % 2 != 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppb_3hv9_.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmppb_3hv9_.__unittest_L22_C1() [0x427eb1]\n??:? void tmppb_3hv9_.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu26ypp_l.d(15): Error: no property `front` for type `long`\n/tmp/tmpu26ypp_l.d(15): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu26ypp_l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            int first = num / cast(int)pow(10, floor(log10(num)));\n            int last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprj1wkjyj.d(17): Error: cannot implicitly convert expression `num / cast(long)cast(int)pow(10, floor(log10(cast(real)num)))` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprj1wkjyj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\n/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48xjboei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long[] result = new long[nums.length];\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                result[count] = num;\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmporccs5uz.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4282f5]\n??:? void tmporccs5uz.__unittest_L29_C1() [0x427f1d]\n??:? void tmporccs5uz.__modtest() [0x428074]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b242]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43097c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430459]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b219]\n??:? runModuleUnitTests [0x42c185]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287b8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!(immutable(int)[])();\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1db3p_ly.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1db3p_ly.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto first = num.to!string[0];\n            auto last = num.to!string[$-1];\n            if(first.to!long % 2 != 0 && last.to!long % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplbqs1nb3.d(17): Error: no property `to` for type `long`\n/tmp/tmplbqs1nb3.d(18): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplbqs1nb3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\n/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr69u6tuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n => n > 10 && (n % 2 == 1) && (n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4b6dwb5t.d(12): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4b6dwb5t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\n/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoclihhr0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString.to!long;\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0dy789kt.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0dy789kt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphing58pl.d(15): Error: no property `to` for type `long`\n/tmp/tmphing58pl.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphing58pl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0dng4b0q.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp0dng4b0q.__unittest_L27_C1() [0x427ed1]\n??:? void tmp0dng4b0q.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!long[];\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpucphren1.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpucphren1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!long[];\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpucphren1.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpucphren1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.digits();\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps0et5gs0.d(17): Error: no property `digits` for type `long`\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && n.toString().front.to!long % 2 != 0 && n.toString().back.to!long % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwxcreclv.d(15): Error: no property `toString` for type `long`\n/tmp/tmpwxcreclv.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwxcreclv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long counter = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            counter++;\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc3xkmoom.d(15): Error: no property `to` for type `long`\n/tmp/tmpc3xkmoom.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc3xkmoom.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 != 0)\n            {\n                long first = num;\n                long last = num;\n                while(first >= 10)\n                {\n                    first /= 10;\n                }\n                while(last >= 10)\n                {\n                    last %= 10;\n                }\n                if(first % 2 != 0 && last % 2 != 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\n/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr69u6tuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && (n % 2 != 0) && (n / pow(10, floor(log10(n))) % 2 != 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpew20_zg6.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmpew20_zg6.__unittest_L22_C1() [0x4282d9]\n??:? void tmpew20_zg6.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && (n % 2 != 0) && (n % 10 != 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqu8zauqx.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428275]\n??:? void tmpqu8zauqx.__unittest_L22_C1() [0x427ea1]\n??:? void tmpqu8zauqx.__modtest() [0x427ff8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430285]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430211]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(a => a > 10 && a.toString().front.to!long % 2 && a.toString().back.to!long % 2).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2wef1fup.d(12): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wef1fup.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!long[];\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpucphren1.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpucphren1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / cast(long)pow(10, floor(log10(num)));\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = to!string(num);\n            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcf9cjndb.d(17): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcf9cjndb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString.to!long[];\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpurrru6c4.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpurrru6c4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 && num.toString().back.to!long % 2)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoted2f9i.d(15): Error: no property `toString` for type `long`\n/tmp/tmpoted2f9i.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoted2f9i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.digits;\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4e2tb098.d(17): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4e2tb098.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\n/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoclihhr0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\n/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr69u6tuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 && num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwze9fdvg.d(15): Error: no property `to` for type `long`\n/tmp/tmpwze9fdvg.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwze9fdvg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!int() % 2 != 0 && num.to!string().back.to!int() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzr42ssl6.d(15): Error: no property `to` for type `long`\n/tmp/tmpzr42ssl6.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzr42ssl6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit = num / 10;\n            auto lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvrnxj6rn.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpvrnxj6rn.__unittest_L27_C1() [0x427ed1]\n??:? void tmpvrnxj6rn.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n => n > 10 && (n % 2 == 1) && (n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4b6dwb5t.d(12): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4b6dwb5t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\n/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48xjboei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\n/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr69u6tuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / pow(10, (int)log10(num));\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp__o8pn4e.d(17): Error: C style cast illegal, use `cast(int)log10(num)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp__o8pn4e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / pow(10, (int)log10(num));\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx83qo5b9.d(17): Error: C style cast illegal, use `cast(int)log10(num)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx83qo5b9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0].to!long.isOdd && num.to!string[$-1].to!long.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkx051d4t.d(15): Error: no property `to` for type `long`\n/tmp/tmpkx051d4t.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkx051d4t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            string str = num.to!string;\n            if(str[0] % 2 == 1 && str[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz6hwzej_.d(17): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz6hwzej_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto firstDigit = num % 10;\n            auto lastDigit = num / pow(10, floor(log10(num)));\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsyqaop4z.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428fed]\n??:? void tmpsyqaop4z.__unittest_L27_C1() [0x4282fd]\n??:? void tmpsyqaop4z.__modtest() [0x428d6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d1ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c03e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431680]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43115d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c015]\n??:? runModuleUnitTests [0x42cf81]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42943c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto first = num.toString()[0];\n            auto last = num.toString()[$-1];\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1u6h2egl.d(17): Error: no property `toString` for type `long`\n/tmp/tmp1u6h2egl.d(18): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1u6h2egl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\n/tmp/tmp48xjboei.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp48xjboei.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.digits;\n            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfcxiltp6.d(17): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfcxiltp6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu26ypp_l.d(15): Error: no property `front` for type `long`\n/tmp/tmpu26ypp_l.d(15): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu26ypp_l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = to!string(num);\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptxybtkct.d(17): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxybtkct.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 2 == 1) && (num / pow(10, floor(log10(num))) % 2 == 1))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpe03akvl1.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmpe03akvl1.__unittest_L22_C1() [0x42826a]\n??:? void tmpe03akvl1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = to!string(num);\n            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcf9cjndb.d(17): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcf9cjndb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu26ypp_l.d(15): Error: no property `front` for type `long`\n/tmp/tmpu26ypp_l.d(15): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu26ypp_l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.toString().front.to!long % 2 != 0 && num.toString().back.to!long % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\n/tmp/tmpr69u6tuk.d(15): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr69u6tuk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!long[];\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpucphren1.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpucphren1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().to!long;\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpccuar39u.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpccuar39u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 2 != 0) && (num / 10 % 2 != 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppb_3hv9_.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmppb_3hv9_.__unittest_L22_C1() [0x427eb1]\n??:? void tmppb_3hv9_.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, ceil(log10(num))) == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqknmp_x9.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428fad]\n??:? void tmpqknmp_x9.__unittest_L22_C1() [0x428252]\n??:? void tmpqknmp_x9.__modtest() [0x428d30]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d18b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c01e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43113d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bff5]\n??:? runModuleUnitTests [0x42cf61]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4293fc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp0ok30jp2.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ok30jp2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\n/tmp/tmpoclihhr0.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoclihhr0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.digits;\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4e2tb098.d(17): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4e2tb098.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.toString().map!(a => a.to!long()).array;\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbp5zk03c.d(17): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbp5zk03c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpew5_lxoq.d(17): Error: no property `to` for type `long`\n/tmp/tmpew5_lxoq.d(17): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpew5_lxoq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\n/tmp/tmpoyihamxt.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyihamxt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits()[0] % 2 != 0 && num.digits()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr8a1d8yq.d(15): Error: no property `digits` for type `long`\n/tmp/tmpr8a1d8yq.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8a1d8yq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    return nums.filter!(n => n > 10 && n.toString().front.to!long % 2 && n.toString().back.to!long % 2).length;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq4dtfrak.d(12): Error: no property `filter` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq4dtfrak.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\n/tmp/tmp8c4175fy.d(15): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8c4175fy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 2 != 0) && (num % 10 % 2 != 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcbqmjtwl.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpcbqmjtwl.__unittest_L22_C1() [0x427eb1]\n??:? void tmpcbqmjtwl.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && n % 2 != 0 && n / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5or7hhdb.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmp5or7hhdb.__unittest_L22_C1() [0x427eb1]\n??:? void tmp5or7hhdb.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10 && isOdd(n) && isOdd(n % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp42zr3rwq.d(15): Error: undefined identifier `isOdd`\n/tmp/tmp42zr3rwq.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp42zr3rwq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits.front.isOdd && num.digits.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptua_bt3c.d(15): Error: no property `digits` for type `long`\n/tmp/tmptua_bt3c.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptua_bt3c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx7h4my1k.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpx7h4my1k.__unittest_L27_C1() [0x427ed1]\n??:? void tmpx7h4my1k.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164330
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits().front.isOdd && num.digits().back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp72bduae.d(15): Error: no property `digits` for type `long`\n/tmp/tmpp72bduae.d(15): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp72bduae.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto first = num.toString().front;\n            auto last = num.toString().back;\n            if(first.to!long % 2 != 0 && last.to!long % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppfi0q66w.d(17): Error: no property `toString` for type `long`\n/tmp/tmppfi0q66w.d(18): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfi0q66w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n            \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num % 10) && isOdd(num / pow(10, floor(log10(num)))) )\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpanyxxgip.d(15): Error: undefined identifier `isOdd`\n/tmp/tmpanyxxgip.d(15): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpanyxxgip.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164331
    }
  ]
}