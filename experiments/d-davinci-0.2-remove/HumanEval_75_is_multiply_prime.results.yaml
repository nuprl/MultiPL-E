language: d
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a <= 1) \n\
    \        return false;\n    if (a == 2) \n        return true;\n    if (a % 2\
    \ == 0) \n        return false;\n    for (long i = 3; i <= sqrt(a); i += 2) \n\
    \    {\n        if (a % i == 0) \n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp679gu_jo.d(19): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp679gu_jo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long b = a;\n\
    \    long c = a;\n    long d = a;\n    long e = a;\n    long f = a;\n    long\
    \ g = a;\n    long h = a;\n    long i = a;\n    long j = a;\n    long k = a;\n\
    \    long l = a;\n    long m = a;\n    long n = a;\n    long o = a;\n    long\
    \ p = a;\n    long q = a;\n    long r = a;\n    long s = a;\n    long t = a;\n\
    \    long u = a;\n    long v = a;\n    long w = a;\n    long x = a;\n    long\
    \ y = a;\n    long z = a;\n    long aa = a;\n    long ab = a;\n    long ac = a;\n\
    \    long ad = a;\n    long ae = a;\n    long af = a;\n    long ag = a;\n    long\
    \ ah = a;\n    long ai = a;\n    long aj = a;\n    long ak = a;\n    long al =\
    \ a;\n    long am = a;\n    long an = a;\n    long ao = a;\n    long ap = a;\n\
    \    long aq = a;\n    long ar = a;\n    long as = a;\n    long at = a;\n    long\
    \ au = a;\n    long av = a;\n    long aw = a;\n    long ax = a;\n    long ay =\
    \ a;\n    long az = a;\n    long ba = a;\n    long bb = a;\n    long bc = a;\n\
    \    long bd = a;\n    long be = a;\n    long bf = a;\n    long bg = a;\n    long\
    \ bh = a;\n    long bi = a;\n    long bj = a;\n    long bk = a;\n    long bl =\
    \ a;\n    long bm = a;\n    long bn = a;\n    long bo = a;\n    long bp = a;\n\
    \    long bq = a;\n    long br = a;\n    long bs = a;\n   \nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphyw_81c.d(84): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphyw_81c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime; primes)\n\
    \    {\n        if(a % prime == 0)\n        {\n            factors ~= prime;\n\
    \            a /= prime;\n        }\n    }\n    return factors.length == 3;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8e1if71o.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42826d]

    ??:? void tmp8e1if71o.__unittest_L25_C1() [0x427f02]

    ??:? void tmp8e1if71o.__modtest() [0x427ff0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304b5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42baad]

    ??:? runModuleUnitTests [0x42ca19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        for (long i = 2; i <= sqrt(n);\
    \ i++)\n            if (n % i == 0) return false;\n        return true;\n    }\n\
    \    for (long i = 2; i <= a / 2; i++)\n        if (is_prime(i) && a % i == 0)\n\
    \        {\n            long b = a / i;\n            if (is_prime(b))\n      \
    \      {\n                long c = b / i;\n                if (is_prime(c))\n\
    \                    return true;\n            }\n        }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhpr0oz3.d(16): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhpr0oz3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n    {\n        if(a\
    \ % primes[i] == 0)\n        {\n            a /= primes[i];\n            if(a\
    \ == 1)\n            {\n                return true;\n            }\n        \
    \    i = 0;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcfq484sj.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmpcfq484sj.__unittest_L28_C1() [0x427eca]

    ??:? void tmpcfq484sj.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b166]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430285]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b13d]

    ??:? runModuleUnitTests [0x42c0a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428738]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long b = a;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n\
    \    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af =\
    \ 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n\
    \    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long\
    \ ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as =\
    \ 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n\
    \    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long\
    \ bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf =\
    \ 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n\
    \    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long\
    \ bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ju_q1bi.d(84): Error: no identifier for declarator `long`

    /tmp/tmp8ju_q1bi.d(84): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ju_q1bi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long x = a;\n    long y = a;\n    long\
    \ z = a;\n    bool is_prime = true;\n    bool is_multiply = false;\n    while\
    \ (i < 100)\n    {\n        while (j < 100)\n        {\n            while (k <\
    \ 100)\n            {\n                if (i * j * k == a)\n                {\n\
    \                    is_multiply = true;\n                    x = i;\n       \
    \             y = j;\n                    z = k;\n                }\n        \
    \        k++;\n            }\n            j++;\n            k = 2;\n        }\n\
    \        i++;\n        j = 2;\n    }\n    if (is_multiply)\n    {\n        if\
    \ (is_prime_number(x) && is_prime_number(y) && is_prime_number(z))\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else\n    {\n        return false;\n    }\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc4qtei_g.d(44): Error: undefined identifier `is_prime_number`

    /tmp/tmpc4qtei_g.d(44): Error: undefined identifier `is_prime_number`

    /tmp/tmpc4qtei_g.d(44): Error: undefined identifier `is_prime_number`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4qtei_g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime\
    \ = true;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    long result\
    \ = 0;\n    while (i <= a) \n    {\n        while (j <= a) \n        {\n     \
    \       while (k <= a) \n            {\n                result = i * j * k;\n\
    \                if (result == a) \n                {\n                    return\
    \ true;\n                }\n                k++;\n            }\n            k\
    \ = 2;\n            j++;\n        }\n        j = 2;\n        i++;\n    }\n   \
    \ return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp36ryjm95.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmp36ryjm95.__unittest_L39_C1() [0x427b66]

    ??:? void tmp36ryjm95.__modtest() [0x427bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430050]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]

    ??:? runModuleUnitTests [0x42b951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long prime; primes)\n\
    \    {\n        if(a % prime == 0)\n        {\n            a /= prime;\n     \
    \       if(a == 1)\n            {\n                result = true;\n          \
    \      break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp97huzrjx.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428225]

    ??:? void tmp97huzrjx.__unittest_L29_C1() [0x427e7a]

    ??:? void tmp97huzrjx.__modtest() [0x427fa8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c20f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430235]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b079]

    ??:? runModuleUnitTests [0x42bfe5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428674]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2)\n            return false;\n        if (n == 2)\n\
    \            return true;\n        if (n % 2 == 0)\n            return false;\n\
    \        for (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n\
    \ % i == 0)\n                return false;\n        }\n        return true;\n\
    \    }\n    if (a < 6)\n        return false;\n    for (long i = 2; i <= a / 3;\
    \ i++)\n    {\n        if (is_prime(i) && is_prime(a / i) && is_prime(a / (a /\
    \ i)))\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplkjfosl_.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkjfosl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0) return false;\n        }\n \
    \       return true;\n    }\n    if (a <= 1) return false;\n    if (a == 2) return\
    \ true;\n    if (a % 2 == 0) return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n        {\n            if (is_prime(i)\
    \ && is_prime(a / i))\n            {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6toz3qls.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp6toz3qls.d(27): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6toz3qls.d", "-I/tm'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ a)\n    {\n        if (a == 2)\n            return true;\n        if (a % 2\
    \ == 0)\n            return false;\n        for (long i = 3; i <= sqrt(a); i +=\
    \ 2)\n        {\n            if (a % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    if (a == 1)\n        return false;\n\
    \    if (a == 2)\n        return true;\n    if (a % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n\
    \        {\n            if (is_prime(i) && is_prime(a / i))\n                return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdf5za2za.d(19): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpdf5za2za.d(32): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdf5za2za.d", "-I/tm'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int count = 0;\n\
    \    for (int i = 2; i <= a; i++) \n    {\n        if (a % i == 0) \n        {\n\
    \            if (isPrime(i)) \n            {\n                count++;\n     \
    \           a /= i;\n                i--;\n            }\n        }\n    }\n \
    \   return count == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk5622jdf.d(18): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5622jdf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; primes)\n    {\n        if(a % i == 0)\n\
    \        {\n            foreach(j; primes)\n            {\n                if(a\
    \ % j == 0)\n                {\n                    foreach(k; primes)\n     \
    \               {\n                        if(a % k == 0)\n                  \
    \      {\n                            if(a == i * j * k)\n                   \
    \         {\n                                return true;\n                  \
    \          }\n                        }\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    if (a < 100)\n    {\n        long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \        foreach (i; primes)\n        {\n            if (a % i == 0)\n       \
    \     {\n                result = true;\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_ion0w4e.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmp_ion0w4e.__unittest_L28_C1() [0x427e6a]

    ??:? void tmp_ion0w4e.__modtest() [0x427f98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b092]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430225]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306d4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b069]

    ??:? runModuleUnitTests [0x42bfd5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428664]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    long i = 2;\n    while (i <= a)\n\
    \    {\n        if (is_prime(i) && a % i == 0)\n        {\n            a /= i;\n\
    \            if (a == 1)\n                return true;\n        }\n        else\n\
    \            i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9dj9yul1.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9dj9yul1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1)\n            return false;\n        else if (n\
    \ <= 3)\n            return true;\n        else if (n % 2 == 0 || n % 3 == 0)\n\
    \            return false;\n        long i = 5;\n        while (i * i <= n)\n\
    \        {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return\
    \ false;\n            i += 6;\n        }\n        return true;\n    }\n    if\
    \ (a <= 1)\n        return false;\n    else if (a <= 3)\n        return true;\n\
    \    else if (a % 2 == 0 || a % 3 == 0)\n        return false;\n    long i = 5;\n\
    \    while (i * i <= a)\n    {\n        if (a % i == 0 || a % (i + 2) == 0)\n\
    \            return false;\n        i += 6;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpranbuh0u.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f7d]

    ??:? void tmpranbuh0u.__unittest_L45_C1() [0x427bd2]

    ??:? void tmpranbuh0u.__modtest() [0x427d00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430178]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab0d]

    ??:? runModuleUnitTests [0x42ba79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long b = a;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n\
    \    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af =\
    \ 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n\
    \    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long\
    \ ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as =\
    \ 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n\
    \    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long\
    \ bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf =\
    \ 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n\
    \    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long\
    \ bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ju_q1bi.d(84): Error: no identifier for declarator `long`

    /tmp/tmp8ju_q1bi.d(84): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ju_q1bi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    for\
    \ (i = 0; i < primes.length; i++) \n    {\n        for (j = 0; j < primes.length;\
    \ j++) \n        {\n            for (k = 0; k < primes.length; k++) \n       \
    \     {\n                if (primes[i] * primes[j] * primes[k] == a) \n      \
    \          {\n                    return true;\n                }\n          \
    \  }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n    {\n        if(a\
    \ % primes[i] == 0)\n        {\n            a /= primes[i];\n            if(a\
    \ == 1)\n            {\n                return true;\n            }\n        \
    \    else\n            {\n                i = 0;\n            }\n        }\n \
    \   }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpre7f9g9z.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmpre7f9g9z.__unittest_L31_C1() [0x427eca]

    ??:? void tmpre7f9g9z.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b166]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430285]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b13d]

    ??:? runModuleUnitTests [0x42c0a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428738]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe9dzpaf5.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpe9dzpaf5.__unittest_L23_C1() [0x427acf]

    ??:? void tmpe9dzpaf5.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i; primes)\n   \
    \ {\n        if(a % i == 0)\n        {\n            factors ~= i;\n          \
    \  a /= i;\n        }\n    }\n    return factors.length == 3;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj38ioiac.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42826d]

    ??:? void tmpj38ioiac.__unittest_L25_C1() [0x427f02]

    ??:? void tmpj38ioiac.__modtest() [0x427ff0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304b5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42baad]

    ??:? runModuleUnitTests [0x42ca19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) \n\
    \        return false;\n    if (a % 2 == 0) \n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0) \n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0) \n        return is_multiply_prime(a / 5);\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5fwxw5g2.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmp5fwxw5g2.__unittest_L23_C1() [0x427acf]

    ??:? void tmp5fwxw5g2.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_multiply_prime\
    \ = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; prime_numbers)\n\
    \    {\n        if(a % i == 0)\n        {\n            is_multiply_prime = true;\n\
    \        }\n    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpct7lizub.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpct7lizub.__unittest_L24_C1() [0x427e5e]

    ??:? void tmpct7lizub.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b08a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]

    ??:? runModuleUnitTests [0x42bfcd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42865c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    int i = 2;\n    int count = 0;\n    while (i <= a)\n    {\n    \
    \    if (a % i == 0)\n        {\n            if (isPrime(i))\n            {\n\
    \                count++;\n                a /= i;\n            }\n        }\n\
    \        i++;\n    }\n    if (count == 3)\n        result = true;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp78qxam7g.d(20): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78qxam7g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0) return false;\n        }\n \
    \       return true;\n    }\n    long i = 2;\n    while (i < a)\n    {\n     \
    \   if (is_prime(i) && a % i == 0)\n        {\n            a /= i;\n         \
    \   if (is_prime(a)) return true;\n        }\n        else\n        {\n      \
    \      i++;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87yx1twm.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87yx1twm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0) return false;\n        }\n \
    \       return true;\n    }\n    if (a < 6) return false;\n    if (a % 2 == 0)\
    \ return is_multiply_prime(a / 2);\n    if (a % 3 == 0) return is_multiply_prime(a\
    \ / 3);\n    for (long i = 5; i <= sqrt(a); i += 6)\n    {\n        if (a % i\
    \ == 0) return is_multiply_prime(a / i);\n        if (a % (i + 2) == 0) return\
    \ is_multiply_prime(a / (i + 2));\n    }\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0wktsbsd.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp0wktsbsd.d(27): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wktsbsd.d", "-I/tm'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        foreach (i; 2 .. n)\n        {\n\
    \            if (n % i == 0) return false;\n        }\n        return true;\n\
    \    }\n    bool is_multiply_prime(long a)\n    {\n        foreach (i; 2 .. a)\n\
    \        {\n            if (is_prime(i) && a % i == 0)\n            {\n      \
    \          foreach (j; 2 .. a)\n                {\n                    if (is_prime(j)\
    \ && a % j == 0 && i != j)\n                    {\n                        foreach\
    \ (k; 2 .. a)\n                        {\n                            if (is_prime(k)\
    \ && a % k == 0 && i != k && j != k)\n                            {\n        \
    \                        return true;\n                            }\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvawu9v63.d(11): Error: function `tmpvawu9v63.is_multiply_prime`
    has no `return` statement, but is expected to return a value of type `bool`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvawu9v63.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_multiply_prime\
    \ = false;\n    if (a == 1)\n        return is_multiply_prime;\n    if (a == 2)\n\
    \        return true;\n    if (a == 3)\n        return true;\n    if (a == 5)\n\
    \        return true;\n    if (a == 7)\n        return true;\n    if (a == 11)\n\
    \        return true;\n    if (a == 13)\n        return true;\n    if (a == 17)\n\
    \        return true;\n    if (a == 19)\n        return true;\n    if (a == 23)\n\
    \        return true;\n    if (a == 29)\n        return true;\n    if (a == 31)\n\
    \        return true;\n    if (a == 37)\n        return true;\n    if (a == 41)\n\
    \        return true;\n    if (a == 43)\n        return true;\n    if (a == 47)\n\
    \        return true;\n    if (a == 53)\n        return true;\n    if (a == 59)\n\
    \        return true;\n    if (a == 61)\n        return true;\n    if (a == 67)\n\
    \        return true;\n    if (a == 71)\n        return true;\n    if (a == 73)\n\
    \        return true;\n    if (a == 79)\n        return true;\n    if (a == 83)\n\
    \        return true;\n    if (a == 89)\n        return true;\n    if (a == 97)\n\
    \        return true;\n    if (a == 6)\n        return is_multiply_prime;\n  \
    \  if (a == 10)\n        return is_multiply_prime;\n    if (a == 14)\n       \
    \ return is_multiply_prime;\n    if (a == 15)\n        return is_multiply_prime;\n\
    \    if (a == 21)\n        return is_multiply_prime;\n    if (a == 22)\n     \
    \   return is_multiply_prime;\n    if (a == 33)\n        return is_multiply_prime;\n\
    \    if (a == 34)\n        return is_multiply_prime;\n\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1ejd37o.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1ejd37o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    if (a % 7 == 0)\n\
    \        return is_multiply_prime(a / 7);\n    if (a % 11 == 0)\n        return\
    \ is_multiply_prime(a / 11);\n    if (a % 13 == 0)\n        return is_multiply_prime(a\
    \ / 13);\n    if (a % 17 == 0)\n        return is_multiply_prime(a / 17);\n  \
    \  if (a % 19 == 0)\n        return is_multiply_prime(a / 19);\n    if (a % 23\
    \ == 0)\n        return is_multiply_prime(a / 23);\n    if (a % 29 == 0)\n   \
    \     return is_multiply_prime(a / 29);\n    if (a % 31 == 0)\n        return\
    \ is_multiply_prime(a / 31);\n    if (a % 37 == 0)\n        return is_multiply_prime(a\
    \ / 37);\n    if (a % 41 == 0)\n        return is_multiply_prime(a / 41);\n  \
    \  if (a % 43 == 0)\n        return is_multiply_prime(a / 43);\n    if (a % 47\
    \ == 0)\n        return is_multiply_prime(a / 47);\n    if (a % 53 == 0)\n   \
    \     return is_multiply_prime(a / 53);\n    if (a % 59 == 0)\n        return\
    \ is_multiply_prime(a / 59);\n    if (a % 61 == 0)\n        return is_multiply_prime(a\
    \ / 61);\n    if (a % 67 == 0)\n        return is_multiply_prime(a / 67);\n  \
    \  if (a % 71 == 0)\n        return is_multiply_prime(a\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3rgwiwp.d(55): Error: found `unittest` when expecting `,`

    /tmp/tmpa3rgwiwp.d(70): Error: found `void` when expecting `,`

    /tmp/tmpa3rgwiwp.d(70): Error: found `{` when expecting `,`

    /tmp/tmpa3rgwiwp.d(70): Error: expression expected, not `}`

    /tmp/tmpa3rgwiwp.d(70): Error: found `End of File` when expecting `,`

    /tmp/tmpa3rgwiwp.d(70): Error: found `End of File` when expecting `)`

    /tmp/tmpa3rgwiwp.d(70): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpa3rgwiwp.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3rgwiwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    // Write your\
    \ code here\n    bool isPrime = true;\n    int count = 0;\n    for(int i = 2;\
    \ i <= a; i++)\n    {\n        isPrime = true;\n        for(int j = 2; j <= i/2;\
    \ j++)\n        {\n            if(i % j == 0)\n            {\n               \
    \ isPrime = false;\n                break;\n            }\n        }\n       \
    \ if(isPrime)\n        {\n            if(a % i == 0)\n            {\n        \
    \        count++;\n                a = a / i;\n            }\n        }\n    \
    \    if(count == 3)\n        {\n            return true;\n        }\n    }\n \
    \   return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplj8ismbm.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmplj8ismbm.__unittest_L42_C1() [0x427b0a]

    ??:? void tmplj8ismbm.__modtest() [0x427bf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]

    ??:? runModuleUnitTests [0x42b971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime\
    \ = true;\n    for (int i = 2; i <= a / 2; i++)\n    {\n        if (a % i == 0)\n\
    \        {\n            is_prime = false;\n            break;\n        }\n   \
    \ }\n    return is_prime;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphzx62wkd.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmphzx62wkd.__unittest_L24_C1() [0x427a7e]

    ??:? void tmphzx62wkd.__modtest() [0x427bac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n    {\n        foreach(j;\
    \ i .. primes.length)\n        {\n            foreach(k; j .. primes.length)\n\
    \            {\n                if(primes[i] * primes[j] * primes[k] == a)\n \
    \               {\n                    return true;\n                }\n     \
    \       }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    if (a <= 1) return false;\n    if\
    \ (a == 2) return true;\n    if (a % 2 == 0) return false;\n    for (long i =\
    \ 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n        {\n      \
    \      if (is_prime(i) && is_prime(a / i))\n                return true;\n   \
    \     }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexaubcyi.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpexaubcyi.d(28): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexaubcyi.d", "-I/tm'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a == 1) return\
    \ false;\n    if (a == 2) return true;\n    if (a == 3) return true;\n    if (a\
    \ % 2 == 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 5 ==\
    \ 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 11 == 0) return\
    \ false;\n    if (a % 13 == 0) return false;\n    if (a % 17 == 0) return false;\n\
    \    if (a % 19 == 0) return false;\n    if (a % 23 == 0) return false;\n    if\
    \ (a % 29 == 0) return false;\n    if (a % 31 == 0) return false;\n    if (a %\
    \ 37 == 0) return false;\n    if (a % 41 == 0) return false;\n    if (a % 43 ==\
    \ 0) return false;\n    if (a % 47 == 0) return false;\n    if (a % 53 == 0) return\
    \ false;\n    if (a % 59 == 0) return false;\n    if (a % 61 == 0) return false;\n\
    \    if (a % 67 == 0) return false;\n    if (a % 71 == 0) return false;\n    if\
    \ (a % 73 == 0) return false;\n    if (a % 79 == 0) return false;\n    if (a %\
    \ 83 == 0) return false;\n    if (a % 89 == 0) return false;\n    if (a % 97 ==\
    \ 0) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy6lvd3a0.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ffd]

    ??:? void tmpy6lvd3a0.__unittest_L43_C1() [0x427c6f]

    ??:? void tmpy6lvd3a0.__modtest() [0x427d7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abb6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab8d]

    ??:? runModuleUnitTests [0x42baf9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42844c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(i; primes)\n   \
    \ {\n        if(a % i == 0)\n        {\n            factors ~= i;\n          \
    \  a /= i;\n        }\n    }\n    if(factors.length == 3)\n    {\n        return\
    \ true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdf7tz8xn.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmpdf7tz8xn.__unittest_L29_C1() [0x427f0a]

    ??:? void tmpdf7tz8xn.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430531]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304bd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bab5]

    ??:? runModuleUnitTests [0x42ca21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long b = a;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n\
    \    if(a % 2 == 0)\n    {\n        b = a / 2;\n        if(b % 2 == 0)\n     \
    \   {\n            c = b / 2;\n            if(c % 2 == 0)\n            {\n   \
    \             d = c / 2;\n                if(d % 2 == 0)\n                {\n\
    \                    e = d / 2;\n                    if(e % 2 == 0)\n        \
    \            {\n                        result = false;\n                    }\n\
    \                    else\n                    {\n                        result\
    \ = true;\n                    }\n                }\n                else\n  \
    \              {\n                    result = true;\n                }\n    \
    \        }\n            else\n            {\n                result = true;\n\
    \            }\n        }\n        else\n        {\n            result = true;\n\
    \        }\n    }\n    else\n    {\n        result = false;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6wx9pzgc.d(67): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ed5]

    ??:? void tmp6wx9pzgc.__unittest_L60_C1() [0x427b85]

    ??:? void tmp6wx9pzgc.__modtest() [0x427c54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbfb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]

    ??:? runModuleUnitTests [0x42b9d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428324]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long count = 0;\n    while (a != 1) \n    {\n        if (a % i == 0) \n \
    \       {\n            a /= i;\n            count++;\n        }\n        else\
    \ \n        {\n            if (count == 1)\n                return false;\n  \
    \          else \n            {\n                i++;\n                count =\
    \ 0;\n            }\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpigoblho8.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpigoblho8.__unittest_L35_C1() [0x427a8a]

    ??:? void tmpigoblho8.__modtest() [0x427bb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430030]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb0d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9c5]

    ??:? runModuleUnitTests [0x42b931]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2) {\n            if (n % i == 0) return false;\n        }\n        return\
    \ true;\n    }\n    if (a <= 1) return false;\n    if (a == 2) return true;\n\
    \    if (a % 2 == 0) return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\
    \ {\n        if (a % i == 0) {\n            if (is_prime(i) && is_prime(a / i))\
    \ return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqzd24nf.d(17): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpxqzd24nf.d(25): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqzd24nf.d", "-I/tm'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5q6gxf8.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmpu5q6gxf8.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5q6gxf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2)\n            return false;\n        else if (n\
    \ == 2)\n            return true;\n        else if (n % 2 == 0)\n            return\
    \ false;\n        else\n        {\n            long i = 3;\n            while\
    \ (i <= sqrt(n))\n            {\n                if (n % i == 0)\n           \
    \         return false;\n                i += 2;\n            }\n            return\
    \ true;\n        }\n    }\n    if (a < 6)\n        return false;\n    else\n \
    \   {\n        long i = 2;\n        while (i <= sqrt(a))\n        {\n        \
    \    if (is_prime(i) && a % i == 0)\n            {\n                long j = i;\n\
    \                while (j <= sqrt(a))\n                {\n                   \
    \ if (is_prime(j) && a % j == 0)\n                    {\n                    \
    \    long k = j;\n                        while (k <= sqrt(a))\n             \
    \           {\n                            if (is_prime(k) && a % k == 0)\n  \
    \                          {\n                                if (i * j * k ==\
    \ a)\n                                    return true;\n                     \
    \       }\n                            k++;\n                        }\n     \
    \               }\n                    j++;\n                }\n            }\n\
    \            i++;\n        }\n        return false;\n    }\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnfnj5gzn.d(24): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpnfnj5gzn.d(38): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpnfnj5gzn.d(43): Error: `std.math.sqrt` called with argument ty'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long prime;\
    \ prime_numbers)\n    {\n        if(a % prime == 0)\n        {\n            result\
    \ = true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv2kjr9y0.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpv2kjr9y0.__unittest_L25_C1() [0x427e5e]

    ??:? void tmpv2kjr9y0.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b08a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]

    ??:? runModuleUnitTests [0x42bfcd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42865c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    // TODO: implement\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptoa_cyz1.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmptoa_cyz1.__unittest_L16_C1() [0x427a4b]

    ??:? void tmptoa_cyz1.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = a;\n    int count = 0;\n    while (i <= j) \n    {\n        if (a\
    \ % i == 0) \n        {\n            a /= i;\n            j = a;\n           \
    \ count++;\n        } \n        else \n        {\n            i++;\n        }\n\
    \    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a <= 1)\n\
    \        return false;\n    if (a == 2)\n        return true;\n    if (a % 2 ==\
    \ 0)\n        return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n\
    \        if (a % i == 0)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_0ydddae.d(19): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0ydddae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    while (i < a)\n\
    \    {\n        while (j < a)\n        {\n            while (k < a)\n        \
    \    {\n                if (i * j * k == a)\n                {\n             \
    \       result = true;\n                    break;\n                }\n      \
    \          k++;\n            }\n            j++;\n        }\n        i++;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpemcavge9.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmpemcavge9.__unittest_L36_C1() [0x427abb]

    ??:? void tmpemcavge9.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    if (a < 100)\n    {\n        long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \        foreach (long p1; primes)\n        {\n            foreach (long p2; primes)\n\
    \            {\n                foreach (long p3; primes)\n                {\n\
    \                    if (p1 * p2 * p3 == a)\n                    {\n         \
    \               result = true;\n                        break;\n             \
    \       }\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwd17amzo.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282ad]

    ??:? void tmpwd17amzo.__unittest_L34_C1() [0x427f7c]

    ??:? void tmpwd17amzo.__modtest() [0x42802c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c297]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b12a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43076c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430249]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b101]

    ??:? runModuleUnitTests [0x42c06d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (a != 1) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5q6gxf8.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmpu5q6gxf8.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5q6gxf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int cnt = 0;\n\
    \    for (int i = 2; i <= a; i++) \n    {\n        if (a % i == 0) \n        {\n\
    \            cnt++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    return cnt == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return count == 3;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    if (a % 7 == 0)\n\
    \        return is_multiply_prime(a / 7);\n    if (a % 11 == 0)\n        return\
    \ is_multiply_prime(a / 11);\n    if (a % 13 == 0)\n        return is_multiply_prime(a\
    \ / 13);\n    if (a % 17 == 0)\n        return is_multiply_prime(a / 17);\n  \
    \  if (a % 19 == 0)\n        return is_multiply_prime(a / 19);\n    if (a % 23\
    \ == 0)\n        return is_multiply_prime(a / 23);\n    if (a % 29 == 0)\n   \
    \     return is_multiply_prime(a / 29);\n    if (a % 31 == 0)\n        return\
    \ is_multiply_prime(a / 31);\n    if (a % 37 == 0)\n        return is_multiply_prime(a\
    \ / 37);\n    if (a % 41 == 0)\n        return is_multiply_prime(a / 41);\n  \
    \  if (a % 43 == 0)\n        return is_multiply_prime(a / 43);\n    if (a % 47\
    \ == 0)\n        return is_multiply_prime(a / 47);\n    if (a % 53 == 0)\n   \
    \     return is_multiply_prime(a / 53);\n    if (a % 59 == 0)\n        return\
    \ is_multiply_prime(a / 59);\n    if (a % 61 == 0)\n        return is_multiply_prime(a\
    \ / 61);\n    if (a % 67 == 0)\n        return is_multiply_prime(a / 67);\n  \
    \  if (a % 71 == 0)\n        return is_multiply_prime(a\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3rgwiwp.d(55): Error: found `unittest` when expecting `,`

    /tmp/tmpa3rgwiwp.d(70): Error: found `void` when expecting `,`

    /tmp/tmpa3rgwiwp.d(70): Error: found `{` when expecting `,`

    /tmp/tmpa3rgwiwp.d(70): Error: expression expected, not `}`

    /tmp/tmpa3rgwiwp.d(70): Error: found `End of File` when expecting `,`

    /tmp/tmpa3rgwiwp.d(70): Error: found `End of File` when expecting `)`

    /tmp/tmpa3rgwiwp.d(70): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpa3rgwiwp.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3rgwiwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5q6gxf8.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmpu5q6gxf8.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5q6gxf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n) \n    {\n        if (n < 2) \n            return false;\n        for (long\
    \ i = 2; i <= sqrt(n); i++) \n        {\n            if (n % i == 0) \n      \
    \          return false;\n        }\n        return true;\n    }\n    if (a <\
    \ 6) \n        return false;\n    for (long i = 2; i <= a / 3; i++) \n    {\n\
    \        if (is_prime(i) && is_prime(a / i) && is_prime(a / (a / i))) \n     \
    \       return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhutkx1b.d(17): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhutkx1b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return a == 1;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwjmuztul.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpwjmuztul.__unittest_L23_C1() [0x427ad7]

    ??:? void tmpwjmuztul.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5q6gxf8.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmpu5q6gxf8.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5q6gxf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long count = 0;\n    long result = 1;\n    while (i <= a)\n    {\n      \
    \  if (a % i == 0)\n        {\n            if (isPrime(i))\n            {\n  \
    \              result *= i;\n                count++;\n            }\n       \
    \ }\n        i++;\n    }\n    return result == a && count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpryas_ble.d(20): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpryas_ble.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (a != 1) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe9dzpaf5.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpe9dzpaf5.__unittest_L23_C1() [0x427acf]

    ??:? void tmpe9dzpaf5.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    long m = 2;\n\
    \    long n = 2;\n    long o = 2;\n    long p = 2;\n    long q = 2;\n    long\
    \ r = 2;\n    long s = 2;\n    long t = 2;\n    long u = 2;\n    long v = 2;\n\
    \    long w = 2;\n    long x = 2;\n    long y = 2;\n    long z = 2;\n    long\
    \ aa = 2;\n    long bb = 2;\n    long cc = 2;\n    long dd = 2;\n    long ee =\
    \ 2;\n    long ff = 2;\n    long gg = 2;\n    long hh = 2;\n    long ii = 2;\n\
    \    long jj = 2;\n    long kk = 2;\n    long ll = 2;\n    long mm = 2;\n    long\
    \ nn = 2;\n    long oo = 2;\n    long pp = 2;\n    long qq = 2;\n    long rr =\
    \ 2;\n    long ss = 2;\n    long tt = 2;\n    long uu = 2;\n    long vv = 2;\n\
    \    long ww = 2;\n    long xx = 2;\n    long yy = 2;\n    long zz = 2;\n    long\
    \ aaa = 2;\n    long bbb = 2;\n    long ccc = 2;\n    long ddd = 2;\n    long\
    \ eee = 2;\n    long fff = 2;\n    long ggg = 2;\n    long hhh = 2;\n    long\
    \ iii = 2;\n    long jjj = 2;\n    long kkk = 2;\n    long lll = 2;\n    long\
    \ mmm = 2;\n    long nnn = 2;\n    long ooo = 2;\n    long ppp = 2;\n    long\
    \ qqq = 2;\n    long rrr = 2;\n    long sss = 2;\n    long ttt = 2;\n    long\
    \ uuu = 2;\n    long vvv = 2;\n    long www = 2;\n    long\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphpkktlai.d(81): Error: no identifier for declarator `long`

    /tmp/tmphpkktlai.d(81): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphpkktlai.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ a) \n    {\n        if (a < 2) return false;\n        if (a == 2) return true;\n\
    \        if (a % 2 == 0) return false;\n        for (long i = 3; i <= a / 2; i\
    \ += 2) \n        {\n            if (a % i == 0) return false;\n        }\n  \
    \      return true;\n    }\n    if (a < 6) return false;\n    if (a == 6) return\
    \ true;\n    if (a % 2 == 0) return is_multiply_prime(a / 2);\n    if (a % 3 ==\
    \ 0) return is_multiply_prime(a / 3);\n    for (long i = 5; i <= a / 2; i += 2)\
    \ \n    {\n        if (is_prime(i) && a % i == 0) return is_multiply_prime(a /\
    \ i);\n    }\n    return false;\n}\n/*\nWrite a function that returns true if\
    \ the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n        30 = 2 * 3 * 5\n\
    \    \n*/\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuevjn6bx.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f5d]

    ??:? void tmpuevjn6bx.__unittest_L42_C1() [0x427bd3]

    ??:? void tmpuevjn6bx.__modtest() [0x427ce0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaed]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long temp = a;\n    while (i < a)\n   \
    \ {\n        if (temp % i == 0)\n        {\n            temp = temp / i;\n   \
    \         j = i;\n            break;\n        }\n        i++;\n    }\n    while\
    \ (j < a)\n    {\n        if (temp % j == 0)\n        {\n            temp = temp\
    \ / j;\n            k = j;\n            break;\n        }\n        j++;\n    }\n\
    \    if (temp == k)\n    {\n        return true;\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx6n6s0j3.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpx6n6s0j3.__unittest_L43_C1() [0x427af3]

    ??:? void tmpx6n6s0j3.__modtest() [0x427c00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0) return false;\n        }\n \
    \       return true;\n    }\n    for (long i = 2; i <= a / 3; i++)\n    {\n  \
    \      if (is_prime(i) && is_prime(a / i))\n        {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm0dci2qb.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0dci2qb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return isPrime(a);\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpykuz44be.d(21): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpykuz44be.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5q6gxf8.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmpu5q6gxf8.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5q6gxf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) return\
    \ false;\n    if (a % 2 == 0) return is_multiply_prime(a / 2);\n    if (a % 3\
    \ == 0) return is_multiply_prime(a / 3);\n    if (a % 5 == 0) return is_multiply_prime(a\
    \ / 5);\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc9b35wnb.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpc9b35wnb.__unittest_L19_C1() [0x427acf]

    ??:? void tmpc9b35wnb.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n) \n    {\n        if (n <= 1) return false;\n        for (long i = 2; i <=\
    \ sqrt(n); i++) \n        {\n            if (n % i == 0) return false;\n     \
    \   }\n        return true;\n    }\n    for (long i = 2; i <= a / 2; i++) \n \
    \   {\n        if (is_prime(i) && is_prime(a / i)) \n        {\n            if\
    \ (is_prime(a / (i * (a / i)))) return true;\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpua615nhh.d(16): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpua615nhh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long num = a;\n    long i = 2;\n    long count = 0;\n    while (num\
    \ != 1)\n    {\n        if (num % i == 0)\n        {\n            num /= i;\n\
    \            count++;\n        }\n        else\n        {\n            i++;\n\
    \        }\n    }\n    if (count == 3)\n    {\n        result = true;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1)\n            return false;\n        if (n <=\
    \ 3)\n            return true;\n        if (n % 2 == 0 || n % 3 == 0)\n      \
    \      return false;\n        for (long i = 5; i * i <= n; i = i + 6)\n      \
    \      if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n  \
    \      return true;\n    }\n    if (a <= 1)\n        return false;\n    if (a\
    \ <= 3)\n        return true;\n    if (a % 2 == 0 || a % 3 == 0)\n        return\
    \ false;\n    for (long i = 5; i * i <= a; i = i + 6)\n        if (a % i == 0\
    \ || a % (i + 2) == 0)\n            return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplci8om5b.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f8d]

    ??:? void tmplci8om5b.__unittest_L37_C1() [0x427be2]

    ??:? void tmplci8om5b.__modtest() [0x427d10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430188]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab1d]

    ??:? runModuleUnitTests [0x42ba89]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long n = a;\n    while (i < n)\n    {\n\
    \        if (n % i == 0)\n        {\n            n = n / i;\n            j = i;\n\
    \            while (j < n)\n            {\n                if (n % j == 0)\n \
    \               {\n                    n = n / j;\n                    k = j;\n\
    \                    while (k < n)\n                    {\n                  \
    \      if (n % k == 0)\n                        {\n                          \
    \  return false;\n                        }\n                        k++;\n  \
    \                  }\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvx27itcg.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpvx27itcg.__unittest_L45_C1() [0x427aea]

    ??:? void tmpvx27itcg.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_multiply_prime\
    \ = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; prime_numbers)\n\
    \    {\n        if(a % i == 0)\n        {\n            is_multiply_prime = true;\n\
    \        }\n    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpct7lizub.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpct7lizub.__unittest_L24_C1() [0x427e5e]

    ??:? void tmpct7lizub.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b08a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]

    ??:? runModuleUnitTests [0x42bfcd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42865c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long count = 0;\n    long num = a;\n    while (num != 1) \n    {\n      \
    \  if (num % i == 0) \n        {\n            num /= i;\n            count++;\n\
    \        }\n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return count == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) return\
    \ false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach (i; 0 .. primes.length)\
    \ {\n        if (a % primes[i] == 0) {\n            a /= primes[i];\n        \
    \    if (a == 1) return true;\n            if (a % primes[i] == 0) return false;\n\
    \            i = -1;\n        }\n    }\n    return false;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq7rz44fg.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmpq7rz44fg.__unittest_L25_C1() [0x427f5a]

    ??:? void tmpq7rz44fg.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c323]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430349]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302d5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b18d]

    ??:? runModuleUnitTests [0x42c0f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe9dzpaf5.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpe9dzpaf5.__unittest_L23_C1() [0x427acf]

    ??:? void tmpe9dzpaf5.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (a != 1) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ a)\n    {\n        if (a <= 1)\n            return false;\n        if (a ==\
    \ 2)\n            return true;\n        if (a % 2 == 0)\n            return false;\n\
    \        for (long i = 3; i <= sqrt(a); i += 2)\n        {\n            if (a\
    \ % i == 0)\n                return false;\n        }\n        return true;\n\
    \    }\n    if (a <= 1)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n        {\n            if\
    \ (is_prime(i) && is_prime(a / i))\n                return true;\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu9hwnkap.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpu9hwnkap.d(34): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long result = 0;\n    while (i < a) \n\
    \    {\n        while (j < a) \n        {\n            while (k < a) \n      \
    \      {\n                result = i * j * k;\n                if (result == a)\
    \ \n                {\n                    return true;\n                }\n \
    \               k++;\n            }\n            j++;\n        }\n        i++;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8nm1aqzv.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmp8nm1aqzv.__unittest_L36_C1() [0x427abb]

    ??:? void tmp8nm1aqzv.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0) return false;\n        }\n \
    \       return true;\n    }\n    if (a < 6) return false;\n    if (a % 2 == 0)\
    \ return is_multiply_prime(a / 2);\n    if (a % 3 == 0) return is_multiply_prime(a\
    \ / 3);\n    for (long i = 5; i <= sqrt(a); i += 6)\n    {\n        if (a % i\
    \ == 0) return is_multiply_prime(a / i);\n        if (a % (i + 2) == 0) return\
    \ is_multiply_prime(a / (i + 2));\n    }\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0wktsbsd.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp0wktsbsd.d(27): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wktsbsd.d", "-I/tm'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long result = 0;\n    while (i < a)\n \
    \   {\n        while (j < a)\n        {\n            while (k < a)\n         \
    \   {\n                result = i * j * k;\n                if (result == a)\n\
    \                {\n                    return true;\n                }\n    \
    \            k++;\n            }\n            j++;\n        }\n        i++;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp835sdeai.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmp835sdeai.__unittest_L36_C1() [0x427abb]

    ??:? void tmp835sdeai.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int count = 0;\n\
    \    for (int i = 2; i <= a; i++)\n    {\n        if (a % i == 0)\n        {\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    return count == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) return\
    \ false;\n    if (a % 2 == 0) return is_multiply_prime(a / 2);\n    if (a % 3\
    \ == 0) return is_multiply_prime(a / 3);\n    if (a % 5 == 0) return is_multiply_prime(a\
    \ / 5);\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc9b35wnb.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpc9b35wnb.__unittest_L19_C1() [0x427acf]

    ??:? void tmpc9b35wnb.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long prime; primes)\n\
    \    {\n        if(a % prime == 0)\n        {\n            result = true;\n  \
    \          break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpme0pfjmn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpme0pfjmn.__unittest_L25_C1() [0x427e5e]

    ??:? void tmpme0pfjmn.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b08a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]

    ??:? runModuleUnitTests [0x42bfcd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42865c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a <= 1) return\
    \ false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n  \
    \  for (long i = 3; i <= sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n  \
    \      {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy2xvahy_.d(16): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2xvahy_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int count = 0;\n\
    \    for (int i = 2; i <= a; i++)\n    {\n        if (a % i == 0)\n        {\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    return count == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    if (a == 1) return false;\n    if\
    \ (a == 2) return true;\n    if (a % 2 == 0)\n    {\n        if (is_prime(a /\
    \ 2)) return true;\n        else return false;\n    }\n    for (long i = 3; i\
    \ <= sqrt(a); i += 2)\n    {\n        if (is_prime(i))\n        {\n          \
    \  if (a % i == 0)\n            {\n                if (is_prime(a / i)) return\
    \ true;\n                else return false;\n            }\n        }\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8hmmimv9.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp8hmmimv9.d(32): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8hmmimv9.d", "-I/tm'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] prime_numbers\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    long[] prime_factors = [];\n    foreach(i; prime_numbers)\n\
    \    {\n        if(a % i == 0)\n        {\n            prime_factors ~= i;\n \
    \       }\n    }\n    if(prime_factors.length == 3)\n    {\n        return true;\n\
    \    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm5kzt_1a.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42826d]

    ??:? void tmpm5kzt_1a.__unittest_L31_C1() [0x427efe]

    ??:? void tmpm5kzt_1a.__modtest() [0x427fec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304b5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42baad]

    ??:? runModuleUnitTests [0x42ca19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2)\n            return false;\n        if (n == 2)\n\
    \            return true;\n        if (n % 2 == 0)\n            return false;\n\
    \        for (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n\
    \ % i == 0)\n                return false;\n        }\n        return true;\n\
    \    }\n    if (a < 6)\n        return false;\n    for (long i = 2; i <= sqrt(a);\
    \ i++)\n    {\n        if (is_prime(i))\n        {\n            if (a % i == 0)\n\
    \            {\n                long b = a / i;\n                if (is_prime(b))\n\
    \                {\n                    for (long j = 2; j <= sqrt(b); j++)\n\
    \                    {\n                        if (is_prime(j))\n           \
    \             {\n                            if (b % j == 0)\n               \
    \             {\n                                long c = b / j;\n           \
    \                     if (is_prime(c))\n                                    return\
    \ true;\n                            }\n                        }\n          \
    \          }\n                }\n            }\n        }\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwj_c4vy.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmptwj_c4vy.d(30): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmptwj_c4vy.d(39): Error: `std.math.sqrt` called with argument ty'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ a) \n    {\n        if (a <= 1) return false;\n        if (a == 2) return true;\n\
    \        if (a % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n        {\n            if (a % i == 0) return false;\n        }\n \
    \       return true;\n    }\n    if (a <= 1) return false;\n    if (a == 2) return\
    \ true;\n    if (a % 2 == 0) return false;\n    for (long i = 3; i <= sqrt(a);\
    \ i += 2)\n    {\n        if (a % i == 0)\n        {\n            if (is_prime(i)\
    \ && is_prime(a / i)) return true;\n        }\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3npwhz9b.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp3npwhz9b.d(27): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3npwhz9b.d", "-I/tm'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(p; primes)\n    {\n        if(a % p == 0)\n\
    \        {\n            a /= p;\n        }\n    }\n    return a == 1;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1splnyq0.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x42821d]

    ??:? void tmp1splnyq0.__unittest_L23_C1() [0x427e6e]

    ??:? void tmp1splnyq0.__modtest() [0x427f9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c207]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b09a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43022d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]

    ??:? runModuleUnitTests [0x42bfdd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42866c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_multiply\
    \ = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n \
    \   {\n        if(a % i == 0)\n        {\n            is_multiply = true;\n  \
    \          a /= i;\n        }\n    }\n    return is_multiply;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5g6wm0a3.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42821d]

    ??:? void tmp5g6wm0a3.__unittest_L25_C1() [0x427e72]

    ??:? void tmp5g6wm0a3.__modtest() [0x427fa0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c207]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b09a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43022d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]

    ??:? runModuleUnitTests [0x42bfdd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42866c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long b = a;\n\
    \    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwnon6_h.d(84): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwnon6_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2)\n            return false;\n        if (n == 2)\n\
    \            return true;\n        if (n % 2 == 0)\n            return false;\n\
    \        for (long i = 3; i <= sqrt(n); i += 2)\n        {\n            if (n\
    \ % i == 0)\n                return false;\n        }\n        return true;\n\
    \    }\n    if (a < 6)\n        return false;\n    for (long i = 2; i <= a / 3;\
    \ i++)\n    {\n        if (is_prime(i) && is_prime(a / i) && is_prime(a / (a /\
    \ i)))\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplkjfosl_.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkjfosl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ a)\n    {\n        if (a == 1) return false;\n        if (a == 2) return true;\n\
    \        if (a % 2 == 0) return false;\n        for (long i = 3; i < a; i += 2)\n\
    \        {\n            if (a % i == 0) return false;\n        }\n        return\
    \ true;\n    }\n    if (a == 1) return false;\n    if (a == 2) return false;\n\
    \    if (a == 3) return false;\n    if (a == 5) return false;\n    if (a == 7)\
    \ return false;\n    if (a == 11) return false;\n    if (a == 13) return false;\n\
    \    if (a == 17) return false;\n    if (a == 19) return false;\n    if (a ==\
    \ 23) return false;\n    if (a == 29) return false;\n    if (a == 31) return false;\n\
    \    if (a == 37) return false;\n    if (a == 41) return false;\n    if (a ==\
    \ 43) return false;\n    if (a == 47) return false;\n    if (a == 53) return false;\n\
    \    if (a == 59) return false;\n    if (a == 61) return false;\n    if (a ==\
    \ 67) return false;\n    if (a == 71) return false;\n    if (a == 73) return false;\n\
    \    if (a == 79) return false;\n    if (a == 83) return false;\n    if (a ==\
    \ 89) return false;\n    if (a == 97) return false;\n    if (a % 2 == 0) return\
    \ false;\n    for (long i = 3; i < a; i += 2)\n    {\n        if (a % i == 0)\n\
    \        {\n            if (is_prime(i))\n            {\n                if (is_prime(a\
    \ / i))\n                {\n                    return true;\n               \
    \ }\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyz4u81kq.d(71): unittest failure

    ----------------

    ??:? _d_unittestp [0x42800d]

    ??:? void tmpyz4u81kq.__unittest_L66_C1() [0x427c83]

    ??:? void tmpyz4u81kq.__modtest() [0x427d90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430208]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fce5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab9d]

    ??:? runModuleUnitTests [0x42bb09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42845c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n\
    \        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (long i = 5;\
    \ i * i <= n; i += 6)\n            if (n % i == 0 || n % (i + 2) == 0)\n     \
    \           return false;\n        return true;\n    }\n    if (a <= 1) return\
    \ false;\n    if (a <= 3) return true;\n    if (a % 2 == 0 || a % 3 == 0) return\
    \ false;\n    for (long i = 5; i * i <= a; i += 6)\n        if (a % i == 0 ||\
    \ a % (i + 2) == 0)\n            return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpchkivvg_.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f7d]

    ??:? void tmpchkivvg_.__unittest_L31_C1() [0x427bd2]

    ??:? void tmpchkivvg_.__modtest() [0x427d00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430178]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab0d]

    ??:? runModuleUnitTests [0x42ba79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a == 1) return\
    \ false;\n    if (a == 2) return true;\n    if (a == 3) return true;\n    if (a\
    \ == 5) return true;\n    if (a == 7) return true;\n    if (a == 11) return true;\n\
    \    if (a == 13) return true;\n    if (a == 17) return true;\n    if (a == 19)\
    \ return true;\n    if (a == 23) return true;\n    if (a == 29) return true;\n\
    \    if (a == 31) return true;\n    if (a == 37) return true;\n    if (a == 41)\
    \ return true;\n    if (a == 43) return true;\n    if (a == 47) return true;\n\
    \    if (a == 53) return true;\n    if (a == 59) return true;\n    if (a == 61)\
    \ return true;\n    if (a == 67) return true;\n    if (a == 71) return true;\n\
    \    if (a == 73) return true;\n    if (a == 79) return true;\n    if (a == 83)\
    \ return true;\n    if (a == 89) return true;\n    if (a == 97) return true;\n\
    \    if (a % 2 == 0) return false;\n    if (a % 3 == 0) return false;\n    if\
    \ (a % 5 == 0) return false;\n    if (a % 7 == 0) return false;\n    if (a % 11\
    \ == 0) return false;\n    if (a % 13 == 0) return false;\n    if (a % 17 == 0)\
    \ return false;\n    if (a % 19 == 0) return false;\n    if (a % 23 == 0) return\
    \ false;\n    if (a % 29 == 0) return false;\n    if (a % 31 == 0) return false;\n\
    \    if (a % 37 == 0) return false;\n    if (a % 41 == 0) return false;\n    if\
    \ (a % 43 == 0) return false;\n    if (a % 47 == 0) return false;\n    if (a %\
    \ 53 == 0) return false;\n    if (a % 59 == 0) return false;\n    if\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7x8agim.d(57): Error: found `unittest` when expecting `(`

    /tmp/tmpk7x8agim.d(72): Error: found `void` when expecting `)`

    /tmp/tmpk7x8agim.d(72): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7x8agim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int count = 0;\n\
    \    for (int i = 2; i <= a; i++)\n    {\n        if (a % i == 0)\n        {\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    return count == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int counter =\
    \ 0;\n    for (int i = 2; i <= a; i++)\n    {\n        if (a % i == 0)\n     \
    \   {\n            if (isPrime(i))\n            {\n                counter++;\n\
    \            }\n        }\n    }\n    return counter == 3;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvo6qw_r6.d(18): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvo6qw_r6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long n = a;\n    long count = 0;\n    while (n > 1) \n    {\n        if (n\
    \ % i == 0) \n        {\n            n /= i;\n            count++;\n        }\n\
    \        else \n        {\n            i++;\n        }\n    }\n    return count\
    \ == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n) \n    {\n        if (n < 2) \n            return false;\n        for (long\
    \ i = 2; i < n; i++) \n        {\n            if (n % i == 0) \n             \
    \   return false;\n        }\n        return true;\n    }\n    long i = 2;\n \
    \   long count = 0;\n    while (i < a) \n    {\n        if (a % i == 0 && is_prime(i))\
    \ \n        {\n            a /= i;\n            count++;\n        }\n        else\
    \ \n            i++;\n    }\n    return count == 3;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_yf2bfow.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ed5]

    ??:? void tmp_yf2bfow.__unittest_L38_C1() [0x427b47]

    ??:? void tmp_yf2bfow.__modtest() [0x427c54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbfb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]

    ??:? runModuleUnitTests [0x42b9d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428324]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) return\
    \ false;\n    if (a % 2 == 0) return is_multiply_prime(a / 2);\n    if (a % 3\
    \ == 0) return is_multiply_prime(a / 3);\n    if (a % 5 == 0) return is_multiply_prime(a\
    \ / 5);\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc9b35wnb.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpc9b35wnb.__unittest_L19_C1() [0x427acf]

    ??:? void tmpc9b35wnb.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i < n; i += 2)\n\
    \        {\n            if (n % i == 0) return false;\n        }\n        return\
    \ true;\n    }\n    if (a < 6) return false;\n    for (long i = 2; i < a; i++)\n\
    \    {\n        if (is_prime(i))\n        {\n            for (long j = 2; j <\
    \ a; j++)\n            {\n                if (is_prime(j))\n                {\n\
    \                    for (long k = 2; k < a; k++)\n                    {\n   \
    \                     if (is_prime(k))\n                        {\n          \
    \                  if (i * j * k == a) return true;\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163087
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a == 0) return\
    \ false;\n    if (a == 1) return true;\n    if (a == 2) return true;\n    if (a\
    \ == 3) return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n\
    \    if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    if (a == 101) return true;\n    if (a == 103)\
    \ return true;\n    if (a == 107) return true;\n    if (a == 109) return true;\n\
    \    if (a == 113) return true;\n    if (a == 127) return true;\n    if (a ==\
    \ 131) return true;\n    if (a == 137) return true;\n    if (a == 139) return\
    \ true;\n    if (a == 149) return true;\n    if (a == 151) return true;\n    if\
    \ (a == 157) return true;\n    if (a == 163) return true;\n    if (a == 167) return\
    \ true;\n    if (a == 173) return true;\n    if (a == 179) return true;\n    if\
    \ (a == 181) return true;\n    if (a == 191) return true;\n    if (a == 193) return\
    \ true;\n    if (\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n \
    \   assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n   \
    \ assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp35qy_z85.d(60): Error: expression expected, not `unittest`

    /tmp/tmp35qy_z85.d(61): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35qy_z85.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long c = 0;\n    while (i <= a)\n    {\n        if (a % i == 0)\n       \
    \ {\n            a /= i;\n            c++;\n        }\n        else\n        {\n\
    \            i++;\n        }\n    }\n    return c == 3;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a <= 1)\n\
    \        return false;\n    if (a == 2)\n        return true;\n    if (a % 2 ==\
    \ 0)\n        return false;\n    for (long i = 3; i < a; i += 2)\n    {\n    \
    \    if (a % i == 0)\n            return false;\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1xx3mxs1.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e3d]

    ??:? void tmp1xx3mxs1.__unittest_L26_C1() [0x427a8e]

    ??:? void tmp1xx3mxs1.__modtest() [0x427bbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430038]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]

    ??:? runModuleUnitTests [0x42b939]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42828c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    while(i < a)\n    {\n        while(j <\
    \ a)\n        {\n            while(k < a)\n            {\n                if(i\
    \ * j * k == a)\n                {\n                    return true;\n       \
    \         }\n                k++;\n            }\n            j++;\n        }\n\
    \        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps1jymhkn.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmps1jymhkn.__unittest_L34_C1() [0x427abb]

    ??:? void tmps1jymhkn.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n\
    \    {\n        if(a % primes[i] == 0)\n        {\n            result = true;\n\
    \            break;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9fekyofz.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42822d]

    ??:? void tmp9fekyofz.__unittest_L25_C1() [0x427e7e]

    ??:? void tmp9fekyofz.__modtest() [0x427fac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c28b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b11e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430760]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43023d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f5]

    ??:? runModuleUnitTests [0x42c061]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (a != 1) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else\n\
    \            i++;\n    }\n    return count == 3;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    import std.algorithm\
    \ : count;\n    import std.math : isPrime;\n    import std.range : iota;\n   \
    \ import std.array : array;\n    import std.conv : to;\n    import std.typecons\
    \ : tuple;\n    import std.range : take;\n    import std.range : drop;\n    import\
    \ std.range : zip;\n    import std.range : retro;\n    import std.range : retro;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2y9hchlr.d(70): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y9hchlr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime; primes)\n\
    \    {\n        if(a % prime == 0)\n        {\n            a /= prime;\n     \
    \       if(a == 1)\n            {\n                result = true;\n          \
    \      break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3_pmk5jl.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428225]

    ??:? void tmp3_pmk5jl.__unittest_L29_C1() [0x427e7a]

    ??:? void tmp3_pmk5jl.__modtest() [0x427fa8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c20f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0a2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430235]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b079]

    ??:? runModuleUnitTests [0x42bfe5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428674]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long temp = a;\n    while(i < temp)\n \
    \   {\n        if(temp % i == 0)\n        {\n            temp /= i;\n        \
    \    j = i;\n            while(j < temp)\n            {\n                if(temp\
    \ % j == 0)\n                {\n                    temp /= j;\n             \
    \       k = j;\n                    while(k < temp)\n                    {\n \
    \                       if(temp % k == 0)\n                        {\n       \
    \                     return false;\n                        }\n             \
    \           k++;\n                    }\n                }\n                j++;\n\
    \            }\n        }\n        i++;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuy3n_qc9.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpuy3n_qc9.__unittest_L45_C1() [0x427ae6]

    ??:? void tmpuy3n_qc9.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a <= 1) return\
    \ false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n  \
    \  for (long i = 3; i <= sqrt(a); i += 2) \n    {\n        if (a % i == 0) \n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgf18p183.d(16): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgf18p183.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return count == 3;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    long n = a;\n    long i = 2;\n  \
    \  long count = 0;\n    while (n > 1)\n    {\n        if (is_prime(i) && n % i\
    \ == 0)\n        {\n            n /= i;\n            count++;\n        }\n   \
    \     else\n        {\n            i++;\n        }\n    }\n    return count ==\
    \ 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsxpp6d4n.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxpp6d4n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return a == 1;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwjmuztul.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpwjmuztul.__unittest_L23_C1() [0x427ad7]

    ??:? void tmpwjmuztul.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n \
    \       {\n            count++;\n            a = a / i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return count == 3;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    long i = 2;\n    long j = 2;\n  \
    \  long k = 2;\n    while (i * j * k != a)\n    {\n        if (i * j * k < a)\n\
    \        {\n            if (is_prime(i))\n            {\n                if (is_prime(j))\n\
    \                {\n                    if (is_prime(k))\n                   \
    \ {\n                        k++;\n                    }\n                   \
    \ else\n                    {\n                        j++;\n                \
    \        k = 2;\n                    }\n                }\n                else\n\
    \                {\n                    i++;\n                    j = 2;\n   \
    \                 k = 2;\n                }\n            }\n            else\n\
    \            {\n                i++;\n                j = 2;\n               \
    \ k = 2;\n            }\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_r55jgca.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_r55jgca.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5q6gxf8.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmpu5q6gxf8.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5q6gxf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    long l = 2;\n\
    \    long m = 2;\n    long n = 2;\n    long o = 2;\n    long p = 2;\n    long\
    \ q = 2;\n    long r = 2;\n    long s = 2;\n    long t = 2;\n    long u = 2;\n\
    \    long v = 2;\n    long w = 2;\n    long x = 2;\n    long y = 2;\n    long\
    \ z = 2;\n    long aa = 2;\n    long bb = 2;\n    long cc = 2;\n    long dd =\
    \ 2;\n    long ee = 2;\n    long ff = 2;\n    long gg = 2;\n    long hh = 2;\n\
    \    long ii = 2;\n    long jj = 2;\n    long kk = 2;\n    long ll = 2;\n    long\
    \ mm = 2;\n    long nn = 2;\n    long oo = 2;\n    long pp = 2;\n    long qq =\
    \ 2;\n    long rr = 2;\n    long ss = 2;\n    long tt = 2;\n    long uu = 2;\n\
    \    long vv = 2;\n    long ww = 2;\n    long xx = 2;\n    long yy = 2;\n    long\
    \ zz = 2;\n    long aaa = 2;\n    long bbb = 2;\n    long ccc = 2;\n    long ddd\
    \ = 2;\n    long eee = 2;\n    long fff = 2;\n    long ggg = 2;\n    long hhh\
    \ = 2;\n    long iii = 2;\n    long jjj = 2;\n    long kkk = 2;\n    long lll\
    \ = 2;\n    long mmm = 2;\n    long nnn = 2;\n    long ooo = 2;\n    long ppp\
    \ = 2;\n    long qqq = 2;\n    long rrr = 2;\n    long sss = 2;\n    long ttt\
    \ = 2;\n    long uuu = 2;\n    long vvv = 2;\n    long\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiva5bi4x.d(81): Error: no identifier for declarator `long`

    /tmp/tmpiva5bi4x.d(81): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiva5bi4x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long count = 0;\n    long num = a;\n    while (num > 1) \n    {\n       \
    \ if (num % i == 0) \n        {\n            num /= i;\n            count++;\n\
    \        }\n        else\n            i++;\n    }\n    return count == 3;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0) return false;\n        }\n \
    \       return true;\n    }\n    long i = 2;\n    while (i < a)\n    {\n     \
    \   if (is_prime(i) && a % i == 0)\n        {\n            a /= i;\n         \
    \   if (is_prime(a)) return true;\n        }\n        else\n        {\n      \
    \      i++;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87yx1twm.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87yx1twm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long l = 2;\n    long m = 2;\n    long\
    \ n = 2;\n    long o = 2;\n    long p = 2;\n    long q = 2;\n    long r = 2;\n\
    \    long s = 2;\n    long t = 2;\n    long u = 2;\n    long v = 2;\n    long\
    \ w = 2;\n    long x = 2;\n    long y = 2;\n    long z = 2;\n    long aa = 2;\n\
    \    long bb = 2;\n    long cc = 2;\n    long dd = 2;\n    long ee = 2;\n    long\
    \ ff = 2;\n    long gg = 2;\n    long hh = 2;\n    long ii = 2;\n    long jj =\
    \ 2;\n    long kk = 2;\n    long ll = 2;\n    long mm = 2;\n    long nn = 2;\n\
    \    long oo = 2;\n    long pp = 2;\n    long qq = 2;\n    long rr = 2;\n    long\
    \ ss = 2;\n    long tt = 2;\n    long uu = 2;\n    long vv = 2;\n    long ww =\
    \ 2;\n    long xx = 2;\n    long yy = 2;\n    long zz = 2;\n    long aaa = 2;\n\
    \    long bbb = 2;\n    long ccc = 2;\n    long ddd = 2;\n    long eee = 2;\n\
    \    long fff = 2;\n    long ggg = 2;\n    long hhh = 2;\n    long iii = 2;\n\
    \    long jjj = 2;\n    long kkk = 2;\n    long lll = 2;\n    long mmm = 2;\n\
    \    long nnn = 2;\n    long ooo = 2;\n    long ppp = 2;\n    long qqq = 2;\n\
    \    long rrr = 2;\n    long sss = 2;\n    long ttt = 2;\n    long uuu = 2;\n\
    \    long vvv = 2;\n    long www = 2;\n    long\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygg_5yff.d(81): Error: no identifier for declarator `long`

    /tmp/tmpygg_5yff.d(81): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygg_5yff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool isPrime\
    \ = true;\n    int i = 2;\n    while (i <= a / 2) {\n        if (a % i == 0) {\n\
    \            isPrime = false;\n            break;\n        }\n        i++;\n \
    \   }\n    return isPrime;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp365kiu6u.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e2d]

    ??:? void tmp365kiu6u.__unittest_L24_C1() [0x427a7e]

    ??:? void tmp365kiu6u.__modtest() [0x427bac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430028]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9bd]

    ??:? runModuleUnitTests [0x42b929]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42827c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) \n\
    \        return false;\n    if (a % 2 == 0) \n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0) \n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0) \n        return is_multiply_prime(a / 5);\n    for (long i = 7;\
    \ i <= sqrt(a); i += 2) \n    {\n        if (a % i == 0) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0kc1aa4o.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kc1aa4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ a)\n    {\n        if (a <= 1)\n            return false;\n        else if (a\
    \ == 2)\n            return true;\n        else if (a % 2 == 0)\n            return\
    \ false;\n        else\n        {\n            long i = 3;\n            while\
    \ (i <= sqrt(a))\n            {\n                if (a % i == 0)\n           \
    \         return false;\n                i += 2;\n            }\n            return\
    \ true;\n        }\n    }\n    long i = 2;\n    long j = 0;\n    long k = 0;\n\
    \    while (i <= a)\n    {\n        if (is_prime(i))\n        {\n            j\
    \ = i;\n            while (j <= a)\n            {\n                if (is_prime(j))\n\
    \                {\n                    k = j;\n                    while (k <=\
    \ a)\n                    {\n                        if (is_prime(k))\n      \
    \                  {\n                            if (i * j * k == a)\n      \
    \                          return true;\n                        }\n         \
    \               k++;\n                    }\n                }\n             \
    \   j++;\n            }\n        }\n        i++;\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdb2bhj24.d(24): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdb2bhj24.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    while (i < a)\n\
    \    {\n        while (j < a)\n        {\n            while (k < a)\n        \
    \    {\n                if (i * j * k == a)\n                {\n             \
    \       result = true;\n                    break;\n                }\n      \
    \          k++;\n            }\n            j++;\n        }\n        i++;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpemcavge9.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmpemcavge9.__unittest_L36_C1() [0x427abb]

    ??:? void tmpemcavge9.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: -1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        for (long i = 2; i < n;\
    \ i++)\n        {\n            if (n % i == 0) return false;\n        }\n    \
    \    return true;\n    }\n    if (a < 6) return false;\n    for (long i = 2; i\
    \ < a; i++)\n    {\n        if (is_prime(i))\n        {\n            for (long\
    \ j = 2; j < a; j++)\n            {\n                if (is_prime(j))\n      \
    \          {\n                    for (long k = 2; k < a; k++)\n             \
    \       {\n                        if (is_prime(k))\n                        {\n\
    \                            if (i * j * k == a) return true;\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660163093
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n    {\n        if(a\
    \ % primes[i] == 0)\n        {\n            a /= primes[i];\n            if(a\
    \ == 1)\n            {\n                return true;\n            }\n        \
    \    i = 0;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcfq484sj.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmpcfq484sj.__unittest_L28_C1() [0x427eca]

    ??:? void tmpcfq484sj.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b166]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430285]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b13d]

    ??:? runModuleUnitTests [0x42c0a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428738]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5q6gxf8.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmpu5q6gxf8.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5q6gxf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_multiply_prime\
    \ = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long prime_number;\
    \ prime_numbers)\n    {\n        if(a % prime_number == 0)\n        {\n      \
    \      is_multiply_prime = true;\n            a = a / prime_number;\n        }\n\
    \    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptwuefq_5.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42821d]

    ??:? void tmptwuefq_5.__unittest_L25_C1() [0x427e6e]

    ??:? void tmptwuefq_5.__modtest() [0x427f9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c207]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b09a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43022d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]

    ??:? runModuleUnitTests [0x42bfdd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42866c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int count = 0;\n\
    \    for (int i = 2; i <= a; i++) \n    {\n        if (a % i == 0) \n        {\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    return count == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163077
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long c = 0;\n    while (i <= a)\n    {\n        if (a % i == 0)\n       \
    \ {\n            a /= i;\n            c++;\n        }\n        else\n        {\n\
    \            i++;\n        }\n    }\n    return c == 3;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_multiply_prime\
    \ = false;\n    long[] prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; prime_numbers)\n\
    \    {\n        if(a % i == 0)\n        {\n            is_multiply_prime = true;\n\
    \        }\n    }\n    return is_multiply_prime;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpct7lizub.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmpct7lizub.__unittest_L24_C1() [0x427e5e]

    ??:? void tmpct7lizub.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b08a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]

    ??:? runModuleUnitTests [0x42bfcd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42865c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return a == 1;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwjmuztul.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpwjmuztul.__unittest_L23_C1() [0x427ad7]

    ??:? void tmpwjmuztul.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    while (i < a)\n    {\n        while (j\
    \ < a)\n        {\n            while (k < a)\n            {\n                if\
    \ (i * j * k == a)\n                {\n                    return true;\n    \
    \            }\n                k++;\n            }\n            j++;\n      \
    \  }\n        i++;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7e_hu28j.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmp7e_hu28j.__unittest_L34_C1() [0x427abb]

    ??:? void tmp7e_hu28j.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = a;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    while\
    \ (i <= a)\n    {\n        if (a % i == 0)\n        {\n            j = a / i;\n\
    \            k = 2;\n            while (k <= j)\n            {\n             \
    \   if (j % k == 0)\n                {\n                    l = j / k;\n     \
    \               m = 2;\n                    while (m <= l)\n                 \
    \   {\n                        if (l % m == 0)\n                        {\n  \
    \                          return false;\n                        }\n        \
    \                m++;\n                    }\n                    return true;\n\
    \                }\n                k++;\n            }\n        }\n        i++;\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqivhzhwb.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpqivhzhwb.__unittest_L47_C1() [0x427b0b]

    ??:? void tmpqivhzhwb.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) return\
    \ false;\n    if (a % 2 == 0) return is_multiply_prime(a / 2);\n    if (a % 3\
    \ == 0) return is_multiply_prime(a / 3);\n    if (a % 5 == 0) return is_multiply_prime(a\
    \ / 5);\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc9b35wnb.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpc9b35wnb.__unittest_L19_C1() [0x427acf]

    ??:? void tmpc9b35wnb.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    long[] factors = [];\n    foreach(prime; primes)\n\
    \    {\n        if(a % prime == 0)\n        {\n            factors ~= prime;\n\
    \            a /= prime;\n        }\n    }\n    return factors.length == 3;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8e1if71o.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x42826d]

    ??:? void tmp8e1if71o.__unittest_L25_C1() [0x427f02]

    ??:? void tmp8e1if71o.__modtest() [0x427ff0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430529]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304b5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42baad]

    ??:? runModuleUnitTests [0x42ca19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) \n\
    \        return false;\n    if (a % 2 == 0) \n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0) \n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0) \n        return is_multiply_prime(a / 5);\n    for (long i = 7;\
    \ i <= sqrt(a); i += 2) \n    {\n        if (a % i == 0) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0kc1aa4o.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0kc1aa4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (a != 1) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1)\n            return false;\n        else if (n\
    \ <= 3)\n            return true;\n        else if (n % 2 == 0 || n % 3 == 0)\n\
    \            return false;\n        long i = 5;\n        while (i * i <= n)\n\
    \        {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return\
    \ false;\n            i += 6;\n        }\n        return true;\n    }\n    if\
    \ (a <= 0)\n        return false;\n    else if (a == 1)\n        return true;\n\
    \    else if (a == 2 || a == 3)\n        return false;\n    else if (a % 2 ==\
    \ 0)\n        return is_multiply_prime(a / 2);\n    else if (a % 3 == 0)\n   \
    \     return is_multiply_prime(a / 3);\n    else\n    {\n        long i = 5;\n\
    \        while (i * i <= a)\n        {\n            if (a % i == 0)\n        \
    \        return is_multiply_prime(a / i);\n            i += 6;\n        }\n  \
    \      return false;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0hbpplzi.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f8d]

    ??:? void tmp0hbpplzi.__unittest_L52_C1() [0x427c03]

    ??:? void tmp0hbpplzi.__modtest() [0x427d10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430188]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab1d]

    ??:? runModuleUnitTests [0x42ba89]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    // your code\
    \ goes here\n    bool isPrime = true;\n    int count = 0;\n    int num = 0;\n\
    \    for(int i = 2; i <= a; i++)\n    {\n        isPrime = true;\n        for(int\
    \ j = 2; j <= i/2; j++)\n        {\n            if(i % j == 0)\n            {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        if(isPrime)\n        {\n            if(a % i == 0)\n        \
    \    {\n                count++;\n                num = i;\n            }\n  \
    \      }\n    }\n    if(count == 3)\n    {\n        return true;\n    }\n    else\n\
    \    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvg3yyn_7.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpvg3yyn_7.__unittest_L46_C1() [0x427afa]

    ??:? void tmpvg3yyn_7.__modtest() [0x427be8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    import std.math;\n\
    \    import std.algorithm;\n    import std.range;\n    import std.array;\n   \
    \ import std.conv;\n    import std.typecons;\n    import std.string;\n    import\
    \ std.stdio;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.conv;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.conv;\n    import std.typecons;\n    import std.math;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.array;\n   \
    \ import std.conv;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.typecons;\n\
    \    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\
    \ std.array;\n    import std.conv;\n    import std.typecons;\n    import std.math;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.array;\n   \
    \ import std.conv;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n\
    \    import std.typecons;\n    import std.math;\n    import std.range;\n    import\
    \ std\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjci605t9.d(83): Error: `;` expected

    /tmp/tmpjci605t9.d(98): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjci605t9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n    {\n        if(a\
    \ % primes[i] == 0)\n        {\n            a /= primes[i];\n            if(a\
    \ == 1)\n            {\n                return true;\n            }\n        \
    \    i = 0;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcfq484sj.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmpcfq484sj.__unittest_L28_C1() [0x427eca]

    ??:? void tmpcfq484sj.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b166]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430285]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b13d]

    ??:? runModuleUnitTests [0x42c0a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428738]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: -1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        foreach(i; 2..n)\n        {\n            if(n % i == 0)\n\
    \                return false;\n        }\n        return true;\n    }\n    foreach(i;\
    \ 2..a)\n    {\n        if(is_prime(i))\n        {\n            foreach(j; 2..a)\n\
    \            {\n                if(is_prime(j))\n                {\n         \
    \           foreach(k; 2..a)\n                    {\n                        if(is_prime(k))\n\
    \                        {\n                            if(i * j * k == a)\n \
    \                               return true;\n                        }\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660163092
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2)\n        {\n            if (n % i == 0) return false;\n        }\n \
    \       return true;\n    }\n    if (a < 6) return false;\n    if (a % 2 == 0)\
    \ return is_multiply_prime(a / 2);\n    if (a % 3 == 0) return is_multiply_prime(a\
    \ / 3);\n    for (long i = 5; i <= sqrt(a); i += 6)\n    {\n        if (a % i\
    \ == 0) return is_multiply_prime(a / i);\n        if (a % (i + 2) == 0) return\
    \ is_multiply_prime(a / (i + 2));\n    }\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0wktsbsd.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp0wktsbsd.d(27): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wktsbsd.d", "-I/tm'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a <= 0)\n\
    \        return false;\n    if (a == 1)\n        return true;\n    if (a == 2)\n\
    \        return false;\n    if (a == 3)\n        return true;\n    if (a == 4)\n\
    \        return false;\n    if (a == 5)\n        return true;\n    if (a == 6)\n\
    \        return true;\n    if (a == 7)\n        return true;\n    if (a == 8)\n\
    \        return false;\n    if (a == 9)\n        return true;\n    if (a == 10)\n\
    \        return true;\n    if (a == 11)\n        return true;\n    if (a == 12)\n\
    \        return true;\n    if (a == 13)\n        return true;\n    if (a == 14)\n\
    \        return false;\n    if (a == 15)\n        return true;\n    if (a == 16)\n\
    \        return false;\n    if (a == 17)\n        return true;\n    if (a == 18)\n\
    \        return true;\n    if (a == 19)\n        return true;\n    if (a == 20)\n\
    \        return true;\n    if (a == 21)\n        return true;\n    if (a == 22)\n\
    \        return false;\n    if (a == 23)\n        return true;\n    if (a == 24)\n\
    \        return true;\n    if (a == 25)\n        return true;\n    if (a == 26)\n\
    \        return false;\n    if (a == 27)\n        return true;\n    if (a == 28)\n\
    \        return false;\n    if (a == 29)\n        return true;\n    if (a == 30)\n\
    \        return true;\n    if (a == 31)\n        return true;\n    if (a == 32)\n\
    \        return false;\n    if (a == 33)\n        return false;\n    if (a ==\
    \ 34)\n        return false;\n    if (a == 35)\n        return true;\n    if (a\
    \ == 36)\n        return true;\n    if (a == 37)\n        return true;\n    if\
    \ (a == 38)\n        return false;\n    if\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipsf8bk7.d(92): Error: found `unittest` when expecting `(`

    /tmp/tmpipsf8bk7.d(107): Error: found `void` when expecting `)`

    /tmp/tmpipsf8bk7.d(107): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipsf8bk7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i;\n   \
    \ long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n \
    \   long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long bb;\n    long cc;\n    long dd;\n    long ee;\n    long ff;\n    long\
    \ gg;\n    long hh;\n    long ii;\n    long jj;\n    long kk;\n    long ll;\n\
    \    long mm;\n    long nn;\n    long oo;\n    long pp;\n    long qq;\n    long\
    \ rr;\n    long ss;\n    long tt;\n    long uu;\n    long vv;\n    long ww;\n\
    \    long xx;\n    long yy;\n    long zz;\n    long aaa;\n    long bbb;\n    long\
    \ ccc;\n    long ddd;\n    long eee;\n    long fff;\n    long ggg;\n    long hhh;\n\
    \    long iii;\n    long jjj;\n    long kkk;\n    long lll;\n    long mmm;\n \
    \   long nnn;\n    long ooo;\n    long ppp;\n    long qqq;\n    long rrr;\n  \
    \  long sss;\n    long ttt;\n    long uuu;\n    long vvv;\n    long www;\n   \
    \ long xxx;\n    long yyy;\n    long zzz;\n    long aaaa;\n    long bbbb;\n  \
    \  long cccc;\n    long dddd;\n    long eeee;\n    long ffff;\n    long gggg;\n\
    \    long hhhh;\n    long iiii;\n    long jjjj;\n    long kkkk;\n    long llll;\n\
    \    long mmmm;\n    long nnnn;\n    long oooo;\n    long pppp;\n    long qqqq;\n\
    \    long rrrr;\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n   \
    \ assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L)\
    \ == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmy4qfnxo.d(101): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmy4qfnxo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] prime\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; prime)\n    {\n        if(a % i == 0)\n\
    \        {\n            a /= i;\n        }\n    }\n    return a == 1;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp9fvw4wp.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x42821d]

    ??:? void tmpp9fvw4wp.__unittest_L23_C1() [0x427e6e]

    ??:? void tmpp9fvw4wp.__modtest() [0x427f9c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c207]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b09a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43022d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]

    ??:? runModuleUnitTests [0x42bfdd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42866c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n    {\n        if(a\
    \ % primes[i] == 0)\n        {\n            return true;\n        }\n    }\n \
    \   return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdggrrap0.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x428225]

    ??:? void tmpdggrrap0.__unittest_L23_C1() [0x427e7a]

    ??:? void tmpdggrrap0.__modtest() [0x427fa8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c283]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b116]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430758]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430235]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ed]

    ??:? runModuleUnitTests [0x42c059]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4286e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long count = 0;\n    while (i <= a)\n \
    \   {\n        if (a % i == 0)\n        {\n            j = 2;\n            while\
    \ (j <= i)\n            {\n                if (i % j == 0)\n                {\n\
    \                    k = 2;\n                    while (k <= j)\n            \
    \        {\n                        if (j % k == 0)\n                        {\n\
    \                            if (k == j)\n                            {\n    \
    \                            count++;\n                            }\n       \
    \                 }\n                        k++;\n                    }\n   \
    \             }\n                j++;\n            }\n        }\n        i++;\n\
    \    }\n    if (count == 3)\n    {\n        return true;\n    }\n    else\n  \
    \  {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv7b70ai0.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpv7b70ai0.__unittest_L53_C1() [0x427b07]

    ??:? void tmpv7b70ai0.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (a > 1) \n    {\n        if (a % i == 0) \n   \
    \     {\n            count++;\n            a /= i;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163077
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long c = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n     \
    \   {\n            a /= i;\n            c++;\n        }\n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return c == 3;\n}\nunittest\n{\n\
    \    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163077
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int count = 0;\n\
    \    for (int i = 2; i <= a; i++)\n    {\n        if (a % i == 0)\n        {\n\
    \            count++;\n            a /= i;\n            i--;\n        }\n    }\n\
    \    return count == 3;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_multiply\
    \ = false;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    while (i <\
    \ a)\n    {\n        while (j < a)\n        {\n            while (k < a)\n   \
    \         {\n                if (i * j * k == a)\n                {\n        \
    \            is_multiply = true;\n                    break;\n               \
    \ }\n                k++;\n            }\n            j++;\n        }\n      \
    \  i++;\n    }\n    return is_multiply;\n}\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw9hiervm.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmpw9hiervm.__unittest_L36_C1() [0x427abb]

    ??:? void tmpw9hiervm.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n) \n    {\n        if (n < 2) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        for (long i = 3; i <= sqrt(n);\
    \ i += 2) \n        {\n            if (n % i == 0) return false;\n        }\n\
    \        return true;\n    }\n    if (a < 6) return false;\n    for (long i =\
    \ 2; i <= a / 3; i++) \n    {\n        if (is_prime(i) && is_prime(a / i) && is_prime(a\
    \ / (a / i))) return true;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7iu5fdz.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7iu5fdz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) return\
    \ false;\n    if (a % 2 == 0) return is_multiply_prime(a / 2);\n    if (a % 3\
    \ == 0) return is_multiply_prime(a / 3);\n    if (a % 5 == 0) return is_multiply_prime(a\
    \ / 5);\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc9b35wnb.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpc9b35wnb.__unittest_L19_C1() [0x427acf]

    ??:? void tmpc9b35wnb.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ a)\n    {\n        if (a <= 1)\n            return false;\n        else if (a\
    \ == 2)\n            return true;\n        else if (a % 2 == 0)\n            return\
    \ false;\n        else\n        {\n            long i = 3;\n            while\
    \ (i <= sqrt(a))\n            {\n                if (a % i == 0)\n           \
    \         return false;\n                i += 2;\n            }\n            return\
    \ true;\n        }\n    }\n    if (a == 1)\n        return false;\n    else\n\
    \    {\n        long i = 2;\n        while (i <= sqrt(a))\n        {\n       \
    \     if (is_prime(i) && a % i == 0)\n            {\n                long j =\
    \ a / i;\n                if (is_prime(j))\n                {\n              \
    \      long k = a / j;\n                    if (is_prime(k))\n               \
    \         return true;\n                }\n            }\n            i++;\n \
    \       }\n        return false;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipw3t4yd.d(24): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpipw3t4yd.d(38): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipw3t4yd.d", "-I/tm'
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (a > 1) \n    {\n        if (a % i == 0) \n   \
    \     {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ a)\n    {\n        if (a <= 1)\n            return false;\n        if (a ==\
    \ 2)\n            return true;\n        if (a % 2 == 0)\n            return false;\n\
    \        for (long i = 3; i <= sqrt(a); i += 2)\n        {\n            if (a\
    \ % i == 0)\n                return false;\n        }\n        return true;\n\
    \    }\n    if (a <= 1)\n        return false;\n    if (a == 2)\n        return\
    \ true;\n    if (a % 2 == 0)\n        return false;\n    for (long i = 3; i <=\
    \ sqrt(a); i += 2)\n    {\n        if (a % i == 0)\n        {\n            if\
    \ (is_prime(i) && is_prime(a / i))\n                return true;\n        }\n\
    \    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu9hwnkap.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpu9hwnkap.d(34): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long n = a;\n    while (i < n) {\n    \
    \    while (j < n) {\n            while (k < n) {\n                if (i * j *\
    \ k == n) {\n                    return true;\n                }\n           \
    \     k++;\n            }\n            j++;\n        }\n        i++;\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp27r0g4q4.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e45]

    ??:? void tmp27r0g4q4.__unittest_L31_C1() [0x427abb]

    ??:? void tmp27r0g4q4.__modtest() [0x427bc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]

    ??:? runModuleUnitTests [0x42b941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428294]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a == 1) return\
    \ false;\n    if (a == 2) return true;\n    if (a == 3) return true;\n    if (a\
    \ == 5) return true;\n    if (a == 7) return true;\n    if (a == 11) return true;\n\
    \    if (a == 13) return true;\n    if (a == 17) return true;\n    if (a == 19)\
    \ return true;\n    if (a == 23) return true;\n    if (a == 29) return true;\n\
    \    if (a == 31) return true;\n    if (a == 37) return true;\n    if (a == 41)\
    \ return true;\n    if (a == 43) return true;\n    if (a == 47) return true;\n\
    \    if (a == 53) return true;\n    if (a == 59) return true;\n    if (a == 61)\
    \ return true;\n    if (a == 67) return true;\n    if (a == 71) return true;\n\
    \    if (a == 73) return true;\n    if (a == 79) return true;\n    if (a == 83)\
    \ return true;\n    if (a == 89) return true;\n    if (a == 97) return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3lv_gzns.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmp3lv_gzns.__unittest_L41_C1() [0x427b2e]

    ??:? void tmp3lv_gzns.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long l = 2;\n    long m = 2;\n    long\
    \ n = 2;\n    long o = 2;\n    long p = 2;\n    long q = 2;\n    long r = 2;\n\
    \    long s = 2;\n    long t = 2;\n    long u = 2;\n    long v = 2;\n    long\
    \ w = 2;\n    long x = 2;\n    long y = 2;\n    long z = 2;\n    long aa = 2;\n\
    \    long bb = 2;\n    long cc = 2;\n    long dd = 2;\n    long ee = 2;\n    long\
    \ ff = 2;\n    long gg = 2;\n    long hh = 2;\n    long ii = 2;\n    long jj =\
    \ 2;\n    long kk = 2;\n    long ll = 2;\n    long mm = 2;\n    long nn = 2;\n\
    \    long oo = 2;\n    long pp = 2;\n    long qq = 2;\n    long rr = 2;\n    long\
    \ ss = 2;\n    long tt = 2;\n    long uu = 2;\n    long vv = 2;\n    long ww =\
    \ 2;\n    long xx = 2;\n    long yy = 2;\n    long zz = 2;\n    long aaa = 2;\n\
    \    long bbb = 2;\n    long ccc = 2;\n    long ddd = 2;\n    long eee = 2;\n\
    \    long fff = 2;\n    long ggg = 2;\n    long hhh = 2;\n    long iii = 2;\n\
    \    long jjj = 2;\n    long kkk = 2;\n    long lll = 2;\n    long mmm = 2;\n\
    \    long nnn = 2;\n    long ooo = 2;\n    long ppp = 2;\n    long qqq = 2;\n\
    \    long rrr = 2;\n    long sss = 2;\n    long ttt = 2;\n    long uuu = 2;\n\
    \    long vvv = 2;\n    long www = 2;\n    long\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygg_5yff.d(81): Error: no identifier for declarator `long`

    /tmp/tmpygg_5yff.d(81): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygg_5yff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long[] primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    foreach(i; 0 .. primes.length)\n    {\n        if(a\
    \ % primes[i] == 0)\n        {\n            a /= primes[i];\n            if(a\
    \ == 1)\n            {\n                return true;\n            }\n        \
    \    i = 0;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcfq484sj.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428275]

    ??:? void tmpcfq484sj.__unittest_L28_C1() [0x427eca]

    ??:? void tmpcfq484sj.__modtest() [0x427ff8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2d3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b166]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430285]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b13d]

    ??:? runModuleUnitTests [0x42c0a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428738]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) return\
    \ false;\n    if (a % 2 == 0) return is_multiply_prime(a / 2);\n    if (a % 3\
    \ == 0) return is_multiply_prime(a / 3);\n    if (a % 5 == 0) return is_multiply_prime(a\
    \ / 5);\n    return a == 1;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp759sv5wv.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmp759sv5wv.__unittest_L19_C1() [0x427ad7]

    ??:? void tmp759sv5wv.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 3;\n    long k = 5;\n    long l = 7;\n    long m = 11;\n    long\
    \ n = 13;\n    long o = 17;\n    long p = 19;\n    long q = 23;\n    long r =\
    \ 29;\n    long s = 31;\n    long t = 37;\n    long u = 41;\n    long v = 43;\n\
    \    long w = 47;\n    long x = 53;\n    long y = 59;\n    long z = 61;\n    long\
    \ aa = 67;\n    long bb = 71;\n    long cc = 73;\n    long dd = 79;\n    long\
    \ ee = 83;\n    long ff = 89;\n    long gg = 97;\n    long hh = 101;\n    long\
    \ ii = 103;\n    long jj = 107;\n    long kk = 109;\n    long ll = 113;\n    long\
    \ mm = 127;\n    long nn = 131;\n    long oo = 137;\n    long pp = 139;\n    long\
    \ qq = 149;\n    long rr = 151;\n    long ss = 157;\n    long tt = 163;\n    long\
    \ uu = 167;\n    long vv = 173;\n    long ww = 179;\n    long xx = 181;\n    long\
    \ yy = 191;\n    long zz = 193;\n    long aaa = 197;\n    long bbb = 199;\n  \
    \  long ccc = 211;\n    long ddd = 223;\n    long eee = 227;\n    long fff = 229;\n\
    \    long ggg = 233;\n    long hhh = 239;\n    long iii = 241;\n    long jjj =\
    \ 251;\n    long kkk = 257;\n    long lll = 263;\n    long mmm = 269;\n    long\
    \ nnn = 271;\n    long ooo = 277;\n    long ppp = 281;\n    long qqq = 283;\n\
    \    long rrr = 293;\n    long sss = 307;\n    long ttt = 311;\n    long uuu =\
    \ 313;\n    long vvv = 317;\n    long www = 331;\n    long\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpys2k9ena.d(81): Error: no identifier for declarator `long`

    /tmp/tmpys2k9ena.d(81): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpys2k9ena.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    import std.math\
    \ : isPrime;\n    import std.algorithm : count;\n    import std.range : iota;\n\
    \    import std.typecons : tuple;\n    import std.array : array;\n    import std.conv\
    \ : to;\n    import std.range : take;\n    import std.range : drop;\n    import\
    \ std.range : empty;\n    import std.range : chain;\n    import std.range : retro;\n\
    \    import std.range : retroChain;\n    import std.range : retroDrop;\n    import\
    \ std.range : retroTake;\n    import std.range : retroFilter;\n    import std.range\
    \ : retroMap;\n    import std.range : retroZip;\n    import std.range : retroCycle;\n\
    \    import std.range : retroRepeat;\n    import std.range : retroChunks;\n  \
    \  import std.range : retroChunksOf;\n    import std.range : retroSlices;\n  \
    \  import std.range : retroSlicesOf;\n    import std.range : retroSplitter;\n\
    \    import std.range : retroSplit;\n    import std.range : retroJoin;\n    import\
    \ std.range : retroEach;\n    import std.range : retroEach!\"a.length\";\n   \
    \ import std.range : retroEach!\"a.length - 1\";\n    import std.range : retroEach!\"\
    a.length + 1\";\n    import std.range : retroEach!\"a.length - 1u\";\n    import\
    \ std.range : retroEach!\"a.length + 1u\";\n    import std.range : retroEach!\"\
    a.length - 1L\";\n    import std.range : retroEach!\"a.length + 1L\";\n    import\
    \ std.range : retroEach!\"a.length - 1UL\";\n    import std.range : retroEach!\"\
    a.length + 1UL\";\n    import std.range : retroEach!\"a.length - 1LU\";\n    import\
    \ std.range : retroEach!\"a.length + 1LU\";\n    import std.range : retroEach!\"\
    a.length - 1LL\";\n    import std.range : retroEach!\"a.length + 1LL\";\n    import\
    \ std.range : retroEach!\"a.length - 1ULL\";\n    import std\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3hzl77s1.d(40): Error: `;` expected

    /tmp/tmp3hzl77s1.d(41): Error: `;` expected

    /tmp/tmp3hzl77s1.d(42): Error: `;` expected

    /tmp/tmp3hzl77s1.d(43): Error: `;` expected

    /tmp/tmp3hzl77s1.d(44): Error: `;` expected

    /tmp/tmp3hzl77s1.d(45): Error: `;` expected

    /tmp/tmp3hzl77s1.d(46): Error: `;` expected

    /tmp/tmp3hzl77s1.d(47): Error: `;` expected

    /tmp/tmp3hzl77s1.d(48): Error: `;` expected

    /tmp/tmp3hzl77s1.d(49): Error: `;` expected

    /tmp/tmp3hzl77s1.d(50): Error: `;` expected

    /tmp/tmp3hzl77s1.d(51): Error: `;` expected

    /tmp/tmp3hzl77s1.d(52): Error: `;` expected

    /tmp/tmp3hzl77s1.d(53): Error: `;` expected

    /tmp/tmp3hzl77s1.d(55): Error: `;` expected

    /tmp/tmp3hzl77s1.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3hzl77s1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long l = 2;\n    long m = 2;\n    long\
    \ n = 2;\n    long o = 2;\n    long p = 2;\n    long q = 2;\n    long r = 2;\n\
    \    long s = 2;\n    long t = 2;\n    long u = 2;\n    long v = 2;\n    long\
    \ w = 2;\n    long x = 2;\n    long y = 2;\n    long z = 2;\n    long aa = 2;\n\
    \    long bb = 2;\n    long cc = 2;\n    long dd = 2;\n    long ee = 2;\n    long\
    \ ff = 2;\n    long gg = 2;\n    long hh = 2;\n    long ii = 2;\n    long jj =\
    \ 2;\n    long kk = 2;\n    long ll = 2;\n    long mm = 2;\n    long nn = 2;\n\
    \    long oo = 2;\n    long pp = 2;\n    long qq = 2;\n    long rr = 2;\n    long\
    \ ss = 2;\n    long tt = 2;\n    long uu = 2;\n    long vv = 2;\n    long ww =\
    \ 2;\n    long xx = 2;\n    long yy = 2;\n    long zz = 2;\n    long aaa = 2;\n\
    \    long bbb = 2;\n    long ccc = 2;\n    long ddd = 2;\n    long eee = 2;\n\
    \    long fff = 2;\n    long ggg = 2;\n    long hhh = 2;\n    long iii = 2;\n\
    \    long jjj = 2;\n    long kkk = 2;\n    long lll = 2;\n    long mmm = 2;\n\
    \    long nnn = 2;\n    long ooo = 2;\n    long ppp = 2;\n    long qqq = 2;\n\
    \    long rrr = 2;\n    long sss = 2;\n    long ttt = 2;\n    long uuu = 2;\n\
    \    long vvv = 2;\n    long www = 2;\n    long\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygg_5yff.d(81): Error: no identifier for declarator `long`

    /tmp/tmpygg_5yff.d(81): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygg_5yff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n) \n    {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n\
    \        if (n % 2 == 0) return false;\n        foreach (i; 2 .. n) \n       \
    \ {\n            if (n % i == 0) return false;\n        }\n        return true;\n\
    \    }\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach (i; 0 .. primes.length)\
    \ \n    {\n        foreach (j; 0 .. primes.length) \n        {\n            foreach\
    \ (k; 0 .. primes.length) \n            {\n                if (primes[i] * primes[j]\
    \ * primes[k] == a) return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) return\
    \ false;\n    if (a % 2 == 0) return is_multiply_prime(a / 2);\n    if (a % 3\
    \ == 0) return is_multiply_prime(a / 3);\n    if (a % 5 == 0) return is_multiply_prime(a\
    \ / 5);\n    if (a % 7 == 0) return is_multiply_prime(a / 7);\n    if (a % 11\
    \ == 0) return is_multiply_prime(a / 11);\n    if (a % 13 == 0) return is_multiply_prime(a\
    \ / 13);\n    if (a % 17 == 0) return is_multiply_prime(a / 17);\n    if (a %\
    \ 19 == 0) return is_multiply_prime(a / 19);\n    if (a % 23 == 0) return is_multiply_prime(a\
    \ / 23);\n    if (a % 29 == 0) return is_multiply_prime(a / 29);\n    if (a %\
    \ 31 == 0) return is_multiply_prime(a / 31);\n    if (a % 37 == 0) return is_multiply_prime(a\
    \ / 37);\n    if (a % 41 == 0) return is_multiply_prime(a / 41);\n    if (a %\
    \ 43 == 0) return is_multiply_prime(a / 43);\n    if (a % 47 == 0) return is_multiply_prime(a\
    \ / 47);\n    if (a % 53 == 0) return is_multiply_prime(a / 53);\n    if (a %\
    \ 59 == 0) return is_multiply_prime(a / 59);\n    if (a % 61 == 0) return is_multiply_prime(a\
    \ / 61);\n    if (a % 67 == 0) return is_multiply_prime(a / 67);\n    if (a %\
    \ 71 == 0) return is_multiply_prime(a / 71);\n    if (a % 73 == 0) return is_multiply_prime(a\
    \ / 73);\n    if (a % 79 == 0) return is_multiply\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqwui_uav.d(36): Error: found `unittest` when expecting `;` following
    `return` statement

    /tmp/tmpqwui_uav.d(51): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwui_uav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n) \n    {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n\
    \        if (n % 2 == 0 || n % 3 == 0) return false;\n        for (long i = 5;\
    \ i * i <= n; i += 6) \n        {\n            if (n % i == 0 || n % (i + 2) ==\
    \ 0) return false;\n        }\n        return true;\n    }\n    if (a <= 1) return\
    \ false;\n    if (a <= 3) return true;\n    if (a % 2 == 0 || a % 3 == 0) return\
    \ false;\n    for (long i = 5; i * i <= a; i += 6) \n    {\n        if (a % i\
    \ == 0 || a % (i + 2) == 0) \n        {\n            if (is_prime(i) && is_prime(a\
    \ / i)) return true;\n        }\n    }\n    return false;\n}\nunittest\n{\n  \
    \  alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpelhkzxil.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fa5]

    ??:? void tmpelhkzxil.__unittest_L36_C1() [0x427c1b]

    ??:? void tmpelhkzxil.__modtest() [0x427d28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab35]

    ??:? runModuleUnitTests [0x42baa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return a == 1;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwjmuztul.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpwjmuztul.__unittest_L23_C1() [0x427ad7]

    ??:? void tmpwjmuztul.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ n)\n    {\n        if (n <= 1)\n            return false;\n        else if (n\
    \ <= 3)\n            return true;\n        else if (n % 2 == 0 || n % 3 == 0)\n\
    \            return false;\n        long i = 5;\n        while (i * i <= n)\n\
    \        {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return\
    \ false;\n            i += 6;\n        }\n        return true;\n    }\n    if\
    \ (a <= 1)\n        return false;\n    else if (a <= 3)\n        return true;\n\
    \    else if (a % 2 == 0 || a % 3 == 0)\n        return false;\n    long i = 5;\n\
    \    while (i * i <= a)\n    {\n        if (a % i == 0 || a % (i + 2) == 0)\n\
    \            return false;\n        i += 6;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpranbuh0u.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f7d]

    ??:? void tmpranbuh0u.__unittest_L45_C1() [0x427bd2]

    ??:? void tmpranbuh0u.__modtest() [0x427d00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430178]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab0d]

    ??:? runModuleUnitTests [0x42ba79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return a == 1;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwjmuztul.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpwjmuztul.__unittest_L23_C1() [0x427ad7]

    ??:? void tmpwjmuztul.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) \n\
    \        return false;\n    if (a % 2 == 0) \n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0) \n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0) \n        return is_multiply_prime(a / 5);\n    return a == 1;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4ao0pmm.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpc4ao0pmm.__unittest_L23_C1() [0x427ad7]

    ??:? void tmpc4ao0pmm.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6) return\
    \ false;\n    if (a % 2 == 0) return is_multiply_prime(a / 2);\n    if (a % 3\
    \ == 0) return is_multiply_prime(a / 3);\n    if (a % 5 == 0) return is_multiply_prime(a\
    \ / 5);\n    return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc9b35wnb.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpc9b35wnb.__unittest_L19_C1() [0x427acf]

    ??:? void tmpc9b35wnb.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_multiply_prime\
    \ = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(long prime; primes)\n\
    \    {\n        if(a % prime == 0)\n        {\n            is_multiply_prime =\
    \ true;\n            break;\n        }\n    }\n    return is_multiply_prime;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7s_qjkqf.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmp7s_qjkqf.__unittest_L25_C1() [0x427e5e]

    ??:? void tmp7s_qjkqf.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b08a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]

    ??:? runModuleUnitTests [0x42bfcd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42865c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 2;\n\
    \    long j = 2;\n    long k = 2;\n    long temp = a;\n    while(i < temp)\n \
    \   {\n        if(temp % i == 0)\n        {\n            temp /= i;\n        \
    \    j = i;\n            break;\n        }\n        i++;\n    }\n    while(j <\
    \ temp)\n    {\n        if(temp % j == 0)\n        {\n            temp /= j;\n\
    \            k = j;\n            break;\n        }\n        j++;\n    }\n    if(temp\
    \ == k)\n        return true;\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1ll5ek47.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmp1ll5ek47.__unittest_L41_C1() [0x427aeb]

    ??:? void tmp1ll5ek47.__modtest() [0x427bf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]

    ??:? runModuleUnitTests [0x42b971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a == 1) return\
    \ false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n  \
    \  foreach (i; 2 .. a)\n    {\n        if (a % i == 0)\n        {\n          \
    \  if (isPrime(i))\n            {\n                auto b = a / i;\n         \
    \       if (isPrime(b))\n                {\n                    auto c = b / i;\n\
    \                    if (isPrime(c))\n                    {\n                \
    \        return true;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqr5_i77.d(20): Error: undefined identifier `isPrime`

    /tmp/tmphqr5_i77.d(23): Error: undefined identifier `isPrime`

    /tmp/tmphqr5_i77.d(26): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqr5_i77.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return a == 1;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwjmuztul.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpwjmuztul.__unittest_L23_C1() [0x427ad7]

    ??:? void tmpwjmuztul.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n  \
    \      {\n            count++;\n            a /= i;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    if (a < 100)\n    {\n        long[] primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \        foreach (long i; primes)\n        {\n            if (a % i == 0)\n  \
    \          {\n                result = true;\n                break;\n       \
    \     }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp39cmaw53.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428215]

    ??:? void tmp39cmaw53.__unittest_L28_C1() [0x427e6a]

    ??:? void tmp39cmaw53.__modtest() [0x427f98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b092]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430225]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306d4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b069]

    ??:? runModuleUnitTests [0x42bfd5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428664]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long i = 2;\n    long count = 0;\n    while (i <= a)\n    {\n  \
    \      if (a % i == 0)\n        {\n            if (isPrime(i))\n            {\n\
    \                count++;\n                a /= i;\n            }\n        }\n\
    \        if (count == 3)\n        {\n            result = true;\n            break;\n\
    \        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74j1t3_x.d(20): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74j1t3_x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_prime(long\
    \ a) \n    {\n        if (a <= 1) \n            return false;\n        if (a ==\
    \ 2) \n            return true;\n        if (a % 2 == 0) \n            return\
    \ false;\n        for (long i = 3; i <= sqrt(a); i += 2) \n        {\n       \
    \     if (a % i == 0) \n                return false;\n        }\n        return\
    \ true;\n    }\n    if (a <= 1) \n        return false;\n    if (a == 2) \n  \
    \      return true;\n    if (a % 2 == 0) \n        return false;\n    for (long\
    \ i = 3; i <= sqrt(a); i += 2) \n    {\n        if (a % i == 0) \n        {\n\
    \            if (is_prime(a / i) && is_prime(i)) \n                return true;\n\
    \        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeiojn4ch.d(21): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpeiojn4ch.d(34): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeiojn4ch.d", "-I/tm'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long b = a;\n\
    \    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwnon6_h.d(84): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwnon6_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a <= 1)\n\
    \        return false;\n    if (a == 2)\n        return true;\n    if (a % 2 ==\
    \ 0)\n        return false;\n    for (long i = 3; i <= sqrt(a); i += 2)\n    {\n\
    \        if (a % i == 0)\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_0ydddae.d(19): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0ydddae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163075
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime; primes)\
    \ \n    {\n        if(a % prime == 0) \n        {\n            a /= prime;\n \
    \           if(a == 1) \n            {\n                result = true;\n     \
    \           break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    import std.algorithm\
    \ : all;\n    import std.range : iota;\n    import std.math : isPrime;\n    import\
    \ std.array : array;\n    import std.conv : to;\n    import std.range : take;\n\
    \    import std.range : drop;\n    import std.range : zip;\n    import std.range\
    \ : chain;\n    import std.range : cycle;\n    import std.range : retro;\n   \
    \ import std.range : isInputRange;\n    import std.range : isForwardRange;\n \
    \   import std.range : isBidirectionalRange;\n    import std.range : isRandomAccessRange;\n\
    \    import std.range : isInfinite;\n    import std.range : isSorted;\n    import\
    \ std.range : isSorted!\"a < b\";\n    import std.range : isSorted!\"a > b\";\n\
    \    import std.range : isSorted!\"a <= b\";\n    import std.range : isSorted!\"\
    a >= b\";\n    import std.range : isSorted!\"a.length < b.length\";\n    import\
    \ std.range : isSorted!\"a.length > b.length\";\n    import std.range : isSorted!\"\
    a.length <= b.length\";\n    import std.range : isSorted!\"a.length >= b.length\"\
    ;\n    import std.range : isSorted!\"a.id < b.id\";\n    import std.range : isSorted!\"\
    a.id > b.id\";\n    import std.range : isSorted!\"a.id <= b.id\";\n    import\
    \ std.range : isSorted!\"a.id >= b.id\";\n    import std.range : isSorted!\"strcmp(a,\
    \ b) < 0\";\n    import std.range : isSorted!\"strcmp(a, b) > 0\";\n    import\
    \ std.range : isSorted!\"strcmp(a, b) <= 0\";\n    import std.range : isSorted!\"\
    strcmp(a, b) >= 0\";\n    import std.range : isSorted!\"a.opCmp(b) < 0\";\n  \
    \  import std.range : isSorted!\"a.opCmp(b) >\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmaquzsr7.d(30): Error: `;` expected

    /tmp/tmpmaquzsr7.d(31): Error: `;` expected

    /tmp/tmpmaquzsr7.d(32): Error: `;` expected

    /tmp/tmpmaquzsr7.d(33): Error: `;` expected

    /tmp/tmpmaquzsr7.d(34): Error: `;` expected

    /tmp/tmpmaquzsr7.d(35): Error: `;` expected

    /tmp/tmpmaquzsr7.d(36): Error: `;` expected

    /tmp/tmpmaquzsr7.d(37): Error: `;` expected

    /tmp/tmpmaquzsr7.d(38): Error: `;` expected

    /tmp/tmpmaquzsr7.d(39): Error: `;` expected

    /tmp/tmpmaquzsr7.d(40): Error: `;` expected

    /tmp/tmpmaquzsr7.d(41): Error: `;` expected

    /tmp/tmpmaquzsr7.d(42): Error: `;` expected

    /tmp/tmpmaquzsr7.d(43): Error: `;` expected

    /tmp/tmpmaquzsr7.d(44): Error: `;` expected

    /tmp/tmpmaquzsr7.d(45): Error: `;` expected

    /tmp/tmpmaquzsr7.d(46): Error: `;` expected

    /tmp/tmpmaquzsr7.d(47): Error: `;` expected

    /tmp/tmpmaquzsr7.d(47): Error: unterminated string constant starting at /tmp/tmpmaquzsr7.d(47)

    /tmp/tmpmaquzsr7.d(63): Error: found `End of File` when expecting `;` following
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp'
  stdout: ''
  timestamp: 1660163077
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    int i = 2;\n\
    \    int count = 0;\n    while (i <= a) \n    {\n        if (a % i == 0) \n  \
    \      {\n            a /= i;\n            count++;\n        }\n        else \n\
    \        {\n            i++;\n        }\n    }\n    return count == 3;\n}\nunittest\n\
    {\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n\
    \    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n   \
    \ assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n  \
    \  assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n\
    \    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a == 1) return\
    \ false;\n    if (a == 2) return true;\n    if (a == 3) return true;\n    if (a\
    \ == 5) return true;\n    if (a == 7) return true;\n    if (a == 11) return true;\n\
    \    if (a == 13) return true;\n    if (a == 17) return true;\n    if (a == 19)\
    \ return true;\n    if (a == 23) return true;\n    if (a == 29) return true;\n\
    \    if (a == 31) return true;\n    if (a == 37) return true;\n    if (a == 41)\
    \ return true;\n    if (a == 43) return true;\n    if (a == 47) return true;\n\
    \    if (a == 53) return true;\n    if (a == 59) return true;\n    if (a == 61)\
    \ return true;\n    if (a == 67) return true;\n    if (a == 71) return true;\n\
    \    if (a == 73) return true;\n    if (a == 79) return true;\n    if (a == 83)\
    \ return true;\n    if (a == 89) return true;\n    if (a == 97) return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\
    \n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n   \
    \ assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n   \
    \ assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n \
    \   assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3lv_gzns.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmp3lv_gzns.__unittest_L41_C1() [0x427b2e]

    ??:? void tmp3lv_gzns.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a < 6)\n\
    \        return false;\n    if (a % 2 == 0)\n        return is_multiply_prime(a\
    \ / 2);\n    if (a % 3 == 0)\n        return is_multiply_prime(a / 3);\n    if\
    \ (a % 5 == 0)\n        return is_multiply_prime(a / 5);\n    return a == 1;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwjmuztul.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e65]

    ??:? void tmpwjmuztul.__unittest_L23_C1() [0x427ad7]

    ??:? void tmpwjmuztul.__modtest() [0x427be4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430060]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f5]

    ??:? runModuleUnitTests [0x42b961]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163076
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool is_multiply_prime\
    \ = false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(prime; primes)\n\
    \    {\n        if(a % prime == 0)\n        {\n            is_multiply_prime =\
    \ true;\n            a /= prime;\n        }\n    }\n    return is_multiply_prime;\n\
    }\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L)\
    \ == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) ==\
    \ true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) ==\
    \ false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) ==\
    \ false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsjwap_bw.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42821d]

    ??:? void tmpsjwap_bw.__unittest_L25_C1() [0x427e72]

    ??:? void tmpsjwap_bw.__modtest() [0x427fa0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c207]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b09a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43022d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301b9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]

    ??:? runModuleUnitTests [0x42bfdd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42866c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach(i; primes)\n \
    \   {\n        if(a % i == 0)\n        {\n            result = true;\n       \
    \     break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprjrba5ik.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x42820d]

    ??:? void tmprjrba5ik.__unittest_L25_C1() [0x427e5e]

    ??:? void tmprjrba5ik.__modtest() [0x427f8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c1f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b08a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43021d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4306cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4301a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]

    ??:? runModuleUnitTests [0x42bfcd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42865c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    bool result =\
    \ false;\n    if (a < 100)\n    {\n        for (int i = 2; i < a; i++)\n     \
    \   {\n            if (a % i == 0)\n            {\n                for (int j\
    \ = 2; j < a; j++)\n                {\n                    if (a % j == 0)\n \
    \                   {\n                        for (int k = 2; k < a; k++)\n \
    \                       {\n                            if (a % k == 0)\n     \
    \                       {\n                                if (i * j * k == a)\n\
    \                                {\n                                    result\
    \ = true;\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ivgvfvz.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmp5ivgvfvz.__unittest_L41_C1() [0x427b64]

    ??:? void tmp5ivgvfvz.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    if (a <= 1) return\
    \ false;\n    if (a == 2) return true;\n    if (a % 2 == 0) return false;\n  \
    \  for (long i = 3; i <= sqrt(a); i += 2) \n    {\n        if (a % i == 0) \n\
    \        {\n            return is_multiply_prime(a / i);\n        }\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = is_multiply_prime;\n\n\
    \    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n  \
    \  assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L)\
    \ == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L)\
    \ == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L)\
    \ == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf8gih095.d(16): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf8gih095.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163077
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n        30\
    \ = 2 * 3 * 5\n    \n*/\nbool is_multiply_prime(long a) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L)\
    \ == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) ==\
    \ true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) ==\
    \ false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L)\
    \ == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy4v1cp62.d(83): Error: semicolon expected, not `unittest`

    /tmp/tmpy4v1cp62.d(83): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4v1cp62.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163077
