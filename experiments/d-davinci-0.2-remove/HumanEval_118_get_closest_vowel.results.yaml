language: d
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int vowel_index = -1;\n    int distance = -1;\n  \
    \  while(index--)\n    {\n        if(vowels.find(word[index]) != -1)\n       \
    \ {\n            vowel_index = index;\n            break;\n        }\n    }\n\
    \    if(vowel_index == -1)\n        return result;\n    index = vowel_index;\n\
    \    while(index--)\n    {\n        if(vowels.find(word[index]) == -1)\n     \
    \   {\n            if(distance == -1)\n            {\n                distance\
    \ = vowel_index - index;\n                result = word[vowel_index];\n      \
    \      }\n            else\n            {\n                if(vowel_index - index\
    \ < distance)\n                {\n                    distance = vowel_index -\
    \ index;\n                    result = word[vowel_index];\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\"\
    );\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\")\
    \ == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2azo3zjv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = \"\";\n    auto last_consonant = \"\";\n    foreach(c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            last_vowel\
    \ = c;\n        }\n        else if(consonants.canFind(c))\n        {\n       \
    \     last_consonant = c;\n        }\n    }\n    return last_vowel;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphjczh533.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n    int word_length\
    \ = word.length;\n    for (int i = word_length - 1; i >= 0; i--)\n    {\n    \
    \    if (vowels.find(word[i]) != -1)\n        {\n            if (i == word_length\
    \ - 1)\n            {\n                return \"\";\n            }\n         \
    \   else\n            {\n                if (closest_vowel_distance == -1)\n \
    \               {\n                    closest_vowel_distance = word_length -\
    \ i - 1;\n                    closest_vowel_index = i;\n                }\n  \
    \              else\n                {\n                    if (word_length -\
    \ i - 1 < closest_vowel_distance)\n                    {\n                   \
    \     closest_vowel_distance = word_length - i - 1;\n                        closest_vowel_index\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \   }\n    if (closest_vowel_index != -1)\n    {\n        result = word[closest_vowel_index..closest_vowel_index];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwt1918oi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                if (vowels.find(word[index - 1]) == -1)\n                {\n\
    \                    result = word[index..$];\n                    break;\n  \
    \              }\n            }\n            else if (index == 0)\n          \
    \  {\n                if (vowels.find(word[index + 1]) == -1)\n              \
    \  {\n                    result = word[index..$];\n                    break;\n\
    \                }\n            }\n            else\n            {\n         \
    \       if (vowels.find(word[index - 1]) == -1 && vowels.find(word[index + 1])\
    \ == -1)\n                {\n                    result = word[index..$];\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   index--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcgsr3yoj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    while(index--)\n    {\n        if(vowels.find(word[index])\
    \ != -1)\n        {\n            if(index > 0 && vowels.find(word[index-1]) ==\
    \ -1)\n            {\n                if(index < word.length-1 && vowels.find(word[index+1])\
    \ == -1)\n                {\n                    result = word[index..$];\n  \
    \                  break;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva0ksfrj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int len = word.length;\n    int\
    \ i = len - 1;\n    while (i >= 0)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            if (i == len - 1)\n                return \"\";\n\
    \            else if (vowels.find(word[i + 1]) == -1)\n                return\
    \ word[i .. i];\n        }\n        i--;\n    }\n    return \"\";\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphedoipav.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int[]\
    \ vowel_indexes = [];\n    foreach(i, c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n            vowel_indexes ~= i;\n    }\n    if(vowel_indexes.length\
    \ == 0)\n        return result;\n    int min_distance = word.length;\n    foreach(i;\
    \ vowel_indexes)\n    {\n        int distance = word.length - i;\n        if(distance\
    \ < min_distance)\n        {\n            min_distance = distance;\n         \
    \   result = word[i..$];\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt7022q1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int distance = 0;\n    int min_distance = word.length;\n   \
    \ foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n  \
    \          if(i > 0 && vowels.find(word[i-1]) == -1)\n            {\n        \
    \        distance = word.length - i;\n                if(distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         index = i;\n                }\n            }\n        }\n    }\n   \
    \ if(index > 0)\n    {\n        result = word[index];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyfysze9d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                if (vowels.find(word[index - 1]) == -1)\n                {\n\
    \                    result = word[index];\n                    break;\n     \
    \           }\n            }\n            else if (index == 0)\n            {\n\
    \                if (vowels.find(word[index + 1]) == -1)\n                {\n\
    \                    result = word[index];\n                    break;\n     \
    \           }\n            }\n            else\n            {\n              \
    \  if (vowels.find(word[index - 1]) == -1 && vowels.find(word[index + 1]) == -1)\n\
    \                {\n                    result = word[index];\n              \
    \      break;\n                }\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeclzd0ba.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int distance = word.length;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i < index)\n            {\n                index = i;\n     \
    \           distance = word.length - i;\n                result = word[i];\n \
    \           }\n            else if (i == index)\n            {\n             \
    \   if (word.length - i < distance)\n                {\n                    distance\
    \ = word.length - i;\n                    result = word[i];\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\"\
    );\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\")\
    \ == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpczqjycb3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min = word.length;\n    foreach(i, ch; word)\n    {\n  \
    \      if(vowels.find(ch) != -1)\n        {\n            if(i > 0 && i < word.length\
    \ - 1)\n            {\n                if(vowels.find(word[i-1]) == -1 && vowels.find(word[i+1])\
    \ == -1)\n                {\n                    if(abs(word.length - i) < min)\n\
    \                    {\n                        min = abs(word.length - i);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibf6b63t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ last_vowel_index = -1;\n    for (int i = word.length - 1; i >= 0; i--)\n   \
    \ {\n        if (vowels.find(word[i]) != -1)\n        {\n            last_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (last_vowel_index == -1)\n\
    \        return result;\n    int first_consonant_index = -1;\n    for (int i =\
    \ last_vowel_index - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ == -1)\n        {\n            first_consonant_index = i;\n            break;\n\
    \        }\n    }\n    if (first_consonant_index == -1)\n        return result;\n\
    \    for (int i = last_vowel_index + 1; i < word.length; i++)\n    {\n       \
    \ if (vowels.find(word[i]) == -1)\n        {\n            if (i - last_vowel_index\
    \ < last_vowel_index - first_consonant_index)\n                return word[last_vowel_index..last_vowel_index];\n\
    \            else\n                return word[first_consonant_index..first_consonant_index];\n\
    \        }\n    }\n    return word[first_consonant_index..first_consonant_index];\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxa8z9fmw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    int distance = 0;\n    for (int i = 0; i <\
    \ word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i];\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4cd27xhr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = word.length;\n  \
    \  int vowel_index = -1;\n    int consonant_index = -1;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            vowel_index = i;\n            if (consonant_index != -1)\n      \
    \      {\n                if (vowel_index - consonant_index < index)\n       \
    \         {\n                    index = vowel_index - consonant_index;\n    \
    \            }\n            }\n        }\n        else\n        {\n          \
    \  consonant_index = i;\n        }\n    }\n    if (index == word.length)\n   \
    \ {\n        return \"\";\n    }\n    return word[vowel_index];\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ehjq0hk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = -1;\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if (index != -1)\n    {\n       \
    \ result = word[index];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\"\
    );\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\")\
    \ == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0agx2mz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int distance = word.length - i;\n            if (i > 0\
    \ && consonants.find(word[i - 1]) != -1)\n            {\n                if (distance\
    \ < min_distance)\n                {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph9v5bb1b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int min_distance = index;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int distance = index\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7rrz1t_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto found = false;\n    auto index = word.length;\n    foreach(i; 0 ..\
    \ word.length)\n    {\n        if(vowels.canFind(word[i]))\n        {\n      \
    \      if(i > 0 && consonants.canFind(word[i-1]))\n            {\n           \
    \     if(i < word.length-1 && consonants.canFind(word[i+1]))\n               \
    \ {\n                    found = true;\n                    index = i;\n     \
    \               break;\n                }\n            }\n        }\n    }\n \
    \   if(found)\n    {\n        return word[index..index+1];\n    }\n    else\n\
    \    {\n        return \"\";\n    }\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0acqz1m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = -1;\n    int min_distance\
    \ = word.length;\n    for (int i = word.length-1; i >= 0; i--)\n    {\n      \
    \  if (vowels.find(word[i]) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    index = i;\n                min_distance = distance;\n            }\n   \
    \     }\n    }\n    if (index == -1)\n        return \"\";\n    return word[index..$];\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_okzhty.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int i = word.length - 1;\n  \
    \  while (i >= 0) {\n        if (vowels.find(word[i]) != -1) {\n            if\
    \ (i == word.length - 1) {\n                return \"\";\n            }\n    \
    \        if (vowels.find(word[i + 1]) == -1) {\n                return word[i\
    \ .. i];\n            }\n        }\n        i--;\n    }\n    return \"\";\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfombs05z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto result = \"\";\n    auto last_consonant = \"\";\n    auto last_vowel\
    \ = \"\";\n    auto last_vowel_index = 0;\n    auto last_consonant_index = 0;\n\
    \    auto word_length = word.length;\n    auto word_length_minus_one = word_length\
    \ - 1;\n    auto word_length_minus_two = word_length - 2;\n    auto word_length_minus_three\
    \ = word_length - 3;\n    auto word_length_minus_four = word_length - 4;\n   \
    \ auto word_length_minus_five = word_length - 5;\n    auto word_length_minus_six\
    \ = word_length - 6;\n    auto word_length_minus_seven = word_length - 7;\n  \
    \  auto word_length_minus_eight = word_length - 8;\n    auto word_length_minus_nine\
    \ = word_length - 9;\n    auto word_length_minus_ten = word_length - 10;\n   \
    \ auto word_length_minus_eleven = word_length - 11;\n    auto word_length_minus_twelve\
    \ = word_length - 12;\n    auto word_length_minus_thirteen = word_length - 13;\n\
    \    auto word_length_minus_fourteen = word_length - 14;\n    auto word_length_minus_fifteen\
    \ = word_length - 15;\n    auto word_length_minus_sixteen = word_length - 16;\n\
    \    auto word_length_minus_seventeen = word_length - 17;\n    auto word_length_minus_eighteen\
    \ = word_length - 18;\n    auto word_length_minus_nineteen = word_length - 19;\n\
    \    auto word_length_minus_twenty = word_length - 20;\n    auto word_length_minus_twenty_one\
    \ = word_length - 21;\n    auto word_length_minus_twenty_two = word_length - 22;\n\
    \    auto word_length_minus_twenty_three = word_length - 23;\nunittest\n{\n  \
    \  alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") ==\
    \ \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfuzwjmgg.d(48): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuzwjmgg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    // your code here\n    string vowels = \"aeiou\";\n    int last_vowel\
    \ = -1;\n    int last_consonant = -1;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            last_vowel\
    \ = i;\n        }\n        else\n        {\n            last_consonant = i;\n\
    \        }\n        if (last_vowel != -1 && last_consonant != -1)\n        {\n\
    \            return word[last_vowel..$];\n        }\n    }\n    return \"\";\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpylzdu1ps.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = \"\";\n    auto last_consonant = \"\";\n    auto result\
    \ = \"\";\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n   \
    \     {\n            last_vowel = c;\n        }\n        else if(consonants.canFind(c))\n\
    \        {\n            last_consonant = c;\n        }\n        if(last_vowel\
    \ != \"\" && last_consonant != \"\")\n        {\n            result = last_vowel;\n\
    \            last_vowel = \"\";\n            last_consonant = \"\";\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ew470kw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    int distance\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int\
    \ m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n   \
    \ int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt\
    \ = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n \
    \   int yy = 0;\n    int zz = 0;\n    foreach(immutable char ch; word)\n    {\n\
    \        if(ch == 'b')\n        {\n            b = i;\n        }\n        if(ch\
    \ == 'c')\n        {\n            c = i;\n        }\n        if(ch == 'd')\n \
    \       {\n            d = i;\n        }\n        if(ch == 'f')\n        {\n \
    \           f = i;\n        }\n        if(ch == 'g')\n        {\n            g\
    \ = i;\n        }\n        if(ch == 'h')\n        {\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0he6tk31.d(90): Error: found \''unittest\'' instead of statement\n/tmp/tmp0he6tk31.d(108):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0he6tk31.d(108):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0he6tk31.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int last_vowel_index = -1;\n\
    \    int last_consonant_index = -1;\n    string result = \"\";\n    foreach(i,\
    \ char c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n        \
    \    last_vowel_index = i;\n        }\n        else\n        {\n            if(last_vowel_index\
    \ != -1 && last_consonant_index != -1)\n            {\n                if(i -\
    \ last_vowel_index < last_vowel_index - last_consonant_index)\n              \
    \  {\n                    result = word[last_vowel_index..last_vowel_index];\n\
    \                }\n            }\n            last_consonant_index = i;\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvhhxwv7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n\
    \    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii =\
    \ 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n   \
    \ int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr =\
    \ 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n   \
    \ int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa =\
    \ 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n   \
    \ int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj\
    \ = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n\
    \    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int\
    \ sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www\
    \ = 0;\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjyaem_4r.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyaem_4r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int min_distance = word.length;\n    foreach(i, c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = index - i;\n            if(distance < min_distance)\n            {\n     \
    \           min_distance = distance;\n                result = c;\n          \
    \  }\n        }\n        index--;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\")\
    \ == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsclxolwm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto result = \"\";\n    auto last_consonant = -1;\n    auto first_vowel\
    \ = -1;\n    auto i = 0;\n    foreach(c; word)\n    {\n        if(consonants.canFind(c))\n\
    \        {\n            last_consonant = i;\n        }\n        else if(vowels.canFind(c))\n\
    \        {\n            if(last_consonant != -1)\n            {\n            \
    \    if(first_vowel == -1)\n                {\n                    first_vowel\
    \ = i;\n                }\n                else\n                {\n         \
    \           if(abs(last_consonant - i) < abs(last_consonant - first_vowel))\n\
    \                    {\n                        first_vowel = i;\n           \
    \         }\n                }\n            }\n        }\n        i++;\n    }\n\
    \    if(first_vowel != -1)\n    {\n        result = word[first_vowel..first_vowel+1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo7kv25v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    bool is_vowel = false;\n    while (index >= 0)\n\
    \    {\n        if (vowels.canFind(word[index]))\n        {\n            is_vowel\
    \ = true;\n            break;\n        }\n        index--;\n    }\n    if (is_vowel)\n\
    \    {\n        int i = index;\n        while (i >= 0)\n        {\n          \
    \  if (!vowels.canFind(word[i]))\n            {\n                result = word[index];\n\
    \                break;\n            }\n            i--;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpckvqjv8z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    import std.algorithm : find, findAdjacent;\n    import std.array\
    \ : array;\n    import std.range : take, drop;\n    import std.conv : to;\n  \
    \  import std.string : toLower;\n    import std.typecons : tuple;\n    import\
    \ std.math : abs;\n    import std.algorithm : max, min;\n    import std.range\
    \ : iota;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n\
    \    import std.range : retro;\n    import std.algorithm : retroMap;\n    import\
    \ std.algorithm : retroFind;\n    import std.algorithm : retroFindAdjacent;\n\
    \    import std.algorithm : retroFindAdjacent!(a => a[0] == a[1]);\n    import\
    \ std.algorithm : retroFindAdjacent!(a => a[0] != a[1]);\n    import std.algorithm\
    \ : retroFindAdjacent!(a => a[0] == a[1]);\n    import std.algorithm : retroFindAdjacent!(a\
    \ => a[0] != a[1]);\n    import std.algorithm : retroFindAdjacent!(a => a[0] ==\
    \ a[1]);\n    import std.algorithm : retroFindAdjacent!(a => a[0] != a[1]);\n\
    \    import std.algorithm : retroFindAdjacent!(a => a[0] == a[1]);\n    import\
    \ std.algorithm : retroFindAdjacent!(a => a[0] != a[1]);\n    import std.algorithm\
    \ : retroFindAdjacent!(a => a[0] == a[1]);\n    import std.algorithm : retroFindAdjacent!(a\
    \ => a[0] != a[1]);\n    import std.algorithm : retroFindAdjacent!(a => a[0] ==\
    \ a[1]);\n    import std.algorithm : retroFindAdjacent!(a => a[0] != a[1]);\n\
    \    import std.algorithm : retroFindAdjacent!(a => a[0] == a[1]);\n    import\
    \ std.algorithm : retroFindAdj\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpikbsut07.d(32): Error: \'';\'' expected\n/tmp/tmpikbsut07.d(33):
    Error: \'';\'' expected\n/tmp/tmpikbsut07.d(34): Error: \'';\'' expected\n/tmp/tmpikbsut07.d(35):
    Error: \'';\'' expected\n/tmp/tmpikbsut07.d(36): Error: \'';\'' expected\n/tmp/tmpikbsut07.d(37):
    Error: \'';\'' expected\n/tmp/tmpikbsut07.d(38): Error: \'';\'' expected\n/tmp/tmpikbsut07.d(39):
    Error: \'';\'' expected\n/tmp/tmpikbsut07.d(40): Error: \'';\'' expected\n/tmp/tmpikbsut07.d(41):
    Error: \'';\'' expected\n/tmp/tmpikbsut07.d(42): Error: \'';\'' expected\n/tmp/tmpikbsut07.d(43):
    Error: \'';\'' expected\n/tmp/tmpikbsut07.d(44): Error: \'';\'' expected\n/tmp/tmpikbsut07.d(46):
    Error: \'';\'' expected\n/tmp/tmpikbsut07.d(64): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpikbsut07.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = -1;\n    auto last_consonant = -1;\n    foreach(i, c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            last_vowel\
    \ = i;\n        }\n        else if(consonants.canFind(c))\n        {\n       \
    \     last_consonant = i;\n        }\n        if(last_vowel > last_consonant)\n\
    \        {\n            return word[last_vowel..$];\n        }\n    }\n    return\
    \ \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_cx754wn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    int pos = 0;\n    int len = word.length;\n    string vowels =\
    \ \"aeiou\";\n    string result = \"\";\n    while (pos < len)\n    {\n      \
    \  if (vowels.find(word[pos]) != -1)\n        {\n            if (pos > 0 && pos\
    \ < len - 1)\n            {\n                if (vowels.find(word[pos - 1]) ==\
    \ -1 && vowels.find(word[pos + 1]) == -1)\n                {\n               \
    \     result = word[pos];\n                    break;\n                }\n   \
    \         }\n        }\n        pos++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnyiqag8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    int distance = 0;\n    int last_consonant_index\
    \ = -1;\n    int first_vowel_index = -1;\n    int i = 0;\n    foreach(c; word)\n\
    \    {\n        if(vowels.find(c) != -1)\n        {\n            if(last_consonant_index\
    \ != -1)\n            {\n                distance = i - last_consonant_index;\n\
    \                if(distance < min_distance)\n                {\n            \
    \        min_distance = distance;\n                    first_vowel_index = i;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      last_consonant_index = i;\n        }\n        i++;\n    }\n    if(first_vowel_index\
    \ != -1)\n    {\n        result = word[first_vowel_index..first_vowel_index];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw0mh7s58.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int len = word.length;\n    int\
    \ i = len - 1;\n    while (i > 0)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            if (vowels.find(word[i - 1]) == -1)\n          \
    \      return word[i];\n        }\n        i--;\n    }\n    return \"\";\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee9mvvjm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = \"\";\n    auto last_consonant = \"\";\n    auto result\
    \ = \"\";\n    foreach(c; word)\n    {\n        if(vowels.canFind(c))\n      \
    \  {\n            last_vowel = c;\n        }\n        else if(consonants.canFind(c))\n\
    \        {\n            last_consonant = c;\n        }\n        if(last_vowel\
    \ != \"\" && last_consonant != \"\")\n        {\n            result = last_vowel;\n\
    \            last_vowel = \"\";\n            last_consonant = \"\";\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy3hx1fm8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    // your code here\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    int index = 0;\n    int min = word.length;\n    for(int\
    \ i = word.length - 1; i >= 0; i--)\n    {\n        if(vowels.find(word[i]) !=\
    \ -1)\n        {\n            if(i < min)\n            {\n                min\
    \ = i;\n                index = i;\n            }\n        }\n    }\n    if(index\
    \ != 0)\n    {\n        result = word[index];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprws82yy2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    int distance;\n    foreach(i, c; word)\n  \
    \  {\n        if(vowels.find(c) != -1)\n        {\n            distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   result = c;\n                min_distance = distance;\n            }\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbv897pw0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_consonant = 0;\n    auto last_vowel = 0;\n    for (auto i = word.length\
    \ - 1; i >= 0; --i)\n    {\n        if (consonants.canFind(word[i]))\n       \
    \ {\n            last_consonant = i;\n            break;\n        }\n    }\n \
    \   for (auto i = last_consonant - 1; i >= 0; --i)\n    {\n        if (vowels.canFind(word[i]))\n\
    \        {\n            last_vowel = i;\n            break;\n        }\n    }\n\
    \    if (last_consonant == 0 || last_vowel == 0)\n        return \"\";\n    return\
    \ word[last_vowel..last_consonant];\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp65z5_fd0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ distance = 0;\n    int min_distance = word.length;\n    int last_consonant =\
    \ -1;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (last_consonant != -1)\n            {\n  \
    \              distance = i - last_consonant;\n                if (distance <\
    \ min_distance)\n                {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n        else\n        {\n            last_consonant = i;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2x90qm6l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                if (vowels.find(word[index - 1]) == -1)\n                {\n\
    \                    result = word[index];\n                    break;\n     \
    \           }\n            }\n            else if (index == 0)\n            {\n\
    \                if (vowels.find(word[index + 1]) == -1)\n                {\n\
    \                    result = word[index];\n                    break;\n     \
    \           }\n            }\n            else\n            {\n              \
    \  if (vowels.find(word[index - 1]) == -1 && vowels.find(word[index + 1]) == -1)\n\
    \                {\n                    result = word[index];\n              \
    \      break;\n                }\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeclzd0ba.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = 0;\n    int distance = 0;\n    int word_length\
    \ = word.length;\n    int vowel_length = vowels.length;\n    for (int i = 0; i\
    \ < word_length; i++)\n    {\n        for (int j = 0; j < vowel_length; j++)\n\
    \        {\n            if (word[i] == vowels[j])\n            {\n           \
    \     distance = word_length - i;\n                if (distance < min_distance\
    \ || min_distance == 0)\n                {\n                    min_distance =\
    \ distance;\n                    index = i;\n                }\n            }\n\
    \        }\n    }\n    if (min_distance != 0)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuczxautq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int last_vowel_index = -1;\n\
    \    int last_consonant_index = -1;\n    int word_length = word.length;\n    for\
    \ (int i = 0; i < word_length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            last_vowel_index = i;\n        }\n        else\n\
    \        {\n            last_consonant_index = i;\n        }\n        if (last_vowel_index\
    \ != -1 && last_consonant_index != -1)\n        {\n            break;\n      \
    \  }\n    }\n    if (last_vowel_index == -1 || last_consonant_index == -1)\n \
    \   {\n        return \"\";\n    }\n    return word[last_vowel_index];\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibd5lpvr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int i = 0;\n    while(i < word.length)\n    {\n  \
    \      if(vowels.find(word[i]) != -1)\n        {\n            if(i != 0 && i !=\
    \ word.length - 1)\n            {\n                if(vowels.find(word[i-1]) ==\
    \ -1 && vowels.find(word[i+1]) == -1)\n                {\n                   \
    \ if(abs(i - index) < abs(index - word.length))\n                    {\n     \
    \                   index = i;\n                    }\n                }\n   \
    \         }\n        }\n        i++;\n    }\n    if(index != word.length)\n  \
    \  {\n        result = word[index];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphw8xsw0s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = \"\";\n    auto last_consonant = \"\";\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            last_vowel\
    \ = c;\n        }\n        else if(consonants.canFind(c))\n        {\n       \
    \     last_consonant = c;\n        }\n    }\n    return last_vowel;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz29qo_4f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ last_vowel_index = -1;\n    int last_consonant_index = -1;\n    int i = 0;\n\
    \    foreach(c; word)\n    {\n        if(vowels.canFind(c))\n        {\n     \
    \       last_vowel_index = i;\n        }\n        else\n        {\n          \
    \  if(last_vowel_index != -1)\n            {\n                last_consonant_index\
    \ = i;\n                break;\n            }\n        }\n        i++;\n    }\n\
    \    if(last_vowel_index != -1 && last_consonant_index != -1)\n    {\n       \
    \ result = word[last_vowel_index..last_vowel_index];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb88sty_m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != 0)\n    {\n        result = word[index..$];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03ixvem9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index > 0 && index < word.length - 1)\n    {\n        result\
    \ = word[index];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_uuye6y0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                if (vowels.find(word[index - 1]) == -1)\n                {\n\
    \                    result = word[index];\n                    break;\n     \
    \           }\n            }\n            else if (index == 0)\n            {\n\
    \                if (vowels.find(word[index + 1]) == -1)\n                {\n\
    \                    result = word[index];\n                    break;\n     \
    \           }\n            }\n            else\n            {\n              \
    \  if (vowels.find(word[index - 1]) == -1 && vowels.find(word[index + 1]) == -1)\n\
    \                {\n                    result = word[index];\n              \
    \      break;\n                }\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeclzd0ba.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_consonant = word.length;\n    auto last_vowel = word.length;\n\
    \    for (size_t i = word.length; i > 0; --i)\n    {\n        if (consonants.canFind(word[i]))\n\
    \        {\n            last_consonant = i;\n            break;\n        }\n \
    \   }\n    for (size_t i = last_consonant; i > 0; --i)\n    {\n        if (vowels.canFind(word[i]))\n\
    \        {\n            last_vowel = i;\n            break;\n        }\n    }\n\
    \    if (last_vowel == word.length)\n        return \"\";\n    return word[last_vowel..$];\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmdwfyhog.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    import std.algorithm.comparison : equal;\n    import std.algorithm.searching\
    \ : find;\n    import std.algorithm.iteration : filter;\n    import std.range\
    \ : retro;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.string : toLower;\n    import std.ascii : isAlpha;\n    import std.math\
    \ : abs;\n    import std.typecons : tuple;\n    import std.range : retro;\n  \
    \  import std.algorithm.comparison : equal;\n    import std.algorithm.searching\
    \ : find;\n    import std.algorithm.iteration : filter;\n    import std.range\
    \ : retro;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.string : toLower;\n    import std.ascii : isAlpha;\n    import std.math\
    \ : abs;\n    import std.typecons : tuple;\n    import std.range : retro;\n  \
    \  import std.algorithm.comparison : equal;\n    import std.algorithm.searching\
    \ : find;\n    import std.algorithm.iteration : filter;\n    import std.range\
    \ : retro;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.string : toLower;\n    import std.ascii : isAlpha;\n    import std.math\
    \ : abs;\n    import std.typecons : tuple;\n    import std.range : retro;\n  \
    \  import std.algorithm.comparison : equal;\n    import std.algorithm.searching\
    \ : find;\n    import std.algorithm.iteration : filter;\n    import std.range\
    \ : retro;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.string : toLower;\n    import std.ascii : isAlpha;\n    import std.math\
    \ : abs;\n    import std.typecons : tuple;\n    import std.range : retro;\n  \
    \  import std.algorithm.comparison : equal;\n    import std.algorithm.searching\
    \ : find;\n    import std.algorithm.iteration : filter;\n   \nunittest\n{\n  \
    \  alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") ==\
    \ \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxg9l0l37.d(65): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxg9l0l37.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int pos = word.length;\n    int\
    \ vowel_pos = -1;\n    while (pos--)\n    {\n        if (vowels.find(word[pos])\
    \ != -1)\n        {\n            vowel_pos = pos;\n            break;\n      \
    \  }\n    }\n    if (vowel_pos == -1)\n        return \"\";\n    pos = vowel_pos;\n\
    \    while (pos--)\n    {\n        if (vowels.find(word[pos]) == -1)\n       \
    \ {\n            return word[vowel_pos..$];\n        }\n    }\n    return \"\"\
    ;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnw250abs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length - 1;\n    while (pos >= 0)\n    {\n        if (vowels.find(word[pos])\
    \ != -1)\n        {\n            if (pos > 0 && vowels.find(word[pos - 1]) ==\
    \ -1)\n            {\n                result = word[pos];\n                break;\n\
    \            }\n            else if (pos < word.length - 1 && vowels.find(word[pos\
    \ + 1]) == -1)\n            {\n                result = word[pos];\n         \
    \       break;\n            }\n        }\n        pos--;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ehlrnif.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = \"\";\n    auto last_consonant = \"\";\n    auto result\
    \ = \"\";\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n   \
    \     {\n            last_vowel = c;\n        }\n        else if(consonants.canFind(c))\n\
    \        {\n            last_consonant = c;\n        }\n        if(last_vowel\
    \ != \"\" && last_consonant != \"\")\n        {\n            result = last_vowel;\n\
    \            last_vowel = \"\";\n            last_consonant = \"\";\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ew470kw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min = int.max;\n    int index = 0;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.canFind(c))\n        {\n            if(i > 0 && i < word.length -\
    \ 1)\n            {\n                if(!vowels.canFind(word[i - 1]) && !vowels.canFind(word[i\
    \ + 1]))\n                {\n                    if(min > abs(word.length - i))\n\
    \                    {\n                        min = abs(word.length - i);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index > 0)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0xq7qnfe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length - 1;\n    while (pos >= 0)\n    {\n        if (vowels.find(word[pos])\
    \ != -1)\n        {\n            if (pos > 0 && vowels.find(word[pos - 1]) ==\
    \ -1)\n            {\n                result = word[pos];\n                break;\n\
    \            }\n            else if (pos < word.length - 1 && vowels.find(word[pos\
    \ + 1]) == -1)\n            {\n                result = word[pos];\n         \
    \       break;\n            }\n        }\n        pos--;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ehlrnif.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            if(i < index &&\
    \ i > 0)\n            {\n                if(!vowels.canFind(word[i-1]) && !vowels.canFind(word[i+1]))\n\
    \                {\n                    if(abs(word.length - i) < distance)\n\
    \                    {\n                        distance = abs(word.length - i);\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\"\
    );\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\")\
    \ == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpcnaeqx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    int len = word.length;\n    int i = len - 1;\n    int j = len\
    \ - 1;\n    int k = len - 1;\n    while(i >= 0)\n    {\n        if(word[i] ==\
    \ 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            j = i;\n            break;\n        }\n        i--;\n\
    \    }\n    while(k >= 0)\n    {\n        if(word[k] != 'a' && word[k] != 'e'\
    \ && word[k] != 'i' && word[k] != 'o' && word[k] != 'u')\n        {\n        \
    \    break;\n        }\n        k--;\n    }\n    if(j == len - 1)\n    {\n   \
    \     return \"\";\n    }\n    else if(j == k - 1)\n    {\n        return word[j..$];\n\
    \    }\n    else\n    {\n        return word[j..$];\n    }\n}\nunittest\n{\n \
    \   alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") ==\
    \ \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppzg6n9d2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int distance = word.length;\n    foreach(i, letter;\
    \ word)\n    {\n        if(vowels.canFind(letter))\n        {\n            int\
    \ new_distance = abs(index - i);\n            if(new_distance < distance)\n  \
    \          {\n                distance = new_distance;\n                result\
    \ = letter;\n            }\n        }\n        else\n        {\n            index\
    \ = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpml9p0uvf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int[]\
    \ pos = [0,0];\n    int[] dist = [0,0];\n    int min = 0;\n    for (int i = 0;\
    \ i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n    \
    \    {\n            if (i > 0 && i < word.length - 1)\n            {\n       \
    \         if (vowels.find(word[i-1]) == -1 && vowels.find(word[i+1]) == -1)\n\
    \                {\n                    if (i > min)\n                    {\n\
    \                        min = i;\n                        result = word[i];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabepgtyn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    int i = word.length;\n    while(i--)\n    {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            if(i == 0)\n                return \"\";\n           \
    \ if(word[i-1] != 'a' && word[i-1] != 'e' && word[i-1] != 'i' && word[i-1] !=\
    \ 'o' && word[i-1] != 'u')\n                return word[i..$];\n        }\n  \
    \  }\n    return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl6lye_l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != 0)\n    {\n        result = word[index..$];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03ixvem9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_consonant = -1;\n    auto first_vowel = -1;\n    auto result\
    \ = \"\";\n    foreach(i, c; word)\n    {\n        if(consonants.canFind(c))\n\
    \        {\n            last_consonant = i;\n        }\n        else if(vowels.canFind(c))\n\
    \        {\n            if(last_consonant != -1)\n            {\n            \
    \    if(first_vowel == -1)\n                {\n                    first_vowel\
    \ = i;\n                }\n                else if(i - last_consonant < first_vowel\
    \ - last_consonant)\n                {\n                    first_vowel = i;\n\
    \                }\n            }\n        }\n    }\n    if(first_vowel != -1)\n\
    \    {\n        result = word[first_vowel..first_vowel+1];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8nitkxmt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length;\n    while(pos--)\n    {\n        if(vowels.find(word[pos])\
    \ != -1)\n        {\n            if(pos == 0)\n                return result;\n\
    \            if(vowels.find(word[pos-1]) == -1)\n                return word[pos..$];\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuatozaq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    int distance = 0;\n    int vowel_index = 0;\n\
    \    int word_index = 0;\n    for (int i = 0; i < word.length; i++)\n    {\n \
    \       if (vowels.find(word[i]) != -1)\n        {\n            vowel_index =\
    \ i;\n            for (int j = i + 1; j < word.length; j++)\n            {\n \
    \               if (vowels.find(word[j]) == -1)\n                {\n         \
    \           distance = j - vowel_index;\n                    if (distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     word_index = vowel_index;\n                    }\n     \
    \               break;\n                }\n            }\n        }\n    }\n \
    \   if (min_distance != word.length)\n    {\n        result = word[word_index];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ltnmjdy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = ' ';\n    auto last_consonant = ' ';\n    foreach(i,\
    \ c; word.retro)\n    {\n        if(vowels.canFind(c))\n        {\n          \
    \  last_vowel = c;\n            if(last_consonant != ' ')\n                return\
    \ last_vowel.idup;\n        }\n        else if(consonants.canFind(c))\n      \
    \  {\n            last_consonant = c;\n            if(last_vowel != ' ')\n   \
    \             return last_vowel.idup;\n        }\n    }\n    return \"\";\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7euerwg2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int min_distance = word.length;\n    for (int i =\
    \ word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (i < index)\n            {\n                index =\
    \ i;\n                result = word[i];\n            }\n        }\n        else\n\
    \        {\n            if (i < index)\n            {\n                int distance\
    \ = index - i;\n                if (distance < min_distance)\n               \
    \ {\n                    min_distance = distance;\n                }\n       \
    \     }\n        }\n    }\n    if (min_distance == word.length)\n    {\n     \
    \   return \"\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1xg7h1p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int last_vowel_index = -1;\n\
    \    int last_consonant_index = -1;\n    for (int i = 0; i < word.length; i++)\
    \ \n    {\n        if (vowels.find(word[i]) != -1) \n        {\n            last_vowel_index\
    \ = i;\n        } \n        else \n        {\n            last_consonant_index\
    \ = i;\n        }\n        if (last_vowel_index != -1 && last_consonant_index\
    \ != -1) \n        {\n            break;\n        }\n    }\n    if (last_vowel_index\
    \ == -1 || last_consonant_index == -1) \n    {\n        return \"\";\n    }\n\
    \    return word[last_vowel_index];\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ygwvedv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int closest = -1;\n    int distance\
    \ = 0;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (closest == -1)\n            {\n         \
    \       closest = i;\n                distance = word.length - i;\n          \
    \  }\n            else\n            {\n                int d = word.length - i;\n\
    \                if (d < distance)\n                {\n                    closest\
    \ = i;\n                    distance = d;\n                }\n            }\n\
    \        }\n    }\n    if (closest == -1)\n        return \"\";\n    return word[closest..$];\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6id6qx0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ distance = word.length;\n    int index = 0;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.find(c) != -1)\n        {\n            if(i > 0 && vowels.find(word[i-1])\
    \ == -1 && i < word.length-1 && vowels.find(word[i+1]) == -1)\n            {\n\
    \                if(abs(i - word.length) < distance)\n                {\n    \
    \                distance = abs(i - word.length);\n                    index =\
    \ i;\n                }\n            }\n        }\n    }\n    if(index != 0)\n\
    \    {\n        result = word[index];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxutgm86f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int n = word.length;\n    string\
    \ result = \"\";\n    int min_distance = n;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            int distance\
    \ = n - i;\n            if (distance < min_distance)\n            {\n        \
    \        min_distance = distance;\n                result = word[i..$];\n    \
    \        }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugiz5h83.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    int[] vowels = [ 'a', 'e', 'i', 'o', 'u' ];\n    int[] consonants\
    \ = [ 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' ];\n    int[] word_chars = word.dup.map!(a => a.toString().toLowerCase().front).array;\n\
    \    int[] word_vowels = word_chars.filter!(a => a in vowels).array;\n    int[]\
    \ word_consonants = word_chars.filter!(a => a in consonants).array;\n    int[]\
    \ word_vowels_consonants = word_vowels.filter!(a => a in word_consonants).array;\n\
    \    if (word_vowels_consonants.length == 0)\n        return \"\";\n    int[]\
    \ word_vowels_consonants_indexes = word_chars.map!(a => a in word_vowels_consonants).array.enumerate.filter!(a\
    \ => a[1]).map!(a => a[0]).array;\n    int[] word_vowels_consonants_indexes_pairs\
    \ = word_vowels_consonants_indexes.chunks(2).map!(a => a.array).array;\n    int[]\
    \ word_vowels_consonants_indexes_pairs_distances = word_vowels_consonants_indexes_pairs.map!(a\
    \ => a[1] - a[0]).array;\n    int[] word_vowels_consonants_indexes_pairs_distances_min\
    \ = word_vowels_consonants_indexes_pairs_distances.min;\n    int[] word_vowels_consonants_indexes_pairs_distances_min_index\
    \ = word_vowels_consonants_indexes_pairs_distances.enumerate.filter!(a =>\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj20d_yug.d(30): Error: expression expected, not \''unittest\''\n/tmp/tmpj20d_yug.d(31):
    Error: found \''{\'' when expecting \'')\'' following template argument list\n/tmp/tmpj20d_yug.d(32):
    Error: semicolon expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpj20d_yug.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_index = -1;\n    int min_distance = int.max;\n    int word_length = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = 0;\n            int j = i;\n            while(j < word_length)\n\
    \            {\n                if(vowels.canFind(word[j]))\n                {\n\
    \                    break;\n                }\n                distance++;\n\
    \                j++;\n            }\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                min_index\
    \ = i;\n            }\n        }\n    }\n    if(min_index != -1)\n    {\n    \
    \    result = word[min_index..min_index];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprp03vfz9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int word_len = word.length;\n\
    \    int vowel_len = vowels.length;\n    int i = 0;\n    int j = 0;\n    int k\
    \ = 0;\n    int min_dist = word_len;\n    int dist = 0;\n    int vowel_idx = 0;\n\
    \    string closest_vowel = \"\";\n    for (i = 0; i < word_len; i++)\n    {\n\
    \        for (j = 0; j < vowel_len; j++)\n        {\n            if (word[i] ==\
    \ vowels[j])\n            {\n                for (k = i + 1; k < word_len; k++)\n\
    \                {\n                    if (vowels.find(word[k]) == -1)\n    \
    \                {\n                        dist = k - i;\n                  \
    \      if (dist < min_dist)\n                        {\n                     \
    \       min_dist = dist;\n                            vowel_idx = i;\n       \
    \                 }\n                        break;\n                    }\n \
    \               }\n            }\n        }\n    }\n    if (min_dist < word_len)\n\
    \    {\n        closest_vowel = word[vowel_idx..vowel_idx];\n    }\n    return\
    \ closest_vowel;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n\
    \    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") ==\
    \ \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\"\
    ) == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjjsboap8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto len = word.length;\n    auto found = false;\n    auto last_consonant\
    \ = 0;\n    auto last_vowel = 0;\n    for (auto i = len - 1; i >= 0; i--)\n  \
    \  {\n        if (consonants.canFind(word[i]))\n        {\n            last_consonant\
    \ = i;\n            if (found)\n                break;\n        }\n        else\
    \ if (vowels.canFind(word[i]))\n        {\n            last_vowel = i;\n     \
    \       found = true;\n        }\n    }\n    if (found)\n        return word[last_vowel..last_consonant];\n\
    \    else\n        return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ol0bwp2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.find(c) != -1)\n        {\n            if(distance >\
    \ abs(i - index))\n            {\n                distance = abs(i - index);\n\
    \                result = c;\n            }\n        }\n        else\n       \
    \ {\n            index = i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbgu03xm4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int closest = -1;\n    int closest_dist\
    \ = int.max;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int dist = word.length - i;\n            if(dist < closest_dist)\n\
    \            {\n                closest = i;\n                closest_dist = dist;\n\
    \            }\n        }\n    }\n    if(closest == -1)\n        return \"\";\n\
    \    else\n        return word[closest..$];\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy98vzsw5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    // your code here\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    int index = word.length - 1;\n    while(index >= 0)\n  \
    \  {\n        if(vowels.find(word[index]) != -1)\n        {\n            if(index\
    \ == word.length - 1)\n            {\n                result = \"\";\n       \
    \         break;\n            }\n            else if(vowels.find(word[index +\
    \ 1]) == -1)\n            {\n                result = word[index];\n         \
    \       break;\n            }\n        }\n        index--;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprh5ockwk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length;\n    while(pos--)\n    {\n        if(vowels.find(word[pos])\
    \ != -1)\n        {\n            if(pos == 0)\n                return result;\n\
    \            else if(vowels.find(word[pos-1]) != -1)\n                continue;\n\
    \            else\n                return word[pos..$];\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n\
    \    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") ==\
    \ \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\"\
    ) == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9spzu260.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.find(c) != -1)\n        {\n            if(i > 0 && i\
    \ < word.length - 1)\n            {\n                if(vowels.find(word[i-1])\
    \ == -1 && vowels.find(word[i+1]) == -1)\n                {\n                \
    \    if(abs(word.length - i) < min_distance)\n                    {\n        \
    \                min_distance = abs(word.length - i);\n                      \
    \  index = i;\n                    }\n                }\n            }\n     \
    \   }\n    }\n    if(index != 0)\n    {\n        result = word[index];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftfhcmgg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg16npiz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length - 1;\n    while (pos >= 0)\n    {\n        if (vowels.find(word[pos])\
    \ != -1)\n        {\n            if (pos > 0 && vowels.find(word[pos - 1]) ==\
    \ -1)\n            {\n                result = word[pos];\n                break;\n\
    \            }\n            else if (pos < word.length - 1 && vowels.find(word[pos\
    \ + 1]) == -1)\n            {\n                result = word[pos];\n         \
    \       break;\n            }\n        }\n        pos--;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ehlrnif.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string closest_vowel = \"\";\n\
    \    int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n   \
    \ int word_length = word.length;\n    int vowel_length = vowels.length;\n    int\
    \ word_index = word_length - 1;\n    int vowel_index = vowel_length - 1;\n   \
    \ while (word_index >= 0)\n    {\n        if (vowels.find(word[word_index]) !=\
    \ -1)\n        {\n            int distance = word_length - word_index;\n     \
    \       if (closest_vowel_distance == -1 || distance < closest_vowel_distance)\n\
    \            {\n                closest_vowel_distance = distance;\n         \
    \       closest_vowel_index = vowel_index;\n            }\n        }\n       \
    \ word_index--;\n    }\n    if (closest_vowel_index != -1)\n    {\n        closest_vowel\
    \ = vowels[closest_vowel_index];\n    }\n    return closest_vowel;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprr2tl227.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int len = word.length;\n    int\
    \ i = len - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != -1)\
    \ {\n            if (i == len - 1) {\n                return \"\";\n         \
    \   }\n            if (vowels.find(word[i + 1]) == -1) {\n                return\
    \ word[i..$];\n            }\n        }\n        i--;\n    }\n    return \"\"\
    ;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwcum1kj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int j = i;\n            while(j > 0 && vowels.canFind(word[j-1]))\n\
    \                j--;\n            if(j > 0 && !vowels.canFind(word[j-1]))\n \
    \           {\n                int k = i;\n                while(k < word.length\
    \ && vowels.canFind(word[k+1]))\n                    k++;\n                if(k\
    \ < word.length && !vowels.canFind(word[k+1]))\n                {\n          \
    \          if(abs(i - j) < distance)\n                    {\n                \
    \        distance = abs(i - j);\n                        result = word[i..i];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyqem_j17.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length;\n    int min_pos = word.length;\n    foreach(i; 0 .. word.length)\n\
    \    {\n        if(vowels.canFind(word[i]))\n        {\n            pos = i;\n\
    \            if(pos - min_pos > 1)\n            {\n                result = word[min_pos];\n\
    \                break;\n            }\n            else\n            {\n    \
    \            min_pos = pos;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vtups25.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    int closest = -1;\n    int closest_index = 0;\n    for (int i = 0; i <\
    \ word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i > 0 && consonants.find(word[i-1]) != -1)\n            {\n \
    \               if (i < word.length - 1 && consonants.find(word[i+1]) != -1)\n\
    \                {\n                    if (closest == -1 || abs(i - closest)\
    \ < closest_index)\n                    {\n                        closest = i;\n\
    \                        closest_index = abs(i - closest);\n                 \
    \   }\n                }\n            }\n        }\n    }\n    if (closest ==\
    \ -1)\n        return \"\";\n    return word[closest..$];\n}\nunittest\n{\n  \
    \  alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") ==\
    \ \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0j4p64u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg16npiz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                index--;\n                continue;\n            }\n        \
    \    if (vowels.find(word[index + 1]) == -1)\n            {\n                result\
    \ = word[index];\n                break;\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpam1hchbg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto result = \"\";\n    auto temp = \"\";\n    auto distance = 0;\n  \
    \  auto temp_distance = 0;\n    auto last_vowel = 0;\n    auto first_consonant\
    \ = 0;\n    auto last_consonant = 0;\n    auto first_vowel = 0;\n    auto i =\
    \ 0;\n    auto j = 0;\n    auto k = 0;\n    auto l = 0;\n    auto m = 0;\n   \
    \ auto n = 0;\n    auto o = 0;\n    auto p = 0;\n    auto q = 0;\n    auto r =\
    \ 0;\n    auto s = 0;\n    auto t = 0;\n    auto u = 0;\n    auto v = 0;\n   \
    \ auto w = 0;\n    auto x = 0;\n    auto y = 0;\n    auto z = 0;\n    auto a =\
    \ 0;\n    auto b = 0;\n    auto c = 0;\n    auto d = 0;\n    auto e = 0;\n   \
    \ auto f = 0;\n    auto g = 0;\n    auto h = 0;\n    auto ii = 0;\n    auto jj\
    \ = 0;\n    auto kk = 0;\n    auto ll = 0;\n    auto mm = 0;\n    auto nn = 0;\n\
    \    auto oo = 0;\n    auto pp = 0;\n    auto qq = 0;\n    auto rr = 0;\n    auto\
    \ ss = 0;\n    auto tt = 0;\n    auto uu = 0;\n    auto vv = 0;\n    auto ww =\
    \ 0;\n    auto xx = 0;\n    auto yy = 0;\n    auto zz = 0;\n    auto aa = 0;\n\
    \    auto bb = 0;\n    auto cc = 0;\n    auto dd = 0;\n    auto ee = 0;\n    auto\
    \ ff = 0;\n    auto gg = 0;\n    auto hh = 0;\n    auto iii = 0;\n    auto jjj\
    \ = 0;\n    auto kkk = 0\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1s59hws4.d(82): Error: semicolon expected following auto declaration,
    not \''unittest\''\n/tmp/tmp1s59hws4.d(82): Error: found \''unittest\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s59hws4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int closest = -1;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            if(closest\
    \ == -1)\n                closest = i;\n            else\n            {\n    \
    \            if(abs(i - closest) < abs(i - word.length))\n                   \
    \ closest = i;\n            }\n        }\n    }\n    return closest == -1 ? \"\
    \" : word[closest..$];\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtn5xyb7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) == -1)\n   \
    \         {\n                result = word[index];\n                break;\n \
    \           }\n        }\n        index--;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsxddy52.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int i = index - 1;\n    while (i >= 0)\n    {\n  \
    \      if (vowels.find(word[i]) != -1)\n        {\n            if (i == 0)\n \
    \           {\n                if (vowels.find(word[i + 1]) == -1)\n         \
    \       {\n                    index = i;\n                    break;\n      \
    \          }\n            }\n            else if (i == index - 1)\n          \
    \  {\n                if (vowels.find(word[i - 1]) == -1)\n                {\n\
    \                    index = i;\n                    break;\n                }\n\
    \            }\n            else\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            index = i;\n                    break;\n                }\n     \
    \       }\n        }\n        i--;\n    }\n    if (index != word.length)\n   \
    \ {\n        result = word[index..$];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwwnn3wr7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min = word.length;\n    foreach(c; word)\n    {\n      \
    \  if(vowels.find(c) != -1)\n        {\n            if(index > 0 && index < word.length\
    \ - 1)\n            {\n                if(vowels.find(word[index - 1]) == -1 &&\
    \ vowels.find(word[index + 1]) == -1)\n                {\n                   \
    \ if(abs(word.length - index) < min)\n                    {\n                \
    \        min = abs(word.length - index);\n                        result = c;\n\
    \                    }\n                }\n            }\n        }\n        index++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp90aey2t4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ last_vowel_index = -1;\n    int last_consonant_index = -1;\n    int i = 0;\n\
    \    foreach(c; word)\n    {\n        if(vowels.canFind(c))\n        {\n     \
    \       last_vowel_index = i;\n        }\n        else\n        {\n          \
    \  if(last_vowel_index != -1)\n            {\n                last_consonant_index\
    \ = i;\n                break;\n            }\n        }\n        i++;\n    }\n\
    \    if(last_vowel_index != -1 && last_consonant_index != -1)\n    {\n       \
    \ result = word[last_vowel_index..last_vowel_index];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb88sty_m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, v; word)\n \
    \   {\n        if(vowels.canFind(v))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index > 0 && index < word.length - 1)\n    {\n        result\
    \ = word[index];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1frutxd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int last_vowel_index = -1;\n\
    \    int last_consonant_index = -1;\n    int closest_vowel_index = -1;\n    int\
    \ closest_consonant_index = -1;\n    int closest_distance = -1;\n    foreach(i,\
    \ char c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n        \
    \    last_vowel_index = i;\n            if(last_consonant_index != -1)\n     \
    \       {\n                int distance = i - last_consonant_index;\n        \
    \        if(closest_distance == -1 || distance < closest_distance)\n         \
    \       {\n                    closest_distance = distance;\n                \
    \    closest_vowel_index = i;\n                    closest_consonant_index = last_consonant_index;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      last_consonant_index = i;\n        }\n    }\n    if(closest_vowel_index\
    \ == -1)\n    {\n        return \"\";\n    }\n    return word[closest_vowel_index..$];\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzo_7yhpo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int min_distance = word.length;\n    foreach(i, c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = index - i;\n            if(distance < min_distance)\n            {\n     \
    \           min_distance = distance;\n                result = c;\n          \
    \  }\n        }\n        index--;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\")\
    \ == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsclxolwm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto result = \"\";\n    auto last_vowel = \"\";\n    auto last_consonant\
    \ = \"\";\n    auto last_vowel_index = 0;\n    auto last_consonant_index = 0;\n\
    \    auto i = 0;\n    foreach(c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            last_vowel = c;\n            last_vowel_index = i;\n \
    \       }\n        else if(consonants.canFind(c))\n        {\n            last_consonant\
    \ = c;\n            last_consonant_index = i;\n        }\n        i++;\n    }\n\
    \    if(last_vowel_index > last_consonant_index)\n    {\n        result = last_vowel;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwvkhhxz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int n = word.length;\n    int\
    \ i = n - 1;\n    while (i >= 0)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            if (i == n - 1)\n                return \"\";\n      \
    \      else if (vowels.find(word[i + 1]) == -1)\n                return word[i\
    \ .. i];\n        }\n        i--;\n    }\n    return \"\";\n}\nunittest\n{\n \
    \   alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") ==\
    \ \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbm6dywm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = 0;\n    int min_dist = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int dist = word.length\
    \ - i;\n            if(dist < min_dist)\n            {\n                min_dist\
    \ = dist;\n                pos = i;\n            }\n        }\n    }\n    if(pos\
    \ != 0)\n    {\n        result = word[pos..$];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j1ki5f7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int last_vowel_index = -1;\n\
    \    int closest_vowel_index = -1;\n    int closest_vowel_distance = int.max;\n\
    \    foreach(i, ch; word)\n    {\n        if(vowels.canFind(ch))\n        {\n\
    \            if(last_vowel_index != -1)\n            {\n                int distance\
    \ = i - last_vowel_index;\n                if(distance < closest_vowel_distance)\n\
    \                {\n                    closest_vowel_distance = distance;\n \
    \                   closest_vowel_index = i;\n                }\n            }\n\
    \            last_vowel_index = i;\n        }\n    }\n    if(closest_vowel_index\
    \ == -1)\n        return \"\";\n    return word[closest_vowel_index..$];\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptu5ds4g7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = word.length;\n  \
    \  while(index--)\n    {\n        if(vowels.find(word[index]) != -1)\n       \
    \ {\n            if(index == 0)\n                return \"\";\n            if(vowels.find(word[index\
    \ - 1]) == -1)\n                return word[index..$];\n        }\n    }\n   \
    \ return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n \
    \   assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") ==\
    \ \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\"\
    ) == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeuww750g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = int.max;\n    int distance = 0;\n    int index = 0;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                index = i;\n      \
    \      }\n        }\n    }\n    if(min_distance != int.max)\n    {\n        result\
    \ = word[index..$];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4x5s5xv_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    // your code here\n    string vowels = \"aeiou\";\n    int last_vowel\
    \ = -1;\n    int last_consonant = -1;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            last_vowel\
    \ = i;\n        }\n        else\n        {\n            last_consonant = i;\n\
    \        }\n        if (last_vowel != -1 && last_consonant != -1)\n        {\n\
    \            if (last_vowel < last_consonant)\n            {\n               \
    \ return word[last_vowel..last_vowel];\n            }\n        }\n    }\n    return\
    \ \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6_drwry.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg16npiz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                index--;\n                continue;\n            }\n        \
    \    else if (vowels.find(word[index + 1]) != -1)\n            {\n           \
    \     index--;\n                continue;\n            }\n            else\n \
    \           {\n                result = word[index];\n                break;\n\
    \            }\n        }\n        index--;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1nri9jnq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, v; word)\n    {\n        if(vowels.canFind(v))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = v;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_yrfdd12.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                index--;\n                continue;\n            }\n        \
    \    if (vowels.find(word[index + 1]) == -1)\n            {\n                result\
    \ = word[index..$];\n                break;\n            }\n        }\n      \
    \  index--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_h1yswdg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    static string vowels = \"aeiou\";\n    static string consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    static string vowels_and_consonants = vowels\
    \ ~ consonants;\n    static string consonants_and_vowels = consonants ~ vowels;\n\
    \    static string consonants_and_consonants = consonants ~ consonants;\n    static\
    \ string vowels_and_vowels = vowels ~ vowels;\n    static string vowels_consonants_vowels\
    \ = vowels_and_consonants ~ vowels;\n    static string consonants_vowels_consonants\
    \ = consonants_and_vowels ~ consonants;\n    static string consonants_consonants_vowels\
    \ = consonants_and_consonants ~ vowels;\n    static string vowels_consonants_consonants\
    \ = vowels_and_consonants ~ consonants;\n    static string consonants_vowels_vowels\
    \ = consonants_and_vowels ~ vowels;\n    static string vowels_vowels_consonants\
    \ = vowels_and_vowels ~ consonants;\n    static string vowels_consonants_vowels_consonants\
    \ = vowels_consonants_vowels ~ consonants;\n    static string consonants_vowels_consonants_vowels\
    \ = consonants_vowels_consonants ~ vowels;\n    static string consonants_consonants_vowels_consonants\
    \ = consonants_consonants_vowels ~ consonants;\n    static string vowels_consonants_consonants_vowels\
    \ = vowels_consonants_consonants ~ vowels;\n    static string consonants_vowels_vowels_consonants\
    \ = consonants_vowels_vowels ~ consonants;\n    static string vowels_vowels_consonants_vowels\
    \ = vowels_vowels_consonants ~ vowels;\n    static string vowels_consonants_vowels_consonants_vowels\
    \ = vowels_consonants_vowels_consonants ~ vow\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy0_dobf1.d(36): Error: semicolon expected, not \''unittest\''\n/tmp/tmpy0_dobf1.d(36):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpy0_dobf1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int distance = 0;\n    int min_distance = word.length;\n   \
    \ foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n  \
    \          int left_distance = 0;\n            int right_distance = 0;\n     \
    \       for(int j = i - 1; j >= 0; j--)\n            {\n                if(vowels.find(word[j])\
    \ != -1)\n                    break;\n                left_distance++;\n     \
    \       }\n            for(int j = i + 1; j < word.length; j++)\n            {\n\
    \                if(vowels.find(word[j]) != -1)\n                    break;\n\
    \                right_distance++;\n            }\n            distance = left_distance\
    \ + right_distance;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                index = i;\n      \
    \      }\n        }\n    }\n    if(index != 0)\n        result = word[index];\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86l6akcu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto result = \"\";\n    auto last_consonant = \"\";\n    auto last_vowel\
    \ = \"\";\n    auto last_vowel_index = 0;\n    auto last_consonant_index = 0;\n\
    \    auto word_length = word.length;\n    for (int i = 0; i < word_length; i++)\n\
    \    {\n        auto current_char = word[i];\n        if (vowels.find(current_char)\
    \ != -1)\n        {\n            last_vowel = current_char;\n            last_vowel_index\
    \ = i;\n        }\n        else if (consonants.find(current_char) != -1)\n   \
    \     {\n            last_consonant = current_char;\n            last_consonant_index\
    \ = i;\n        }\n    }\n    if (last_vowel_index > last_consonant_index)\n \
    \   {\n        result = last_vowel;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_53l3xrx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    int i = word.length - 1;\n    while (i >= 0)\n    {\n       \
    \ if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' ||\
    \ word[i] == 'u')\n        {\n            if (i == word.length - 1)\n        \
    \        return \"\";\n            else if (word[i + 1] == 'a' || word[i + 1]\
    \ == 'e' || word[i + 1] == 'i' || word[i + 1] == 'o' || word[i + 1] == 'u')\n\
    \                return \"\";\n            else\n                return word[i\
    \ .. i];\n        }\n        i--;\n    }\n    return \"\";\n}\nunittest\n{\n \
    \   alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") ==\
    \ \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbsm8rarn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = word.length - 1;\n\
    \    while (index >= 0)\n    {\n        if (vowels.canFind(word[index]))\n   \
    \     {\n            if (index == word.length - 1)\n                return \"\"\
    ;\n            else if (vowels.canFind(word[index + 1]))\n                return\
    \ \"\";\n            else\n                return word[index .. index];\n    \
    \    }\n        index--;\n    }\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmple8mllx1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = -1;\n    int min_distance\
    \ = int.max;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.indexOf(word[i])\
    \ != -1)\n        {\n            int distance = word.length - i;\n           \
    \ if (distance < min_distance)\n            {\n                min_distance =\
    \ distance;\n                index = i;\n            }\n        }\n    }\n   \
    \ if (index == -1)\n        return \"\";\n    return word[index..$];\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmx5s579x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ distance = word.length;\n    foreach(immutable char c; word)\n    {\n      \
    \  if(vowels.indexOf(c) != -1)\n        {\n            int index = word.indexOf(c);\n\
    \            if(index > 0 && index < word.length - 1)\n            {\n       \
    \         if(vowels.indexOf(word[index - 1]) == -1 && vowels.indexOf(word[index\
    \ + 1]) == -1)\n                {\n                    if(distance > abs(word.length\
    \ - index))\n                    {\n                        distance = abs(word.length\
    \ - index);\n                        result = c;\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwmbrzqw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int min = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            if(i > 0 && i <\
    \ word.length - 1)\n            {\n                if(!vowels.canFind(word[i -\
    \ 1]) && !vowels.canFind(word[i + 1]))\n                {\n                  \
    \  if(abs(i - word.length) < min)\n                    {\n                   \
    \     min = abs(i - word.length);\n                        result = c;\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdoedy_9j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                index--;\n                continue;\n            }\n        \
    \    if (vowels.find(word[index + 1]) == -1)\n            {\n                result\
    \ = word[index];\n                break;\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpam1hchbg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ last_consonant = -1;\n    int last_vowel = -1;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  last_vowel = i;\n        }\n        else\n        {\n            last_consonant\
    \ = i;\n        }\n        if (last_consonant != -1 && last_vowel != -1)\n   \
    \     {\n            if (abs(last_consonant - last_vowel) < abs(result.length))\n\
    \            {\n                result = word[last_vowel..$];\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3yyvc4q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    import std.algorithm;\n    import std.range;\n    import std.array;\n\
    \    import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.array;\n   \
    \ import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n\
    \    import std.range;\n    import std.algorithm;\n    import std.array;\n   \
    \ import std.conv;\n    import std.string;\n    import std.typecons;\n    import\
    \ std.math;\n    import std.stdio;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.conv;\n    import std.string;\n    import\
    \ std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import\
    \ std.string;\n   \nunittest\n{\n    alias candidate = get_closest_vowel;\n\n\
    \    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") ==\
    \ \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\"\
    ) == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpif8ixi6y.d(87): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpif8ixi6y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index > 0 && index < word.length - 1)\n    {\n        result\
    \ = word[index];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_uuye6y0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto is_vowel = [](char c) {\n        return c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u';\n    };\n    auto is_consonant = [](char\
    \ c) {\n        return !is_vowel(c);\n    };\n    auto is_consonant_pair = [=](char\
    \ c1, char c2) {\n        return is_consonant(c1) && is_consonant(c2);\n    };\n\
    \    auto is_vowel_between_consonants = [=](char c) {\n        return is_vowel(c)\
    \ && is_consonant_pair(word[$-2], word[$-1]);\n    };\n    auto closest_vowel\
    \ = find(word, is_vowel_between_consonants);\n    return closest_vowel.empty ?\
    \ \"\" : closest_vowel[0..1];\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpid472v7q.d(17): Error: found \''c\'' when expecting \''.\''
    following char\n/tmp/tmpid472v7q.d(17): Error: found \'')\'' when expecting identifier
    following \''char.\''\n/tmp/tmpid472v7q.d(17): Error: found \''{\'' when expecting
    \'',\''\n/tmp/tmpid472v7q.d(18): Error: expression expected, not \''return\''\n/tmp/tmpid472v7q.d(18):
    Error: found \''c\'' when expecting \'',\''\n/tmp/tmpid472v7q.d(18): Error: expression
    expected, not \''==\''\n/tmp/tmpid472v7q.d(18): Error: found \''97U\'' when expecting
    \'',\''\n/tmp/tmpid472v7q.d(18): Error: expression expected, not \''||\''\n/tmp/tmpid472v7q.d(18):
    Error: found \''c\'' when expecting \'',\''\n/tmp/tmpid472v7q.d(18): Error: expression
    expected, not \''==\''\n/tmp/tmpid472v7q.d(18): Error: found \''101U\'' when expecting
    \'',\''\n/tmp/tmpid472v7q.d(18): Error: expression expected, not \''||\''\n/tmp/tmpid472v7q.d(18):
    Error: found \''c\'' when expecting \'',\''\n/tmp/tmpid472v7q.d(18): Error: expression
    expected, not \''==\''\n/tmp/tmpid472v7q.d(18): Error: found \''105U\'' when expecting
    \'',\''\n/tmp/tmpid472v7q.d(18): Error: expression expected, not \''||\''\n/tmp/tmpid472v7q.d(18):
    Error: found \''c\'' when expecting \'',\''\n/tmp/tmpid472v7q.d(18): Error: expression
    expected, not \''==\''\n/tmp/tmpid472v7q.d(18): Error: found \''111U\'' when expecting
    \'',\''\n/tmp/tmpid472v7q.d(18): Error: expression expected, not \''||\''\n/tmp/tmpid472v7q.d(18):
    Error: found \''c\'' when expecting \'',\''\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpid472v7q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    while(index > 0)\n    {\n        if(vowels.find(word[index])\
    \ != -1)\n        {\n            if(vowels.find(word[index-1]) == -1)\n      \
    \      {\n                result = word[index];\n                break;\n    \
    \        }\n        }\n        index--;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7f3y_x_a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != 0)\n    {\n        result = word[index..$];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03ixvem9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    int i = word.length;\n    while(i--)\n    {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            if(i == 0)\n                return \"\";\n           \
    \ else if(word[i-1] == 'a' || word[i-1] == 'e' || word[i-1] == 'i' || word[i-1]\
    \ == 'o' || word[i-1] == 'u')\n                continue;\n            else\n \
    \               return word[i..$];\n        }\n    }\n    return \"\";\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfw8ewgl7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = -1;\n    auto last_consonant = -1;\n    auto result =\
    \ \"\";\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n     \
    \   {\n            last_vowel = i;\n        }\n        else if(consonants.canFind(c))\n\
    \        {\n            last_consonant = i;\n        }\n        if(last_vowel\
    \ != -1 && last_consonant != -1 && last_vowel > last_consonant)\n        {\n \
    \           result = word[last_vowel..$];\n            break;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphgd_a4s0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = word.length;\n  \
    \  int closest = index;\n    int closest_index = index;\n    int closest_vowel\
    \ = index;\n    int closest_vowel_index = index;\n    foreach(i, c; word)\n  \
    \  {\n        if(vowels.find(c) != -1)\n        {\n            if(i < closest_vowel)\n\
    \            {\n                closest_vowel = i;\n                closest_vowel_index\
    \ = index;\n            }\n        }\n        else\n        {\n            if(i\
    \ < closest)\n            {\n                closest = i;\n                closest_index\
    \ = index;\n            }\n        }\n        index--;\n    }\n    if(closest_vowel_index\
    \ < closest_index)\n    {\n        return word[closest_vowel];\n    }\n    return\
    \ \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxeszk6tr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = \"\";\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            last_vowel = c;\n        }\n        else if(consonants.canFind(c))\n\
    \        {\n            if(last_vowel != \"\")\n            {\n              \
    \  return last_vowel;\n            }\n        }\n    }\n    return \"\";\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqa08jk3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    int vowel_index = -1;\n    while (index >= 0)\n\
    \    {\n        if (vowels.find(word[index]) != -1)\n        {\n            vowel_index\
    \ = index;\n            break;\n        }\n        index--;\n    }\n    if (vowel_index\
    \ == -1)\n        return result;\n    index = vowel_index - 1;\n    while (index\
    \ >= 0)\n    {\n        if (vowels.find(word[index]) == -1)\n        {\n     \
    \       result = word[vowel_index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbkhzadc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    import std.algorithm.comparison : equal;\n    import std.array\
    \ : array;\n    import std.range : iota;\n    import std.conv : to;\n    import\
    \ std.string : toLower;\n    import std.math : abs;\n    import std.algorithm\
    \ : min;\n    import std.typecons : tuple;\n    import std.range : map;\n    import\
    \ std.range : filter;\n    import std.range : zip;\n    import std.range : take;\n\
    \    import std.range : drop;\n    import std.range : cycle;\n    import std.range\
    \ : retro;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n\
    \    import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \
    \ import std.range : retro;\n    import std.range : retro;\n    import std.range\
    \ : retro;\n    import std\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppnur3q3d.d(73): Error: \'';\'' expected\n/tmp/tmppnur3q3d.d(91):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppnur3q3d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = -1;\n    int distance = 0;\n    int min_distance = 0;\n    int word_length\
    \ = word.length;\n    int vowels_length = vowels.length;\n    int i = 0;\n   \
    \ int j = 0;\n    int k = 0;\n    for (i = 0; i < word_length; i++)\n    {\n \
    \       for (j = 0; j < vowels_length; j++)\n        {\n            if (word[i]\
    \ == vowels[j])\n            {\n                for (k = i + 1; k < word_length;\
    \ k++)\n                {\n                    if (word[k] == 'a' || word[k] ==\
    \ 'e' || word[k] == 'i' || word[k] == 'o' || word[k] == 'u')\n               \
    \     {\n                        distance = k - i;\n                        if\
    \ (distance < min_distance || min_distance == 0)\n                        {\n\
    \                            min_distance = distance;\n                      \
    \      index = i;\n                        }\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   if (index != -1)\n    {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5bremeee.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int n = word.length;\n    string\
    \ res = \"\";\n    int min = n;\n    for (int i = 0; i < n; i++)\n    {\n    \
    \    if (vowels.find(word[i]) != -1)\n        {\n            if (i > 0 && vowels.find(word[i-1])\
    \ == -1)\n            {\n                if (i < min)\n                {\n   \
    \                 min = i;\n                    res = word[i];\n             \
    \   }\n            }\n            if (i < n-1 && vowels.find(word[i+1]) == -1)\n\
    \            {\n                if (n-i-1 < min)\n                {\n        \
    \            min = n-i-1;\n                    res = word[i];\n              \
    \  }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias\
    \ candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\"\
    );\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\")\
    \ == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo3xp9r6u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto result = \"\";\n    auto last_consonant = -1;\n    auto first_vowel\
    \ = -1;\n    auto i = 0;\n    foreach(c; word)\n    {\n        if(consonants.canFind(c))\n\
    \        {\n            last_consonant = i;\n        }\n        else if(vowels.canFind(c))\n\
    \        {\n            if(last_consonant != -1)\n            {\n            \
    \    if(first_vowel == -1)\n                {\n                    first_vowel\
    \ = i;\n                }\n                else\n                {\n         \
    \           if(abs(last_consonant - i) < abs(last_consonant - first_vowel))\n\
    \                    {\n                        first_vowel = i;\n           \
    \         }\n                }\n            }\n        }\n        i++;\n    }\n\
    \    if(first_vowel != -1)\n    {\n        result = word[first_vowel];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuniygoni.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ last_consonant = -1;\n    int first_vowel = -1;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (last_consonant != -1)\n            {\n                if (first_vowel ==\
    \ -1)\n                {\n                    first_vowel = i;\n             \
    \   }\n                else\n                {\n                    if (i - last_consonant\
    \ < first_vowel - last_consonant)\n                    {\n                   \
    \     first_vowel = i;\n                    }\n                }\n           \
    \ }\n        }\n        else\n        {\n            last_consonant = i;\n   \
    \     }\n    }\n    if (first_vowel != -1)\n    {\n        result = word[first_vowel];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwmejjtaf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int[] vowel_positions = [];\n\
    \    foreach(int i, char c; word)\n    {\n        if(vowels.canFind(c))\n    \
    \        vowel_positions ~= i;\n    }\n    if(vowel_positions.length == 0)\n \
    \       return \"\";\n    int closest_vowel_index = vowel_positions[0];\n    foreach(int\
    \ i; vowel_positions)\n    {\n        if(abs(i - word.length) < abs(closest_vowel_index\
    \ - word.length))\n            closest_vowel_index = i;\n    }\n    return word[closest_vowel_index..closest_vowel_index];\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprqv7err1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, char c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != 0)\n    {\n        result = word[index..$];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0ia_rv6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != 0)\n    {\n        result = word[index..$];\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03ixvem9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min = word.length;\n    foreach(i, c; word)\n    {\n   \
    \     if(vowels.find(c) != -1)\n        {\n            if(i > 0 && i < word.length\
    \ - 1)\n            {\n                if(vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if(abs(word.length - i)\
    \ < min)\n                    {\n                        min = abs(word.length\
    \ - i);\n                        index = i;\n                    }\n         \
    \       }\n            }\n        }\n    }\n    if(index != 0)\n    {\n      \
    \  result = word[index];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\"\
    );\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\")\
    \ == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5kav60n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = -1;\n    int min_dist\
    \ = int.max;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int dist = word.length - i;\n            if(dist < min_dist)\n\
    \            {\n                min_dist = dist;\n                index = i;\n\
    \            }\n        }\n    }\n    if(index == -1)\n        return \"\";\n\
    \    return word[index..$];\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrfxcw7a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int closest = -1;\n    int index\
    \ = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.indexOf(word[index])\
    \ != -1)\n        {\n            closest = index;\n            break;\n      \
    \  }\n        index--;\n    }\n    if (closest == -1)\n        return \"\";\n\
    \    index = closest - 1;\n    while (index >= 0)\n    {\n        if (vowels.indexOf(word[index])\
    \ == -1)\n        {\n            return word[closest..$];\n        }\n       \
    \ index--;\n    }\n    return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0bzmrozw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg16npiz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int i = word.length - 1;\n  \
    \  while (i >= 0)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i == word.length - 1)\n                return \"\";\n       \
    \     else if (vowels.find(word[i+1]) == -1)\n                return word[i..i];\n\
    \        }\n        i--;\n    }\n    return \"\";\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptvddq1ay.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int min_distance = word.length;\n    foreach(i, v;\
    \ word)\n    {\n        if(vowels.canFind(v))\n        {\n            int distance\
    \ = index - i;\n            if(distance < min_distance)\n            {\n     \
    \           min_distance = distance;\n                result = v;\n          \
    \  }\n        }\n        index--;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\")\
    \ == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpklzrgluw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    bool found = false;\n    while(index > 0)\n    {\n\
    \        if(vowels.find(word[index]) != -1)\n        {\n            if(vowels.find(word[index\
    \ - 1]) == -1)\n            {\n                result = word[index];\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      index--;\n    }\n    if(found)\n        return result;\n    else\n    \
    \    return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n\
    \    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") ==\
    \ \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\"\
    ) == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp27ff9j3s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    static string vowels = \"aeiou\";\n    static string consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    int i = word.length - 1;\n    int j = i;\n\
    \    while (i >= 0)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i == 0)\n                return \"\";\n            if (consonants.find(word[i\
    \ - 1]) != -1)\n                return word[i..$];\n        }\n        i--;\n\
    \    }\n    return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw34o30id.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                index--;\n                continue;\n            }\n        \
    \    if (vowels.find(word[index + 1]) == -1)\n            {\n                result\
    \ = word[index];\n                break;\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpam1hchbg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) == -1)\n   \
    \         {\n                result = word[index];\n                break;\n \
    \           }\n        }\n        index--;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsxddy52.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = word.length;\n  \
    \  int vowel_index = -1;\n    int vowel_distance = index;\n    while (index--)\n\
    \    {\n        if (vowels.canFind(word[index]))\n        {\n            if (index\
    \ > 0 && vowels.canFind(word[index - 1]))\n                continue;\n       \
    \     if (index < word.length - 1 && vowels.canFind(word[index + 1]))\n      \
    \          continue;\n            if (index < vowel_distance)\n            {\n\
    \                vowel_distance = index;\n                vowel_index = index;\n\
    \            }\n        }\n    }\n    if (vowel_index == -1)\n        return \"\
    \";\n    return word[vowel_index..$];\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnnki8kff.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length;\n    int min_dist = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int dist = pos -\
    \ i;\n            if(dist < min_dist)\n            {\n                min_dist\
    \ = dist;\n                result = c;\n            }\n        }\n        pos--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzph1_eoc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int distance = 0;\n    int min_distance = 0;\n    int min_index\
    \ = 0;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n   \
    \     {\n            index = i;\n            distance = word.length - index;\n\
    \            if(distance < min_distance || min_distance == 0)\n            {\n\
    \                min_distance = distance;\n                min_index = index;\n\
    \            }\n        }\n    }\n    if(min_distance == 0)\n    {\n        return\
    \ result;\n    }\n    else\n    {\n        return word[min_index..$];\n    }\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsd4l5ap.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.canFind(word[index]))\n\
    \        {\n            if (index == word.length - 1)\n            {\n       \
    \         if (index - 1 >= 0)\n                {\n                    if (!vowels.canFind(word[index\
    \ - 1]))\n                    {\n                        result = word[index..$];\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            else if (index == 0)\n            {\n              \
    \  if (word.length > 1)\n                {\n                    if (!vowels.canFind(word[index\
    \ + 1]))\n                    {\n                        result = word[index..$];\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            else\n            {\n                if (!vowels.canFind(word[index\
    \ - 1]) && !vowels.canFind(word[index + 1]))\n                {\n            \
    \        result = word[index..$];\n                    break;\n              \
    \  }\n            }\n        }\n        index--;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp91xu2_m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int i = word.length;\n    while(i--)\n\
    \    {\n        if(vowels.find(word[i]) != -1)\n        {\n            if(i !=\
    \ 0 && vowels.find(word[i-1]) == -1)\n                return word[i..$];\n   \
    \         else if(i != word.length-1 && vowels.find(word[i+1]) == -1)\n      \
    \          return word[i..$];\n        }\n    }\n    return \"\";\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0jrr2qc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    // your code here\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    int pos = word.length;\n    int min_dist = word.length;\n\
    \    for (int i = word.length - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != -1) {\n            if (pos - i < min_dist) {\n                min_dist =\
    \ pos - i;\n                result = word[i..$];\n            }\n            pos\
    \ = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2scamggy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string closest_vowel = \"\";\n\
    \    int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n   \
    \ int word_length = word.length;\n    for (int i = 0; i < word_length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            int distance\
    \ = word_length - i;\n            if (closest_vowel_distance == -1 || distance\
    \ < closest_vowel_distance)\n            {\n                closest_vowel_distance\
    \ = distance;\n                closest_vowel_index = i;\n            }\n     \
    \   }\n    }\n    if (closest_vowel_index != -1)\n    {\n        closest_vowel\
    \ = word[closest_vowel_index..closest_vowel_index];\n    }\n    return closest_vowel;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7985nx0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    import std.algorithm;\n    import std.array;\n    import std.range;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.conv;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.conv;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.string;\n  \
    \  import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.conv;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.conv;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.conv;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.string;\n  \
    \  import std.typecons;\n    import std.math;\n    import std.stdio;\n    import\
    \ std.conv;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n\
    \    import std.string;\n    import std.typecons;\n    import std.math;\n    import\
    \ std.stdio;\n    import std.conv;\n    import std.range;\n    import std.algorithm;\n\
    \    import std.array;\n    import std.string;\n    import std.typecons;\n   \
    \ import std.math;\n    import std.stdio;\n    import std.conv;\n    import std.range;\n\
    \    import std.algorithm;\n    import std.array;\n    import std.string;\n  \
    \  import std.typecons;\n\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_g6eyptb.d(87): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_g6eyptb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ distance = 0;\n    int minDistance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            distance = word.length\
    \ - i;\n            if(distance < minDistance)\n            {\n              \
    \  minDistance = distance;\n                result = c;\n            }\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcdgi_hxs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length;\n    int min_dist = word.length;\n    foreach(c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int dist = pos -\
    \ word.rfind(c);\n            if(dist < min_dist)\n            {\n           \
    \     min_dist = dist;\n                result = c;\n            }\n        }\n\
    \        pos--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9g4v2w9r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            distance = word.length - i;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               index = i;\n            }\n        }\n    }\n    if (index !=\
    \ word.length)\n    {\n        result = word[index];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdzod0vd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            int distance = word.length - i;\n           \
    \ if(distance < min_distance)\n            {\n                result = c;\n  \
    \              min_distance = distance;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n\
    \    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") ==\
    \ \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\"\
    ) == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1pt7s2g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int distance = 0;\n    int min_distance = 0;\n    int min_index\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int\
    \ m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n   \
    \ int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n \
    \   int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt\
    \ = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n \
    \   int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc\
    \ = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n \
    \   int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp\
    \ = 0;\n    int qqq = 0;\n    int rrr = 0;\nunittest\n{\n    alias candidate =\
    \ get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8d1y_gxa.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d1y_gxa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = word.length;\n  \
    \  int result = -1;\n    int distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            if(i > 0 && i <\
    \ word.length - 1)\n            {\n                if(!vowels.canFind(word[i -\
    \ 1]) && !vowels.canFind(word[i + 1]))\n                {\n                  \
    \  if(abs(index - i) < distance)\n                    {\n                    \
    \    distance = abs(index - i);\n                        result = i;\n       \
    \             }\n                }\n            }\n        }\n    }\n    if(result\
    \ == -1)\n        return \"\";\n    return word[result..result];\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_5h78khz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i-1])\
    \ == -1 && vowels.find(word[i+1]) == -1)\n                {\n                \
    \    if (min_distance > abs(i - word.length + 1))\n                    {\n   \
    \                     min_distance = abs(i - word.length + 1);\n             \
    \           index = i;\n                    }\n                }\n           \
    \ }\n        }\n    }\n    if (index != 0)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpum070nsw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int index = word.length - 1;\n\
    \    while (index >= 0)\n    {\n        if (vowels.canFind(word[index]))\n   \
    \     {\n            if (index == word.length - 1)\n                return \"\"\
    ;\n            if (vowels.canFind(word[index + 1]))\n                return \"\
    \";\n            return word[index .. index];\n        }\n        index--;\n \
    \   }\n    return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpev7y3emo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int distance = 0;\n    int min_distance = 0;\n    int word_length\
    \ = word.length;\n    int vowel_length = vowels.length;\n    int vowel_index =\
    \ 0;\n    int vowel_distance = 0;\n    int vowel_min_distance = 0;\n    int vowel_min_index\
    \ = 0;\n    int vowel_min_index_distance = 0;\n    int vowel_min_index_distance_index\
    \ = 0;\n    int vowel_min_index_distance_index_distance = 0;\n    int vowel_min_index_distance_index_distance_index\
    \ = 0;\n    int vowel_min_index_distance_index_distance_index_distance = 0;\n\
    \    int vowel_min_index_distance_index_distance_index_distance_index = 0;\n \
    \   int vowel_min_index_distance_index_distance_index_distance_index_distance\
    \ = 0;\n    int vowel_min_index_distance_index_distance_index_distance_index_distance_index\
    \ = 0;\n    int vowel_min_index_distance_index_distance_index_distance_index_distance_index_distance\
    \ = 0;\n    int vowel_min_index_distance_index_distance_index_distance_index_distance_index_distance_index\
    \ = 0;\n    int vowel_min_index_distance_index_distance_index_distance_index_distance_index_distance_index_distance\
    \ = 0;\n    int vowel_min_index_distance_index_distance_index_distance_index_distance_index_distance_index_distance_index\
    \ = 0;\n    int vowel_min_index_distance_index_distance_index_distance_index_distance_index_distance_index_distance_index_distance\
    \ = 0;\n    int vowel_min_index_distance_index_distance_index_distance_index_distance_index_distance_index_distance_index_distance_index\
    \ = 0;\n    int vowel_min_index_distance_index_distance_index_distance_index_distance_index_distance_index_distance_index_distance_index_distance\
    \ = 0;\n\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptx7z66hb.d(44): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptx7z66hb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_index = 0;\n   \
    \ int min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            if(index > 0 && consonants.find(word[index -\
    \ 1]) != -1)\n            {\n                if(index < word.length - 1 && consonants.find(word[index\
    \ + 1]) != -1)\n                {\n                    if(index - min_index <\
    \ min_distance)\n                    {\n                        min_distance =\
    \ index - min_index;\n                        result = c;\n                  \
    \  }\n                }\n                else\n                {\n           \
    \         min_index = index;\n                }\n            }\n        }\n  \
    \      index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzzu9rxc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = -1;\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != -1)\n    {\n        result = word[index..$];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zhxl8fq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index > 0 && vowels.find(word[index - 1])\
    \ == -1)\n            {\n                result = word[index];\n             \
    \   break;\n            }\n            else if (index < word.length - 1 && vowels.find(word[index\
    \ + 1]) == -1)\n            {\n                result = word[index];\n       \
    \         break;\n            }\n        }\n        index--;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd86o0et3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    int distance = 0;\n    for (int i = 0; i <\
    \ word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = word[i..$];\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp250jn1ye.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    int[] vowels = [ 'a', 'e', 'i', 'o', 'u' ];\n    int[] consonants\
    \ = [ 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' ];\n    int[] word_chars = word.dup.map!(a => a.toLower).array;\n\
    \    int[] vowels_positions = word_chars.filter!(a => a in vowels).map!(a => word_chars.indexOf(a)).array;\n\
    \    int[] consonants_positions = word_chars.filter!(a => a in consonants).map!(a\
    \ => word_chars.indexOf(a)).array;\n    int[] consonants_positions_before_vowels\
    \ = consonants_positions.filter!(a => a < vowels_positions[0]).array;\n    int[]\
    \ consonants_positions_after_vowels = consonants_positions.filter!(a => a > vowels_positions[$\
    \ - 1]).array;\n    int[] consonants_positions_between_vowels = consonants_positions.filter!(a\
    \ => a > vowels_positions[0] && a < vowels_positions[$ - 1]).array;\n    int[]\
    \ consonants_positions_between_vowels_sorted = consonants_positions_between_vowels.sort.array;\n\
    \    int[] consonants_positions_between_vowels_sorted_reversed = consonants_positions_between_vowels_sorted.dup.reverse.array;\n\
    \    int[] consonants_positions_between_vowels_sorted_reversed_with_vowels = consonants_positions_between_vowels_sorted_reversed.dup.insert(vowels_positions[0],\
    \ 0).insert(vowels_positions[$ - 1], $).array;\n    int[] consonants_positions_between\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphyw2dass.d(27): Error: \''$\'' is valid only inside [] of index
    or slice\n/tmp/tmphyw2dass.d(29): Error: semicolon expected, not \''unittest\''\n/tmp/tmphyw2dass.d(29):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphyw2dass.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    auto last_vowel = word.rfind(vowels);\n\
    \    if (last_vowel == -1)\n        return \"\";\n    auto first_consonant = word.rfind(\"\
    bcdfghjklmnpqrstvwxyz\");\n    if (first_consonant == -1)\n        return \"\"\
    ;\n    if (first_consonant > last_vowel)\n        return \"\";\n    return word[last_vowel..last_vowel+1];\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7lo3r6so.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            if(i > index)\n\
    \            {\n                break;\n            }\n            if(i < index)\n\
    \            {\n                index = i;\n                result = c;\n    \
    \        }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppy206rkh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int i = word.length;\n    while(i--)\n\
    \    {\n        if(vowels.find(word[i]) != -1)\n        {\n            if(i !=\
    \ 0 && vowels.find(word[i-1]) == -1)\n                return word[i..$];\n   \
    \         else if(i != word.length-1 && vowels.find(word[i+1]) == -1)\n      \
    \          return word[i..$];\n        }\n    }\n    return \"\";\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0jrr2qc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index > 0) {\n        if (vowels.find(word[index])\
    \ != -1) {\n            if (vowels.find(word[index - 1]) == -1) {\n          \
    \      result = word[index];\n                break;\n            }\n        }\n\
    \        index--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmperuaj1hr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int last_vowel_index = -1;\n\
    \    int last_consonant_index = -1;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            last_vowel_index\
    \ = i;\n        }\n        else\n        {\n            last_consonant_index =\
    \ i;\n        }\n        if (last_vowel_index > last_consonant_index)\n      \
    \  {\n            return word[last_vowel_index..last_vowel_index];\n        }\n\
    \    }\n    return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjijdz9jo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int i = word.length - 1;\n  \
    \  while (i >= 0)\n    {\n        if (vowels.canFind(word[i]))\n        {\n  \
    \          if (i == word.length - 1)\n                return \"\";\n         \
    \   if (vowels.canFind(word[i + 1]))\n                return \"\";\n         \
    \   return word[i .. i];\n        }\n        i--;\n    }\n    return \"\";\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaa1euek_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length;\n    for (int i = word.length - 1; i >= 0; i--)\n    {\n\
    \        if (vowels.find(word[i]) != -1)\n        {\n            if (i == word.length\
    \ - 1)\n            {\n                result = \"\";\n                break;\n\
    \            }\n            else if (vowels.find(word[i + 1]) == -1)\n       \
    \     {\n                result = word[i];\n                break;\n         \
    \   }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpabj1gn_0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto word_len = word.length;\n    auto last_consonant_pos = word_len;\n\
    \    auto closest_vowel_pos = word_len;\n    auto closest_vowel_distance = word_len;\n\
    \    for (int i = word_len - 1; i >= 0; i--)\n    {\n        if (consonants.canFind(word[i]))\n\
    \        {\n            last_consonant_pos = i;\n            break;\n        }\n\
    \    }\n    for (int i = last_consonant_pos - 1; i >= 0; i--)\n    {\n       \
    \ if (vowels.canFind(word[i]))\n        {\n            if (last_consonant_pos\
    \ - i < closest_vowel_distance)\n            {\n                closest_vowel_distance\
    \ = last_consonant_pos - i;\n                closest_vowel_pos = i;\n        \
    \    }\n        }\n    }\n    if (closest_vowel_pos == word_len)\n        return\
    \ \"\";\n    return word[closest_vowel_pos..closest_vowel_pos+1];\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2czzwvu8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                result = c;\n              \
    \  min_distance = distance;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb8nweldt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) == -1)\n   \
    \         {\n                result = word[index];\n                break;\n \
    \           }\n        }\n        index--;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnsxddy52.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int minDistance = word.length;\n    foreach(v; vowels)\n   \
    \ {\n        index = word.find(v);\n        if(index != -1)\n        {\n     \
    \       if(index > 0 && index < word.length - 1)\n            {\n            \
    \    if(vowels.find(word[index - 1]) == -1 && vowels.find(word[index + 1]) ==\
    \ -1)\n                {\n                    if(index < minDistance)\n      \
    \              {\n                        minDistance = index;\n             \
    \           result = v;\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpib5w_zj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ last_vowel_index = -1;\n    int last_consonant_index = -1;\n    for (int i =\
    \ 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n \
    \       {\n            last_vowel_index = i;\n        }\n        else\n      \
    \  {\n            last_consonant_index = i;\n        }\n        if (last_vowel_index\
    \ != -1 && last_consonant_index != -1)\n        {\n            if (last_vowel_index\
    \ > last_consonant_index)\n            {\n                result = word[last_vowel_index];\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\"\
    );\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\")\
    \ == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydfl0je9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (index == word.length - 1)\n            {\n\
    \                if (vowels.find(word[index - 1]) == -1)\n                {\n\
    \                    result = word[index];\n                    break;\n     \
    \           }\n            }\n            else if (index == 0)\n            {\n\
    \                if (vowels.find(word[index + 1]) == -1)\n                {\n\
    \                    result = word[index];\n                    break;\n     \
    \           }\n            }\n            else\n            {\n              \
    \  if (vowels.find(word[index - 1]) == -1 && vowels.find(word[index + 1]) == -1)\n\
    \                {\n                    result = word[index];\n              \
    \      break;\n                }\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeclzd0ba.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int n = word.length;\n    int\
    \ i = n - 1;\n    while (i >= 0) {\n        if (vowels.find(word[i]) != -1) {\n\
    \            if (i == n - 1) {\n                return \"\";\n            }\n\
    \            if (vowels.find(word[i + 1]) == -1) {\n                return word[i\
    \ .. i];\n            }\n        }\n        i--;\n    }\n    return \"\";\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbbyp71xi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int last_vowel_index = -1;\n\
    \    int last_consonant_index = -1;\n    int closest_vowel_index = -1;\n    int\
    \ closest_consonant_index = -1;\n    int distance = 0;\n    int closest_distance\
    \ = 0;\n    foreach(int i, char c; word)\n    {\n        if(vowels.find(c) !=\
    \ -1)\n        {\n            last_vowel_index = i;\n            if(last_consonant_index\
    \ != -1)\n            {\n                distance = i - last_consonant_index;\n\
    \                if(distance < closest_distance || closest_distance == 0)\n  \
    \              {\n                    closest_distance = distance;\n         \
    \           closest_vowel_index = i;\n                    closest_consonant_index\
    \ = last_consonant_index;\n                }\n            }\n        }\n     \
    \   else\n        {\n            last_consonant_index = i;\n        }\n    }\n\
    \    if(closest_vowel_index == -1)\n    {\n        return \"\";\n    }\n    return\
    \ word[closest_vowel_index..$];\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdr9h4nm_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if (distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if (index > 0 && index < word.length\
    \ - 1)\n    {\n        string vowels = \"aeiou\";\n        if (vowels.find(word[index\
    \ - 1]) == -1 && vowels.find(word[index + 1]) == -1)\n        {\n            result\
    \ = word[index];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\"\
    );\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\")\
    \ == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppl_ppydl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    int i = word.length;\n    while(i--)\n    {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\n\
    \        {\n            if(i == 0)\n                return \"\";\n           \
    \ if(word[i-1] == 'a' || word[i-1] == 'e' || word[i-1] == 'i' || word[i-1] ==\
    \ 'o' || word[i-1] == 'u')\n                continue;\n            return word[i..$];\n\
    \        }\n    }\n    return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzhak27xg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    int vowel_index\
    \ = -1;\n    int consonant_index = -1;\n    while (index >= 0)\n    {\n      \
    \  if (vowels.find(word[index]) != -1)\n        {\n            vowel_index = index;\n\
    \            break;\n        }\n        index--;\n    }\n    if (vowel_index ==\
    \ -1)\n        return result;\n    index = vowel_index - 1;\n    while (index\
    \ >= 0)\n    {\n        if (consonants.find(word[index]) != -1)\n        {\n \
    \           consonant_index = index;\n            break;\n        }\n        index--;\n\
    \    }\n    if (consonant_index == -1)\n        return result;\n    index = vowel_index\
    \ + 1;\n    while (index < word.length)\n    {\n        if (consonants.find(word[index])\
    \ != -1)\n        {\n            if (abs(vowel_index - consonant_index) < abs(index\
    \ - vowel_index))\n                return result;\n            else\n        \
    \        return word[vowel_index..$];\n        }\n        index++;\n    }\n  \
    \  return word[vowel_index..$];\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfl4neoc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_consonant = \"\";\n    auto last_vowel = \"\";\n    foreach(i,\
    \ c; word) {\n        if(consonants.canFind(c)) {\n            last_consonant\
    \ = c;\n        } else if(vowels.canFind(c)) {\n            last_vowel = c;\n\
    \        }\n    }\n    return last_vowel;\n}\nunittest\n{\n    alias candidate\
    \ = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"\
    full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5q7nzf0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ pos = word.length;\n    int min_dist = word.length;\n    for (int i = word.length\
    \ - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i < pos)\n            {\n                pos = i;\n         \
    \       min_dist = word.length - i;\n            }\n            else if (i ==\
    \ pos)\n            {\n                min_dist = min(min_dist, word.length -\
    \ i);\n            }\n        }\n    }\n    if (min_dist != word.length)\n   \
    \ {\n        result = word[pos..$];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\"\
    ) == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfmxk_2h4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = -1;\n    int min_distance = int.max;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   index = i;\n                min_distance = distance;\n            }\n    \
    \    }\n    }\n    if(index != -1)\n    {\n        result = word[index..$];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogzw6rz4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg16npiz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string res = \"\";\n    int min_dist\
    \ = int.max;\n    int dist = 0;\n    for (int i = 0; i < word.length; i++)\n \
    \   {\n        if (vowels.indexOf(word[i]) != -1)\n        {\n            dist\
    \ = 0;\n            for (int j = i + 1; j < word.length; j++)\n            {\n\
    \                if (vowels.indexOf(word[j]) == -1)\n                {\n     \
    \               dist++;\n                }\n                else\n           \
    \     {\n                    break;\n                }\n            }\n      \
    \      if (dist < min_dist)\n            {\n                min_dist = dist;\n\
    \                res = word[i];\n            }\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1f33ohd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_consonant = word.rfind(consonants);\n    auto first_vowel = word.find(vowels);\n\
    \    if (last_consonant == -1 || first_vowel == -1)\n        return \"\";\n  \
    \  auto last_vowel = word.rfind(vowels);\n    if (last_vowel == -1)\n        return\
    \ \"\";\n    if (last_vowel < last_consonant)\n        return \"\";\n    auto\
    \ distance = last_vowel - last_consonant;\n    auto closest_vowel = word[last_vowel];\n\
    \    for (auto i = last_vowel - 1; i > last_consonant; --i)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            if (last_vowel - i < distance)\n\
    \            {\n                distance = last_vowel - i;\n                closest_vowel\
    \ = word[i];\n            }\n        }\n    }\n    return closest_vowel;\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpubtrrbl_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = -1;\n    int min = word.length;\n    for (int i = word.length - 1; i\
    \ >= 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n    \
    \        if (i > 0 && vowels.find(word[i - 1]) == -1)\n            {\n       \
    \         if (i < min)\n                {\n                    min = i;\n    \
    \                index = i;\n                }\n            }\n        }\n   \
    \ }\n    if (index != -1)\n    {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo5mnw9as.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_consonant = word.length;\n    auto first_vowel = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(consonants.canFind(c))\n        {\n\
    \            last_consonant = i;\n        }\n        else if(vowels.canFind(c))\n\
    \        {\n            first_vowel = i;\n            break;\n        }\n    }\n\
    \    if(last_consonant < first_vowel)\n    {\n        return \"\";\n    }\n  \
    \  auto closest_vowel = word.length;\n    foreach(i, c; word[last_consonant..])\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            closest_vowel =\
    \ i + last_consonant;\n            break;\n        }\n    }\n    if(closest_vowel\
    \ < first_vowel)\n    {\n        return \"\";\n    }\n    return word[closest_vowel..closest_vowel+1];\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6emvgjuf.d(38): Error: expression expected, not \'']\''\n/tmp/tmp6emvgjuf.d(38):
    Error: found \'')\'' when expecting \'']\''\n/tmp/tmp6emvgjuf.d(39): Error: found
    \''{\'' when expecting \'')\''\n/tmp/tmp6emvgjuf.d(46): Error: Declaration expected,
    not \''if\''\n/tmp/tmp6emvgjuf.d(49): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6emvgjuf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string ret = \"\";\n    int last_vowel\
    \ = -1;\n    int last_consonant = -1;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            last_vowel\
    \ = i;\n        }\n        else\n        {\n            last_consonant = i;\n\
    \        }\n        if (last_vowel != -1 && last_consonant != -1)\n        {\n\
    \            if (last_vowel > last_consonant)\n            {\n               \
    \ ret = word[last_vowel];\n            }\n        }\n    }\n    return ret;\n\
    }\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3v4_a0ba.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = \"\";\n    auto last_consonant = \"\";\n    for (int\
    \ i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.indexOf(word[i])\
    \ != -1)\n        {\n            last_vowel = word[i];\n            if (last_consonant\
    \ != \"\")\n                return last_vowel;\n        }\n        else if (consonants.indexOf(word[i])\
    \ != -1)\n        {\n            last_consonant = word[i];\n        }\n    }\n\
    \    return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n\
    \    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") ==\
    \ \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\"\
    ) == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidympp7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    auto vowels = \"aeiou\";\n    auto consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    auto last_vowel = \"\";\n    auto last_consonant = \"\";\n    auto result\
    \ = \"\";\n    foreach(c; word)\n    {\n        if(vowels.canFind(c))\n      \
    \  {\n            last_vowel = c;\n        }\n        else if(consonants.canFind(c))\n\
    \        {\n            last_consonant = c;\n        }\n        if(last_vowel\
    \ != \"\" && last_consonant != \"\")\n        {\n            result = last_vowel;\n\
    \            last_vowel = \"\";\n            last_consonant = \"\";\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy3hx1fm8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = 0;\n    int distance = 0;\n    int last_vowel_index\
    \ = -1;\n    int last_consonant_index = -1;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            last_vowel_index = i;\n\
    \            if(last_consonant_index != -1)\n            {\n                distance\
    \ = i - last_consonant_index;\n                if(distance < min_distance || min_distance\
    \ == 0)\n                {\n                    min_distance = distance;\n   \
    \                 index = i;\n                }\n            }\n        }\n  \
    \      else\n        {\n            last_consonant_index = i;\n        }\n   \
    \ }\n    if(index != 0)\n    {\n        result = word[index..$];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy8zafn52.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    string vowels = \"aeiou\";\n    int pos = word.length;\n    while(pos--)\n\
    \    {\n        if(vowels.find(word[pos]) != -1)\n        {\n            if(pos\
    \ != 0 && vowels.find(word[pos-1]) == -1)\n                return word[pos..$];\n\
    \            else if(pos != word.length-1 && vowels.find(word[pos+1]) == -1)\n\
    \                return word[pos..$];\n        }\n    }\n    return \"\";\n}\n\
    unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
    yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
    easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
    ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
    most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
    ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
    anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
    Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6gc3ee7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your\
    \ task is to find the closest vowel that stands between \n    two consonants from\
    \ the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
    \ met the above condition. \n\n    You may assume that the given string contains\
    \ English letter only.\n\n    Example:\n                    \n*/\nstring get_closest_vowel(string\
    \ word) \n{\n    static string vowels = \"aeiou\";\n    static string consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    int len = word.length;\n    if (len < 3) return\
    \ \"\";\n    int i = len - 1;\n    while (i > 0)\n    {\n        if (consonants.find(word[i])\
    \ != -1)\n        {\n            if (vowels.find(word[i - 1]) != -1)\n       \
    \     {\n                return word[i - 1..i];\n            }\n            else\
    \ if (consonants.find(word[i - 1]) != -1)\n            {\n                i -=\
    \ 2;\n            }\n            else\n            {\n                return \"\
    \";\n            }\n        }\n        else\n        {\n            i--;\n   \
    \     }\n    }\n    return \"\";\n}\nunittest\n{\n    alias candidate = get_closest_vowel;\n\
    \n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\")\
    \ == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"\
    eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"\
    bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"\
    ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"\
    quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"\
    Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2cilrd7w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014774
