{
  "language": "d",
  "name": "HumanEval_90_next_smallest",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    if (smallest > second_smallest)\n    {\n        swap(smallest, second_smallest);\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcokoscsm.d(18): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcokoscsm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_hei_aqi.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hei_aqi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i; lst)\n    {\n        if (i < smallest)\n        {\n            second_smallest = smallest;\n            smallest = i;\n        }\n        else if (i < second_smallest)\n        {\n            second_smallest = i;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5j3jiogv.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp5j3jiogv.d(27): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5j3jiogv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < smallest)\n        {\n            second_smallest = smallest;\n            smallest = v;\n        }\n        else if (v < second_smallest)\n        {\n            second_smallest = v;\n        }\n    }\n    if (second_smallest == smallest)\n        return Nullable!(long)();\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgghcsv07.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455af1]\n??:? void tmpgghcsv07.__unittest_L32_C1() [0x4418ba]\n??:? void tmpgghcsv07.__modtest() [0x4535fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45511e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550f5]\n??:? runModuleUnitTests [0x45e8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3uy9_r2y.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp3uy9_r2y.d(27): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uy9_r2y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    else\n    {\n        long min = lst[0];\n        long min2 = lst[1];\n        foreach (i; lst)\n        {\n            if (i < min)\n            {\n                min2 = min;\n                min = i;\n            }\n            else if (i < min2)\n                min2 = i;\n        }\n        return Nullable!(long)(min2);\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplc4g63rx.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmplc4g63rx.__unittest_L31_C1() [0x44187e]\n??:? void tmplc4g63rx.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdh92jmtj.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpdh92jmtj.d(27): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdh92jmtj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    else\n    {\n        long min = lst[0];\n        long min2 = lst[1];\n        if (min2 < min)\n        {\n            min = min2;\n            min2 = lst[0];\n        }\n        foreach (i; lst[2..$])\n        {\n            if (i < min)\n            {\n                min2 = min;\n                min = i;\n            }\n            else if (i < min2)\n                min2 = i;\n        }\n        return min2;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwiceg93z.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpwiceg93z.d(33): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwiceg93z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(l; lst)\n    {\n        if(l < min)\n        {\n            min2 = min;\n            min = l;\n        }\n        else if(l < min2)\n        {\n            min2 = l;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq5hplket.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpq5hplket.__unittest_L32_C1() [0x441886]\n??:? void tmpq5hplket.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$]) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa8skmu96.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x455b09]\n??:? void tmpa8skmu96.__unittest_L37_C1() [0x4419fa]\n??:? void tmpa8skmu96.__modtest() [0x453618]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455136]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a34d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45510d]\n??:? runModuleUnitTests [0x45e8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a94]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppg1isvhz.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppg1isvhz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long smallest = lst[0];\n    long secondSmallest = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < smallest) \n        {\n            secondSmallest = smallest;\n            smallest = e;\n        } \n        else if (e < secondSmallest) \n        {\n            secondSmallest = e;\n        }\n    }\n    return Nullable!(long)(secondSmallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmrhy1hjz.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpmrhy1hjz.__unittest_L29_C1() [0x44187e]\n??:? void tmpmrhy1hjz.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x4569c3]\n??:? _d_run_main [0x45692e]\n??:? main [0x453693]\n??:? __libc_start_main [0x38f15554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = null;\n    long min = lst[0];\n    long second_min = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            second_min = min;\n            min = i;\n        }\n        else if(i < second_min)\n        {\n            second_min = i;\n        }\n    }\n    if(second_min == min)\n    {\n        return result;\n    }\n    else\n    {\n        result = second_min;\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj915dzvf.d(12): Error: `inout` method `std.typecons.Nullable!long.Nullable.this` is not callable using a mutable object\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj915dzvf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    else\n    {\n        long min = lst[0];\n        long min2 = lst[1];\n        foreach (i; lst)\n        {\n            if (i < min)\n            {\n                min2 = min;\n                min = i;\n            }\n            else if (i < min2)\n                min2 = i;\n        }\n        return min2;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3r263rjm.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp3r263rjm.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3r263rjm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, val; lst) \n    {\n        if (val < smallest) \n        {\n            next_smallest = smallest;\n            smallest = val;\n        }\n        else if (val < next_smallest) \n        {\n            next_smallest = val;\n        }\n    }\n    return next_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn4kef5to.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpn4kef5to.d(28): Error: cannot implicitly convert expression `next_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn4kef5to.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_hei_aqi.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hei_aqi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            second_min = min;\n            min = i;\n        }\n        else if (i < second_min) \n        {\n            second_min = i;\n        }\n    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi1kr0myw.d(30): Error: cannot implicitly convert expression `second_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1kr0myw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\n/*\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpesl_rtnq.d(30): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpesl_rtnq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164103
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long next = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n        {\n            next = min;\n            min = v;\n        }\n        else if (v < next)\n        {\n            next = v;\n        }\n    }\n    return next;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_mx8b7p8.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp_mx8b7p8.d(28): Error: cannot implicitly convert expression `next` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_mx8b7p8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long next = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            next = min;\n            min = e;\n        }\n        else if (e < next)\n        {\n            next = e;\n        }\n    }\n    return Nullable!(long)(next);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkqwi4oq.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpdkqwi4oq.__unittest_L30_C1() [0x44187e]\n??:? void tmpdkqwi4oq.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, val; lst) \n    {\n        if (val < smallest) \n        {\n            second_smallest = smallest;\n            smallest = val;\n        }\n        else if (val < second_smallest) \n        {\n            second_smallest = val;\n        }\n    }\n    if (second_smallest == smallest) \n    {\n        return Nullable!(long).init;\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_l23qjsu.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x455af1]\n??:? void tmp_l23qjsu.__unittest_L36_C1() [0x4418ba]\n??:? void tmp_l23qjsu.__modtest() [0x4535fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45511e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550f5]\n??:? runModuleUnitTests [0x45e8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < smallest)\n        {\n            next_smallest = smallest;\n            smallest = v;\n        }\n        else if (v < next_smallest)\n        {\n            next_smallest = v;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3u2en0mx.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp3u2en0mx.__unittest_L29_C1() [0x44187e]\n??:? void tmp3u2en0mx.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx4qrxv53.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpx4qrxv53.__unittest_L29_C1() [0x44187e]\n??:? void tmpx4qrxv53.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptenghwup.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmptenghwup.__unittest_L30_C1() [0x44187e]\n??:? void tmptenghwup.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long next_min = lst[1];\n    foreach (i, val; lst) \n    {\n        if (val < min) \n        {\n            next_min = min;\n            min = val;\n        }\n        else if (val < next_min) \n        {\n            next_min = val;\n        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwadp64od.d(30): Error: cannot implicitly convert expression `next_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwadp64od.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long next_min = lst[1];\n    if (min > next_min)\n    {\n        min = next_min;\n        next_min = lst[0];\n    }\n    foreach (i; 2..lst.length)\n    {\n        if (lst[i] < min)\n        {\n            next_min = min;\n            min = lst[i];\n        }\n        else if (lst[i] < next_min)\n        {\n            next_min = lst[i];\n        }\n    }\n    return Nullable!(long)(next_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxrj_8jkv.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x455b71]\n??:? void tmpxrj_8jkv.__unittest_L35_C1() [0x441a5e]\n??:? void tmpxrj_8jkv.__modtest() [0x45367c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45519e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a3b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a444]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a341]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455175]\n??:? runModuleUnitTests [0x45e949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456afc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, val; lst) \n    {\n        if (val < smallest) \n        {\n            second_smallest = smallest;\n            smallest = val;\n        }\n        else if (val < second_smallest) \n        {\n            second_smallest = val;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdvt52yz1.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpdvt52yz1.__unittest_L30_C1() [0x44187e]\n??:? void tmpdvt52yz1.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 != min)\n    {\n        result = min2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpswi054hy.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x455b01]\n??:? void tmpswi054hy.__unittest_L33_C1() [0x4418be]\n??:? void tmpswi054hy.__modtest() [0x453610]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45512e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455105]\n??:? runModuleUnitTests [0x45e8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpduo6xxqu.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpduo6xxqu.d(28): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpduo6xxqu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            next_min = min;\n            min = e;\n        }\n        else if (e < next_min)\n        {\n            next_min = e;\n        }\n    }\n    return Nullable!(long)(next_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcz91gqym.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpcz91gqym.__unittest_L30_C1() [0x44187e]\n??:? void tmpcz91gqym.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, elem; lst)\n    {\n        if (elem < smallest)\n        {\n            second_smallest = smallest;\n            smallest = elem;\n        }\n        else if (elem < second_smallest)\n        {\n            second_smallest = elem;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpye3pe9y8.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpye3pe9y8.__unittest_L30_C1() [0x44187e]\n??:? void tmpye3pe9y8.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptenghwup.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmptenghwup.__unittest_L30_C1() [0x44187e]\n??:? void tmptenghwup.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpduo6xxqu.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpduo6xxqu.d(28): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpduo6xxqu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    if (smallest > second_smallest) \n    {\n        swap(smallest, second_smallest);\n    }\n    foreach (i, e; lst[2..$]) \n    {\n        if (e < smallest) \n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest) \n        {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2sw23f91.d(17): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\n/tmp/tmp2sw23f91.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp2sw23f91.d(31): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2sw23f91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < smallest)\n        {\n            second_smallest = smallest;\n            smallest = v;\n        }\n        else if (v < second_smallest)\n        {\n            second_smallest = v;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuw2y_g75.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpuw2y_g75.__unittest_L30_C1() [0x44187e]\n??:? void tmpuw2y_g75.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            next_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < next_smallest)\n        {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ph5hqj9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp6ph5hqj9.__unittest_L30_C1() [0x44187e]\n??:? void tmp6ph5hqj9.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < smallest) \n        {\n            second_smallest = smallest;\n            smallest = e;\n        } \n        else if (e < second_smallest) \n        {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpleexuciu.d(30): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpleexuciu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long next_min = long.max;\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            next_min = min;\n            min = i;\n        }\n        else if(i < next_min)\n        {\n            next_min = i;\n        }\n    }\n    return next_min == long.max ? Nullable!(long).init : Nullable!(long)(next_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyltlka5r.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x455aa1]\n??:? void tmpyltlka5r.__unittest_L28_C1() [0x44186a]\n??:? void tmpyltlka5r.__modtest() [0x4535ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a374]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a271]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550a5]\n??:? runModuleUnitTests [0x45e879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a2c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    if (smallest > next_smallest)\n    {\n        long tmp = smallest;\n        smallest = next_smallest;\n        next_smallest = tmp;\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n            next_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < next_smallest)\n        {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd66518zo.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x455af1]\n??:? void tmpd66518zo.__unittest_L36_C1() [0x4419de]\n??:? void tmpd66518zo.__modtest() [0x4535fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45511e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550f5]\n??:? runModuleUnitTests [0x45e8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < smallest)\n        {\n            next_smallest = smallest;\n            smallest = v;\n        }\n        else if (v < next_smallest)\n        {\n            next_smallest = v;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5x_f1bx4.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp5x_f1bx4.__unittest_L30_C1() [0x44187e]\n??:? void tmp5x_f1bx4.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4f3y3jpv.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp4f3y3jpv.__unittest_L30_C1() [0x44187e]\n??:? void tmp4f3y3jpv.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4f3y3jpv.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp4f3y3jpv.__unittest_L30_C1() [0x44187e]\n??:? void tmp4f3y3jpv.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min2 < min) \n    {\n        min = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$]) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp2b75e8_f.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x455b29]\n??:? void tmp2b75e8_f.__unittest_L37_C1() [0x441a16]\n??:? void tmp2b75e8_f.__modtest() [0x453634]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455156]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a36d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45512d]\n??:? runModuleUnitTests [0x45e901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456ab4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_hei_aqi.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hei_aqi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_hei_aqi.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hei_aqi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz_yw0x84.d(14): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz_yw0x84.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long second = long.max;\n    foreach(i; lst) \n    {\n        if (i < min) \n        {\n            second = min;\n            min = i;\n        }\n        else if (i < second)\n        {\n            second = i;\n        }\n    }\n    if (second == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcekj7eze.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmpcekj7eze.__unittest_L32_C1() [0x441872]\n??:? void tmpcekj7eze.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i; lst)\n    {\n        if (i < smallest)\n        {\n            second_smallest = smallest;\n            smallest = i;\n        }\n        else if (i < second_smallest)\n        {\n            second_smallest = i;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5j3jiogv.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp5j3jiogv.d(27): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5j3jiogv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            second_min = min;\n            min = e;\n        }\n        else if (e < second_min)\n        {\n            second_min = e;\n        }\n    }\n    if (second_min == min)\n        return Nullable!(long)();\n    return Nullable!(long)(second_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptskwynha.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455af1]\n??:? void tmptskwynha.__unittest_L32_C1() [0x4418ba]\n??:? void tmptskwynha.__modtest() [0x4535fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45511e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550f5]\n??:? runModuleUnitTests [0x45e8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            next_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < next_smallest)\n        {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ph5hqj9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp6ph5hqj9.__unittest_L30_C1() [0x44187e]\n??:? void tmp6ph5hqj9.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2)\n    {\n        min1 = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min1)\n        {\n            min2 = min1;\n            min1 = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9zl3366z.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x455b29]\n??:? void tmp9zl3366z.__unittest_L34_C1() [0x441a16]\n??:? void tmp9zl3366z.__modtest() [0x453634]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455156]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a36d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45512d]\n??:? runModuleUnitTests [0x45e901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456ab4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long smallest = lst[0];\n    long second_smallest = long.max;\n    foreach(i; lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuiuwdu72.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmpuiuwdu72.__unittest_L32_C1() [0x441872]\n??:? void tmpuiuwdu72.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long smallest = lst[0];\n    long second_smallest = long.max;\n    foreach(i; lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuiuwdu72.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmpuiuwdu72.__unittest_L32_C1() [0x441872]\n??:? void tmpuiuwdu72.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            second_min = min;\n            min = i;\n        }\n        else if (i < second_min) \n        {\n            second_min = i;\n        }\n    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi1kr0myw.d(30): Error: cannot implicitly convert expression `second_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1kr0myw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptenghwup.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmptenghwup.__unittest_L30_C1() [0x44187e]\n??:? void tmptenghwup.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long smallest = lst[0];\n    long second_smallest = long.max;\n    foreach(i; lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuiuwdu72.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmpuiuwdu72.__unittest_L32_C1() [0x441872]\n??:? void tmpuiuwdu72.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptenghwup.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmptenghwup.__unittest_L30_C1() [0x44187e]\n??:? void tmptenghwup.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2) \n    {\n        swap(min, min2);\n    }\n    foreach (i, v; lst[2..$]) \n    {\n        if (v < min) \n        {\n            min2 = min;\n            min = v;\n        }\n        else if (v < min2) \n        {\n            min2 = v;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6l0ehtsz.d(20): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6l0ehtsz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, element; lst) \n    {\n        if (element < smallest) \n        {\n            second_smallest = smallest;\n            smallest = element;\n        }\n        else if (element < second_smallest) \n        {\n            second_smallest = element;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdwwpu39x.d(30): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwwpu39x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$]) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        } \n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_laznupc.d(14): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp_laznupc.d(35): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_laznupc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n            next_min = min;\n            min = e;\n        }\n        else if (e < next_min) \n        {\n            next_min = e;\n        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpogb1oo3i.d(30): Error: cannot implicitly convert expression `next_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpogb1oo3i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2) \n    {\n        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$]) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa8skmu96.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x455b09]\n??:? void tmpa8skmu96.__unittest_L37_C1() [0x4419fa]\n??:? void tmpa8skmu96.__modtest() [0x453618]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455136]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a34d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45510d]\n??:? runModuleUnitTests [0x45e8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a94]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppg1isvhz.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppg1isvhz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return result;\n    }\n    else\n    {\n        result.assign(min2);\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjmemagnl.d(33): Error: no property `assign` for type `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmemagnl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx4qrxv53.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpx4qrxv53.__unittest_L29_C1() [0x44187e]\n??:? void tmpx4qrxv53.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long next_min = lst[1];\n    if (next_min < min)\n    {\n        min = next_min;\n        next_min = lst[0];\n    }\n    foreach (i, v; lst[2..$])\n    {\n        if (v < min)\n        {\n            next_min = min;\n            min = v;\n        }\n        else if (v < next_min)\n        {\n            next_min = v;\n        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd6dpnh6p.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpd6dpnh6p.d(33): Error: cannot implicitly convert expression `next_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6dpnh6p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = null;\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 != min)\n    {\n        result = min2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv3z5s1mu.d(12): Error: `inout` method `std.typecons.Nullable!long.Nullable.this` is not callable using a mutable object\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3z5s1mu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            second_min = min;\n            min = i;\n        }\n        else if (i < second_min)\n        {\n            second_min = i;\n        }\n    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdi1nwcgw.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpdi1nwcgw.d(28): Error: cannot implicitly convert expression `second_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdi1nwcgw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long next_min = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < min) \n        {\n            next_min = min;\n            min = e;\n        }\n        else if (e < next_min) \n        {\n            next_min = e;\n        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpogb1oo3i.d(30): Error: cannot implicitly convert expression `next_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpogb1oo3i.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2) \n    {\n        min1 = lst[1];\n        min2 = lst[0];\n    }\n    foreach (i, x; lst[2..$]) \n    {\n        if (x < min1) \n        {\n            min2 = min1;\n            min1 = x;\n        }\n        else if (x < min2) \n        {\n            min2 = x;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxc_tn1rm.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x455b29]\n??:? void tmpxc_tn1rm.__unittest_L37_C1() [0x441a16]\n??:? void tmpxc_tn1rm.__modtest() [0x453634]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455156]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a36d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45512d]\n??:? runModuleUnitTests [0x45e901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456ab4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    if (smallest > second_smallest)\n    {\n        swap(smallest, second_smallest);\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcokoscsm.d(18): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcokoscsm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long smallest = lst[0];\n    long second_smallest = long.max;\n    foreach(i; lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuiuwdu72.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmpuiuwdu72.__unittest_L32_C1() [0x441872]\n??:? void tmpuiuwdu72.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long next_min = lst[1];\n    if (min > next_min)\n    {\n        min = next_min;\n        next_min = lst[0];\n    }\n    foreach (i; 2..lst.length)\n    {\n        if (lst[i] < min)\n        {\n            next_min = min;\n            min = lst[i];\n        }\n        else if (lst[i] < next_min)\n        {\n            next_min = lst[i];\n        }\n    }\n    return Nullable!(long)(next_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxrj_8jkv.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x455b71]\n??:? void tmpxrj_8jkv.__unittest_L35_C1() [0x441a5e]\n??:? void tmpxrj_8jkv.__modtest() [0x45367c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45519e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a3b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a444]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a341]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455175]\n??:? runModuleUnitTests [0x45e949]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456afc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    if (smallest > second_smallest)\n    {\n        long tmp = smallest;\n        smallest = second_smallest;\n        second_smallest = tmp;\n    }\n    foreach (i, v; lst[2..$])\n    {\n        if (v < smallest)\n        {\n            second_smallest = smallest;\n            smallest = v;\n        }\n        else if (v < second_smallest)\n        {\n            second_smallest = v;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpig8bu03c.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x455af1]\n??:? void tmpig8bu03c.__unittest_L36_C1() [0x4419de]\n??:? void tmpig8bu03c.__modtest() [0x4535fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45511e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550f5]\n??:? runModuleUnitTests [0x45e8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptenghwup.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmptenghwup.__unittest_L30_C1() [0x44187e]\n??:? void tmptenghwup.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    if (smallest > next_smallest)\n    {\n        swap(smallest, next_smallest);\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n            next_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < next_smallest)\n        {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnyeeor_m.d(17): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnyeeor_m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return result;\n    }\n    else\n    {\n        result.assign(min2);\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjmemagnl.d(33): Error: no property `assign` for type `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmemagnl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            second_min = min;\n            min = i;\n        }\n        else if (i < second_min)\n        {\n            second_min = i;\n        }\n    }\n    return Nullable!(long)(second_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfoxt8wu9.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpfoxt8wu9.__unittest_L29_C1() [0x44187e]\n??:? void tmpfoxt8wu9.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n        {\n            min2 = min;\n            min = v;\n        }\n        else if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjuvls6fd.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpjuvls6fd.__unittest_L30_C1() [0x44187e]\n??:? void tmpjuvls6fd.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for (int i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < smallest)\n        {\n            second_smallest = smallest;\n            smallest = lst[i];\n        }\n        else if (lst[i] < second_smallest)\n        {\n            second_smallest = lst[i];\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9eaqkvhy.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x455b29]\n??:? void tmp9eaqkvhy.__unittest_L30_C1() [0x441a16]\n??:? void tmp9eaqkvhy.__modtest() [0x453634]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455156]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a36d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45512d]\n??:? runModuleUnitTests [0x45e901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456ab4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n        {\n            min2 = min;\n            min = v;\n        }\n        else if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjuvls6fd.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpjuvls6fd.__unittest_L30_C1() [0x44187e]\n??:? void tmpjuvls6fd.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpduo6xxqu.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpduo6xxqu.d(28): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpduo6xxqu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, val; lst)\n    {\n        if (val < smallest)\n        {\n            next_smallest = smallest;\n            smallest = val;\n        }\n        else if (val < next_smallest)\n        {\n            next_smallest = val;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpelqklauc.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpelqklauc.__unittest_L30_C1() [0x44187e]\n??:? void tmpelqklauc.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            next_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < next_smallest)\n        {\n            next_smallest = e;\n        }\n    }\n    return next_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp67jqc1ka.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp67jqc1ka.d(28): Error: cannot implicitly convert expression `next_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp67jqc1ka.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long second = lst[1];\n    if (min > second) \n    {\n        min = second;\n        second = lst[0];\n    }\n    foreach (i; lst[2..$]) \n    {\n        if (i < min) \n        {\n            second = min;\n            min = i;\n        }\n        else if (i < second) \n        {\n            second = i;\n        }\n    }\n    return Nullable!(long)(second);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7u0p5d_c.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x455b09]\n??:? void tmp7u0p5d_c.__unittest_L37_C1() [0x4419fa]\n??:? void tmp7u0p5d_c.__modtest() [0x453618]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455136]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a34d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45510d]\n??:? runModuleUnitTests [0x45e8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a94]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = long.max;\n    long min2 = long.max;\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 != long.max)\n    {\n        result = min2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpazorqcpt.d(54): unittest failure\n----------------\n??:? _d_unittestp [0x455ad9]\n??:? void tmpazorqcpt.__unittest_L33_C1() [0x4419ba]\n??:? void tmpazorqcpt.__modtest() [0x4535e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eadb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455106]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a31d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550dd]\n??:? runModuleUnitTests [0x45e8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a64]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long next_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            next_min = min;\n            min = e;\n        }\n        else if (e < next_min)\n        {\n            next_min = e;\n        }\n    }\n    return next_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0i4b0df4.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp0i4b0df4.d(28): Error: cannot implicitly convert expression `next_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0i4b0df4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    else\n    {\n        long min = lst[0];\n        long min2 = lst[1];\n        foreach (i; lst)\n        {\n            if (i < min)\n            {\n                min2 = min;\n                min = i;\n            }\n            else if (i < min2)\n                min2 = i;\n        }\n        return Nullable!(long)(min2);\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplc4g63rx.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmplc4g63rx.__unittest_L31_C1() [0x44187e]\n??:? void tmplc4g63rx.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3uy9_r2y.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp3uy9_r2y.d(27): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uy9_r2y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppg1isvhz.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppg1isvhz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4f3y3jpv.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp4f3y3jpv.__unittest_L30_C1() [0x44187e]\n??:? void tmp4f3y3jpv.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long next_min = long.max;\n    foreach(idx, val; lst)\n    {\n        if(val < min)\n        {\n            next_min = min;\n            min = val;\n        }\n        else if(val < next_min)\n        {\n            next_min = val;\n        }\n    }\n    if(next_min == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(next_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzr3wwlas.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmpzr3wwlas.__unittest_L32_C1() [0x441872]\n??:? void tmpzr3wwlas.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    if (min2 != min) \n    {\n        result = min2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuhvf2egw.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x455b01]\n??:? void tmpuhvf2egw.__unittest_L33_C1() [0x4418be]\n??:? void tmpuhvf2egw.__modtest() [0x453610]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45512e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455105]\n??:? runModuleUnitTests [0x45e8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    if (smallest > second_smallest)\n    {\n        swap(smallest, second_smallest);\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsy9te8_s.d(18): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\n/tmp/tmpsy9te8_s.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpsy9te8_s.d(32): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsy9te8_s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long sec_min = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            sec_min = min;\n            min = i;\n        }\n        else if (i < sec_min)\n        {\n            sec_min = i;\n        }\n    }\n    return sec_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprwzfae77.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmprwzfae77.d(27): Error: cannot implicitly convert expression `sec_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprwzfae77.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_a6t4o2_.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp_a6t4o2_.__unittest_L29_C1() [0x44187e]\n??:? void tmp_a6t4o2_.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            second_min = min;\n            min = i;\n        } \n        else if (i < second_min) \n        {\n            second_min = i;\n        }\n    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx72g2nao.d(30): Error: cannot implicitly convert expression `second_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx72g2nao.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < smallest) \n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest) \n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcsutomfz.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpcsutomfz.__unittest_L32_C1() [0x44187e]\n??:? void tmpcsutomfz.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    \n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpowf_z1e2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpowf_z1e2.__unittest_L31_C1() [0x44187e]\n??:? void tmpowf_z1e2.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return result;\n    }\n    else\n    {\n        result.assign(min2);\n        return result;\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjmemagnl.d(33): Error: no property `assign` for type `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmemagnl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164107
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    auto min = lst[0];\n    auto min2 = long.max;\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpepstd02e.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmpepstd02e.__unittest_L32_C1() [0x441872]\n??:? void tmpepstd02e.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            next_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < next_smallest)\n        {\n            next_smallest = e;\n        }\n    }\n    return next_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp67jqc1ka.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp67jqc1ka.d(28): Error: cannot implicitly convert expression `next_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp67jqc1ka.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = Nullable!(long).init;\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 != min)\n    {\n        result = min2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpswi054hy.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x455b01]\n??:? void tmpswi054hy.__unittest_L33_C1() [0x4418be]\n??:? void tmpswi054hy.__modtest() [0x453610]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45512e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a345]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2d1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x455105]\n??:? runModuleUnitTests [0x45e8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvcj90dzk.d(30): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcj90dzk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    else \n    {\n        long min = lst[0];\n        long min2 = lst[1];\n        foreach (i; lst) \n        {\n            if (i < min) \n            {\n                min2 = min;\n                min = i;\n            }\n            else if (i < min2) \n            {\n                min2 = i;\n            }\n        }\n        return Nullable!(long)(min2);\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjoxugs6g.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpjoxugs6g.__unittest_L35_C1() [0x44187e]\n??:? void tmpjoxugs6g.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < smallest) \n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest) \n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdq_4_7aj.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpdq_4_7aj.__unittest_L29_C1() [0x44187e]\n??:? void tmpdq_4_7aj.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$])\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt_i41sqi.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x455b09]\n??:? void tmpt_i41sqi.__unittest_L35_C1() [0x4419fa]\n??:? void tmpt_i41sqi.__modtest() [0x453618]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455136]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a34d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45510d]\n??:? runModuleUnitTests [0x45e8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a94]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppg1isvhz.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppg1isvhz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$])\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz2r870qp.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpz2r870qp.d(33): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2r870qp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    Nullable!(long) result = Nullable!(long).init;\n    if (lst.length < 2)\n        return result;\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    result.set(min2);\n    return result;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmm17t1uy.d(34): Error: no property `set` for type `Nullable!long`, did you mean `std.typecons.Nullable!long.Nullable.get`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmm17t1uy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return null;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiuza5lug.d(14): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpiuza5lug.d(30): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiuza5lug.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164109
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvcj90dzk.d(30): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvcj90dzk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    if (smallest > next_smallest)\n    {\n        long tmp = smallest;\n        smallest = next_smallest;\n        next_smallest = tmp;\n    }\n    foreach (i, x; lst[2..$])\n    {\n        if (x < smallest)\n        {\n            next_smallest = smallest;\n            smallest = x;\n        }\n        else if (x < next_smallest)\n        {\n            next_smallest = x;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmparqtb27a.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x455af1]\n??:? void tmparqtb27a.__unittest_L36_C1() [0x4419de]\n??:? void tmparqtb27a.__modtest() [0x4535fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x45511e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a335]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550f5]\n??:? runModuleUnitTests [0x45e8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            next_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < next_smallest)\n        {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ph5hqj9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp6ph5hqj9.__unittest_L30_C1() [0x44187e]\n??:? void tmp6ph5hqj9.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    if (smallest > next_smallest) \n    {\n        smallest = lst[1];\n        next_smallest = lst[0];\n    }\n    foreach (i, v; lst[2..$]) \n    {\n        if (v < smallest) \n        {\n            next_smallest = smallest;\n            smallest = v;\n        }\n        else if (v < next_smallest) \n        {\n            next_smallest = v;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa2w78894.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x455b29]\n??:? void tmpa2w78894.__unittest_L34_C1() [0x441a16]\n??:? void tmpa2w78894.__modtest() [0x453634]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455156]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a36d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45512d]\n??:? runModuleUnitTests [0x45e901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456ab4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long next_min = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n        {\n            next_min = min;\n            min = v;\n        }\n        else if (v < next_min)\n        {\n            next_min = v;\n        }\n    }\n    return Nullable!(long)(next_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphb53bphh.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmphb53bphh.__unittest_L30_C1() [0x44187e]\n??:? void tmphb53bphh.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            second_min = min;\n            min = e;\n        }\n        else if (e < second_min)\n        {\n            second_min = e;\n        }\n    }\n    return Nullable!(long)(second_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnkeh1nnu.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpnkeh1nnu.__unittest_L30_C1() [0x44187e]\n??:? void tmpnkeh1nnu.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min > min2)\n    {\n        min = min2;\n        min2 = lst[0];\n    }\n    foreach (i; lst[2..$])\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt_i41sqi.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x455b09]\n??:? void tmpt_i41sqi.__unittest_L35_C1() [0x4419fa]\n??:? void tmpt_i41sqi.__modtest() [0x453618]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455136]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a34d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2d9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45510d]\n??:? runModuleUnitTests [0x45e8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a94]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    \n    long min = lst[0];\n    long min2 = lst[1];\n    \n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    \n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnj5km7w2.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpnj5km7w2.d(31): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnj5km7w2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i; lst)\n    {\n        if (i < smallest)\n        {\n            second_smallest = smallest;\n            smallest = i;\n        }\n        else if (i < second_smallest)\n        {\n            second_smallest = i;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5j3jiogv.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp5j3jiogv.d(27): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5j3jiogv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long next_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            next_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < next_smallest)\n        {\n            next_smallest = e;\n        }\n    }\n    return Nullable!(long)(next_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ph5hqj9.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp6ph5hqj9.__unittest_L30_C1() [0x44187e]\n??:? void tmp6ph5hqj9.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        } \n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp89tgkmcl.d(30): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89tgkmcl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx4qrxv53.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpx4qrxv53.__unittest_L29_C1() [0x44187e]\n??:? void tmpx4qrxv53.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min1 = long.max;\n    long min2 = long.max;\n    foreach(e; lst)\n    {\n        if(e < min1)\n        {\n            min2 = min1;\n            min1 = e;\n        }\n        else if(e < min2)\n        {\n            min2 = e;\n        }\n    }\n    if(min2 == long.max)\n    {\n        return Nullable!(long)();\n    }\n    else\n    {\n        return Nullable!(long)(min2);\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9yhza_7b.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x455a89]\n??:? void tmp9yhza_7b.__unittest_L35_C1() [0x441976]\n??:? void tmp9yhza_7b.__modtest() [0x453594]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45ea8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550b6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a35c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a259]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45508d]\n??:? runModuleUnitTests [0x45e861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a14]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long first = lst[0];\n    long second = lst[1];\n    if (first > second) \n    {\n        first = lst[1];\n        second = lst[0];\n    }\n    foreach (i; 2..lst.length) \n    {\n        if (lst[i] < first) \n        {\n            second = first;\n            first = lst[i];\n        } \n        else if (lst[i] < second) \n        {\n            second = lst[i];\n        }\n    }\n    return second;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr9uxzskh.d(35): Error: cannot implicitly convert expression `second` of type `long` to `Nullable!long`\n",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, val; lst)\n    {\n        if (val < min)\n        {\n            min2 = min;\n            min = val;\n        }\n        else if (val < min2)\n        {\n            min2 = val;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_tdipa4u.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp_tdipa4u.__unittest_L30_C1() [0x44187e]\n??:? void tmp_tdipa4u.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < min)\n        {\n            min2 = min;\n            min = e;\n        }\n        else if (e < min2)\n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4f3y3jpv.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp4f3y3jpv.__unittest_L30_C1() [0x44187e]\n??:? void tmp4f3y3jpv.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    if(min2 == min)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzaqk8elk.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab9]\n??:? void tmpzaqk8elk.__unittest_L32_C1() [0x441886]\n??:? void tmpzaqk8elk.__modtest() [0x4535c8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eabb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a38c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a289]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550bd]\n??:? runModuleUnitTests [0x45e891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a44]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long second_min = lst[1];\n    for (size_t i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < min)\n        {\n            second_min = min;\n            min = lst[i];\n        }\n        else if (lst[i] < second_min)\n        {\n            second_min = lst[i];\n        }\n    }\n    if (second_min == min)\n        return Nullable!(long)();\n    return Nullable!(long)(second_min);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, elem; lst)\n    {\n        if (elem < smallest)\n        {\n            second_smallest = smallest;\n            smallest = elem;\n        }\n        else if (elem < second_smallest)\n        {\n            second_smallest = elem;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpye3pe9y8.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpye3pe9y8.__unittest_L30_C1() [0x44187e]\n??:? void tmpye3pe9y8.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long sec_min = long.max;\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            sec_min = min;\n            min = i;\n        }\n        else if(i < sec_min)\n        {\n            sec_min = i;\n        }\n    }\n    if(sec_min == long.max)\n    {\n        return Nullable!(long)();\n    }\n    else\n    {\n        return Nullable!(long)(sec_min);\n    }\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0wqm59qv.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmp0wqm59qv.__unittest_L35_C1() [0x441872]\n??:? void tmp0wqm59qv.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i, v; lst)\n    {\n        if (v < min)\n        {\n            min2 = min;\n            min = v;\n        }\n        else if (v < min2)\n        {\n            min2 = v;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp81gykp00.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp81gykp00.__unittest_L29_C1() [0x44187e]\n??:? void tmp81gykp00.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return Nullable!(long)();\n    long min1 = lst[0];\n    long min2 = lst[1];\n    if (min1 > min2) swap(min1, min2);\n    foreach (i, e; lst[2..$]) \n    {\n        if (e < min1) \n        {\n            min2 = min1;\n            min1 = e;\n        }\n        else if (e < min2) \n        {\n            min2 = e;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsc4_5nxl.d(15): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsc4_5nxl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long smallest = lst[0];\n    long secondSmallest = lst[1];\n    if (smallest > secondSmallest)\n    {\n        swap(smallest, secondSmallest);\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n            secondSmallest = smallest;\n            smallest = e;\n        }\n        else if (e < secondSmallest)\n        {\n            secondSmallest = e;\n        }\n    }\n    return secondSmallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa9_cbkb2.d(18): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\n/tmp/tmpa9_cbkb2.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpa9_cbkb2.d(32): Error: cannot implicitly convert expression `secondSmallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9_cbkb2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164110
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3uy9_r2y.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp3uy9_r2y.d(27): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uy9_r2y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long smallest = lst[0];\n    long second_smallest = long.max;\n    foreach(i; lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuiuwdu72.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmpuiuwdu72.__unittest_L32_C1() [0x441872]\n??:? void tmpuiuwdu72.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long second = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            second = min;\n            min = i;\n        }\n        else if (i < second)\n        {\n            second = i;\n        }\n    }\n    return second;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxnrbjkux.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpxnrbjkux.d(28): Error: cannot implicitly convert expression `second` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxnrbjkux.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long secondSmallest = lst[1];\n    if (smallest > secondSmallest)\n    {\n        swap(smallest, secondSmallest);\n    }\n    foreach (i, e; lst[2..$])\n    {\n        if (e < smallest)\n        {\n            secondSmallest = smallest;\n            smallest = e;\n        }\n        else if (e < secondSmallest)\n        {\n            secondSmallest = e;\n        }\n    }\n    return Nullable!(long)(secondSmallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp00ame_9k.d(18): Error: undefined identifier `swap`, did you mean template `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp00ame_9k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        } \n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6wkffi3s.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp6wkffi3s.__unittest_L32_C1() [0x44187e]\n??:? void tmp6wkffi3s.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164112
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst)\n    {\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptenghwup.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmptenghwup.__unittest_L30_C1() [0x44187e]\n??:? void tmptenghwup.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164106
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, v; lst) \n    {\n        if (v < smallest) \n        {\n            second_smallest = smallest;\n            smallest = v;\n        }\n        else if (v < second_smallest) \n        {\n            second_smallest = v;\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp49yv5ltk.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmp49yv5ltk.__unittest_L30_C1() [0x44187e]\n??:? void tmp49yv5ltk.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164112
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst) \n    {\n        if (i < min) \n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2) \n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppg1isvhz.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppg1isvhz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    \n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    \n    foreach (i, e; lst)\n    {\n        if (i < 2)\n            continue;\n        if (e < smallest)\n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest)\n        {\n            second_smallest = e;\n        }\n    }\n    \n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpes8se10g.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmpes8se10g.d(33): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpes8se10g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3uy9_r2y.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp3uy9_r2y.d(27): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uy9_r2y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long sec = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            sec = min;\n            min = i;\n        }\n        else if (i < sec)\n        {\n            sec = i;\n        }\n    }\n    return Nullable!(long)(sec);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpc55nauls.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpc55nauls.__unittest_L30_C1() [0x44187e]\n??:? void tmpc55nauls.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164112
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for (long i = 2; i < lst.length; i++) \n    {\n        if (lst[i] < smallest) \n        {\n            second_smallest = smallest;\n            smallest = lst[i];\n        }\n        else if (lst[i] < second_smallest) \n        {\n            second_smallest = lst[i];\n        }\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx8ooyvin.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x455b29]\n??:? void tmpx8ooyvin.__unittest_L30_C1() [0x44197b]\n??:? void tmpx8ooyvin.__modtest() [0x453638]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x455156]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a36d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a3fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a2f9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x45512d]\n??:? runModuleUnitTests [0x45e901]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456ab4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164112
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3uy9_r2y.d(12): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmp3uy9_r2y.d(27): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3uy9_r2y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    foreach (i, e; lst) \n    {\n        if (e < smallest) \n        {\n            second_smallest = smallest;\n            smallest = e;\n        }\n        else if (e < second_smallest) \n        {\n            second_smallest = e;\n        }\n    }\n    return second_smallest;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqwgkhyln.d(30): Error: cannot implicitly convert expression `second_smallest` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqwgkhyln.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return null;\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplv4qj4xb.d(13): Error: cannot implicitly convert expression `null` of type `typeof(null)` to `Nullable!long`\n/tmp/tmplv4qj4xb.d(28): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplv4qj4xb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_hei_aqi.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hei_aqi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long smallest = lst[0];\n    long second_smallest = long.max;\n    foreach(i; lst)\n    {\n        if(i < smallest)\n        {\n            second_smallest = smallest;\n            smallest = i;\n        }\n        else if(i < second_smallest)\n        {\n            second_smallest = i;\n        }\n    }\n    if(second_smallest == long.max)\n    {\n        return Nullable!(long)();\n    }\n    return Nullable!(long)(second_smallest);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuiuwdu72.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x455aa9]\n??:? void tmpuiuwdu72.__unittest_L32_C1() [0x441872]\n??:? void tmpuiuwdu72.__modtest() [0x4535b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a37c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550ad]\n??:? runModuleUnitTests [0x45e881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a34]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164108
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    long min = lst[0];\n    long second_min = lst[1];\n    foreach (i; lst) \n    {\n        if (i < min) \n        {\n            second_min = min;\n            min = i;\n        }\n        else if (i < second_min) \n        {\n            second_min = i;\n        }\n    }\n    return second_min;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi1kr0myw.d(30): Error: cannot implicitly convert expression `second_min` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi1kr0myw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    long min = lst[0];\n    long min2 = lst[0];\n    foreach(i; lst)\n    {\n        if(i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if(i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return min2;\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_hei_aqi.d(26): Error: cannot implicitly convert expression `min2` of type `long` to `Nullable!long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hei_aqi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164104
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2) \n    {\n        return Nullable!(long).init;\n    }\n    return lst.minElement!((a, b) => a > b);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgghjy2mj.d(16): Error: no property `minElement` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgghjy2mj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164111
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n                    \n*/\nNullable!(long) next_smallest(long[] lst) \n{\n    if (lst.length < 2)\n        return Nullable!(long)();\n    long min = lst[0];\n    long min2 = lst[1];\n    foreach (i; lst)\n    {\n        if (i < min)\n        {\n            min2 = min;\n            min = i;\n        }\n        else if (i < min2)\n        {\n            min2 = i;\n        }\n    }\n    return Nullable!(long)(min2);\n}\nunittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwtimrjsf.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x455ab1]\n??:? void tmpwtimrjsf.__unittest_L30_C1() [0x44187e]\n??:? void tmpwtimrjsf.__modtest() [0x4535c0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45eab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4550de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x45a2f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x45a384]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x45a281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4550b5]\n??:? runModuleUnitTests [0x45e889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x456a3c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164105
    }
  ]
}