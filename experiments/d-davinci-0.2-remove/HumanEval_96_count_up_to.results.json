{
  "language": "d",
  "name": "HumanEval_96_count_up_to",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyyh8qyu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpvyyh8qyu.__unittest_L19_C1() [0x427f08]\n??:? void tmpvyyh8qyu.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i;0..n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoasjb81m.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoasjb81m.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoasjb81m.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        if(isPrime(i))\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8uey155o.d(14): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8uey155o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] res;\n    foreach(i; 0 .. n)\n        res ~= i;\n    return res;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdve2ukk8.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpdve2ukk8.__unittest_L16_C1() [0x427ef0]\n??:? void tmpdve2ukk8.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[];\n    for (long i = 0; i < n; i++) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp55olub0.d(11): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp55olub0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgh8rjesd.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpgh8rjesd.__unittest_L18_C1() [0x427ef0]\n??:? void tmpgh8rjesd.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgh8rjesd.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpgh8rjesd.__unittest_L18_C1() [0x427ef0]\n??:? void tmpgh8rjesd.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (int i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9g24cly7.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmp9g24cly7.__unittest_L18_C1() [0x427ef0]\n??:? void tmp9g24cly7.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyyh8qyu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpvyyh8qyu.__unittest_L19_C1() [0x427f08]\n??:? void tmpvyyh8qyu.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyyh8qyu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpvyyh8qyu.__unittest_L19_C1() [0x427f08]\n??:? void tmpvyyh8qyu.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] ret;\n    foreach(i; 0 .. n)\n        ret ~= i;\n    return ret;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfktx6zqz.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpfktx6zqz.__unittest_L16_C1() [0x427ef0]\n??:? void tmpfktx6zqz.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    foreach(i; 0 .. n) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoz6pvfff.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpoz6pvfff.__unittest_L18_C1() [0x427efc]\n??:? void tmpoz6pvfff.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430905]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430db4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430891]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]\n??:? runModuleUnitTests [0x42c5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n        result[i] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjsuomo21.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpjsuomo21.__unittest_L16_C1() [0x427ef0]\n??:? void tmpjsuomo21.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgh8rjesd.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpgh8rjesd.__unittest_L18_C1() [0x427ef0]\n??:? void tmpgh8rjesd.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        a[i] = i;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcexwmssz.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpcexwmssz.__unittest_L18_C1() [0x427ef0]\n??:? void tmpcexwmssz.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgpermsh.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpdgpermsh.__unittest_L18_C1() [0x427efc]\n??:? void tmpdgpermsh.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430905]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430db4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430891]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]\n??:? runModuleUnitTests [0x42c5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyyh8qyu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpvyyh8qyu.__unittest_L19_C1() [0x427f08]\n??:? void tmpvyyh8qyu.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    result.length = n;\n    foreach(i; 0..n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qph8tcp.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp8qph8tcp.__unittest_L19_C1() [0x427f08]\n??:? void tmp8qph8tcp.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:? __libc_start_main [0xbf022554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgh8rjesd.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpgh8rjesd.__unittest_L18_C1() [0x427ef0]\n??:? void tmpgh8rjesd.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgh8rjesd.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpgh8rjesd.__unittest_L18_C1() [0x427ef0]\n??:? void tmpgh8rjesd.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    result.length = n;\n    foreach(i; 0..n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qph8tcp.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp8qph8tcp.__unittest_L19_C1() [0x427f08]\n??:? void tmp8qph8tcp.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:? __libc_start_main [0xbf022554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n        result ~= i;\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr5i4oqj9.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpr5i4oqj9.__unittest_L16_C1() [0x427ef0]\n??:? void tmpr5i4oqj9.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n        result ~= i;\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr5i4oqj9.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpr5i4oqj9.__unittest_L16_C1() [0x427ef0]\n??:? void tmpr5i4oqj9.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgh8rjesd.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpgh8rjesd.__unittest_L18_C1() [0x427ef0]\n??:? void tmpgh8rjesd.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n        result[i] = i;\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjsuomo21.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpjsuomo21.__unittest_L16_C1() [0x427ef0]\n??:? void tmpjsuomo21.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgh8rjesd.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpgh8rjesd.__unittest_L18_C1() [0x427ef0]\n??:? void tmpgh8rjesd.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    result.length = n;\n    foreach(i; 0..n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qph8tcp.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp8qph8tcp.__unittest_L19_C1() [0x427f08]\n??:? void tmp8qph8tcp.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:? __libc_start_main [0xbf022554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    result.length = n;\n    foreach(i; 0..n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qph8tcp.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp8qph8tcp.__unittest_L19_C1() [0x427f08]\n??:? void tmp8qph8tcp.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:? __libc_start_main [0xbf022554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] a;\n    a.length = n;\n    foreach(i; 0..n)\n    {\n        a[i] = i;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp93lqjtc5.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp93lqjtc5.__unittest_L19_C1() [0x427f08]\n??:? void tmp93lqjtc5.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyyh8qyu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpvyyh8qyu.__unittest_L19_C1() [0x427f08]\n??:? void tmpvyyh8qyu.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    foreach(i; 0 .. n)\n    {\n        arr ~= i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppfu2chpo.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmppfu2chpo.__unittest_L18_C1() [0x427ef0]\n??:? void tmppfu2chpo.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyyh8qyu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpvyyh8qyu.__unittest_L19_C1() [0x427f08]\n??:? void tmpvyyh8qyu.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgpermsh.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpdgpermsh.__unittest_L18_C1() [0x427efc]\n??:? void tmpdgpermsh.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430905]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430db4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430891]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]\n??:? runModuleUnitTests [0x42c5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgpermsh.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpdgpermsh.__unittest_L18_C1() [0x427efc]\n??:? void tmpdgpermsh.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430905]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430db4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430891]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]\n??:? runModuleUnitTests [0x42c5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    result.length = n;\n    foreach(i; 0..n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qph8tcp.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp8qph8tcp.__unittest_L19_C1() [0x427f08]\n??:? void tmp8qph8tcp.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:? __libc_start_main [0xbf022554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgpermsh.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpdgpermsh.__unittest_L18_C1() [0x427efc]\n??:? void tmpdgpermsh.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430905]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430db4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430891]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]\n??:? runModuleUnitTests [0x42c5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    result.length = n;\n    foreach(i; 0..n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qph8tcp.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp8qph8tcp.__unittest_L19_C1() [0x427f08]\n??:? void tmp8qph8tcp.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:? __libc_start_main [0xbf022554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nlong[] count_up_to_prime(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        if(isPrime(i))\n        {\n            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8rvngsur.d(23): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8rvngsur.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    result.length = n;\n    foreach(i; 0..n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qph8tcp.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp8qph8tcp.__unittest_L19_C1() [0x427f08]\n??:? void tmp8qph8tcp.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:? __libc_start_main [0xbf022554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n        result ~= i;\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr5i4oqj9.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpr5i4oqj9.__unittest_L16_C1() [0x427ef0]\n??:? void tmpr5i4oqj9.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    foreach(i; 0 .. n)\n    {\n        arr ~= i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppfu2chpo.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmppfu2chpo.__unittest_L18_C1() [0x427ef0]\n??:? void tmppfu2chpo.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    result.length = n;\n    foreach(i; 0..n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qph8tcp.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp8qph8tcp.__unittest_L19_C1() [0x427f08]\n??:? void tmp8qph8tcp.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:? __libc_start_main [0xbf022554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgh8rjesd.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpgh8rjesd.__unittest_L18_C1() [0x427ef0]\n??:? void tmpgh8rjesd.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] a;\n    a.length = n;\n    foreach(i; 0..n)\n    {\n        a[i] = i;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp93lqjtc5.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp93lqjtc5.__unittest_L19_C1() [0x427f08]\n??:? void tmp93lqjtc5.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyyh8qyu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpvyyh8qyu.__unittest_L19_C1() [0x427f08]\n??:? void tmpvyyh8qyu.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    result.length = n;\n    foreach(i; 0..n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8qph8tcp.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmp8qph8tcp.__unittest_L19_C1() [0x427f08]\n??:? void tmp8qph8tcp.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:? __libc_start_main [0xbf022554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdgpermsh.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpdgpermsh.__unittest_L18_C1() [0x427efc]\n??:? void tmpdgpermsh.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430905]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430db4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430891]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]\n??:? runModuleUnitTests [0x42c5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyyh8qyu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpvyyh8qyu.__unittest_L19_C1() [0x427f08]\n??:? void tmpvyyh8qyu.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    long i;\n    arr = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprykhseto.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmprykhseto.__unittest_L20_C1() [0x427f08]\n??:? void tmprykhseto.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b682]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43090d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430dbc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430899]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b659]\n??:? runModuleUnitTests [0x42c5c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n        arr[i] = i;\n    }\n    return arr;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyyh8qyu.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x428735]\n??:? void tmpvyyh8qyu.__unittest_L19_C1() [0x427f08]\n??:? void tmpvyyh8qyu.__modtest() [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x431b35]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431fe4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431ac1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c6cd]\n??:? runModuleUnitTests [0x42d639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[];\n    for (long i = 0; i < n; i++) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp55olub0.d(11): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp55olub0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    foreach(i; 0 .. n) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoz6pvfff.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpoz6pvfff.__unittest_L18_C1() [0x427efc]\n??:? void tmpoz6pvfff.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430905]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430db4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430891]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]\n??:? runModuleUnitTests [0x42c5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    foreach(i; 0 .. n) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoz6pvfff.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42872d]\n??:? void tmpoz6pvfff.__unittest_L18_C1() [0x427efc]\n??:? void tmpoz6pvfff.__modtest() [0x4284ac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430905]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430db4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430891]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b651]\n??:? runModuleUnitTests [0x42c5bd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428bf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        result[i] = i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoet8ibmw.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpoet8ibmw.__unittest_L18_C1() [0x427ef0]\n??:? void tmpoet8ibmw.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428be0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result = new long[];\n    for (long i = 0; i < n; i++)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbdsmtl8g.d(11): Error: new can only create structs, dynamic arrays or class objects, not `long[]`'s\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdsmtl8g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] a;\n    foreach(i; 0 .. n)\n    {\n        a ~= i;\n    }\n    return a;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprrymz3ip.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmprrymz3ip.__unittest_L18_C1() [0x427ef0]\n??:? void tmprrymz3ip.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n)\n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbzr7lith.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpbzr7lith.__unittest_L18_C1() [0x427ef0]\n??:? void tmpbzr7lith.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n                            \n*/\nlong[] count_up_to(long n) \n{\n    long[] result;\n    foreach(i; 0 .. n) \n    {\n        result ~= i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo3wunnah.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x42871d]\n??:? void tmpo3wunnah.__unittest_L18_C1() [0x427ef0]\n??:? void tmpo3wunnah.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d0f3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42bf86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4309d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430e88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430965]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf5d]\n??:? runModuleUnitTests [0x42cec9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428b6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164394
    }
  ]
}