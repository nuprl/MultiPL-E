language: d
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\n/*\n    You're\
    \ given a list of integers. You should find the sum of the integers with even\
    \ indexes (0th, 2nd, 4th...).\n    Then multiply this summed number and the final\
    \ element of the list together. Don't forget that the first element\n    has an\
    \ index of 0.\n    For an empty list, the result will always be 0 (zero).\n*/\n\
    unittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([]) ==\
    \ false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations) \n    {\n        balance += operation;\n\
    \        if (balance < 0) \n        {\n            return true;\n        }\n \
    \   }\n    return false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n\
    \    assert(candidate([]) == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L,\
    \ -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n  \
    \  assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L,\
    \ -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\n/*\n    You're\
    \ given a list of deposit and withdrawal operations on a bank account that starts\
    \ with\n    zero balance. Your task is to detect if at any point the balance of\
    \ account fallls below zero, and\n    at that point function should return True.\
    \ Otherwise it should return False.\n            \n*/\nunittest\n{\n    alias\
    \ candidate = below_zero;\n\n    assert(candidate([]) == false);\n    assert(candidate([1L,\
    \ 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n\
    \    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L,\
    \ -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations) \n    {\n        balance += operation;\n\
    \        if (balance < 0) \n        {\n            return true;\n        }\n \
    \   }\n    return false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n\
    \    assert(candidate([]) == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L,\
    \ -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n  \
    \  assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L,\
    \ -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n\
    \    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations) \n    {\n        balance += operation;\n\
    \        if (balance < 0) return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n\
    \    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    for (long i = 0; i < operations.length; i++) \n    {\n        balance\
    \ += operations[i];\n        if (balance < 0) \n        {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = below_zero;\n\n    assert(candidate([]) == false);\n    assert(candidate([1L,\
    \ 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n\
    \    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L,\
    \ -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n\
    \    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n\
    \    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0) return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = below_zero;\n\n    assert(candidate([]) == false);\n    assert(candidate([1L,\
    \ 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L])\
    \ == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n\
    \    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L,\
    \ -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n\
    \    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(operation; operations)\n    {\n        balance += operation;\n\
    \        if(balance < 0)\n            return true;\n    }\n    return false;\n\
    }\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations) \n    {\n        balance += op;\n        if\
    \ (balance < 0) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([])\
    \ == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n  \
    \  assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L,\
    \ -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L,\
    \ 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L,\
    \ 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164568
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n You're given a list of deposit\
    \ and withdrawal operations on a bank account that starts with\n    zero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\n    at that point function should return True. Otherwise it should return\
    \ False.\n            \n*/\nbool below_zero(long[] operations) \n{\n    long balance\
    \ = 0;\n    foreach(op; operations)\n    {\n        balance += op;\n        if(balance\
    \ < 0)\n            return true;\n    }\n    return false;\n}\nunittest\n{\n \
    \   alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n   \
    \ assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L,\
    \ 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L,\
    \ 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L])\
    \ == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164567
