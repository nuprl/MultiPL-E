name: HumanEval_141_file_name_check
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCreate a function which takes\
  \ a string representing a file's name, and returns\n    'Yes' if the the file's\
  \ name is valid, and returns 'No' otherwise.\n    A file's name is considered to\
  \ be valid if and only if all the following conditions \n    are met:\n    - There\
  \ should not be more than three digits ('0'-'9') in the file's name.\n    - The\
  \ file's name contains exactly one dot '.'\n    - The substring before the dot should\
  \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
  \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
  \ 'exe', 'dll']\n    Examples:\n            \n*/\nstring file_name_check(string\
  \ file_name) \n"
tests: "unittest\n{\n    alias candidate = file_name_check;\n\n    assert(candidate(\"\
  example.txt\") == \"Yes\");\n    assert(candidate(\"1example.dll\") == \"No\");\n\
  \    assert(candidate(\"s1sdf3.asd\") == \"No\");\n    assert(candidate(\"K.dll\"\
  ) == \"Yes\");\n    assert(candidate(\"MY16FILE3.exe\") == \"Yes\");\n    assert(candidate(\"\
  His12FILE94.exe\") == \"No\");\n    assert(candidate(\"_Y.txt\") == \"No\");\n \
  \   assert(candidate(\"?aREYA.exe\") == \"No\");\n    assert(candidate(\"/this_is_valid.dll\"\
  ) == \"No\");\n    assert(candidate(\"this_is_valid.wow\") == \"No\");\n    assert(candidate(\"\
  this_is_valid.txt\") == \"Yes\");\n    assert(candidate(\"this_is_valid.txtexe\"\
  ) == \"No\");\n    assert(candidate(\"#this2_i4s_5valid.ten\") == \"No\");\n   \
  \ assert(candidate(\"@this1_is6_valid.exe\") == \"No\");\n    assert(candidate(\"\
  this_is_12valid.6exe4.txt\") == \"No\");\n    assert(candidate(\"all.exe.txt\")\
  \ == \"No\");\n    assert(candidate(\"I563_No.exe\") == \"Yes\");\n    assert(candidate(\"\
  Is3youfault.txt\") == \"Yes\");\n    assert(candidate(\"no_one#knows.dll\") == \"\
  Yes\");\n    assert(candidate(\"1I563_Yes3.exe\") == \"No\");\n    assert(candidate(\"\
  I563_Yes3.txtt\") == \"No\");\n    assert(candidate(\"final..txt\") == \"No\");\n\
  \    assert(candidate(\"final132\") == \"No\");\n    assert(candidate(\"_f4indsartal132.\"\
  ) == \"No\");\n    assert(candidate(\".txt\") == \"No\");\n    assert(candidate(\"\
  s.\") == \"No\");\n}\nvoid main(){}"
completions: ["{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index =\
    \ 0;\n    int dot_index_2 = 0;\n    string extension = \"\";\n    string file_name_2\
    \ = \"\";\n    string file_name_3 = \"\";\n    string file_name_4 = \"\";\n  \
    \  string file_name_5 = \"\";\n    string file_name_6 = \"\";\n    string file_name_7\
    \ = \"\";\n    string file_name_8 = \"\";\n    string file_name_9 = \"\";\n  \
    \  string file_name_10 = \"\";\n    string file_name_11 = \"\";\n    string file_name_12\
    \ = \"\";\n    string file_name_13 = \"\";\n    string file_name_14 = \"\";\n\
    \    string file_name_15 = \"\";\n    string file_name_16 = \"\";\n    string\
    \ file_name_17 = \"\";\n    string file_name_18 = \"\";\n    string file_name_19\
    \ = \"\";\n    string file_name_20 = \"\";\n    string file_name_21 = \"\";\n\
    \    string file_name_22 = \"\";\n    string file_name_23 = \"\";\n    string\
    \ file_name_24 = \"\";\n    string file_name_25 = \"\";\n    string file_name_26\
    \ = \"\";\n    string file_name_27 = \"\";\n    string file_name_28 = \"\";\n\
    \    string file_name_29 = \"\";\n    string file_name_30 = \"\";\n    string\
    \ file_name_31 = \"\";\n    string file_name_32 = \"\";\n    string file_name_33\
    \ = \"\";\n    string file_name_34 = \"\";\n    string file_name_35 = \"\";\n\
    \    string file_name_36 = \"\";\n    string file_name_37 = \"\";\n    string\
    \ file_name_38 = \"\";\n    string file_name_39 = \"\";\n    string file_name_40\
    \ = \"\";\n    string file_name_41 = \"\";\n    string file_name_42 = \"\";\n\
    \    string file_name_43 = \"\";\n    string file_", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    int len = file_name.length;\n\
    \    int dot_index = file_name.indexOf('.');\n    string ext = file_name.substr(dot_index\
    \ + 1);\n    string name = file_name.substr(0, dot_index);\n    if (len == 0)\n\
    \        return \"No\";\n    foreach (i, c; file_name)\n    {\n        if (c >=\
    \ '0' && c <= '9')\n            count++;\n        if (c == '.')\n            dot_count++;\n\
    \    }\n    if (count > 3 || dot_count != 1)\n        return \"No\";\n    if (name.length\
    \ == 0 || (name[0] < 'a' || name[0] > 'z') && (name[0] < 'A' || name[0] > 'Z'))\n\
    \        return \"No\";\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"\
    dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    string extension = \"\";\n\
    \    string file_name_without_extension = \"\";\n    foreach(i, char c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n          \
    \  dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n        {\n  \
    \          count++;\n        }\n    }\n    if(dot_count != 1)\n    {\n       \
    \ return \"No\";\n    }\n    if(count > 3)\n    {\n        return \"No\";\n  \
    \  }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\n    {\n        if(file_name[0]\
    \ < 'A' || file_name[0] > 'Z')\n        {\n            return \"No\";\n      \
    \  }\n    }\n    file_name_without_extension = file_name[0..dot_index];\n    extension\
    \ = file_name[dot_index + 1..$];\n    if(extension != \"txt\" && extension !=\
    \ \"exe\" && extension != \"dll\")\n    {\n        return \"No\";\n    }\n   \
    \ return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_index = 0;\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_index\
    \ = i;\n            break;\n        }\n    }\n    foreach(i, c; file_name)\n \
    \   {\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n   \
    \     }\n    }\n    if(count > 3)\n    {\n        return \"No\";\n    }\n    if(file_name[dot_index\
    \ + 1 .. $] != \"txt\" && file_name[dot_index + 1 .. $] != \"exe\" && file_name[dot_index\
    \ + 1 .. $] != \"dll\")\n    {\n        return \"No\";\n    }\n    if(file_name[0\
    \ .. dot_index] == \"\")\n    {\n        return \"No\";\n    }\n    if(file_name[0]\
    \ >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z')\n\
    \    {\n        return \"Yes\";\n    }\n    return \"No\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    if (extension.length == 0 || !valid_extensions.find(extension))\n\
    \        return \"No\";\n    string name = file_name.substr(0, dot_index);\n \
    \   if (name.length == 0 || !name[0].isAlpha)\n        return \"No\";\n    int\
    \ digits_count = 0;\n    foreach (c; name)\n        if (c.isDigit)\n         \
    \   digits_count++;\n    if (digits_count > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int i = 0;\n    string extension = \"\";\n    string valid_extensions[]\
    \ = [\"txt\", \"exe\", \"dll\"];\n    bool valid_extension = false;\n    bool\
    \ valid_name = false;\n    bool valid_number = false;\n    bool valid_extension_length\
    \ = false;\n    bool valid_name_length = false;\n    bool valid_name_start = false;\n\
    \    bool valid_name_end = false;\n    bool valid_extension_start = false;\n \
    \   bool valid_extension_end = false;\n    bool valid_extension_start_char = false;\n\
    \    bool valid_extension_end_char = false;\n    bool valid_name_start_char =\
    \ false;\n    bool valid_name_end_char = false;\n    bool valid_name_start_char_lower\
    \ = false;\n    bool valid_name_start_char_upper = false;\n    bool valid_extension_start_char_lower\
    \ = false;\n    bool valid_extension_start_char_upper = false;\n    bool valid_extension_end_char_lower\
    \ = false;\n    bool valid_extension_end_char_upper = false;\n    bool valid_name_end_char_lower\
    \ = false;\n    bool valid_name_end_char_upper = false;\n    bool valid_name_start_char_digit\
    \ = false;\n    bool valid_extension_start_char_digit = false;\n    bool valid_extension_end_char_digit\
    \ = false;\n    bool valid_name_end_char_digit = false;\n    bool valid_name_start_char_letter\
    \ = false;\n    bool valid_extension_start_char_letter = false;\n    bool valid_extension_end_char_letter\
    \ = false;\n    bool valid_name_end_char_letter = false;\n    bool valid_name_start_char_letter_lower\
    \ = false;\n    bool valid_extension_start_char_letter_lower = false;\n    bool\
    \ valid_extension_end_char_letter_lower = false;", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n \
    \   if (dot_index == -1)\n        return \"No\";\n    string extension = file_name.slice(dot_index\
    \ + 1);\n    if (extension.length == 0 || !valid_extensions.contains(extension))\n\
    \        return \"No\";\n    string name = file_name.slice(0, dot_index);\n  \
    \  if (name.length == 0)\n        return \"No\";\n    int digit_count = 0;\n \
    \   foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digit_count++;\n\
    \        else if (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n      \
    \      return \"No\";\n    }\n    if (digit_count > 3)\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    int dot_count = 0;\n    int digit_count =\
    \ 0;\n    int dot_index = 0;\n    int i = 0;\n    string file_extension;\n   \
    \ string file_name_without_extension;\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    foreach(c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n   \
    \     }\n        i++;\n    }\n    if(dot_count != 1 || digit_count > 3)\n    {\n\
    \        return \"No\";\n    }\n    file_extension = file_name[dot_index+1..$];\n\
    \    file_name_without_extension = file_name[0..dot_index-1];\n    if(file_name_without_extension.length\
    \ == 0)\n    {\n        return \"No\";\n    }\n    if(file_name_without_extension[0]\
    \ < 'a' || file_name_without_extension[0] > 'z' &&\n        file_name_without_extension[0]\
    \ < 'A' || file_name_without_extension[0] > 'Z')\n    {\n        return \"No\"\
    ;\n    }\n    if(file_extension !in valid_extensions)\n    {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}", "{\n    // TODO: Implement your solution\
    \ here\n    //return \"No\";\n    int count = 0;\n    int dot_count = 0;\n   \
    \ string extension = \"\";\n    string name = \"\";\n    foreach(c; file_name)\n\
    \    {\n        if(isDigit(c))\n        {\n            count++;\n        }\n \
    \       else if(c == '.')\n        {\n            dot_count++;\n        }\n  \
    \      else if(dot_count == 0)\n        {\n            name ~= c;\n        }\n\
    \        else\n        {\n            extension ~= c;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1 || name.length == 0 || !isAlpha(name[0]) || \n       \
    \ (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"))\n  \
    \  {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    int ext_pos = 0;\n \
    \   string ext = \"\";\n    foreach(i, c; file_name)\n    {\n        if(c >= '0'\
    \ && c <= '9')\n        {\n            count++;\n        }\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_pos = i;\n        }\n  \
    \  }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n   \
    \ }\n    ext_pos = dot_pos + 1;\n    ext = file_name[ext_pos..$];\n    if(ext\
    \ != \"txt\" && ext != \"exe\" && ext != \"dll\")\n    {\n        return \"No\"\
    ;\n    }\n    if(file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >=\
    \ 'A' && file_name[0] <= 'Z')\n    {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int i = 0;\n    string extension = \"\";\n    string valid_extensions[]\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(c; file_name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n        {\n            count++;\n        }\n        if(c\
    \ == '.')\n        {\n            dot_count++;\n            dot_index = i;\n \
    \       }\n        i++;\n    }\n    if(count > 3 || dot_count != 1)\n    {\n \
    \       return \"No\";\n    }\n    else\n    {\n        extension = file_name[dot_index+1..$];\n\
    \        if(extension in valid_extensions)\n        {\n            return \"Yes\"\
    ;\n        }\n        else\n        {\n            return \"No\";\n        }\n\
    \    }\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n       \
    \ return \"No\";\n    if (file_name_parts[0].count(\"a-zA-Z\") == 0)\n       \
    \ return \"No\";\n    if (valid_extensions.count(file_name_parts[1]) == 0)\n \
    \       return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int\
    \ dot_count = 0;\n    int dot_index = 0;\n    int file_name_length = file_name.length;\n\
    \    string file_extension = \"\";\n    string file_name_without_extension = \"\
    \";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    bool is_valid\
    \ = true;\n    foreach(i, c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n        if(c == '.')\n        {\n\
    \            dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3)\n    {\n        is_valid = false;\n    }\n    if(dot_count != 1)\n    {\n\
    \        is_valid = false;\n    }\n    if(dot_index == 0 || dot_index == file_name_length\
    \ - 1)\n    {\n        is_valid = false;\n    }\n    if(file_name[0] < 'a' ||\
    \ file_name[0] > 'z' && file_name[0] < 'A' || file_name[0] > 'Z')\n    {\n   \
    \     is_valid = false;\n    }\n    file_extension = file_name[dot_index + 1 ..\
    \ $];\n    file_name_without_extension = file_name[0 .. dot_index - 1];\n    if(file_name_without_extension.length\
    \ == 0)\n    {\n        is_valid = false;\n    }\n    if(!valid_extensions.contains(file_extension))\n\
    \    {\n        is_valid = false;\n    }\n    if(is_valid)\n    {\n        return\
    \ \"Yes\";\n    }\n    else\n    {\n        return \"No\";\n    }\n}", "{\n  \
    \  // your code here\n    int count = 0;\n    int dot = 0;\n    int dot_index\
    \ = 0;\n    int dot_index_end = 0;\n    int dot_index_start = 0;\n    int dot_index_start_end\
    \ = 0;\n    int dot_index_end_end = 0;\n    int dot_index_end_start = 0;\n   \
    \ int dot_index_end_start_end = 0;\n    int dot_index_end_start_start = 0;\n \
    \   int dot_index_end_start_start_end = 0;\n    int dot_index_end_start_start_start\
    \ = 0;\n    int dot_index_end_start_start_start_end = 0;\n    int dot_index_end_start_start_start_start\
    \ = 0;\n    int dot_index_end_start_start_start_start_end = 0;\n    int dot_index_end_start_start_start_start_start\
    \ = 0;\n    int dot_index_end_start_start_start_start_start_end = 0;\n    int\
    \ dot_index_end_start_start_start_start_start_start = 0;\n    int dot_index_end_start_start_start_start_start_start_end\
    \ = 0;\n    int dot_index_end_start_start_start_start_start_start_start = 0;\n\
    \    int dot_index_end_start_start_start_start_start_start_start_end = 0;\n  \
    \  int dot_index_end_start_start_start_start_start_start_start_start = 0;\n  \
    \  int dot_index_end_start_start_start_start_start_start_start_start_end = 0;\n\
    \    int dot_index_end_start_start_start_start_start_start_start_start_start =\
    \ 0;\n    int dot_index_end_start_start_start_start_start_start_start_start_start_end\
    \ = 0;\n    int dot_index_end_start_start_start_start_start_start_start_start_start_start\
    \ = 0;\n    int dot_index", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] parts = file_name.split(\".\");\n    if (parts.length\
    \ != 2)\n        return \"No\";\n    if (parts[0].length == 0)\n        return\
    \ \"No\";\n    if (parts[0].length > 3)\n        return \"No\";\n    if (parts[0].count(\"\
    0123456789\") > 3)\n        return \"No\";\n    if (parts[0].count(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == 0)\n        return \"No\";\n    if (valid_extensions.count(parts[1]) == 0)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int dot_index = 0;\n    int i = 0;\n    string ext =\
    \ \"\";\n    string name = \"\";\n    string[] valid_ext = [\"txt\", \"exe\",\
    \ \"dll\"];\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n   \
    \     {\n            dot_count++;\n            dot_index = i;\n        }\n   \
    \     else if(c >= '0' && c <= '9')\n        {\n            count++;\n       \
    \ }\n        i++;\n    }\n    if(count > 3 || dot_count != 1)\n    {\n       \
    \ return \"No\";\n    }\n    name = file_name[0..dot_index];\n    ext = file_name[dot_index+1..$];\n\
    \    if(name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A'\
    \ && name[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(!valid_ext.find(ext))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\"\
    .\");\n    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length\
    \ == 0)\n        return \"No\";\n    if (parts[0].count(c => c >= '0' && c <=\
    \ '9') > 3)\n        return \"No\";\n    if (parts[0].count(c => (c >= 'a' &&\
    \ c <= 'z') || (c >= 'A' && c <= 'Z')) == 0)\n        return \"No\";\n    if (valid_extensions.count(parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ string before_dot = file_name[0..dot_pos];\n    string after_dot = file_name[dot_pos+1..$];\n\
    \    if (before_dot.length == 0 || !isalpha(before_dot[0]))\n        return \"\
    No\";\n    if (after_dot.length == 0 || after_dot.length > 3)\n        return\
    \ \"No\";\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot !=\
    \ \"dll\")\n        return \"No\";\n    int count = 0;\n    foreach (c; before_dot)\n\
    \    {\n        if (isdigit(c))\n            count++;\n    }\n    if (count >\
    \ 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    if (dot_index == -1) return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index+1..$];\n    if (name.length == 0 ||\
    \ !isalpha(name[0])) return \"No\";\n    if (extension.length == 0 || !valid_extensions.contains(extension))\
    \ return \"No\";\n    if (name.count(\"0-9\") > 3) return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int i = 0;\n    string extension = \"\";\n    string name = \"\";\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n        else if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n        i++;\n    }\n    if(dot_count\
    \ != 1 || count > 3)\n    {\n        return \"No\";\n    }\n    name = file_name[0..dot_index];\n\
    \    extension = file_name[dot_index+1..$];\n    if(name.length == 0 || !(name[0]\
    \ >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n    {\n    \
    \    return \"No\";\n    }\n    foreach(string ext; valid_extensions)\n    {\n\
    \        if(ext == extension)\n        {\n            return \"Yes\";\n      \
    \  }\n    }\n    return \"No\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].length != file_name_parts[0].filter!(c\
    \ => c.isDigit).length)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ > 3)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n    \
    \    return \"No\";\n    if (!file_name_parts[0][0].isLetter)\n        return\
    \ \"No\";\n    if (valid_extensions.filter!(s => s == file_name_parts[1]).length\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count =\
    \ 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_after\
    \ = 0;\n    string extension = \"\";\n    string file_name_before_dot = \"\";\n\
    \    string file_name_after_dot = \"\";\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n        if(c >= '0'\
    \ && c <= '9')\n        {\n            count++;\n        }\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n \
    \   }\n    file_name_before_dot = file_name[0..dot_index];\n    file_name_after_dot\
    \ = file_name[dot_index+1..$];\n    if(file_name_before_dot.length == 0 || !(file_name_before_dot[0]\
    \ >= 'a' && file_name_before_dot[0] <= 'z') && !(file_name_before_dot[0] >= 'A'\
    \ && file_name_before_dot[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n\
    \    if(!(file_name_after_dot in valid_extensions))\n    {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_index\
    \ = 0;\n    int dot_count = 0;\n    foreach(i, c; file_name)\n    {\n        if(c\
    \ >= '0' && c <= '9')\n        {\n            count++;\n        }\n        if(c\
    \ == '.')\n        {\n            dot_index = i;\n            dot_count++;\n \
    \       }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"\
    No\";\n    }\n    string before_dot = file_name[0..dot_index];\n    string after_dot\
    \ = file_name[dot_index+1..$];\n    if(before_dot.length == 0 || (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z'))\n\
    \    {\n        return \"No\";\n    }\n    if(after_dot != \"txt\" && after_dot\
    \ != \"exe\" && after_dot != \"dll\")\n    {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n   \
    \ int dot_index = 0;\n    int i = 0;\n    string sub_string_1;\n    string sub_string_2;\n\
    \    string result = \"No\";\n    foreach(char c; file_name)\n    {\n        if(c\
    \ == '.')\n        {\n            dot_count++;\n            dot_index = i;\n \
    \       }\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n\
    \        }\n        i++;\n    }\n    if(count > 3)\n    {\n        return result;\n\
    \    }\n    if(dot_count != 1)\n    {\n        return result;\n    }\n    sub_string_1\
    \ = file_name[0..dot_index];\n    sub_string_2 = file_name[dot_index+1..$];\n\
    \    if(sub_string_1.length == 0)\n    {\n        return result;\n    }\n    if(sub_string_1[0]\
    \ < 'a' || sub_string_1[0] > 'z')\n    {\n        if(sub_string_1[0] < 'A' ||\
    \ sub_string_1[0] > 'Z')\n        {\n            return result;\n        }\n \
    \   }\n    if(sub_string_2 != \"txt\" && sub_string_2 != \"exe\" && sub_string_2\
    \ != \"dll\")\n    {\n        return result;\n    }\n    result = \"Yes\";\n \
    \   return result;\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.indexOf('.');\n    if (dot_index ==\
    \ -1)\n        return \"No\";\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    if (valid_extensions.indexOf(extension) == -1)\n        return \"\
    No\";\n    string name = file_name.substr(0, dot_index);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int digits_count = 0;\n\
    \    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n           \
    \ digits_count++;\n    }\n    if (digits_count > 3)\n        return \"No\";\n\
    \    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n    if\
    \ (dot_pos == -1) return \"No\";\n    if (file_name.count('.') != 1) return \"\
    No\";\n    if (file_name.count('0', '9') > 3) return \"No\";\n    if (file_name[0]\
    \ < 'a' || file_name[0] > 'z') return \"No\";\n    if (file_name[0] < 'A' || file_name[0]\
    \ > 'Z') return \"No\";\n    if (file_name[dot_pos+1..$] != \"txt\" && file_name[dot_pos+1..$]\
    \ != \"exe\" && file_name[dot_pos+1..$] != \"dll\") return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    string[] parts = file_name.split(\".\");\n    if (parts.length != 2)\n\
    \        return \"No\";\n    if (parts[0].length == 0)\n        return \"No\"\
    ;\n    if (parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if (parts[0].count(\"\
    a-zA-Z\") == 0)\n        return \"No\";\n    if (valid_extensions.count(parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count =\
    \ 0;\n    int dot_index = -1;\n    int dot_count = 0;\n    int i = 0;\n    int\
    \ len = file_name.length;\n    string extension = \"\";\n    string name = \"\"\
    ;\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(c;\
    \ file_name)\n    {\n        if(c == '.')\n        {\n            dot_index =\
    \ i;\n            dot_count++;\n        }\n        else if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n        i++;\n    }\n    if(count\
    \ > 3 || dot_count != 1 || dot_index == 0 || dot_index == len - 1)\n    {\n  \
    \      return \"No\";\n    }\n    name = file_name[0..dot_index];\n    extension\
    \ = file_name[dot_index + 1..$];\n    if(name.length == 0 || !(name[0] >= 'a'\
    \ && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n    {\n        return\
    \ \"No\";\n    }\n    if(!valid_extensions.canFind(extension))\n    {\n      \
    \  return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n  \
    \  int dot_count = 0;\n    int dot_pos = 0;\n    int len = file_name.length;\n\
    \    string ext = \"\";\n    string name = \"\";\n    string[] valid_ext = [\"\
    txt\", \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n        if(c ==\
    \ '.')\n        {\n            dot_count++;\n            dot_pos = i;\n      \
    \  }\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\"\
    ;\n    }\n    ext = file_name[dot_pos+1..$];\n    name = file_name[0..dot_pos-1];\n\
    \    if(name.length == 0 || (name[0] < 'a' || name[0] > 'z') && (name[0] < 'A'\
    \ || name[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    if(valid_ext.count(ext)\
    \ == 0)\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n \
    \   auto dot_pos = file_name.find('.');\n    if (dot_pos == file_name.npos)\n\
    \        return \"No\";\n    auto ext = file_name.substr(dot_pos + 1);\n    if\
    \ (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\"\
    ;\n    auto name = file_name.substr(0, dot_pos);\n    if (name.empty())\n    \
    \    return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' ||\
    \ name[0] > 'Z')\n        return \"No\";\n    auto digits = count(name.begin(),\
    \ name.end(), '0', '1', '2', '3', '4', '5', '6', '7', '8', '9');\n    if (digits\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot = 0;\n    int dot_index = 0;\n    int dot_index_before = 0;\n   \
    \ int dot_index_after = 0;\n    int dot_index_after_end = 0;\n    string dot_index_after_str\
    \ = \"\";\n    string dot_index_before_str = \"\";\n    string dot_index_after_str_lower\
    \ = \"\";\n    string dot_index_after_str_upper = \"\";\n    string dot_index_after_str_lower_upper\
    \ = \"\";\n    string dot_index_after_str_lower_upper_txt = \"\";\n    string\
    \ dot_index_after_str_lower_upper_exe = \"\";\n    string dot_index_after_str_lower_upper_dll\
    \ = \"\";\n    string dot_index_after_str_lower_upper_txt_exe_dll = \"\";\n  \
    \  string dot_index_after_str_lower_upper_txt_exe_dll_lower = \"\";\n    string\
    \ dot_index_after_str_lower_upper_txt_exe_dll_upper = \"\";\n    string dot_index_after_str_lower_upper_txt_exe_dll_lower_upper\
    \ = \"\";\n    string dot_index_after_str_lower_upper_txt_exe_dll_lower_upper_txt\
    \ = \"\";\n    string dot_index_after_str_lower_upper_txt_exe_dll_lower_upper_exe\
    \ = \"\";\n    string dot_index_after_str_lower_upper_txt_exe_dll_lower_upper_dll\
    \ = \"\";\n    string dot_index_after_str_lower_upper_txt_exe_dll_lower_upper_txt_exe_dll\
    \ = \"\";\n    string dot_index_after_str_lower_upper_txt_exe_dll_lower_upper_txt_exe_dll_lower\
    \ = \"\";\n    string dot_index_after_str_lower_upper_txt_exe_dll_lower_upper_txt_exe_dll_upper\
    \ = \"\";\n    string dot_index_after_str_lower_upper_txt_exe_dll_lower_upper_txt_exe_dll_lower",
  "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ dot_index_2 = 0;\n    int dot_index_3 = 0;\n    int dot_index_4 = 0;\n    int\
    \ dot_index_5 = 0;\n    int dot_index_6 = 0;\n    int dot_index_7 = 0;\n    int\
    \ dot_index_8 = 0;\n    int dot_index_9 = 0;\n    int dot_index_10 = 0;\n    int\
    \ dot_index_11 = 0;\n    int dot_index_12 = 0;\n    int dot_index_13 = 0;\n  \
    \  int dot_index_14 = 0;\n    int dot_index_15 = 0;\n    int dot_index_16 = 0;\n\
    \    int dot_index_17 = 0;\n    int dot_index_18 = 0;\n    int dot_index_19 =\
    \ 0;\n    int dot_index_20 = 0;\n    int dot_index_21 = 0;\n    int dot_index_22\
    \ = 0;\n    int dot_index_23 = 0;\n    int dot_index_24 = 0;\n    int dot_index_25\
    \ = 0;\n    int dot_index_26 = 0;\n    int dot_index_27 = 0;\n    int dot_index_28\
    \ = 0;\n    int dot_index_29 = 0;\n    int dot_index_30 = 0;\n    int dot_index_31\
    \ = 0;\n    int dot_index_32 = 0;\n    int dot_index_33 = 0;\n    int dot_index_34\
    \ = 0;\n    int dot_index_35 = 0;\n    int dot_index_36 = 0;\n    int dot_index_37\
    \ = 0;\n    int dot_index_38 = 0;\n    int dot_index_39 = 0;\n    int dot_index_40\
    \ = 0;\n    int dot_index_41 = 0;\n    int dot_index_42 = 0;\n    int dot_index_43\
    \ = 0;\n    int dot_index_44 = 0;\n    int dot_index_45 = 0;\n", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index\
    \ + 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    string name = file_name[0 .. dot_index];\n    if\
    \ (name.length == 0 || !name[0].isAlpha)\n        return \"No\";\n    int count\
    \ = 0;\n    foreach (c; name)\n        if (c.isDigit)\n            count++;\n\
    \    if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n   \
    \ string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.find(\".\");\n    string extension = file_name[dot_index+1..$];\n\
    \    string name = file_name[0..dot_index-1];\n    int digits_count = 0;\n   \
    \ foreach(c; name)\n    {\n        if(c >= '0' && c <= '9')\n            digits_count++;\n\
    \    }\n    if(digits_count > 3)\n        return \"No\";\n    if(extension !in\
    \ valid_extensions)\n        return \"No\";\n    if(name.length == 0)\n      \
    \  return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >=\
    \ 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int last_dot_index\
    \ = 0;\n    string ext = \"\";\n    string sub_str = \"\";\n    string[] valid_ext\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(inout c; file_name)\n    {\n   \
    \     if(c == '.')\n        {\n            dot_count++;\n            last_dot_index\
    \ = dot_index;\n        }\n        dot_index++;\n    }\n    if(dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    sub_str = file_name[0..last_dot_index];\n\
    \    foreach(inout c; sub_str)\n    {\n        if(c >= '0' && c <= '9')\n    \
    \    {\n            count++;\n        }\n    }\n    if(count > 3)\n    {\n   \
    \     return \"No\";\n    }\n    ext = file_name[last_dot_index+1..$];\n    if(ext\
    \ in valid_ext)\n    {\n        return \"Yes\";\n    }\n    return \"No\";\n}",
  "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ i = 0;\n    string extension = \"\";\n    string file_name_without_extension\
    \ = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n        else if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n        i++;\n    }\n    if(count\
    \ > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    else\n   \
    \ {\n        extension = file_name[dot_index+1..$];\n        file_name_without_extension\
    \ = file_name[0..dot_index-1];\n        if(file_name_without_extension.length\
    \ == 0 || \n            (file_name_without_extension[0] < 'a' || file_name_without_extension[0]\
    \ > 'z') && \n            (file_name_without_extension[0] < 'A' || file_name_without_extension[0]\
    \ > 'Z'))\n        {\n            return \"No\";\n        }\n        else\n  \
    \      {\n            if(valid_extensions.find(extension) == -1)\n           \
    \ {\n                return \"No\";\n            }\n            else\n       \
    \     {\n                return \"Yes\";\n            }\n        }\n    }\n}",
  "{\n    auto dot_index = file_name.find(\".\");\n    if (dot_index == -1) return\
    \ \"No\";\n    if (file_name.count(\".\", dot_index + 1) != 0) return \"No\";\n\
    \    if (file_name.count(\"0\", dot_index + 1) > 3) return \"No\";\n    if (file_name.count(\"\
    1\", dot_index + 1) > 3) return \"No\";\n    if (file_name.count(\"2\", dot_index\
    \ + 1) > 3) return \"No\";\n    if (file_name.count(\"3\", dot_index + 1) > 3)\
    \ return \"No\";\n    if (file_name.count(\"4\", dot_index + 1) > 3) return \"\
    No\";\n    if (file_name.count(\"5\", dot_index + 1) > 3) return \"No\";\n   \
    \ if (file_name.count(\"6\", dot_index + 1) > 3) return \"No\";\n    if (file_name.count(\"\
    7\", dot_index + 1) > 3) return \"No\";\n    if (file_name.count(\"8\", dot_index\
    \ + 1) > 3) return \"No\";\n    if (file_name.count(\"9\", dot_index + 1) > 3)\
    \ return \"No\";\n    if (file_name.count(\"0\", 0, dot_index) > 3) return \"\
    No\";\n    if (file_name.count(\"1\", 0, dot_index) > 3) return \"No\";\n    if\
    \ (file_name.count(\"2\", 0, dot_index) > 3) return \"No\";\n    if (file_name.count(\"\
    3\", 0, dot_index) > 3) return \"No\";\n    if (file_name.count(\"4\", 0, dot_index)\
    \ > 3) return \"No\";\n    if (file_name.count(\"5\", 0, dot_index) > 3) return\
    \ \"No\";\n    if (file_name.count(\"6\", 0, dot_index) > 3) return \"No\";\n\
    \    if (file_name.count(\"7\", 0, dot_index) > 3) return \"No\";\n    if (file_",
  "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ dot_index_before = 0;\n    int dot_index_after = 0;\n    string before_dot =\
    \ \"\";\n    string after_dot = \"\";\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = count;\n       \
    \ }\n        count++;\n    }\n    if(dot_count != 1)\n    {\n        return \"\
    No\";\n    }\n    dot_index_before = dot_index;\n    dot_index_after = count -\
    \ dot_index - 1;\n    before_dot = file_name[0..dot_index_before];\n    after_dot\
    \ = file_name[dot_index_before+1..$];\n    if(before_dot.length == 0 || after_dot.length\
    \ == 0)\n    {\n        return \"No\";\n    }\n    if(before_dot[0] < 'a' || before_dot[0]\
    \ > 'z')\n    {\n        if(before_dot[0] < 'A' || before_dot[0] > 'Z')\n    \
    \    {\n            return \"No\";\n        }\n    }\n    foreach(char c; before_dot)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            return \"No\"\
    ;\n        }\n    }\n    if(after_dot.length > 3)\n    {\n        return \"No\"\
    ;\n    }\n    if(!after_dot.in(valid_extensions))\n    {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n\
    \    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0-9\") > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0].count(\"a-zA-Z\") == 0)\n\
    \        return \"No\";\n    if (valid_extensions.count(file_name_parts[1]) ==\
    \ 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n \
    \   if (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index\
    \ + 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    string name = file_name[0 .. dot_index];\n    if\
    \ (name.length == 0 || !name[0].isLetter)\n        return \"No\";\n    int digits_count\
    \ = 0;\n    foreach (c; name)\n        if (c.isDigit)\n            digits_count++;\n\
    \    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    int count = 0;\n    int dot_index = 0;\n    int dot_count = 0;\n    int i\
    \ = 0;\n    string extension = \"\";\n    string name = \"\";\n    foreach(c;\
    \ file_name)\n    {\n        if(c == '.')\n        {\n            dot_index =\
    \ i;\n            dot_count++;\n        }\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n        i++;\n    }\n    if(count\
    \ > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    name = file_name[0..dot_index];\n\
    \    extension = file_name[dot_index+1..$];\n    if(name.length == 0 || (name[0]\
    \ < 'a' || name[0] > 'z') && (name[0] < 'A' || name[0] > 'Z'))\n    {\n      \
    \  return \"No\";\n    }\n    if(extension != \"txt\" && extension != \"exe\"\
    \ && extension != \"dll\")\n    {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int extension_index = 0;\n    string extension = \"\";\n    string\
    \ file_name_without_extension = \"\";\n    foreach(char c; file_name)\n    {\n\
    \        if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = count;\n        }\n        count++;\n    }\n    if(dot_count != 1)\n    {\n\
    \        return \"No\";\n    }\n    extension_index = dot_index + 1;\n    extension\
    \ = file_name[extension_index..$];\n    if(extension != \"txt\" && extension !=\
    \ \"exe\" && extension != \"dll\")\n    {\n        return \"No\";\n    }\n   \
    \ file_name_without_extension = file_name[0..dot_index-1];\n    count = 0;\n \
    \   foreach(char c; file_name_without_extension)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n        {\n            count++;\n        }\n    }\n    if(count >\
    \ 3)\n    {\n        return \"No\";\n    }\n    if(file_name_without_extension.length\
    \ == 0)\n    {\n        return \"No\";\n    }\n    if(file_name_without_extension[0]\
    \ < 'a' || file_name_without_extension[0] > 'z')\n    {\n        if(file_name_without_extension[0]\
    \ < 'A' || file_name_without_extension[0] > 'Z')\n        {\n            return\
    \ \"No\";\n        }\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_end = 0;\n\
    \    string file_name_substring_1 = \"\";\n    string file_name_substring_2 =\
    \ \"\";\n    string file_name_substring_3 = \"\";\n    string file_name_substring_4\
    \ = \"\";\n    string file_name_substring_5 = \"\";\n    string file_name_substring_6\
    \ = \"\";\n    string file_name_substring_7 = \"\";\n    string file_name_substring_8\
    \ = \"\";\n    string file_name_substring_9 = \"\";\n    string file_name_substring_10\
    \ = \"\";\n    string file_name_substring_11 = \"\";\n    string file_name_substring_12\
    \ = \"\";\n    string file_name_substring_13 = \"\";\n    string file_name_substring_14\
    \ = \"\";\n    string file_name_substring_15 = \"\";\n    string file_name_substring_16\
    \ = \"\";\n    string file_name_substring_17 = \"\";\n    string file_name_substring_18\
    \ = \"\";\n    string file_name_substring_19 = \"\";\n    string file_name_substring_20\
    \ = \"\";\n    string file_name_substring_21 = \"\";\n    string file_name_substring_22\
    \ = \"\";\n    string file_name_substring_23 = \"\";\n    string file_name_substring_24\
    \ = \"\";\n    string file_name_substring_25 = \"\";\n    string file_name_substring_26\
    \ = \"\";\n    string file_name_substring_27 = \"\";\n    string file_name_substring_28\
    \ = \"\";\n    string file_name_substring_29 = \"\";\n    string file_name_substring_30\
    \ = \"\";\n    string file_name_substring_31 = \"\";\n    string file_name_substring_32\
    \ = \"\";\n    string file_name_substring_33 = \"\";\n    string file_name_substring_34\
    \ =", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n\
    \    int extension_index = 0;\n    string extension = \"\";\n    string name =\
    \ \"\";\n    foreach(i, c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n        if(c == '.')\n        {\n\
    \            dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    extension_index\
    \ = dot_index + 1;\n    extension = file_name[extension_index..$];\n    name =\
    \ file_name[0..dot_index - 1];\n    if(name.length == 0 || !(name[0] >= 'a' &&\
    \ name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n    {\n        return\
    \ \"No\";\n    }\n    if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
  "{\n    auto dot_index = file_name.find('.');\n    if (dot_index == -1) return \"\
    No\";\n    auto extension = file_name.slice(dot_index + 1);\n    if (extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\") return \"No\";\n\
    \    auto name = file_name.slice(0, dot_index);\n    if (name.length == 0) return\
    \ \"No\";\n    if (!isAlpha(name[0])) return \"No\";\n    if (name.count!(a =>\
    \ isDigit(a)) > 3) return \"No\";\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    int ext_pos = 0;\n \
    \   string ext = \"\";\n    string sub = \"\";\n    string result = \"\";\n  \
    \  foreach(char c; file_name)\n    {\n        if(c == '.')\n        {\n      \
    \      dot_count++;\n            dot_pos = count;\n        }\n        count++;\n\
    \    }\n    if(dot_count != 1)\n    {\n        return \"No\";\n    }\n    else\n\
    \    {\n        sub = file_name[0..dot_pos];\n        ext_pos = dot_pos + 1;\n\
    \        ext = file_name[ext_pos..$];\n        if(sub.length == 0 || !isAlpha(sub[0]))\n\
    \        {\n            return \"No\";\n        }\n        if(ext != \"txt\" &&\
    \ ext != \"exe\" && ext != \"dll\")\n        {\n            return \"No\";\n \
    \       }\n        foreach(char c; sub)\n        {\n            if(isDigit(c))\n\
    \            {\n                return \"No\";\n            }\n        }\n   \
    \     return \"Yes\";\n    }\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n    string extension\
    \ = file_name[dot_index+1..$];\n    string name = file_name[0..dot_index-1];\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3)\n  \
    \      return \"No\";\n    if(extension.length == 0)\n        return \"No\";\n\
    \    if(!(extension in valid_extensions))\n        return \"No\";\n    if(name.length\
    \ == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') &&\
    \ !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"\
    Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    string sub_string_before_dot = \"\";\n    string sub_string_after_dot\
    \ = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = count;\n        }\n        count++;\n    }\n    if(dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    sub_string_before_dot = file_name[0..dot_index];\n\
    \    sub_string_after_dot = file_name[dot_index+1..$];\n    if(sub_string_before_dot.length\
    \ == 0 || !isAlpha(sub_string_before_dot[0]))\n    {\n        return \"No\";\n\
    \    }\n    if(sub_string_after_dot.length == 0 || !valid_extensions.contains(sub_string_after_dot))\n\
    \    {\n        return \"No\";\n    }\n    foreach(char c; sub_string_before_dot)\n\
    \    {\n        if(isDigit(c))\n        {\n            return \"No\";\n      \
    \  }\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int dot_index_after = 0;\n    string file_name_after_dot\
    \ = \"\";\n    string file_name_before_dot = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n      \
    \  if(c == '.')\n        {\n            dot_count++;\n            dot_index =\
    \ i;\n        }\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    file_name_after_dot = file_name[dot_index+1..$];\n    file_name_before_dot\
    \ = file_name[0..dot_index-1];\n    if(file_name_before_dot.length == 0 || !(file_name_before_dot[0]\
    \ >= 'a' && file_name_before_dot[0] <= 'z') && !(file_name_before_dot[0] >= 'A'\
    \ && file_name_before_dot[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n\
    \    if(!valid_extensions.find(file_name_after_dot))\n    {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_index\
    \ = -1;\n    foreach(i, c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n\
    \            count++;\n        else if(c == '.')\n            dot_index = i;\n\
    \    }\n    if(count > 3)\n        return \"No\";\n    if(dot_index == -1)\n \
    \       return \"No\";\n    if(dot_index == 0)\n        return \"No\";\n    if(!(file_name[0]\
    \ >= 'a' && file_name[0] <= 'z') && !(file_name[0] >= 'A' && file_name[0] <= 'Z'))\n\
    \        return \"No\";\n    if(file_name[dot_index + 1 .. $] != \"txt\" && file_name[dot_index\
    \ + 1 .. $] != \"exe\" && file_name[dot_index + 1 .. $] != \"dll\")\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    enum ext = [\"txt\", \"exe\", \"dll\"\
    ];\n    int count = 0;\n    int dot = 0;\n    foreach(c; file_name)\n    {\n \
    \       if(c == '.')\n        {\n            dot++;\n        }\n        if(c >=\
    \ '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n    if(count\
    \ > 3 || dot != 1)\n    {\n        return \"No\";\n    }\n    string[] split =\
    \ file_name.split(\".\");\n    if(split[0].length == 0 || !(split[0][0] >= 'a'\
    \ && split[0][0] <= 'z' || split[0][0] >= 'A' && split[0][0] <= 'Z'))\n    {\n\
    \        return \"No\";\n    }\n    if(ext.find(split[1]) == ext.length)\n   \
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name.slice(dot_index\
    \ + 1);\n    if (extension.length == 0 || valid_extensions.find(extension) ==\
    \ -1)\n        return \"No\";\n    string name = file_name.slice(0, dot_index);\n\
    \    if (name.length == 0 || !isAlpha(name[0]))\n        return \"No\";\n    int\
    \ digits_count = 0;\n    foreach (c; name)\n        if (isDigit(c))\n        \
    \    digits_count++;\n    if (digits_count > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    int dot_index = file_name.find('.');\n    if (dot_index == -1)\n     \
    \   return \"No\";\n    string extension = file_name[dot_index + 1 .. $];\n  \
    \  if (extension.length == 0 || valid_extensions.find(extension) == -1)\n    \
    \    return \"No\";\n    string name = file_name[0 .. dot_index];\n    if (name.length\
    \ == 0 || !name[0].isAlpha || name.count!(c => c.isDigit) > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int dot_index_after = 0;\n    string file_name_before\
    \ = \"\";\n    string file_name_after = \"\";\n    foreach(i, c; file_name)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n  \
    \      }\n        if(c == '.')\n        {\n            dot_count++;\n        \
    \    dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n \
    \   {\n        return \"No\";\n    }\n    file_name_before = file_name[0..dot_index];\n\
    \    file_name_after = file_name[dot_index+1..$];\n    if(file_name_before.length\
    \ == 0)\n    {\n        return \"No\";\n    }\n    if(file_name_before[0] < 'a'\
    \ || file_name_before[0] > 'z')\n    {\n        if(file_name_before[0] < 'A' ||\
    \ file_name_before[0] > 'Z')\n        {\n            return \"No\";\n        }\n\
    \    }\n    if(file_name_after != \"txt\" && file_name_after != \"exe\" && file_name_after\
    \ != \"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
  "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    auto ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\"\
    \ && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n    auto name\
    \ = file_name.substr(0, dot_pos);\n    if (name.length == 0)\n        return \"\
    No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n\
    \        return \"No\";\n    int count = 0;\n    foreach (c; name)\n    {\n  \
    \      if (c >= '0' && c <= '9')\n            count++;\n    }\n    if (count >\
    \ 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    int i = 0;\n    string ext;\n\
    \    string file_name_copy = file_name;\n    string[] valid_ext = [\"txt\", \"\
    exe\", \"dll\"];\n    foreach(c; file_name)\n    {\n        if(c == '.')\n   \
    \     {\n            dot_count++;\n            dot_index = i;\n        }\n   \
    \     if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n \
    \       i++;\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\n    {\n  \
    \      return \"No\";\n    }\n    ext = file_name[dot_index+1..$];\n    if(ext\
    \ !in valid_ext)\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
  "{\n    int count = 0;\n    int dot_count = 0;\n    string extension;\n    string\
    \ name;\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n       \
    \ {\n            dot_count++;\n            extension = file_name[$-3..$];\n  \
    \          name = file_name[0..$-4];\n        }\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1 || name.length == 0 || name[0] < 'A' || name[0] > 'z' || (name[0] > 'Z'\
    \ && name[0] < 'a'))\n    {\n        return \"No\";\n    }\n    if(extension !=\
    \ \"txt\" && extension != \"exe\" && extension != \"dll\")\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int dot_index_after = 0;\n    string file_name_before_dot\
    \ = \"\";\n    string file_name_after_dot = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n      \
    \  if(c == '.')\n        {\n            dot_count++;\n            dot_index =\
    \ i;\n        }\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    file_name_before_dot = file_name[0..dot_index];\n    file_name_after_dot\
    \ = file_name[dot_index+1..$];\n    if(file_name_before_dot.length == 0 || \n\
    \        (file_name_before_dot[0] < 'a' || file_name_before_dot[0] > 'z') && \n\
    \        (file_name_before_dot[0] < 'A' || file_name_before_dot[0] > 'Z'))\n \
    \   {\n        return \"No\";\n    }\n    foreach(i, ext; valid_extensions)\n\
    \    {\n        if(ext == file_name_after_dot)\n        {\n            return\
    \ \"Yes\";\n        }\n    }\n    return \"No\";\n}", "{\n    int count = 0;\n\
    \    int dot_index = 0;\n    int dot_count = 0;\n    string extension = \"\";\n\
    \    string name = \"\";\n    foreach(i, c; file_name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n        {\n            count++;\n        }\n        if(c ==\
    \ '.')\n        {\n            dot_index = i;\n            dot_count++;\n    \
    \    }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\"\
    ;\n    }\n    name = file_name[0..dot_index];\n    extension = file_name[dot_index+1..$];\n\
    \    if(name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A'\
    \ && name[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n    {\n       \
    \ return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_after = 0;\n \
    \   int dot_index_before = 0;\n    string before_dot = \"\";\n    string after_dot\
    \ = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = count;\n        }\n        count++;\n    }\n    if(dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    dot_index_after = dot_index\
    \ + 1;\n    dot_index_before = dot_index - 1;\n    before_dot = file_name[0..dot_index_before];\n\
    \    after_dot = file_name[dot_index_after..$];\n    if(before_dot.length == 0)\n\
    \    {\n        return \"No\";\n    }\n    if(!isAlpha(before_dot[0]))\n    {\n\
    \        return \"No\";\n    }\n    if(after_dot.length == 0)\n    {\n       \
    \ return \"No\";\n    }\n    if(!after_dot.in(valid_extensions))\n    {\n    \
    \    return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_position = 0;\n    string extension;\n  \
    \  string name;\n    foreach(i, c; file_name)\n    {\n        if(c >= '0' && c\
    \ <= '9')\n        {\n            count++;\n        }\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_position = i;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n \
    \   }\n    extension = file_name[dot_position + 1 .. $];\n    name = file_name[0\
    \ .. dot_position - 1];\n    if(extension != \"txt\" && extension != \"exe\" &&\
    \ extension != \"dll\")\n    {\n        return \"No\";\n    }\n    if(name.empty\
    \ || !(name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_2 =\
    \ 0;\n    string sub_string_1 = \"\";\n    string sub_string_2 = \"\";\n    string\
    \ sub_string_3 = \"\";\n    string sub_string_4 = \"\";\n    string sub_string_5\
    \ = \"\";\n    string sub_string_6 = \"\";\n    string sub_string_7 = \"\";\n\
    \    string sub_string_8 = \"\";\n    string sub_string_9 = \"\";\n    string\
    \ sub_string_10 = \"\";\n    string sub_string_11 = \"\";\n    string sub_string_12\
    \ = \"\";\n    string sub_string_13 = \"\";\n    string sub_string_14 = \"\";\n\
    \    string sub_string_15 = \"\";\n    string sub_string_16 = \"\";\n    string\
    \ sub_string_17 = \"\";\n    string sub_string_18 = \"\";\n    string sub_string_19\
    \ = \"\";\n    string sub_string_20 = \"\";\n    string sub_string_21 = \"\";\n\
    \    string sub_string_22 = \"\";\n    string sub_string_23 = \"\";\n    string\
    \ sub_string_24 = \"\";\n    string sub_string_25 = \"\";\n    string sub_string_26\
    \ = \"\";\n    string sub_string_27 = \"\";\n    string sub_string_28 = \"\";\n\
    \    string sub_string_29 = \"\";\n    string sub_string_30 = \"\";\n    string\
    \ sub_string_31 = \"\";\n    string sub_string_32 = \"\";\n    string sub_string_33\
    \ = \"\";\n    string sub_string_34 = \"\";\n    string sub_string_35 = \"\";\n\
    \    string sub_string_36 = \"\";\n    string sub_string_37 = \"\";\n    string\
    \ sub_string_38 = \"\";\n    string sub_string_39 = \"\";\n    string sub_string_40\
    \ = \"\";\n    string sub_string_41 = \"\";\n    string sub_string_42 = \"\";\n\
    \    string sub_string_43 = \"\";\n", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    string name = file_name.substr(0, dot_index);\n\
    \    if (name.length == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0]\
    \ > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    int digits\
    \ = 0;\n    for (int i = 0; i < name.length; i++)\n        if (name[i] >= '0'\
    \ && name[i] <= '9')\n            digits++;\n    if (digits > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n    string file_name_without_extension\
    \ = file_name.substr(0, dot_index);\n    string file_extension = file_name.substr(dot_index\
    \ + 1);\n    if (file_name_without_extension.length == 0 || \n        file_name_without_extension.length\
    \ > 8 || \n        file_name_without_extension.count(\"0\") + \n        file_name_without_extension.count(\"\
    1\") + \n        file_name_without_extension.count(\"2\") + \n        file_name_without_extension.count(\"\
    3\") + \n        file_name_without_extension.count(\"4\") + \n        file_name_without_extension.count(\"\
    5\") + \n        file_name_without_extension.count(\"6\") + \n        file_name_without_extension.count(\"\
    7\") + \n        file_name_without_extension.count(\"8\") + \n        file_name_without_extension.count(\"\
    9\") > 3 || \n        file_name.count(\".\") != 1 || \n        !(file_name_without_extension[0]\
    \ >= 'a' && file_name_without_extension[0] <= 'z' || \n        file_name_without_extension[0]\
    \ >= 'A' && file_name_without_extension[0] <= 'Z') || \n        !valid_extensions.count(file_extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int dot_index = 0;\n    int len = file_name.length;\n\
    \    string ext = \"\";\n    string file_name_without_ext = \"\";\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n        {\n        \
    \    count++;\n        }\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count !=\
    \ 1)\n    {\n        return \"No\";\n    }\n    if(dot_index == 0 || dot_index\
    \ == len - 1)\n    {\n        return \"No\";\n    }\n    file_name_without_ext\
    \ = file_name[0..dot_index];\n    ext = file_name[dot_index + 1..$];\n    if(file_name_without_ext.length\
    \ == 0 || !(file_name_without_ext[0] >= 'a' && file_name_without_ext[0] <= 'z')\
    \ && !(file_name_without_ext[0] >= 'A' && file_name_without_ext[0] <= 'Z'))\n\
    \    {\n        return \"No\";\n    }\n    if(ext != \"txt\" && ext != \"exe\"\
    \ && ext != \"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n\
    \    int dot_index_end = 0;\n    string extension = \"\";\n    string file_name_without_extension\
    \ = \"\";\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n     \
    \   {\n            dot_count++;\n            dot_index = count;\n        }\n \
    \       count++;\n    }\n    if(dot_count != 1)\n    {\n        return \"No\"\
    ;\n    }\n    else\n    {\n        dot_index_end = count - dot_index;\n      \
    \  extension = file_name[dot_index+1..$];\n        file_name_without_extension\
    \ = file_name[0..dot_index-1];\n        if(extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\")\n        {\n            if(file_name_without_extension[0]\
    \ >= 'a' && file_name_without_extension[0] <= 'z' || file_name_without_extension[0]\
    \ >= 'A' && file_name_without_extension[0] <= 'Z')\n            {\n          \
    \      foreach(char c; file_name_without_extension)\n                {\n     \
    \               if(c >= '0' && c <= '9')\n                    {\n            \
    \            return \"No\";\n                    }\n                }\n      \
    \          return \"Yes\";\n            }\n            else\n            {\n \
    \               return \"No\";\n            }\n        }\n        else\n     \
    \   {\n            return \"No\";\n        }\n    }\n}", "{\n    import std.algorithm\
    \ : contains;\n    import std.conv : to;\n    import std.range : take, drop, takeWhile,\
    \ dropWhile;\n    import std.array : array;\n    import std.string : toLower;\n\
    \    import std.typecons : tuple;\n    import std.math : isNaN;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std", "{\n    string[] valid_extensions = [\"txt\", \"\
    exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\".\");\n   \
    \ if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count(\"0123456789\"\
    ) > 3)\n        return \"No\";\n    if (file_name_parts[0].count(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == 0)\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\" && ext !=\
    \ \"exe\" && ext != \"dll\")\n        return \"No\";\n    if (file_name.count('.')\
    \ != 1)\n        return \"No\";\n    if (file_name.count('0', '9') > 3)\n    \
    \    return \"No\";\n    if (file_name.substr(0, dot_pos).count('a', 'z') == 0\
    \ &&\n        file_name.substr(0, dot_pos).count('A', 'Z') == 0)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    // TODO: Implement your solution here\n\
    \    //return \"Yes\";\n    //return \"No\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";\n    //return\
    \ \"\";\n    //return \"\";\n    //return \"\";\n    //return \"\";", "{\n   \
    \ int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_2\
    \ = 0;\n    int dot_index_3 = 0;\n    string file_name_1 = \"\";\n    string file_name_2\
    \ = \"\";\n    string file_name_3 = \"\";\n    string file_name_4 = \"\";\n  \
    \  string file_name_5 = \"\";\n    string file_name_6 = \"\";\n    string file_name_7\
    \ = \"\";\n    string file_name_8 = \"\";\n    string file_name_9 = \"\";\n  \
    \  string file_name_10 = \"\";\n    string file_name_11 = \"\";\n    string file_name_12\
    \ = \"\";\n    string file_name_13 = \"\";\n    string file_name_14 = \"\";\n\
    \    string file_name_15 = \"\";\n    string file_name_16 = \"\";\n    string\
    \ file_name_17 = \"\";\n    string file_name_18 = \"\";\n    string file_name_19\
    \ = \"\";\n    string file_name_20 = \"\";\n    string file_name_21 = \"\";\n\
    \    string file_name_22 = \"\";\n    string file_name_23 = \"\";\n    string\
    \ file_name_24 = \"\";\n    string file_name_25 = \"\";\n    string file_name_26\
    \ = \"\";\n    string file_name_27 = \"\";\n    string file_name_28 = \"\";\n\
    \    string file_name_29 = \"\";\n    string file_name_30 = \"\";\n    string\
    \ file_name_31 = \"\";\n    string file_name_32 = \"\";\n    string file_name_33\
    \ = \"\";\n    string file_name_34 = \"\";\n    string file_name_35 = \"\";\n\
    \    string file_name_36 = \"\";\n    string file_name_37 = \"\";\n    string\
    \ file_name_38 = \"\";\n    string file_name_39 = \"\";\n    string file_name_40\
    \ = \"\";\n    string file_name_41 = \"\";\n    string file_name_42 = \"\";\n",
  "{\n    int count = 0;\n    int dot_count = 0;\n    int len = file_name.length;\n\
    \    int dot_pos = 0;\n    string sub_before_dot = \"\";\n    string sub_after_dot\
    \ = \"\";\n    string result = \"\";\n    foreach(i; 0..len)\n    {\n        if(file_name[i]\
    \ == '.')\n        {\n            dot_count++;\n            dot_pos = i;\n   \
    \     }\n        if(file_name[i] >= '0' && file_name[i] <= '9')\n        {\n \
    \           count++;\n        }\n    }\n    if(count > 3)\n    {\n        result\
    \ = \"No\";\n    }\n    else if(dot_count != 1)\n    {\n        result = \"No\"\
    ;\n    }\n    else if(file_name[0] < 'a' || file_name[0] > 'z')\n    {\n     \
    \   result = \"No\";\n    }\n    else\n    {\n        sub_before_dot = file_name[0..dot_pos-1];\n\
    \        sub_after_dot = file_name[dot_pos+1..$];\n        if(sub_after_dot !=\
    \ \"txt\" && sub_after_dot != \"exe\" && sub_after_dot != \"dll\")\n        {\n\
    \            result = \"No\";\n        }\n        else\n        {\n          \
    \  result = \"Yes\";\n        }\n    }\n    return result;\n}", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_after\
    \ = 0;\n    string after_dot = \"\";\n    string before_dot = \"\";\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(char c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot_count++;\n          \
    \  dot_index = count;\n        }\n        count++;\n    }\n    if(dot_count !=\
    \ 1)\n    {\n        return \"No\";\n    }\n    else\n    {\n        dot_index_after\
    \ = dot_index + 1;\n        after_dot = file_name[dot_index_after..$];\n     \
    \   before_dot = file_name[0..dot_index-1];\n        if(before_dot.length == 0)\n\
    \        {\n            return \"No\";\n        }\n        else\n        {\n \
    \           if(!(before_dot[0] in ['a'..'z', 'A'..'Z']))\n            {\n    \
    \            return \"No\";\n            }\n            else\n            {\n\
    \                if(!(after_dot in valid_extensions))\n                {\n   \
    \                 return \"No\";\n                }\n                else\n  \
    \              {\n                    foreach(char c; before_dot)\n          \
    \          {\n                        if(c in ['0'..'9'])\n                  \
    \      {\n                            return \"No\";\n                       \
    \ }\n                    }\n                    return \"Yes\";\n            \
    \    }\n            }\n        }\n    }\n}\n/*\n    Examples:\n    file_name_check(\"\
    123.txt\") == \"No\"\n    file_name_check(\"123.exe\") == \"No\"\n    file_name_check(\"\
    123.dll\") == \"No\"\n    file_name_check(\"123.txt.exe\") == \"No\"\n    file_name_check(\"\
    123.txt.exe.dll\") == \"No\"\n    file_name_check(\"123.txt.exe.dll.txt\") ==\
    \ \"No\"\n    file_name_check(\"123.txt.exe.dll.txt.exe\")", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int i = 0;\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n   \
    \     {\n            count++;\n        }\n        i++;\n    }\n    if(count >\
    \ 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    string before_dot\
    \ = file_name[0..dot_index];\n    string after_dot = file_name[dot_index+1..$];\n\
    \    if(before_dot.length == 0 || (before_dot[0] < 'a' || before_dot[0] > 'z')\
    \ && (before_dot[0] < 'A' || before_dot[0] > 'Z'))\n    {\n        return \"No\"\
    ;\n    }\n    if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot !=\
    \ \"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n/*\n\
    Create a function which takes a string representing a file's name, and returns\n\
    \    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A\
    \ file's name is considered to be valid if and only if all the following conditions\
    \ \n    are met:\n    - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n    - The file's name contains exactly one dot '.'\n    -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n     \
    \       \n*/\nstring file_name_check(string file_name) \n{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    int i = 0", "{\n    // TODO:\
    \ Implement this function\n    string[] valid_extensions = [\"txt\", \"exe\",\
    \ \"dll\"];\n    int dot_index = file_name.find('.');\n    string extension =\
    \ file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3)\n  \
    \      return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    if(!valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    auto dot_index_plus_1 =\
    \ dot_index + 1;\n    auto dot_index_plus_2 = dot_index + 2;\n    auto dot_index_plus_3\
    \ = dot_index + 3;\n    if (dot_index_plus_3 > file_name.length)\n        return\
    \ \"No\";\n    auto extension = file_name[dot_index_plus_1 .. dot_index_plus_3];\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        return \"No\";\n    auto name = file_name[0 .. dot_index];\n    if\
    \ (name.length == 0)\n        return \"No\";\n    if (!isAlpha(name[0]))\n   \
    \     return \"No\";\n    auto digit_count = 0;\n    foreach (c; name)\n    {\n\
    \        if (isDigit(c))\n            digit_count++;\n    }\n    if (digit_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   auto dot_index_after = file_name.find('.', dot_index + 1);\n    if (dot_index_after\
    \ != -1)\n        return \"No\";\n    auto digits_count = count(file_name.begin(),\
    \ file_name.end(), '0') +\n                        count(file_name.begin(), file_name.end(),\
    \ '1') +\n                        count(file_name.begin(), file_name.end(), '2')\
    \ +\n                        count(file_name.begin(), file_name.end(), '3') +\n\
    \                        count(file_name.begin(), file_name.end(), '4') +\n  \
    \                      count(file_name.begin(), file_name.end(), '5') +\n    \
    \                    count(file_name.begin(), file_name.end(), '6') +\n      \
    \                  count(file_name.begin(), file_name.end(), '7') +\n        \
    \                count(file_name.begin(), file_name.end(), '8') +\n          \
    \              count(file_name.begin(), file_name.end(), '9');\n    if (digits_count\
    \ > 3)\n        return \"No\";\n    auto extension = file_name.substr(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\")\n        return \"No\";\n    auto name = file_name.substr(0, dot_index);\n\
    \    if (name.empty())\n        return \"No\";\n    if (!isalpha(name[0]))\n \
    \       return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto ext = file_name.substr(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int count = 0;\n    for\
    \ (char c : name)\n        if (c >= '0' && c <= '9')\n            count++;\n \
    \   if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\"\
    .\");\n    if (dot_index == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index+1..$];\n    if (name.length == 0 ||\
    \ name[0] < 'A' || name[0] > 'z' || name.count(\"0-9\") > 3)\n        return \"\
    No\";\n    if (valid_extensions.find(extension) == -1)\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    // TODO: Implement your solution here\n  \
    \  string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = split(file_name, \".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].length != count(file_name_parts[0], ch => ch >= '0'\
    \ && ch <= '9'))\n        return \"No\";\n    if (file_name_parts[0].length >\
    \ 3)\n        return \"No\";\n    if (file_name_parts[0][0] < 'A' || file_name_parts[0][0]\
    \ > 'z' || (file_name_parts[0][0] > 'Z' && file_name_parts[0][0] < 'a'))\n   \
    \     return \"No\";\n    if (valid_extensions.indexOf(file_name_parts[1]) ==\
    \ -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] parts = file_name.split(\".\");\n\
    \    if (parts.length != 2)\n        return \"No\";\n    if (parts[0].length ==\
    \ 0)\n        return \"No\";\n    if (parts[0].count(c => c >= '0' && c <= '9')\
    \ > 3)\n        return \"No\";\n    if (parts[0].count(c => (c >= 'a' && c <=\
    \ 'z') || (c >= 'A' && c <= 'Z')) != 1)\n        return \"No\";\n    if (!valid_extensions.contains(parts[1]))\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n \
    \   if (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index\
    \ + 1 .. $];\n    if (extension.length == 0 || !valid_extensions.canFind(extension))\n\
    \        return \"No\";\n    string name = file_name[0 .. dot_index];\n    if\
    \ (name.length == 0 || name[0] < 'A' || (name[0] > 'Z' && name[0] < 'a') || name[0]\
    \ > 'z')\n        return \"No\";\n    int digits_count = 0;\n    foreach (ch;\
    \ name)\n    {\n        if (ch >= '0' && ch <= '9')\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n\
    \    int dot_index_before = 0;\n    int dot_index_after = 0;\n    string before_dot\
    \ = \"\";\n    string after_dot = \"\";\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = count;\n       \
    \ }\n        count++;\n    }\n    if(dot_count != 1)\n    {\n        return \"\
    No\";\n    }\n    else\n    {\n        dot_index_before = dot_index;\n       \
    \ dot_index_after = count - dot_index;\n        before_dot = file_name[0..dot_index_before-1];\n\
    \        after_dot = file_name[dot_index_before+1..$];\n        if(before_dot.length\
    \ == 0 || after_dot.length == 0)\n        {\n            return \"No\";\n    \
    \    }\n        else\n        {\n            if(before_dot[0] < 'a' || before_dot[0]\
    \ > 'z')\n            {\n                if(before_dot[0] < 'A' || before_dot[0]\
    \ > 'Z')\n                {\n                    return \"No\";\n            \
    \    }\n            }\n            foreach(char c; before_dot)\n            {\n\
    \                if(c < 'a' || c > 'z')\n                {\n                 \
    \   if(c < 'A' || c > 'Z')\n                    {\n                        if(c\
    \ < '0' || c > '9')\n                        {\n                            return\
    \ \"No\";\n                        }\n                    }\n                }\n\
    \            }\n            foreach(char c; after_dot)\n            {\n      \
    \          if(c < 'a' || c > 'z')\n                {\n                    if(c\
    \ < 'A' || c > 'Z')\n                    {\n                        if(c < '0'\
    \ || c > '9')\n                        {\n                            return \"\
    No\";\n                        }\n                    }\n                }\n \
    \          ", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int i = 0;\n    string extension = \"\";\n    string name = \"\";\n\
    \    bool valid = true;\n    foreach(c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = i;\n        }\n\
    \        else if(c >= '0' && c <= '9')\n        {\n            count++;\n    \
    \    }\n        i++;\n    }\n    if(count > 3 || dot_count != 1)\n    {\n    \
    \    valid = false;\n    }\n    else\n    {\n        name = file_name[0..dot_index];\n\
    \        extension = file_name[dot_index + 1..$];\n        if(name.length == 0\
    \ || !(name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n\
    \        {\n            valid = false;\n        }\n        else if(extension !=\
    \ \"txt\" && extension != \"exe\" && extension != \"dll\")\n        {\n      \
    \      valid = false;\n        }\n    }\n    return valid ? \"Yes\" : \"No\";\n\
    }", "{\n    // Write your code here\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n    string extension\
    \ = file_name.substr(dot_index + 1);\n    string name = file_name.substr(0, dot_index);\n\
    \    int digits_count = 0;\n    foreach(c; name)\n    {\n        if(c >= '0' &&\
    \ c <= '9')\n            digits_count++;\n    }\n    if(digits_count > 3)\n  \
    \      return \"No\";\n    if(dot_index == -1)\n        return \"No\";\n    if(name.length\
    \ == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') &&\
    \ !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    if(valid_extensions.find(extension)\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count =\
    \ 0;\n    bool dot = false;\n    bool first = false;\n    bool second = false;\n\
    \    bool third = false;\n    bool fourth = false;\n    bool fifth = false;\n\
    \    bool sixth = false;\n    bool seventh = false;\n    bool eighth = false;\n\
    \    bool ninth = false;\n    bool tenth = false;\n    bool eleventh = false;\n\
    \    bool twelfth = false;\n    bool thirteenth = false;\n    bool fourteenth\
    \ = false;\n    bool fifteenth = false;\n    bool sixteenth = false;\n    bool\
    \ seventeenth = false;\n    bool eighteenth = false;\n    bool nineteenth = false;\n\
    \    bool twentieth = false;\n    bool twentyfirst = false;\n    bool twentysecond\
    \ = false;\n    bool twentythird = false;\n    bool twentyfourth = false;\n  \
    \  bool twentyfifth = false;\n    bool twentysixth = false;\n    bool twentyseventh\
    \ = false;\n    bool twentyeighth = false;\n    bool twentyninth = false;\n  \
    \  bool thirtieth = false;\n    bool thirtyfirst = false;\n    bool thirtysecond\
    \ = false;\n    bool thirtythird = false;\n    bool thirtyfourth = false;\n  \
    \  bool thirtyfifth = false;\n    bool thirtysixth = false;\n    bool thirtyseventh\
    \ = false;\n    bool thirtyeighth = false;\n    bool thirtyninth = false;\n  \
    \  bool fortieth = false;\n    bool fortyfirst = false;\n    bool fortysecond\
    \ = false;\n    bool fortythird = false;\n    bool fortyfourth = false;\n    bool\
    \ fortyfifth = false;\n    bool fortysixth = false;\n    bool fortyseventh = false;\n\
    \    bool fortyeighth = false;\n    bool fortyninth = false;\n    bool fiftieth\
    \ = false;\n    bool fiftyfirst = false;\n    bool fiftysecond = false;\n    bool\
    \ fiftythird = false;\n    bool fiftyfourth = false;\n    bool fiftyfifth = false;\n\
    \    bool fiftysixth = false;\n    bool fiftyseventh = false;\n    bool fiftyeighth\
    \ = false;\n    bool fiftyninth = false;\n    bool sixtieth = false;\n    bool\
    \ sixtyfirst = false;", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    int dot_index = file_name.find('.');\n    if (dot_index == -1)\n\
    \        return \"No\";\n    string file_name_without_extension = file_name[0..dot_index];\n\
    \    string file_extension = file_name[dot_index+1..$];\n    if (file_name_without_extension.length\
    \ == 0 || \n        file_name_without_extension[0] < 'A' || \n        (file_name_without_extension[0]\
    \ > 'Z' && file_name_without_extension[0] < 'a') || \n        file_name_without_extension[0]\
    \ > 'z')\n        return \"No\";\n    int digits_count = 0;\n    foreach (c; file_name_without_extension)\n\
    \    {\n        if (c >= '0' && c <= '9')\n            digits_count++;\n    }\n\
    \    if (digits_count > 3)\n        return \"No\";\n    if (valid_extensions.find(file_extension)\
    \ == -1)\n        return \"No\";\n    return \"Yes\";\n}\n/*\n    Examples:\n\
    \    file_name_check(\"abc.txt\") ==> \"Yes\"\n    file_name_check(\"abc.exe\"\
    ) ==> \"Yes\"\n    file_name_check(\"abc.dll\") ==> \"Yes\"\n    file_name_check(\"\
    abc.txt1\") ==> \"No\"\n    file_name_check(\"abc.txt2\") ==> \"No\"\n    file_name_check(\"\
    abc.txt3\") ==> \"No\"\n    file_name_check(\"abc.txt4\") ==> \"No\"\n    file_name_check(\"\
    abc.txt5\") ==> \"No\"\n    file_name_check(\"abc.txt6\") ==> \"No\"\n    file_name_check(\"\
    abc.txt7\") ==> \"No\"\n    file_name_check(\"abc.txt8\") ==> \"No\"\n    file_name_check(\"\
    abc.txt9\") ==> \"No", "{\n    int count = 0;\n    int dot_count = 0;\n    int\
    \ dot_index = 0;\n    int dot_index_after = 0;\n    string file_name_before_dot\
    \ = \"\";\n    string file_name_after_dot = \"\";\n    string[] file_name_after_dot_arr\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n      \
    \  if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n    \
    \    if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n       \
    \ return \"No\";\n    }\n    file_name_before_dot = file_name[0..dot_index];\n\
    \    file_name_after_dot = file_name[dot_index + 1..$];\n    if(file_name_before_dot.length\
    \ == 0 || \n        (file_name_before_dot[0] < 'a' || file_name_before_dot[0]\
    \ > 'z') && \n        (file_name_before_dot[0] < 'A' || file_name_before_dot[0]\
    \ > 'Z'))\n    {\n        return \"No\";\n    }\n    foreach(i, s; file_name_after_dot_arr)\n\
    \    {\n        if(s == file_name_after_dot)\n        {\n            return \"\
    Yes\";\n        }\n    }\n    return \"No\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int dot_position = 0;\n    int i = 0;\n    string extension;\n\
    \    string valid_extensions[] = [\"txt\", \"exe\", \"dll\"];\n    foreach(c;\
    \ file_name)\n    {\n        if(c >= '0' && c <= '9')\n        {\n           \
    \ count++;\n        }\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_position = i;\n        }\n        i++;\n    }\n    if(count >\
    \ 3 || dot_count != 1 || dot_position == 0)\n    {\n        return \"No\";\n \
    \   }\n    else\n    {\n        extension = file_name[dot_position+1..$];\n  \
    \      if(extension in valid_extensions)\n        {\n            return \"Yes\"\
    ;\n        }\n        else\n        {\n            return \"No\";\n        }\n\
    \    }\n}", "{\n    auto dot_index = file_name.find('.');\n    if (dot_index ==\
    \ -1)\n        return \"No\";\n    auto dot_index_after = file_name.find('.',\
    \ dot_index + 1);\n    if (dot_index_after != -1)\n        return \"No\";\n  \
    \  auto sub_before_dot = file_name[0..dot_index];\n    if (sub_before_dot.length\
    \ == 0)\n        return \"No\";\n    if (!isAlpha(sub_before_dot[0]))\n      \
    \  return \"No\";\n    auto sub_after_dot = file_name[dot_index + 1..$];\n   \
    \ if (sub_after_dot.length == 0)\n        return \"No\";\n    if (sub_after_dot\
    \ != \"txt\" && sub_after_dot != \"exe\" && sub_after_dot != \"dll\")\n      \
    \  return \"No\";\n    auto digits_count = 0;\n    foreach (c; file_name)\n  \
    \  {\n        if (isDigit(c))\n            digits_count++;\n    }\n    if (digits_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    string extension;\n    string\
    \ name;\n    foreach(i, c; file_name)\n    {\n        if(c == '.')\n        {\n\
    \            dot_count++;\n            dot_index = i;\n        }\n        if(c\
    \ >= '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n   \
    \ if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    name\
    \ = file_name[0..dot_index];\n    extension = file_name[dot_index+1..$];\n   \
    \ if(name.length == 0 || (name[0] < 'a' || name[0] > 'z') && (name[0] < 'A' ||\
    \ name[0] > 'Z'))\n    {\n        return \"No\";\n    }\n    if(extension != \"\
    txt\" && extension != \"exe\" && extension != \"dll\")\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    //int count = 0;\n    //int\
    \ dot_count = 0;\n    //int dot_index = 0;\n    //int dot_index_2 = 0;\n    //int\
    \ dot_index_3 = 0;\n    //int dot_index_4 = 0;\n    //int dot_index_5 = 0;\n \
    \   //int dot_index_6 = 0;\n    //int dot_index_7 = 0;\n    //int dot_index_8\
    \ = 0;\n    //int dot_index_9 = 0;\n    //int dot_index_10 = 0;\n    //int dot_index_11\
    \ = 0;\n    //int dot_index_12 = 0;\n    //int dot_index_13 = 0;\n    //int dot_index_14\
    \ = 0;\n    //int dot_index_15 = 0;\n    //int dot_index_16 = 0;\n    //int dot_index_17\
    \ = 0;\n    //int dot_index_18 = 0;\n    //int dot_index_19 = 0;\n    //int dot_index_20\
    \ = 0;\n    //int dot_index_21 = 0;\n    //int dot_index_22 = 0;\n    //int dot_index_23\
    \ = 0;\n    //int dot_index_24 = 0;\n    //int dot_index_25 = 0;\n    //int dot_index_26\
    \ = 0;\n    //int dot_index_27 = 0;\n    //int dot_index_28 = 0;\n    //int dot_index_29\
    \ = 0;\n    //int dot_index_30 = 0;\n    //int dot_index_31 = 0;\n    //int dot_index_32\
    \ = 0;\n    //int dot_index_33 = 0;\n    //int dot_index_34 = 0;\n    //int dot_index_35\
    \ = 0;\n    //int dot_index_36 = 0;\n    //int dot_index_37 = 0;\n    //int dot_index_38\
    \ = 0;\n    //int dot_index_39 = 0;\n    //int dot_index_40 = 0;\n    //int dot_index_41\
    \ = 0;\n   ", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    string sub_string_before_dot = \"\";\n    string sub_string_after_dot\
    \ = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    bool\
    \ is_valid = true;\n    foreach(char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = count;\n       \
    \ }\n        count++;\n    }\n    if(dot_count != 1)\n    {\n        is_valid\
    \ = false;\n    }\n    else\n    {\n        sub_string_before_dot = file_name[0..dot_index];\n\
    \        sub_string_after_dot = file_name[dot_index+1..$];\n        if(sub_string_before_dot.length\
    \ == 0 || !isAlpha(sub_string_before_dot[0]))\n        {\n            is_valid\
    \ = false;\n        }\n        else\n        {\n            foreach(char c; sub_string_before_dot)\n\
    \            {\n                if(isDigit(c))\n                {\n          \
    \          is_valid = false;\n                    break;\n                }\n\
    \            }\n        }\n        if(!valid_extensions.canFind(sub_string_after_dot))\n\
    \        {\n            is_valid = false;\n        }\n    }\n    return is_valid\
    \ ? \"Yes\" : \"No\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n  \
    \  int dot_pos = 0;\n    int dot_pos_after = 0;\n    string file_name_after_dot\
    \ = \"\";\n    string file_name_before_dot = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n      \
    \  if(c == '.')\n        {\n            dot_count++;\n            dot_pos = i;\n\
    \        }\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    else\n    {\n        file_name_after_dot = file_name[dot_pos+1..$];\n\
    \        file_name_before_dot = file_name[0..dot_pos-1];\n        if(file_name_before_dot\
    \ == \"\" || file_name_before_dot[0] < 'a' || file_name_before_dot[0] > 'z')\n\
    \        {\n            return \"No\";\n        }\n        else\n        {\n \
    \           foreach(i, ext; valid_extensions)\n            {\n               \
    \ if(ext == file_name_after_dot)\n                {\n                    return\
    \ \"Yes\";\n                }\n            }\n            return \"No\";\n   \
    \     }\n    }\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int dot_index_2 = 0;\n    string sub_string_1 = \"\";\n    string\
    \ sub_string_2 = \"\";\n    string sub_string_3 = \"\";\n    string sub_string_4\
    \ = \"\";\n    string sub_string_5 = \"\";\n    string sub_string_6 = \"\";\n\
    \    string sub_string_7 = \"\";\n    string sub_string_8 = \"\";\n    string\
    \ sub_string_9 = \"\";\n    string sub_string_10 = \"\";\n    string sub_string_11\
    \ = \"\";\n    string sub_string_12 = \"\";\n    string sub_string_13 = \"\";\n\
    \    string sub_string_14 = \"\";\n    string sub_string_15 = \"\";\n    string\
    \ sub_string_16 = \"\";\n    string sub_string_17 = \"\";\n    string sub_string_18\
    \ = \"\";\n    string sub_string_19 = \"\";\n    string sub_string_20 = \"\";\n\
    \    string sub_string_21 = \"\";\n    string sub_string_22 = \"\";\n    string\
    \ sub_string_23 = \"\";\n    string sub_string_24 = \"\";\n    string sub_string_25\
    \ = \"\";\n    string sub_string_26 = \"\";\n    string sub_string_27 = \"\";\n\
    \    string sub_string_28 = \"\";\n    string sub_string_29 = \"\";\n    string\
    \ sub_string_30 = \"\";\n    string sub_string_31 = \"\";\n    string sub_string_32\
    \ = \"\";\n    string sub_string_33 = \"\";\n    string sub_string_34 = \"\";\n\
    \    string sub_string_35 = \"\";\n    string sub_string_36 = \"\";\n    string\
    \ sub_string_37 = \"\";\n    string sub_string_38 = \"\";\n    string sub_string_39\
    \ = \"\";\n    string sub_string_40 = \"\";\n    string sub_string_41 = \"\";\n\
    \    string sub_string_42 = \"\";\n    string sub_string_43 = \"\";\n", "{\n \
    \   enum ext = [\"txt\", \"exe\", \"dll\"];\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int ext_index = 0;\n    string ext_name =\
    \ \"\";\n    string file_name_without_ext = \"\";\n    foreach(char c; file_name)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n  \
    \      }\n        if(c == '.')\n        {\n            dot_count++;\n        \
    \    dot_index = file_name.indexOf(c);\n        }\n    }\n    if(count > 3 ||\
    \ dot_count != 1)\n    {\n        return \"No\";\n    }\n    else\n    {\n   \
    \     ext_index = dot_index + 1;\n        ext_name = file_name[ext_index..$];\n\
    \        file_name_without_ext = file_name[0..dot_index-1];\n        if(file_name_without_ext.length\
    \ == 0 || \n            (file_name_without_ext[0] < 'a' || file_name_without_ext[0]\
    \ > 'z') && \n            (file_name_without_ext[0] < 'A' || file_name_without_ext[0]\
    \ > 'Z'))\n        {\n            return \"No\";\n        }\n        if(ext.find(ext_name)\
    \ == -1)\n        {\n            return \"No\";\n        }\n        return \"\
    Yes\";\n    }\n}", "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos\
    \ == file_name.npos)\n        return \"No\";\n    if (file_name.count('.') !=\
    \ 1)\n        return \"No\";\n    if (file_name.count('.') == 1 && dot_pos ==\
    \ 0)\n        return \"No\";\n    if (file_name.count('.') == 1 && dot_pos ==\
    \ file_name.length - 1)\n        return \"No\";\n    if (file_name.count('.')\
    \ == 1 && dot_pos != 0 && dot_pos != file_name.length - 1)\n    {\n        auto\
    \ sub_str = file_name.substr(0, dot_pos);\n        if (sub_str.count('0') + sub_str.count('1')\
    \ + sub_str.count('2') + sub_str.count('3') + sub_str.count('4') + sub_str.count('5')\
    \ + sub_str.count('6') + sub_str.count('7') + sub_str.count('8') + sub_str.count('9')\
    \ > 3)\n            return \"No\";\n        if (sub_str.count('0') + sub_str.count('1')\
    \ + sub_str.count('2') + sub_str.count('3') + sub_str.count('4') + sub_str.count('5')\
    \ + sub_str.count('6') + sub_str.count('7') + sub_str.count('8') + sub_str.count('9')\
    \ <= 3)\n        {\n            if (sub_str.count('a') + sub_str.count('b') +\
    \ sub_str.count('c') + sub_str.count('d') + sub_str.count('e') + sub_str.count('f')\
    \ + sub_str.count('g') + sub_str.count('h') + sub_str.count('i') + sub_str.count('j')\
    \ + sub_str.count('k') + sub_str.count('l') + sub_str.count('m') + sub_str.count('n')\
    \ + sub_str.count('", "{\n    // TODO: implement this function\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto ext = file_name.slice(dot_pos + 1);\n    if (ext != \"txt\" && ext != \"\
    exe\" && ext != \"dll\")\n        return \"No\";\n    auto name = file_name.slice(0,\
    \ dot_pos);\n    if (name.length == 0)\n        return \"No\";\n    if (name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"\
    No\";\n    int count = 0;\n    foreach (c; name)\n    {\n        if (c >= '0'\
    \ && c <= '9')\n            count++;\n    }\n    if (count > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    // TODO: Write your code here\n  \
    \  int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int i =\
    \ 0;\n    int j = 0;\n    string extension = \"\";\n    string file_name_without_extension\
    \ = \"\";\n    bool is_valid = true;\n    while(i < file_name.length)\n    {\n\
    \        if(file_name[i] == '.')\n        {\n            dot_count++;\n      \
    \      dot_index = i;\n        }\n        else if(file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n        {\n            count++;\n        }\n        i++;\n    }\n \
    \   if(count > 3 || dot_count != 1)\n    {\n        is_valid = false;\n    }\n\
    \    else\n    {\n        file_name_without_extension = file_name[0..dot_index];\n\
    \        extension = file_name[dot_index+1..$];\n        if(file_name_without_extension.length\
    \ == 0 || \n            (file_name_without_extension[0] < 'a' || file_name_without_extension[0]\
    \ > 'z') && \n            (file_name_without_extension[0] < 'A' || file_name_without_extension[0]\
    \ > 'Z'))\n        {\n            is_valid = false;\n        }\n        else\n\
    \        {\n            if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n            {\n                is_valid = false;\n            }\n\
    \        }\n    }\n    if(is_valid)\n    {\n        return \"Yes\";\n    }\n \
    \   else\n    {\n        return \"No\";\n    }\n}", "{\n    int count = 0;\n \
    \   int dot_count = 0;\n    int dot_index = 0;\n    string extension = \"\";\n\
    \    string name = \"\";\n    bool is_valid = true;\n    foreach(i, c; file_name)\n\
    \    {\n        if(c.isDigit)\n        {\n            count++;\n        }\n  \
    \      if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n    }\n    if(count > 3)\n    {\n        is_valid = false;\n\
    \    }\n    if(dot_count != 1)\n    {\n        is_valid = false;\n    }\n    if(dot_index\
    \ == 0)\n    {\n        is_valid = false;\n    }\n    if(dot_index == file_name.length\
    \ - 1)\n    {\n        is_valid = false;\n    }\n    if(is_valid)\n    {\n   \
    \     name = file_name[0..dot_index];\n        extension = file_name[dot_index\
    \ + 1..$];\n        if(!name.isAlpha)\n        {\n            is_valid = false;\n\
    \        }\n        if(extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\")\n        {\n            is_valid = false;\n        }\n    }\n  \
    \  if(is_valid)\n    {\n        return \"Yes\";\n    }\n    else\n    {\n    \
    \    return \"No\";\n    }\n}", "{\n    int count = 0;\n    int dot_index = 0;\n\
    \    int dot_count = 0;\n    string sub_string_before_dot = \"\";\n    string\
    \ sub_string_after_dot = \"\";\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    foreach(i, char c; file_name)\n    {\n        if(c == '.')\n\
    \        {\n            dot_index = i;\n            dot_count++;\n        }\n\
    \        if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n\
    \    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n \
    \   }\n    sub_string_before_dot = file_name[0..dot_index];\n    sub_string_after_dot\
    \ = file_name[dot_index+1..$];\n    if(sub_string_before_dot == \"\" || sub_string_before_dot[0]\
    \ < 'a' || sub_string_before_dot[0] > 'z')\n    {\n        return \"No\";\n  \
    \  }\n    if(!valid_extensions.any!(a => a == sub_string_after_dot))\n    {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    // your code\
    \ here\n    auto dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n    \
    \    return \"No\";\n    auto ext = file_name.substr(dot_pos + 1);\n    if (ext\
    \ != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\";\n  \
    \  auto name = file_name.substr(0, dot_pos);\n    if (name.empty())\n        return\
    \ \"No\";\n    if (!isalpha(name[0]))\n        return \"No\";\n    int num_digits\
    \ = 0;\n    for (auto c : name)\n    {\n        if (isdigit(c))\n            num_digits++;\n\
    \    }\n    if (num_digits > 3)\n        return \"No\";\n    return \"Yes\";\n\
    }", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n \
    \   string extension = \"\";\n    string file_name_without_extension = \"\";\n\
    \    foreach(i, char c; file_name)\n    {\n        if(c == '.')\n        {\n \
    \           dot_count++;\n            dot_index = i;\n        }\n        if(c\
    \ >= '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n   \
    \ if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    extension\
    \ = file_name[dot_index + 1 .. $];\n    file_name_without_extension = file_name[0\
    \ .. dot_index - 1];\n    if(file_name_without_extension.length == 0 || \n   \
    \     (file_name_without_extension[0] < 'a' || file_name_without_extension[0]\
    \ > 'z') &&\n        (file_name_without_extension[0] < 'A' || file_name_without_extension[0]\
    \ > 'Z'))\n    {\n        return \"No\";\n    }\n    if(extension != \"txt\" &&\
    \ extension != \"exe\" && extension != \"dll\")\n    {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count =\
    \ 0;\n    bool is_valid = true;\n    foreach(c; file_name)\n    {\n        if(c\
    \ == '.')\n        {\n            dot_count++;\n            if(dot_count > 1)\n\
    \            {\n                is_valid = false;\n                break;\n  \
    \          }\n        }\n        else if(c >= '0' && c <= '9')\n        {\n  \
    \          count++;\n            if(count > 3)\n            {\n              \
    \  is_valid = false;\n                break;\n            }\n        }\n    }\n\
    \    if(is_valid)\n    {\n        auto dot_index = file_name.find('.');\n    \
    \    if(dot_index == 0 || dot_index == file_name.length - 1)\n        {\n    \
    \        is_valid = false;\n        }\n        else\n        {\n            auto\
    \ prefix = file_name[0..dot_index];\n            auto suffix = file_name[dot_index\
    \ + 1..$];\n            if(prefix.length == 0 || !(prefix[0] >= 'a' && prefix[0]\
    \ <= 'z' || prefix[0] >= 'A' && prefix[0] <= 'Z'))\n            {\n          \
    \      is_valid = false;\n            }\n            else if(suffix != \"txt\"\
    \ && suffix != \"exe\" && suffix != \"dll\")\n            {\n                is_valid\
    \ = false;\n            }\n        }\n    }\n    return is_valid ? \"Yes\" : \"\
    No\";\n}", "{\n    enum valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    auto\
    \ dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\"\
    ;\n    auto name = file_name[0..dot_pos];\n    auto ext = file_name[dot_pos +\
    \ 1..$];\n    if (name.length == 0 || !isAlpha(name[0]))\n        return \"No\"\
    ;\n    if (count(name, \"0123456789\") > 3)\n        return \"No\";\n    if (valid_extensions.count(ext)\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count =\
    \ 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    string sub_before_dot\
    \ = \"\";\n    string sub_after_dot = \"\";\n    string[] valid_extensions = [\"\
    txt\", \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n        if(c ==\
    \ '.')\n        {\n            dot_count++;\n            dot_index = i;\n    \
    \    }\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n  \
    \      }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"\
    No\";\n    }\n    sub_before_dot = file_name[0..dot_index];\n    sub_after_dot\
    \ = file_name[dot_index+1..$];\n    if(sub_before_dot == \"\" || !(sub_before_dot[0]\
    \ >= 'a' && sub_before_dot[0] <= 'z') || !(sub_before_dot[0] >= 'A' && sub_before_dot[0]\
    \ <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(!(sub_after_dot in valid_extensions))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_index = 0;\n    int dot_count = 0;\n    foreach(i, c; file_name)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n  \
    \      }\n        if(c == '.')\n        {\n            dot_index = i;\n      \
    \      dot_count++;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n \
    \   {\n        return \"No\";\n    }\n    string first_substring = file_name[0..dot_index];\n\
    \    string second_substring = file_name[dot_index + 1..$];\n    if(first_substring.length\
    \ == 0 || (first_substring[0] < 'a' || first_substring[0] > 'z') && (first_substring[0]\
    \ < 'A' || first_substring[0] > 'Z'))\n    {\n        return \"No\";\n    }\n\
    \    if(second_substring != \"txt\" && second_substring != \"exe\" && second_substring\
    \ != \"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
  "{\n    // your code here\n    int count = 0;\n    int dot_count = 0;\n    string\
    \ after_dot = \"\";\n    string before_dot = \"\";\n    bool valid = true;\n \
    \   foreach(c; file_name)\n    {\n        if(c == '.')\n        {\n          \
    \  dot_count++;\n            continue;\n        }\n        if(dot_count == 0)\n\
    \        {\n            before_dot ~= c;\n        }\n        else\n        {\n\
    \            after_dot ~= c;\n        }\n        if(c >= '0' && c <= '9')\n  \
    \      {\n            count++;\n        }\n    }\n    if(count > 3)\n    {\n \
    \       valid = false;\n    }\n    if(dot_count != 1)\n    {\n        valid =\
    \ false;\n    }\n    if(before_dot.length == 0)\n    {\n        valid = false;\n\
    \    }\n    if(!(before_dot[0] >= 'a' && before_dot[0] <= 'z') && !(before_dot[0]\
    \ >= 'A' && before_dot[0] <= 'Z'))\n    {\n        valid = false;\n    }\n   \
    \ if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n \
    \   {\n        valid = false;\n    }\n    if(valid)\n    {\n        return \"\
    Yes\";\n    }\n    else\n    {\n        return \"No\";\n    }\n}", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    if (file_name_parts.length != 2)\n        return\
    \ \"No\";\n    if (file_name_parts[0].length == 0)\n        return \"No\";\n \
    \   if (file_name_parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if\
    \ (!valid_extensions.any!(ext => ext == file_name_parts[1]))\n        return \"\
    No\";\n    if (!file_name_parts[0].any!(c => c.isLetter))\n        return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n \
    \   int dot_index = 0;\n    int dot_index_after = 0;\n    string extension = \"\
    \";\n    string file_name_before_dot = \"\";\n    string file_name_after_dot =\
    \ \"\";\n    string valid_extensions[] = [\"txt\", \"exe\", \"dll\"];\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n        {\n        \
    \    count++;\n        }\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count !=\
    \ 1)\n    {\n        return \"No\";\n    }\n    file_name_before_dot = file_name[0..dot_index];\n\
    \    file_name_after_dot = file_name[dot_index + 1..$];\n    if(file_name_before_dot.length\
    \ == 0 || \n        (file_name_before_dot[0] < 'a' || file_name_before_dot[0]\
    \ > 'z') && \n        (file_name_before_dot[0] < 'A' || file_name_before_dot[0]\
    \ > 'Z'))\n    {\n        return \"No\";\n    }\n    foreach(i, ext; valid_extensions)\n\
    \    {\n        if(ext == file_name_after_dot)\n        {\n            return\
    \ \"Yes\";\n        }\n    }\n    return \"No\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string name = file_name[0..dot_pos];\n\
    \    string ext = file_name[dot_pos+1..$];\n    if (name.length == 0 || !isalpha(name[0]))\n\
    \        return \"No\";\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"\
    dll\")\n        return \"No\";\n    int digit_count = 0;\n    foreach (c; name)\n\
    \    {\n        if (isdigit(c))\n            digit_count++;\n    }\n    if (digit_count\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_end = 0;\n\
    \    string extension = \"\";\n    string file_name_no_extension = \"\";\n   \
    \ string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(i, c;\
    \ file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n   \
    \     {\n            count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    else\n    {\n        dot_index_end\
    \ = file_name.length - dot_index;\n        extension = file_name[dot_index + 1\
    \ .. file_name.length];\n        file_name_no_extension = file_name[0 .. dot_index\
    \ - 1];\n        if(file_name_no_extension.length == 0)\n        {\n         \
    \   return \"No\";\n        }\n        if(file_name_no_extension[0] < 'a' || file_name_no_extension[0]\
    \ > 'z' || file_name_no_extension[0] < 'A' || file_name_no_extension[0] > 'Z')\n\
    \        {\n            return \"No\";\n        }\n        if(extension !in valid_extensions)\n\
    \        {\n            return \"No\";\n        }\n        return \"Yes\";\n \
    \   }\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index =\
    \ 0;\n    int dot_index_2 = 0;\n    int dot_index_3 = 0;\n    int dot_index_4\
    \ = 0;\n    int dot_index_5 = 0;\n    int dot_index_6 = 0;\n    int dot_index_7\
    \ = 0;\n    int dot_index_8 = 0;\n    int dot_index_9 = 0;\n    int dot_index_10\
    \ = 0;\n    int dot_index_11 = 0;\n    int dot_index_12 = 0;\n    int dot_index_13\
    \ = 0;\n    int dot_index_14 = 0;\n    int dot_index_15 = 0;\n    int dot_index_16\
    \ = 0;\n    int dot_index_17 = 0;\n    int dot_index_18 = 0;\n    int dot_index_19\
    \ = 0;\n    int dot_index_20 = 0;\n    int dot_index_21 = 0;\n    int dot_index_22\
    \ = 0;\n    int dot_index_23 = 0;\n    int dot_index_24 = 0;\n    int dot_index_25\
    \ = 0;\n    int dot_index_26 = 0;\n    int dot_index_27 = 0;\n    int dot_index_28\
    \ = 0;\n    int dot_index_29 = 0;\n    int dot_index_30 = 0;\n    int dot_index_31\
    \ = 0;\n    int dot_index_32 = 0;\n    int dot_index_33 = 0;\n    int dot_index_34\
    \ = 0;\n    int dot_index_35 = 0;\n    int dot_index_36 = 0;\n    int dot_index_37\
    \ = 0;\n    int dot_index_38 = 0;\n    int dot_index_39 = 0;\n    int dot_index_40\
    \ = 0;\n    int dot_index_41 = 0;\n    int dot_index_42 = 0;\n    int dot_index_43\
    \ = 0;\n    int dot_index_44 = 0;\n    int dot_index_45 = 0;\n", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_end\
    \ = 0;\n    bool is_valid = true;\n    foreach(i, c; file_name)\n    {\n     \
    \   if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n   \
    \     if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = i;\n            dot_index_end = i + 1;\n        }\n    }\n    if(count > 3)\n\
    \    {\n        is_valid = false;\n    }\n    if(dot_count != 1)\n    {\n    \
    \    is_valid = false;\n    }\n    if(dot_index == 0)\n    {\n        is_valid\
    \ = false;\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\n    {\n \
    \       is_valid = false;\n    }\n    if(file_name[dot_index_end..$] != \"txt\"\
    \ && file_name[dot_index_end..$] != \"exe\" && file_name[dot_index_end..$] !=\
    \ \"dll\")\n    {\n        is_valid = false;\n    }\n    if(is_valid)\n    {\n\
    \        return \"Yes\";\n    }\n    else\n    {\n        return \"No\";\n   \
    \ }\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n  \
    \  string[] parts = file_name.split(\".\");\n    if (parts.length != 2)\n    \
    \    return \"No\";\n    if (parts[0].length == 0)\n        return \"No\";\n \
    \   if (parts[0].count(\"0-9\") > 3)\n        return \"No\";\n    if (parts[0].count(\"\
    a-zA-Z\") == 0)\n        return \"No\";\n    if (valid_extensions.count(parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count =\
    \ 0;\n    int dot_index = 0;\n    string extension = \"\";\n    foreach(i, ch;\
    \ file_name)\n    {\n        if(ch == '.')\n        {\n            dot_index =\
    \ i;\n            break;\n        }\n    }\n    foreach(i, ch; file_name)\n  \
    \  {\n        if(i < dot_index)\n        {\n            if(ch >= '0' && ch <=\
    \ '9')\n            {\n                count++;\n            }\n        }\n  \
    \      else\n        {\n            extension ~= ch;\n        }\n    }\n    if(count\
    \ > 3)\n    {\n        return \"No\";\n    }\n    if(!(file_name[0] >= 'a' &&\
    \ file_name[0] <= 'z') && !(file_name[0] >= 'A' && file_name[0] <= 'Z'))\n   \
    \ {\n        return \"No\";\n    }\n    if(extension != \"txt\" && extension !=\
    \ \"exe\" && extension != \"dll\")\n    {\n        return \"No\";\n    }\n   \
    \ return \"Yes\";\n}", "{\n    int num_digits = 0;\n    int dot_index = -1;\n\
    \    int dot_count = 0;\n    foreach(i, c; file_name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n            num_digits++;\n        else if(c == '.')\n   \
    \     {\n            dot_index = i;\n            dot_count++;\n        }\n   \
    \ }\n    if(num_digits > 3 || dot_count != 1)\n        return \"No\";\n    string\
    \ ext = file_name[dot_index + 1 .. $];\n    if(ext != \"txt\" && ext != \"exe\"\
    \ && ext != \"dll\")\n        return \"No\";\n    string name = file_name[0 ..\
    \ dot_index - 1];\n    if(name.length == 0)\n        return \"No\";\n    if(name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"\
    No\";\n    return \"Yes\";\n}", "{\n    // write your code here\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int i = 0;\n    string\
    \ extension = \"\";\n    string name = \"\";\n    foreach(c; file_name)\n    {\n\
    \        if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n\
    \        if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n        i++;\n    }\n    if(count > 3 || dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    else\n    {\n        extension = file_name[dot_index+1..$];\n\
    \        name = file_name[0..dot_index-1];\n        if(extension == \"txt\" ||\
    \ extension == \"exe\" || extension == \"dll\")\n        {\n            if(name.length\
    \ > 0 && (name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n\
    \            {\n                return \"Yes\";\n            }\n            else\n\
    \            {\n                return \"No\";\n            }\n        }\n   \
    \     else\n        {\n            return \"No\";\n        }\n    }\n}", "{\n\
    \    int count = 0;\n    int dot_count = 0;\n    int dot_pos = 0;\n    int len\
    \ = file_name.length;\n    int i = 0;\n    string ext = \"\";\n    while (i <\
    \ len)\n    {\n        if (file_name[i] == '.')\n        {\n            dot_count++;\n\
    \            dot_pos = i;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n        {\n            count++;\n        }\n        i++;\n    }\n \
    \   if (count > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n \
    \   if (dot_pos == 0 || dot_pos == len - 1)\n    {\n        return \"No\";\n \
    \   }\n    ext = file_name[dot_pos + 1 .. len];\n    if (ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\")\n    {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_pos\
    \ = 0;\n    string ext = \"\";\n    string name = \"\";\n    string[] valid_ext\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(c; file_name)\n    {\n        if(c\
    \ == '.')\n        {\n            dot_count++;\n            dot_pos = count;\n\
    \        }\n        count++;\n    }\n    if(dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    else\n    {\n        ext = file_name[dot_pos+1..$];\n  \
    \      name = file_name[0..dot_pos-1];\n        if(name.length == 0)\n       \
    \ {\n            return \"No\";\n        }\n        else\n        {\n        \
    \    if(!isAlpha(name[0]))\n            {\n                return \"No\";\n  \
    \          }\n            else\n            {\n                if(valid_ext.count(ext)\
    \ == 0)\n                {\n                    return \"No\";\n             \
    \   }\n                else\n                {\n                    int digit_count\
    \ = 0;\n                    foreach(c; name)\n                    {\n        \
    \                if(isDigit(c))\n                        {\n                 \
    \           digit_count++;\n                        }\n                    }\n\
    \                    if(digit_count > 3)\n                    {\n            \
    \            return \"No\";\n                    }\n                    else\n\
    \                    {\n                        return \"Yes\";\n            \
    \        }\n                }\n            }\n        }\n    }\n}", "{\n    auto\
    \ dot_index = file_name.find('.');\n    if (dot_index == -1)\n        return \"\
    No\";\n    auto dot_index_plus_one = dot_index + 1;\n    if (dot_index_plus_one\
    \ == file_name.length)\n        return \"No\";\n    auto dot_index_minus_one =\
    \ dot_index - 1;\n    if (dot_index_minus_one == -1)\n        return \"No\";\n\
    \    auto extension = file_name[dot_index_plus_one .. $];\n    if (extension !=\
    \ \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return \"\
    No\";\n    auto name = file_name[0 .. dot_index_minus_one];\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    auto digit_count = 0;\n\
    \    foreach (ch; name)\n    {\n        if (ch >= '0' && ch <= '9')\n        \
    \    digit_count++;\n    }\n    if (digit_count > 3)\n        return \"No\";\n\
    \    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n   \
    \ int dot_index = 0;\n    int dot_index_1 = 0;\n    int dot_index_2 = 0;\n   \
    \ int dot_index_3 = 0;\n    int dot_index_4 = 0;\n    int dot_index_5 = 0;\n \
    \   int dot_index_6 = 0;\n    int dot_index_7 = 0;\n    int dot_index_8 = 0;\n\
    \    int dot_index_9 = 0;\n    int dot_index_10 = 0;\n    int dot_index_11 = 0;\n\
    \    int dot_index_12 = 0;\n    int dot_index_13 = 0;\n    int dot_index_14 =\
    \ 0;\n    int dot_index_15 = 0;\n    int dot_index_16 = 0;\n    int dot_index_17\
    \ = 0;\n    int dot_index_18 = 0;\n    int dot_index_19 = 0;\n    int dot_index_20\
    \ = 0;\n    int dot_index_21 = 0;\n    int dot_index_22 = 0;\n    int dot_index_23\
    \ = 0;\n    int dot_index_24 = 0;\n    int dot_index_25 = 0;\n    int dot_index_26\
    \ = 0;\n    int dot_index_27 = 0;\n    int dot_index_28 = 0;\n    int dot_index_29\
    \ = 0;\n    int dot_index_30 = 0;\n    int dot_index_31 = 0;\n    int dot_index_32\
    \ = 0;\n    int dot_index_33 = 0;\n    int dot_index_34 = 0;\n    int dot_index_35\
    \ = 0;\n    int dot_index_36 = 0;\n    int dot_index_37 = 0;\n    int dot_index_38\
    \ = 0;\n    int dot_index_39 = 0;\n    int dot_index_40 = 0;\n    int dot_index_41\
    \ = 0;\n    int dot_index_42 = 0;\n    int dot_index_43 = 0;\n    int dot_index_44\
    \ = 0;\n", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index =\
    \ 0;\n    int len = file_name.length;\n    string ext = \"\";\n    string name\
    \ = \"\";\n    string[] valid_ext = [\"txt\", \"exe\", \"dll\"];\n    for (int\
    \ i = 0; i < len; i++)\n    {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n        {\n            count++;\n        }\n        if (file_name[i]\
    \ == '.')\n        {\n            dot_count++;\n            dot_index = i;\n \
    \       }\n    }\n    if (count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    name = file_name[0..dot_index];\n    ext = file_name[dot_index\
    \ + 1..$];\n    if (name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z' ||\
    \ name[0] >= 'A' && name[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n \
    \   if (valid_ext.find(ext) == -1)\n    {\n        return \"No\";\n    }\n   \
    \ return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\",\
    \ \"dll\"];\n    int dot_index = file_name.find('.');\n    if (dot_index == -1)\n\
    \        return \"No\";\n    string extension = file_name.slice(dot_index + 1);\n\
    \    if (valid_extensions.find(extension) == -1)\n        return \"No\";\n   \
    \ string name = file_name.slice(0, dot_index);\n    if (name.length == 0)\n  \
    \      return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    int digit_count = 0;\n    foreach\
    \ (c; name)\n        if (c >= '0' && c <= '9')\n            digit_count++;\n \
    \   if (digit_count > 3)\n        return \"No\";\n    return \"Yes\";\n}\n/*\n\
    \    file_name_check(\"abc.txt\") == \"Yes\"\n    file_name_check(\"abc.exe\"\
    ) == \"Yes\"\n    file_name_check(\"abc.dll\") == \"Yes\"\n    file_name_check(\"\
    abc.abc\") == \"No\"\n    file_name_check(\"abc.txt.exe\") == \"No\"\n    file_name_check(\"\
    abc.txt.dll\") == \"No\"\n    file_name_check(\"abc.txt.txt\") == \"No\"\n   \
    \ file_name_check(\"abc.exe.txt\") == \"No\"\n    file_name_check(\"abc.exe.exe\"\
    ) == \"No\"\n    file_name_check(\"abc.exe.dll\") == \"No\"\n    file_name_check(\"\
    abc.dll.txt\") == \"No\"\n    file_name_check(\"abc.dll.exe\") == \"No\"\n   \
    \ file_name_check(\"abc.dll.dll\") == \"No\"\n    file_name_check(\"abc.txt.txt.txt\"\
    ) == \"No\"\n    file_name_check(\"abc.exe.exe.exe\") == \"No\"\n    file_name_check(\"\
    abc", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int\
    \ dot_index = file_name.find('.');\n    string file_name_without_extension = file_name.substr(0,\
    \ dot_index);\n    string file_extension = file_name.substr(dot_index + 1);\n\
    \    int digits_count = 0;\n    foreach(char c; file_name_without_extension)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            digits_count++;\n\
    \        }\n    }\n    if(digits_count > 3)\n    {\n        return \"No\";\n \
    \   }\n    if(file_name_without_extension.length == 0 || \n        (file_name_without_extension[0]\
    \ < 'a' || file_name_without_extension[0] > 'z') &&\n        (file_name_without_extension[0]\
    \ < 'A' || file_name_without_extension[0] > 'Z'))\n    {\n        return \"No\"\
    ;\n    }\n    if(!valid_extensions.find(file_extension))\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    // Write your code here\n \
    \   // Check if the file name is valid\n    // If it is valid, return \"Yes\"\n\
    \    // If it is not valid, return \"No\"\n    int dot_count = 0;\n    int digit_count\
    \ = 0;\n    int dot_index = 0;\n    string extension = \"\";\n    string name\
    \ = \"\";\n    bool valid = true;\n    foreach(i, c; file_name)\n    {\n     \
    \   if(c == '.')\n        {\n            dot_count++;\n            dot_index =\
    \ i;\n        }\n        else if(c >= '0' && c <= '9')\n        {\n          \
    \  digit_count++;\n        }\n    }\n    if(dot_count != 1 || digit_count > 3)\n\
    \    {\n        valid = false;\n    }\n    else\n    {\n        name = file_name[0..dot_index];\n\
    \        extension = file_name[dot_index+1..$];\n        if(name.length == 0 ||\
    \ !(name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n \
    \       {\n            valid = false;\n        }\n        else if(extension !=\
    \ \"txt\" && extension != \"exe\" && extension != \"dll\")\n        {\n      \
    \      valid = false;\n        }\n    }\n    return valid ? \"Yes\" : \"No\";\n\
    }", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n \
    \   string extension;\n    string file_name_without_extension;\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c.isDigit)\n        {\n            count++;\n\
    \        }\n        if(c == '.')\n        {\n            dot_count++;\n      \
    \      dot_index = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    file_name_without_extension = file_name[0..dot_index];\n\
    \    extension = file_name[dot_index+1..$];\n    if(file_name_without_extension.empty\
    \ || !file_name_without_extension[0].isLetter)\n    {\n        return \"No\";\n\
    \    }\n    if(extension != \"txt\" && extension != \"exe\" && extension != \"\
    dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n  \
    \  int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_after\
    \ = 0;\n    string sub_before = \"\";\n    string sub_after = \"\";\n    foreach(immutable\
    \ char c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = count;\n        }\n        count++;\n    }\n    if(dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    dot_index_after = dot_index\
    \ + 1;\n    sub_before = file_name[0..dot_index];\n    sub_after = file_name[dot_index_after..$];\n\
    \    if(sub_before.length == 0)\n    {\n        return \"No\";\n    }\n    if(!(('a'\
    \ <= sub_before[0] && sub_before[0] <= 'z') || ('A' <= sub_before[0] && sub_before[0]\
    \ <= 'Z')))\n    {\n        return \"No\";\n    }\n    if(sub_after != \"txt\"\
    \ && sub_after != \"exe\" && sub_after != \"dll\")\n    {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count =\
    \ 0;\n    bool flag = false;\n    foreach(c; file_name)\n    {\n        if(c >=\
    \ '0' && c <= '9')\n        {\n            count++;\n        }\n        if(c ==\
    \ '.')\n        {\n            dot_count++;\n        }\n        if(c >= 'a' &&\
    \ c <= 'z' || c >= 'A' && c <= 'Z')\n        {\n            flag = true;\n   \
    \     }\n    }\n    if(count > 3 || dot_count != 1 || flag == false)\n    {\n\
    \        return \"No\";\n    }\n    else\n    {\n        string[] arr = file_name.split(\"\
    .\");\n        if(arr[1] == \"txt\" || arr[1] == \"exe\" || arr[1] == \"dll\"\
    )\n        {\n            return \"Yes\";\n        }\n        else\n        {\n\
    \            return \"No\";\n        }\n    }\n}", "{\n    int count = 0;\n  \
    \  int dot_count = 0;\n    int dot_pos = 0;\n    int dot_pos_2 = 0;\n    int dot_pos_3\
    \ = 0;\n    string sub_str_1 = \"\";\n    string sub_str_2 = \"\";\n    string\
    \ sub_str_3 = \"\";\n    string sub_str_4 = \"\";\n    string sub_str_5 = \"\"\
    ;\n    string sub_str_6 = \"\";\n    string sub_str_7 = \"\";\n    string sub_str_8\
    \ = \"\";\n    string sub_str_9 = \"\";\n    string sub_str_10 = \"\";\n    string\
    \ sub_str_11 = \"\";\n    string sub_str_12 = \"\";\n    string sub_str_13 = \"\
    \";\n    string sub_str_14 = \"\";\n    string sub_str_15 = \"\";\n    string\
    \ sub_str_16 = \"\";\n    string sub_str_17 = \"\";\n    string sub_str_18 = \"\
    \";\n    string sub_str_19 = \"\";\n    string sub_str_20 = \"\";\n    string\
    \ sub_str_21 = \"\";\n    string sub_str_22 = \"\";\n    string sub_str_23 = \"\
    \";\n    string sub_str_24 = \"\";\n    string sub_str_25 = \"\";\n    string\
    \ sub_str_26 = \"\";\n    string sub_str_27 = \"\";\n    string sub_str_28 = \"\
    \";\n    string sub_str_29 = \"\";\n    string sub_str_30 = \"\";\n    string\
    \ sub_str_31 = \"\";\n    string sub_str_32 = \"\";\n    string sub_str_33 = \"\
    \";\n    string sub_str_34 = \"\";\n    string sub_str_35 = \"\";\n    string\
    \ sub_str_36 = \"\";\n    string sub_str_37 = \"\";\n    string sub_str_38 = \"\
    \";\n    string sub_str_39 = \"\";\n    string sub_str_40 = \"\";\n    string\
    \ sub_str_41 = \"\";\n    string sub_str_42 = \"\";\n", "{\n    auto dot_pos =\
    \ file_name.find('.');\n    if (dot_pos == -1) return \"No\";\n    if (file_name.count('.')\
    \ != 1) return \"No\";\n    if (file_name.count('0', '9') > 3) return \"No\";\n\
    \    if (dot_pos == 0) return \"No\";\n    if (file_name[0] < 'a' || file_name[0]\
    \ > 'z') return \"No\";\n    if (file_name[0] < 'A' || file_name[0] > 'Z') return\
    \ \"No\";\n    if (file_name[dot_pos + 1 .. $] != \"txt\" && file_name[dot_pos\
    \ + 1 .. $] != \"exe\" && file_name[dot_pos + 1 .. $] != \"dll\") return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] parts = split(file_name, \".\");\n    if (parts.length\
    \ != 2)\n        return \"No\";\n    if (parts[0].length == 0)\n        return\
    \ \"No\";\n    if (parts[0][0] < 'a' || parts[0][0] > 'z' && parts[0][0] < 'A'\
    \ || parts[0][0] > 'Z')\n        return \"No\";\n    if (count(parts[0], \"0123456789\"\
    ) > 3)\n        return \"No\";\n    if (valid_extensions.find(parts[1]) == -1)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts\
    \ = file_name.split(\".\");\n    string file_name_part = file_name_parts[0];\n\
    \    string file_extension = file_name_parts[1];\n    foreach(char c; file_name_part)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n  \
    \      }\n    }\n    if(count > 3)\n    {\n        return \"No\";\n    }\n   \
    \ else if(file_name_part.length == 0)\n    {\n        return \"No\";\n    }\n\
    \    else if(file_name_part[0] < 'a' || file_name_part[0] > 'z' || file_name_part[0]\
    \ < 'A' || file_name_part[0] > 'Z')\n    {\n        return \"No\";\n    }\n  \
    \  else if(!valid_extensions.canFind(file_extension))\n    {\n        return \"\
    No\";\n    }\n    else\n    {\n        return \"Yes\";\n    }\n}", "{\n    int\
    \ count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    string extension\
    \ = \"\";\n    string name = \"\";\n    string[] valid_extensions = [\"txt\",\
    \ \"exe\", \"dll\"];\n    foreach(char c; file_name)\n    {\n        if(c >= '0'\
    \ && c <= '9')\n        {\n            count++;\n        }\n        if(c == '.')\n\
    \        {\n            dot_count++;\n            dot_index = file_name.indexOf('.');\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    else\n    {\n        name = file_name[0..dot_index];\n \
    \       extension = file_name[dot_index+1..$];\n        if(name.length == 0 ||\
    \ !(name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n \
    \       {\n            return \"No\";\n        }\n        else\n        {\n  \
    \          foreach(string ext; valid_extensions)\n            {\n            \
    \    if(ext == extension)\n                {\n                    return \"Yes\"\
    ;\n                }\n            }\n            return \"No\";\n        }\n \
    \   }\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index =\
    \ 0;\n    int dot_index_2 = 0;\n    int dot_index_3 = 0;\n    int dot_index_4\
    \ = 0;\n    int dot_index_5 = 0;\n    int dot_index_6 = 0;\n    int dot_index_7\
    \ = 0;\n    int dot_index_8 = 0;\n    int dot_index_9 = 0;\n    int dot_index_10\
    \ = 0;\n    int dot_index_11 = 0;\n    int dot_index_12 = 0;\n    int dot_index_13\
    \ = 0;\n    int dot_index_14 = 0;\n    int dot_index_15 = 0;\n    int dot_index_16\
    \ = 0;\n    int dot_index_17 = 0;\n    int dot_index_18 = 0;\n    int dot_index_19\
    \ = 0;\n    int dot_index_20 = 0;\n    int dot_index_21 = 0;\n    int dot_index_22\
    \ = 0;\n    int dot_index_23 = 0;\n    int dot_index_24 = 0;\n    int dot_index_25\
    \ = 0;\n    int dot_index_26 = 0;\n    int dot_index_27 = 0;\n    int dot_index_28\
    \ = 0;\n    int dot_index_29 = 0;\n    int dot_index_30 = 0;\n    int dot_index_31\
    \ = 0;\n    int dot_index_32 = 0;\n    int dot_index_33 = 0;\n    int dot_index_34\
    \ = 0;\n    int dot_index_35 = 0;\n    int dot_index_36 = 0;\n    int dot_index_37\
    \ = 0;\n    int dot_index_38 = 0;\n    int dot_index_39 = 0;\n    int dot_index_40\
    \ = 0;\n    int dot_index_41 = 0;\n    int dot_index_42 = 0;\n    int dot_index_43\
    \ = 0;\n    int dot_index_44 = 0;\n    int dot_index_45 = 0;\n", "{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name.slice(dot_index\
    \ + 1);\n    if (extension.length == 0 || valid_extensions.find(extension) ==\
    \ -1)\n        return \"No\";\n    string name = file_name.slice(0, dot_index);\n\
    \    if (name.length == 0 || !isAlpha(name[0]))\n        return \"No\";\n    int\
    \ digits_count = 0;\n    foreach (c; name)\n        if (isDigit(c))\n        \
    \    digits_count++;\n    if (digits_count > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    int dot_index = file_name.find('.');\n    if (dot_index == -1)\n     \
    \   return \"No\";\n    string extension = file_name.substr(dot_index + 1);\n\
    \    if (valid_extensions.find(extension) == -1)\n        return \"No\";\n   \
    \ string name = file_name.substr(0, dot_index);\n    if (name.length == 0)\n \
    \       return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A'\
    \ || name[0] > 'Z')\n        return \"No\";\n    int digits_count = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digits_count++;\n\
    \    }\n    if (digits_count > 3)\n        return \"No\";\n    return \"Yes\"\
    ;\n}\n/*\nCreate a function which takes a string representing a file's name, and\
    \ returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \            \n*/\nstring file_name_check(string file_name) \n{\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name.substr(dot_index\
    \ + 1);\n    if (valid_ext", "{\n    int count = 0;\n    int dot_count = 0;\n\
    \    int dot_pos = 0;\n    int len = file_name.length;\n    string ext = \"\"\
    ;\n    string name = \"\";\n    string[] valid_ext = [\"txt\", \"exe\", \"dll\"\
    ];\n    foreach(i, c; file_name)\n    {\n        if(c == '.')\n        {\n   \
    \         dot_count++;\n            dot_pos = i;\n        }\n        if(c >= '0'\
    \ && c <= '9')\n        {\n            count++;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    ext = file_name[dot_pos\
    \ + 1 .. $];\n    name = file_name[0 .. dot_pos - 1];\n    if(name.length == 0\
    \ || !(name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n\
    \    {\n        return \"No\";\n    }\n    if(!valid_ext.contains(ext))\n    {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    if (file_name_parts[0].length\
    \ == 0)\n        return \"No\";\n    if (file_name_parts[0].count('0','9') > 3)\n\
    \        return \"No\";\n    if (file_name_parts[0].count('a','z') == 0 && file_name_parts[0].count('A','Z')\
    \ == 0)\n        return \"No\";\n    if (valid_extensions.count(file_name_parts[1])\
    \ == 0)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    // your code\
    \ here\n    int count = 0;\n    int dot = 0;\n    foreach(i; file_name)\n    {\n\
    \        if(i == '.')\n        {\n            dot++;\n        }\n        if(i\
    \ >= '0' && i <= '9')\n        {\n            count++;\n        }\n    }\n   \
    \ if(count > 3 || dot != 1)\n    {\n        return \"No\";\n    }\n    else\n\
    \    {\n        string[] file_name_split = file_name.split(\".\");\n        if(file_name_split[0].length\
    \ == 0)\n        {\n            return \"No\";\n        }\n        else\n    \
    \    {\n            if(file_name_split[0][0] < 'a' || file_name_split[0][0] >\
    \ 'z')\n            {\n                return \"No\";\n            }\n       \
    \     else\n            {\n                if(file_name_split[1] == \"txt\" ||\
    \ file_name_split[1] == \"exe\" || file_name_split[1] == \"dll\")\n          \
    \      {\n                    return \"Yes\";\n                }\n           \
    \     else\n                {\n                    return \"No\";\n          \
    \      }\n            }\n        }\n    }\n}", "{\n    int count_digits = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    string extension;\n    string\
    \ name;\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = file_name.indexOf(c);\n        }\n        if(c >= '0'\
    \ && c <= '9')\n        {\n            count_digits++;\n        }\n    }\n   \
    \ if(count_digits > 3)\n    {\n        return \"No\";\n    }\n    if(dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    if(dot_index == 0)\n    {\n\
    \        return \"No\";\n    }\n    name = file_name[0..dot_index-1];\n    extension\
    \ = file_name[dot_index+1..$];\n    if(name.length == 0)\n    {\n        return\
    \ \"No\";\n    }\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A'\
    \ && name[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(!valid_extensions.contains(extension))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == file_name.npos)\n        return \"\
    No\";\n    auto dot_pos_after = file_name.find('.', dot_pos + 1);\n    if (dot_pos_after\
    \ != file_name.npos)\n        return \"No\";\n    auto digits = file_name.count!(a\
    \ => a >= '0' && a <= '9');\n    if (digits > 3)\n        return \"No\";\n   \
    \ auto ext = file_name[dot_pos + 1 .. $];\n    if (ext != \"txt\" && ext != \"\
    exe\" && ext != \"dll\")\n        return \"No\";\n    auto name = file_name[0\
    \ .. dot_pos];\n    if (name.empty || !(name[0] >= 'a' && name[0] <= 'z' || name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    auto sub_str = file_name[0..dot_pos];\n    if (sub_str.length ==\
    \ 0 || !isAlpha(sub_str[0]))\n        return \"No\";\n    auto digit_count = 0;\n\
    \    foreach (i, c; sub_str)\n    {\n        if (isDigit(c))\n            digit_count++;\n\
    \    }\n    if (digit_count > 3)\n        return \"No\";\n    sub_str = file_name[dot_pos\
    \ + 1..$];\n    if (sub_str != \"txt\" && sub_str != \"exe\" && sub_str != \"\
    dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_pos = 0;\n    string ext = \"\";\n    string\
    \ name = \"\";\n    string[] valid_ext = [\"txt\", \"exe\", \"dll\"];\n    foreach(c;\
    \ file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_pos = count;\n        }\n        count++;\n    }\n    if(dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    ext = file_name[dot_pos+1..$];\n\
    \    name = file_name[0..dot_pos-1];\n    if(ext !in valid_ext)\n    {\n     \
    \   return \"No\";\n    }\n    if(name.length == 0)\n    {\n        return \"\
    No\";\n    }\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0] >= 'A' &&\
    \ name[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n    foreach(c; name)\n\
    \    {\n        if(c >= '0' && c <= '9')\n        {\n            return \"No\"\
    ;\n        }\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int\
    \ dot_count = 0;\n    int i = 0;\n    int j = 0;\n    string sub_string_before_dot\
    \ = \"\";\n    string sub_string_after_dot = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    bool is_valid = true;\n    foreach(char\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            i = j;\n        }\n        if(c >= '0' && c <= '9')\n        {\n\
    \            count++;\n        }\n        j++;\n    }\n    if(count > 3)\n   \
    \ {\n        is_valid = false;\n    }\n    if(dot_count != 1)\n    {\n       \
    \ is_valid = false;\n    }\n    if(i == 0)\n    {\n        is_valid = false;\n\
    \    }\n    else\n    {\n        sub_string_before_dot = file_name[0..i-1];\n\
    \        sub_string_after_dot = file_name[i+1..$];\n    }\n    if(sub_string_before_dot.length\
    \ == 0)\n    {\n        is_valid = false;\n    }\n    else\n    {\n        if(!(sub_string_before_dot[0]\
    \ >= 'a' && sub_string_before_dot[0] <= 'z') && \n            !(sub_string_before_dot[0]\
    \ >= 'A' && sub_string_before_dot[0] <= 'Z'))\n        {\n            is_valid\
    \ = false;\n        }\n    }\n    if(!(sub_string_after_dot in valid_extensions))\n\
    \    {\n        is_valid = false;\n    }\n    if(is_valid)\n    {\n        return\
    \ \"Yes\";\n    }\n    else\n    {\n        return \"No\";\n    }\n}", "{\n  \
    \  string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.find(\".\");\n    string extension = file_name[dot_index+1..$];\n\
    \    string name = file_name[0..dot_index-1];\n    int digits_count = 0;\n   \
    \ foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n           \
    \ digits_count++;\n    }\n    if(digits_count > 3)\n        return \"No\";\n \
    \   if(extension.length == 0)\n        return \"No\";\n    if(!(extension in valid_extensions))\n\
    \        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') && !(name[0]\
    \ >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    auto dot_index = file_name.find('.');\n    if (dot_index == -1) return \"\
    No\";\n    if (file_name.count('.') != 1) return \"No\";\n    if (dot_index ==\
    \ 0) return \"No\";\n    if (dot_index == file_name.length - 1) return \"No\"\
    ;\n    if (file_name[0] < 'a' || file_name[0] > 'z') return \"No\";\n    if (file_name[0]\
    \ < 'A' || file_name[0] > 'Z') return \"No\";\n    if (file_name[dot_index + 1]\
    \ != 't') return \"No\";\n    if (file_name[dot_index + 2] != 'x') return \"No\"\
    ;\n    if (file_name[dot_index + 3] != 't') return \"No\";\n    if (file_name[dot_index\
    \ + 4] != 'e') return \"No\";\n    if (file_name[dot_index + 5] != 'x') return\
    \ \"No\";\n    if (file_name[dot_index + 6] != 'e') return \"No\";\n    if (file_name[dot_index\
    \ + 7] != 'd') return \"No\";\n    if (file_name[dot_index + 8] != 'l') return\
    \ \"No\";\n    if (file_name[dot_index + 9] != 'l') return \"No\";\n    if (file_name.count('0')\
    \ > 3) return \"No\";\n    if (file_name.count('1') > 3) return \"No\";\n    if\
    \ (file_name.count('2') > 3) return \"No\";\n    if (file_name.count('3') > 3)\
    \ return \"No\";\n    if (file_name.count('4') > 3) return \"No\";\n    if (file_name.count('5')\
    \ > 3) return \"No\";\n    if (file_name.count('6') > 3) return \"No\";\n    if\
    \ (file_name.count('7') > 3) return \"No\";\n    if (file_name.count('8') > 3)\
    \ return \"No\";", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    int dot_index = file_name.indexOf('.');\n    if (dot_index == -1)\n  \
    \      return \"No\";\n    string name = file_name[0..dot_index];\n    string\
    \ extension = file_name[dot_index+1..$];\n    if (name.length == 0 || !name[0].isAlpha)\n\
    \        return \"No\";\n    if (extension.length == 0 || valid_extensions.indexOf(extension)\
    \ == -1)\n        return \"No\";\n    int digits_count = 0;\n    foreach (c; name)\n\
    \        if (c.isDigit)\n            digits_count++;\n    if (digits_count > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    string[] file_name_parts = file_name.split(\"\
    .\");\n    if (file_name_parts.length != 2)\n        return \"No\";\n    foreach\
    \ (i, c; file_name_parts[0])\n    {\n        if (c >= '0' && c <= '9')\n     \
    \   {\n            if (i > 3)\n                return \"No\";\n        }\n   \
    \     else if (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c <= 'Z'))\n         \
    \   return \"No\";\n    }\n    if (file_name_parts[1] !in valid_extensions)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == file_name.npos)\n        return \"No\";\n    auto ext = file_name.substr(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.empty())\n\
    \        return \"No\";\n    if (!isalpha(name[0]))\n        return \"No\";\n\
    \    if (count(name.begin(), name.end(), '0') + count(name.begin(), name.end(),\
    \ '1') +\n        count(name.begin(), name.end(), '2') + count(name.begin(), name.end(),\
    \ '3') +\n        count(name.begin(), name.end(), '4') + count(name.begin(), name.end(),\
    \ '5') +\n        count(name.begin(), name.end(), '6') + count(name.begin(), name.end(),\
    \ '7') +\n        count(name.begin(), name.end(), '8') + count(name.begin(), name.end(),\
    \ '9') > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    string extension;\n\
    \    string name;\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    foreach(char c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n        if(c == '.')\n        {\n\
    \            dot_count++;\n            dot_index = file_name.indexOf(c);\n   \
    \     }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"\
    No\";\n    }\n    name = file_name[0..dot_index-1];\n    extension = file_name[dot_index+1..$];\n\
    \    if(name.length == 0 || !(name[0] >= 'a' && name[0] <= 'z' || name[0] >= 'A'\
    \ && name[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(!valid_extensions.find(extension))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    auto dot_index\
    \ = file_name.find('.');\n    if (dot_index == -1)\n        return \"No\";\n \
    \   auto ext = file_name.substr(dot_index + 1);\n    if (ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\")\n        return \"No\";\n    auto name = file_name.substr(0,\
    \ dot_index);\n    if (name.empty())\n        return \"No\";\n    if (name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"\
    No\";\n    if (count(name.begin(), name.end(), '0') + count(name.begin(), name.end(),\
    \ '1') +\n        count(name.begin(), name.end(), '2') + count(name.begin(), name.end(),\
    \ '3') +\n        count(name.begin(), name.end(), '4') + count(name.begin(), name.end(),\
    \ '5') +\n        count(name.begin(), name.end(), '6') + count(name.begin(), name.end(),\
    \ '7') +\n        count(name.begin(), name.end(), '8') + count(name.begin(), name.end(),\
    \ '9') > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1) return \"No\";\n    if (dot_pos\
    \ == 0) return \"No\";\n    if (dot_pos == file_name.length - 1) return \"No\"\
    ;\n    auto ext = file_name[dot_pos + 1 .. $];\n    if (ext != \"txt\" && ext\
    \ != \"exe\" && ext != \"dll\") return \"No\";\n    auto name = file_name[0 ..\
    \ dot_pos];\n    if (name.length == 0) return \"No\";\n    if (name[0] < 'a' ||\
    \ name[0] > 'z' && name[0] < 'A' || name[0] > 'Z') return \"No\";\n    int digits\
    \ = 0;\n    foreach (c; name) if (c >= '0' && c <= '9') ++digits;\n    if (digits\
    \ > 3) return \"No\";\n    return \"Yes\";\n}", "{\n    int dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    string before_dot = file_name[0..dot_pos-1];\n\
    \    string after_dot = file_name[dot_pos+1..$];\n    if (before_dot.length ==\
    \ 0 || before_dot.length > 8)\n        return \"No\";\n    if (after_dot != \"\
    txt\" && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\"\
    ;\n    int num_of_digits = 0;\n    foreach (c; before_dot)\n    {\n        if\
    \ (c >= '0' && c <= '9')\n            num_of_digits++;\n        else if (c < 'a'\
    \ || c > 'z')\n            return \"No\";\n    }\n    if (num_of_digits > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n   \
    \ int dot_count = 0;\n    int dot_index = 0;\n    int dot_index_end = 0;\n   \
    \ string file_name_extension = \"\";\n    string file_name_extension_check = \"\
    \";\n    string file_name_extension_check_2 = \"\";\n    string file_name_extension_check_3\
    \ = \"\";\n    string file_name_extension_check_4 = \"\";\n    string file_name_extension_check_5\
    \ = \"\";\n    string file_name_extension_check_6 = \"\";\n    string file_name_extension_check_7\
    \ = \"\";\n    string file_name_extension_check_8 = \"\";\n    string file_name_extension_check_9\
    \ = \"\";\n    string file_name_extension_check_10 = \"\";\n    string file_name_extension_check_11\
    \ = \"\";\n    string file_name_extension_check_12 = \"\";\n    string file_name_extension_check_13\
    \ = \"\";\n    string file_name_extension_check_14 = \"\";\n    string file_name_extension_check_15\
    \ = \"\";\n    string file_name_extension_check_16 = \"\";\n    string file_name_extension_check_17\
    \ = \"\";\n    string file_name_extension_check_18 = \"\";\n    string file_name_extension_check_19\
    \ = \"\";\n    string file_name_extension_check_20 = \"\";\n    string file_name_extension_check_21\
    \ = \"\";\n    string file_name_extension_check_22 = \"\";\n    string file_name_extension_check_23\
    \ = \"\";\n    string file_name_extension_check_24 = \"\";\n    string file_name_extension_check_25\
    \ = \"\";\n    string file_name_extension_check_26 = \"\";\n    string file_name_extension_check_27\
    \ = \"\";\n    string file_name_extension_check_28 = \"\";\n    string file_name_extension_check_29\
    \ = \"\";", "{\n    int dot_count = 0;\n    int digit_count = 0;\n    int i =\
    \ 0;\n    int len = file_name.length;\n    string ext = \"\";\n    string name\
    \ = \"\";\n    string[] valid_ext = [\"txt\", \"exe\", \"dll\"];\n    foreach(c;\
    \ file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            ext = file_name[i+1..$];\n            name = file_name[0..i-1];\n\
    \        }\n        if(c >= '0' && c <= '9')\n        {\n            digit_count++;\n\
    \        }\n        i++;\n    }\n    if(dot_count != 1 || digit_count > 3 || name.length\
    \ == 0 || !(name[0] >= 'a' && name[0] <= 'z') || !(name[0] >= 'A' && name[0] <=\
    \ 'Z') || !(ext in valid_ext))\n    {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int dot_index_after = 0;\n    string sub_before = \"\";\n    string\
    \ sub_after = \"\";\n    string[] valid_ext = [\"txt\", \"exe\", \"dll\"];\n \
    \   foreach(int i, char c; file_name)\n    {\n        if(c == '.')\n        {\n\
    \            dot_count++;\n            dot_index = i;\n        }\n        if(c\
    \ >= '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n   \
    \ if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    dot_index_after\
    \ = dot_index + 1;\n    sub_before = file_name[0..dot_index];\n    sub_after =\
    \ file_name[dot_index_after..$];\n    if(sub_before.length == 0 || !(sub_before[0]\
    \ >= 'a' && sub_before[0] <= 'z') || !(sub_before[0] >= 'A' && sub_before[0] <=\
    \ 'Z'))\n    {\n        return \"No\";\n    }\n    if(!(sub_after in valid_ext))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    string sub_before_dot\
    \ = \"\";\n    string sub_after_dot = \"\";\n    string[] valid_extensions = [\"\
    txt\", \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n        if(c.isDigit)\n\
    \        {\n            count++;\n        }\n        if(c == '.')\n        {\n\
    \            dot_count++;\n            dot_index = i;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    sub_before_dot\
    \ = file_name[0..dot_index];\n    sub_after_dot = file_name[dot_index+1..$];\n\
    \    if(sub_before_dot.length == 0 || !sub_before_dot[0].isLetter || !valid_extensions.contains(sub_after_dot))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == file_name.length || dot_pos == 0)\n\
    \        return \"No\";\n    auto dot_pos_before = file_name[dot_pos - 1];\n \
    \   if (dot_pos_before < 'a' || dot_pos_before > 'z' && dot_pos_before < 'A' ||\
    \ dot_pos_before > 'Z')\n        return \"No\";\n    auto dot_pos_after = file_name[dot_pos\
    \ + 1];\n    if (dot_pos_after != 't' && dot_pos_after != 'e' && dot_pos_after\
    \ != 'd')\n        return \"No\";\n    if (file_name[dot_pos + 2] != 'x' || file_name[dot_pos\
    \ + 3] != 'e')\n        return \"No\";\n    int count = 0;\n    foreach (i; 0\
    \ .. file_name.length)\n    {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9')\n            count++;\n    }\n    if (count > 3)\n        return \"\
    No\";\n    return \"Yes\";\n}\n/*\n    Create a function which takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n*/\nstring file_name_check2(string file_name)\
    \ \n{\n    auto dot_pos = file_name.find('.');\n    if (dot_pos == file_name.length\
    \ || dot_pos ==", "{\n    auto dot_index = file_name.find('.');\n    if (dot_index\
    \ == -1)\n        return \"No\";\n    auto dot_index_plus_1 = dot_index + 1;\n\
    \    if (dot_index_plus_1 == file_name.length)\n        return \"No\";\n    auto\
    \ extension = file_name[dot_index_plus_1..$];\n    if (extension != \"txt\" &&\
    \ extension != \"exe\" && extension != \"dll\")\n        return \"No\";\n    auto\
    \ file_name_without_extension = file_name[0..dot_index];\n    if (file_name_without_extension.length\
    \ == 0)\n        return \"No\";\n    auto first_char = file_name_without_extension[0];\n\
    \    if (first_char < 'A' || (first_char > 'Z' && first_char < 'a') || first_char\
    \ > 'z')\n        return \"No\";\n    auto digits_count = 0;\n    foreach (i,\
    \ c; file_name_without_extension)\n    {\n        if (c >= '0' && c <= '9')\n\
    \            digits_count++;\n    }\n    if (digits_count > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    // TODO: Implement your solution here\n\
    \    return \"\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int\
    \ dot_index = 0;\n    int len = file_name.length;\n    int i = 0;\n    string\
    \ sub_str;\n    string sub_str2;\n    string[] valid_ext = [\"txt\", \"exe\",\
    \ \"dll\"];\n    foreach(c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n        if(c == '.')\n        {\n\
    \            dot_count++;\n            dot_index = i;\n        }\n        i++;\n\
    \    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"No\";\n \
    \   }\n    sub_str = file_name[0..dot_index];\n    sub_str2 = file_name[dot_index+1..$];\n\
    \    if(sub_str.length == 0 || !(sub_str[0] >= 'a' && sub_str[0] <= 'z') || !(sub_str[0]\
    \ >= 'A' && sub_str[0] <= 'Z'))\n    {\n        return \"No\";\n    }\n    if(!(sub_str2\
    \ in valid_ext))\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}",
  "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.find(\".\");\n    string extension = file_name[dot_index+1..$];\n\
    \    string name = file_name[0..dot_index-1];\n    int digits_count = 0;\n   \
    \ foreach(char c; name)\n    {\n        if(c >= '0' && c <= '9')\n           \
    \ digits_count++;\n    }\n    if(digits_count > 3)\n        return \"No\";\n \
    \   if(extension !in valid_extensions)\n        return \"No\";\n    if(name.length\
    \ == 0)\n        return \"No\";\n    if(!(name[0] >= 'a' && name[0] <= 'z') &&\
    \ !(name[0] >= 'A' && name[0] <= 'Z'))\n        return \"No\";\n    return \"\
    Yes\";\n}", "{\n    // your code here\n    int count = 0;\n    int dot_count =\
    \ 0;\n    int dot_index = 0;\n    int dot_index_temp = 0;\n    string sub_string_before_dot\
    \ = \"\";\n    string sub_string_after_dot = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    bool is_valid = true;\n    foreach(i, c;\
    \ file_name)\n    {\n        if(c == '.')\n        {\n            dot_count +=\
    \ 1;\n            dot_index_temp = i;\n        }\n        if(c >= '0' && c <=\
    \ '9')\n        {\n            count += 1;\n        }\n    }\n    if(count > 3)\n\
    \    {\n        is_valid = false;\n    }\n    if(dot_count != 1)\n    {\n    \
    \    is_valid = false;\n    }\n    else\n    {\n        dot_index = dot_index_temp;\n\
    \    }\n    if(dot_index == 0)\n    {\n        is_valid = false;\n    }\n    else\n\
    \    {\n        sub_string_before_dot = file_name[0..dot_index];\n        sub_string_after_dot\
    \ = file_name[dot_index+1..$];\n    }\n    if(sub_string_before_dot.length ==\
    \ 0)\n    {\n        is_valid = false;\n    }\n    else\n    {\n        if(sub_string_before_dot[0]\
    \ < 'a' || sub_string_before_dot[0] > 'z')\n        {\n            if(sub_string_before_dot[0]\
    \ < 'A' || sub_string_before_dot[0] > 'Z')\n            {\n                is_valid\
    \ = false;\n            }\n        }\n    }\n    if(!valid_extensions.contains(sub_string_after_dot))\n\
    \    {\n        is_valid = false;\n    }\n    if(is_valid)\n    {\n        return\
    \ \"Yes\";\n    }\n    else\n    {\n        return \"No\";\n", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\" && ext !=\
    \ \"exe\" && ext != \"dll\")\n        return \"No\";\n    auto name = file_name.substr(0,\
    \ dot_pos);\n    if (name.length == 0)\n        return \"No\";\n    if (name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"\
    No\";\n    int digits = 0;\n    foreach (c; name)\n    {\n        if (c >= '0'\
    \ && c <= '9')\n            digits++;\n    }\n    if (digits > 3)\n        return\
    \ \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count\
    \ = 0;\n    int dot_index = 0;\n    int dot_index_end = 0;\n    string extension\
    \ = \"\";\n    string file_name_no_extension = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(char c; file_name)\n    {\n    \
    \    if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = count;\n        }\n        count++;\n    }\n    if(dot_count != 1)\n    {\n\
    \        return \"No\";\n    }\n    dot_index_end = count;\n    extension = file_name[dot_index+1..dot_index_end];\n\
    \    file_name_no_extension = file_name[0..dot_index-1];\n    if(!(extension in\
    \ valid_extensions))\n    {\n        return \"No\";\n    }\n    if(file_name_no_extension.length\
    \ == 0)\n    {\n        return \"No\";\n    }\n    foreach(char c; file_name_no_extension)\n\
    \    {\n        if(c in ['0'..'9'])\n        {\n            return \"No\";\n \
    \       }\n    }\n    return \"Yes\";\n}", "{\n    int dot_index = file_name.find('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string ext = file_name.substr(dot_index\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    string name = file_name.substr(0, dot_index);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    int digit_count = 0;\n\
    \    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n           \
    \ digit_count++;\n    }\n    if (digit_count > 3)\n        return \"No\";\n  \
    \  return \"Yes\";\n}", "{\n    auto dot_index = file_name.find('.');\n    if\
    \ (dot_index == -1)\n        return \"No\";\n    auto extension = file_name.slice(dot_index+1);\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    )\n        return \"No\";\n    auto name = file_name.slice(0, dot_index);\n  \
    \  if (name.length == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0]\
    \ > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"No\";\n    int count\
    \ = 0;\n    for (int i = 0; i < name.length; i++)\n    {\n        if (name[i]\
    \ >= '0' && name[i] <= '9')\n            count++;\n    }\n    if (count > 3)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1) return \"No\";\n    if (dot_pos == 0) return \"No\";\n\
    \    if (dot_pos == file_name.length - 1) return \"No\";\n    auto ext = file_name[dot_pos\
    \ + 1 .. $];\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") return\
    \ \"No\";\n    auto name = file_name[0 .. dot_pos];\n    if (name.length == 0)\
    \ return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0]\
    \ > 'Z') return \"No\";\n    int digits = 0;\n    foreach (c; name) {\n      \
    \  if (c >= '0' && c <= '9') digits++;\n    }\n    if (digits > 3) return \"No\"\
    ;\n    return \"Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    string[] parts = file_name.split(\".\");\n    if (parts.length\
    \ != 2)\n        return \"No\";\n    if (parts[0].length == 0)\n        return\
    \ \"No\";\n    if (parts[0].length > 8)\n        return \"No\";\n    if (parts[0].count(\"\
    0-9\") > 3)\n        return \"No\";\n    if (parts[0].count(\"a-zA-Z\") == 0)\n\
    \        return \"No\";\n    if (valid_extensions.count(parts[1]) == 0)\n    \
    \    return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    string\
    \ sub_before = \"\";\n    string sub_after = \"\";\n    bool dot_found = false;\n\
    \    foreach(c; file_name)\n    {\n        if(c == '.')\n        {\n         \
    \   dot_found = true;\n            continue;\n        }\n        if(!dot_found)\n\
    \        {\n            if(c >= '0' && c <= '9')\n            {\n            \
    \    count++;\n                if(count > 3)\n                    return \"No\"\
    ;\n            }\n            else if(c >= 'a' && c <= 'z' || c >= 'A' && c <=\
    \ 'Z')\n            {\n                sub_before ~= c;\n            }\n     \
    \       else\n            {\n                return \"No\";\n            }\n \
    \       }\n        else\n        {\n            sub_after ~= c;\n        }\n \
    \   }\n    if(sub_before.length == 0 || sub_after.length == 0 || !dot_found)\n\
    \        return \"No\";\n    if(sub_after == \"txt\" || sub_after == \"exe\" ||\
    \ sub_after == \"dll\")\n        return \"Yes\";\n    return \"No\";\n}", "{\n\
    \    auto dot_pos = file_name.find(\".\");\n    if (dot_pos == -1)\n        return\
    \ \"No\";\n    auto extension = file_name.substr(dot_pos + 1);\n    if (extension\
    \ != \"txt\" && extension != \"exe\" && extension != \"dll\")\n        return\
    \ \"No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.length\
    \ == 0)\n        return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0]\
    \ < 'A' || name[0] > 'Z')\n        return \"No\";\n    auto digits = 0;\n    foreach\
    \ (c; name)\n    {\n        if (c >= '0' && c <= '9')\n            digits++;\n\
    \    }\n    if (digits > 3)\n        return \"No\";\n    return \"Yes\";\n}",
  "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int\
    \ ext_index = 0;\n    string ext = \"\";\n    foreach(i, c; file_name)\n    {\n\
    \        if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n\
    \        if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n       \
    \ return \"No\";\n    }\n    ext_index = dot_index + 1;\n    ext = file_name[ext_index..$];\n\
    \    if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n    {\n        return\
    \ \"No\";\n    }\n    if(file_name[0] < 'a' || file_name[0] > 'z')\n    {\n  \
    \      return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n\
    \    int dot_count = 0;\n    int dot_index = 0;\n    string sub_string_before_dot\
    \ = \"\";\n    string sub_string_after_dot = \"\";\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n      \
    \  if(c in '0'..'9')\n        {\n            count++;\n        }\n        if(c\
    \ == '.')\n        {\n            dot_count++;\n            dot_index = i;\n \
    \       }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"\
    No\";\n    }\n    sub_string_before_dot = file_name[0..dot_index];\n    sub_string_after_dot\
    \ = file_name[dot_index + 1..$];\n    if(sub_string_before_dot.length == 0 ||\
    \ !(sub_string_before_dot[0] in 'a'..'z' || sub_string_before_dot[0] in 'A'..'Z'))\n\
    \    {\n        return \"No\";\n    }\n    if(!(sub_string_after_dot in valid_extensions))\n\
    \    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_pos = 0;\n    int dot_count = 0;\n    string before_dot =\
    \ \"\";\n    string after_dot = \"\";\n    foreach(i, c; file_name)\n    {\n \
    \       if(c == '.')\n        {\n            dot_pos = i;\n            dot_count++;\n\
    \        }\n        else if(c >= '0' && c <= '9')\n        {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return\
    \ \"No\";\n    }\n    before_dot = file_name[0..dot_pos];\n    after_dot = file_name[dot_pos+1..$];\n\
    \    if(before_dot == \"\" || (before_dot[0] < 'a' || before_dot[0] > 'z') &&\
    \ (before_dot[0] < 'A' || before_dot[0] > 'Z'))\n    {\n        return \"No\"\
    ;\n    }\n    if(after_dot != \"txt\" && after_dot != \"exe\" && after_dot !=\
    \ \"dll\")\n    {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    string[] parts\
    \ = file_name.split(\".\");\n    if (parts.length != 2)\n        return \"No\"\
    ;\n    if (parts[0].length == 0)\n        return \"No\";\n    if (valid_extensions.indexOf(parts[1])\
    \ == -1)\n        return \"No\";\n    if (parts[0].length == 1)\n        return\
    \ \"Yes\";\n    if (parts[0].length == 2)\n        return parts[0][0].isAlpha()\
    \ ? \"Yes\" : \"No\";\n    if (parts[0].length == 3)\n        return parts[0][0].isAlpha()\
    \ && parts[0][1].isDigit() && parts[0][2].isDigit() ? \"Yes\" : \"No\";\n    return\
    \ \"No\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    string extension = \"\";\n    string name = \"\";\n    foreach(i,\
    \ c; file_name)\n    {\n        if(c == '.')\n        {\n            dot_count++;\n\
    \            dot_index = i;\n        }\n        if(c >= '0' && c <= '9')\n   \
    \     {\n            count++;\n        }\n    }\n    if(count > 3 || dot_count\
    \ != 1)\n    {\n        return \"No\";\n    }\n    name = file_name[0..dot_index];\n\
    \    extension = file_name[dot_index+1..$];\n    if(name == \"\" || !(name[0]\
    \ >= 'a' && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n    {\n    \
    \    return \"No\";\n    }\n    if(extension != \"txt\" && extension != \"exe\"\
    \ && extension != \"dll\")\n    {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] parts = file_name.split(\".\");\n    if (parts.length != 2)\n  \
    \      return \"No\";\n    if (parts[0].length == 0)\n        return \"No\";\n\
    \    if (parts[0].length != parts[0].filter!(c => c >= '0' && c <= '9').length)\n\
    \        return \"No\";\n    if (parts[0].length > 3)\n        return \"No\";\n\
    \    if (parts[0].length != parts[0].filter!(c => c >= 'a' && c <= 'z' || c >=\
    \ 'A' && c <= 'Z').length)\n        return \"No\";\n    if (valid_extensions.filter!(ext\
    \ => ext == parts[1]).length == 0)\n        return \"No\";\n    return \"Yes\"\
    ;\n}", "{\n    auto dot_pos = file_name.find(\".\");\n    if (dot_pos == -1)\n\
    \        return \"No\";\n    auto ext = file_name.substr(dot_pos + 1);\n    if\
    \ (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n        return \"No\"\
    ;\n    auto name = file_name.substr(0, dot_pos);\n    if (name.empty())\n    \
    \    return \"No\";\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' ||\
    \ name[0] > 'Z')\n        return \"No\";\n    if (name.count(\"0\") + name.count(\"\
    1\") + name.count(\"2\") + name.count(\"3\") + name.count(\"4\") + name.count(\"\
    5\") + name.count(\"6\") + name.count(\"7\") + name.count(\"8\") + name.count(\"\
    9\") > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    int count\
    \ = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int ext_index = 0;\n\
    \    string ext = \"\";\n    string name = \"\";\n    string[] valid_ext = [\"\
    txt\", \"exe\", \"dll\"];\n    foreach(i, c; file_name)\n    {\n        if(c ==\
    \ '.')\n        {\n            dot_count++;\n            dot_index = i;\n    \
    \    }\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n  \
    \      }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n        return \"\
    No\";\n    }\n    ext_index = dot_index + 1;\n    name = file_name[0..dot_index];\n\
    \    ext = file_name[ext_index..$];\n    if(name.length == 0 || !(name[0] >= 'a'\
    \ && name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n    {\n        return\
    \ \"No\";\n    }\n    if(!valid_ext.contains(ext))\n    {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count =\
    \ 0;\n    int dot_index = 0;\n    string file_extension;\n    string file_name_without_extension;\n\
    \    foreach(i, c; file_name)\n    {\n        if(c == '.')\n        {\n      \
    \      dot_count++;\n            dot_index = i;\n        }\n        if(c >= '0'\
    \ && c <= '9')\n        {\n            count++;\n        }\n    }\n    if(count\
    \ > 3 || dot_count != 1)\n    {\n        return \"No\";\n    }\n    file_extension\
    \ = file_name[dot_index+1..$];\n    file_name_without_extension = file_name[0..dot_index-1];\n\
    \    if(file_name_without_extension == \"\" || !(file_name_without_extension[0]\
    \ >= 'a' && file_name_without_extension[0] <= 'z' || file_name_without_extension[0]\
    \ >= 'A' && file_name_without_extension[0] <= 'Z'))\n    {\n        return \"\
    No\";\n    }\n    if(file_extension != \"txt\" && file_extension != \"exe\" &&\
    \ file_extension != \"dll\")\n    {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}", "{\n    int count = 0;\n    int dot_count = 0;\n    int dot_index\
    \ = 0;\n    int dot_index_end = 0;\n    string dot_string = \"\";\n    string\
    \ dot_string_end = \"\";\n    string valid_extensions[] = [\"txt\", \"exe\", \"\
    dll\"];\n    foreach(char c; file_name)\n    {\n        if(c >= '0' && c <= '9')\n\
    \        {\n            count++;\n        }\n        if(c == '.')\n        {\n\
    \            dot_count++;\n            dot_index = file_name.indexOf(c);\n   \
    \         dot_index_end = file_name.indexOf(c, dot_index+1);\n        }\n    }\n\
    \    if(count > 3)\n    {\n        return \"No\";\n    }\n    if(dot_count !=\
    \ 1)\n    {\n        return \"No\";\n    }\n    if(dot_index == 0)\n    {\n  \
    \      return \"No\";\n    }\n    if(dot_index_end != -1)\n    {\n        return\
    \ \"No\";\n    }\n    dot_string = file_name[dot_index+1..$];\n    foreach(string\
    \ s; valid_extensions)\n    {\n        if(s == dot_string)\n        {\n      \
    \      return \"Yes\";\n        }\n    }\n    return \"No\";\n}", "{\n    int\
    \ count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    int extension_index\
    \ = 0;\n    string extension = \"\";\n    string sub_string = \"\";\n    string[]\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    foreach(i, ch; file_name)\n\
    \    {\n        if(ch == '.')\n        {\n            dot_count++;\n         \
    \   dot_index = i;\n        }\n        if(ch >= '0' && ch <= '9')\n        {\n\
    \            count++;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n\
    \    {\n        return \"No\";\n    }\n    extension_index = dot_index + 1;\n\
    \    sub_string = file_name[0..dot_index];\n    extension = file_name[extension_index..$];\n\
    \    if(sub_string.length == 0 || (sub_string[0] < 'a' || sub_string[0] > 'z')\
    \ && (sub_string[0] < 'A' || sub_string[0] > 'Z'))\n    {\n        return \"No\"\
    ;\n    }\n    if(extension !in valid_extensions)\n    {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "{\n    auto digits = file_name.count('0')\
    \ + file_name.count('1') + file_name.count('2') + file_name.count('3') + file_name.count('4')\
    \ + file_name.count('5') + file_name.count('6') + file_name.count('7') + file_name.count('8')\
    \ + file_name.count('9');\n    if (digits > 3)\n        return \"No\";\n    auto\
    \ dot_pos = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\"\
    ;\n    if (dot_pos == 0)\n        return \"No\";\n    if (dot_pos == file_name.length\
    \ - 1)\n        return \"No\";\n    auto sub_before_dot = file_name[0..dot_pos];\n\
    \    if (sub_before_dot.length == 0)\n        return \"No\";\n    if (sub_before_dot[0]\
    \ < 'a' || sub_before_dot[0] > 'z')\n        if (sub_before_dot[0] < 'A' || sub_before_dot[0]\
    \ > 'Z')\n            return \"No\";\n    auto sub_after_dot = file_name[dot_pos+1..$];\n\
    \    if (sub_after_dot != \"txt\" && sub_after_dot != \"exe\" && sub_after_dot\
    \ != \"dll\")\n        return \"No\";\n    return \"Yes\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto dot_pos_next = file_name.find('.', dot_pos + 1);\n    if (dot_pos_next\
    \ != -1)\n        return \"No\";\n    auto first_part = file_name[0 .. dot_pos];\n\
    \    if (first_part.length == 0)\n        return \"No\";\n    if (!isAlpha(first_part[0]))\n\
    \        return \"No\";\n    auto second_part = file_name[dot_pos + 1 .. $];\n\
    \    if (second_part != \"txt\" && second_part != \"exe\" && second_part != \"\
    dll\")\n        return \"No\";\n    auto digits = 0;\n    foreach (c; first_part)\n\
    \    {\n        if (isDigit(c))\n            digits++;\n    }\n    if (digits\
    \ > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.find(\".\");\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string extension = file_name[dot_index+1..$];\n\
    \    if (extension.length == 0 || !valid_extensions.find(extension))\n       \
    \ return \"No\";\n    string name = file_name[0..dot_index-1];\n    if (name.length\
    \ == 0 || !isAlpha(name[0]))\n        return \"No\";\n    int digit_count = 0;\n\
    \    foreach (c; name)\n        if (isDigit(c))\n            digit_count++;\n\
    \    if (digit_count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n\
    \    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n    int dot_index\
    \ = file_name.indexOf('.');\n    if (dot_index == -1)\n        return \"No\";\n\
    \    string extension = file_name.substr(dot_index + 1);\n    if (valid_extensions.find(extension)\
    \ == -1)\n        return \"No\";\n    string name = file_name.substr(0, dot_index);\n\
    \    if (name.length == 0)\n        return \"No\";\n    int digit_count = 0;\n\
    \    foreach (c; name)\n    {\n        if (c >= '0' && c <= '9')\n           \
    \ digit_count++;\n        else if (!(c >= 'a' && c <= 'z') && !(c >= 'A' && c\
    \ <= 'Z'))\n            return \"No\";\n    }\n    if (digit_count > 3)\n    \
    \    return \"No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    int\
    \ dot_count = 0;\n    int dot_index = 0;\n    int dot_index_2 = 0;\n    int dot_index_3\
    \ = 0;\n    int dot_index_4 = 0;\n    int dot_index_5 = 0;\n    int dot_index_6\
    \ = 0;\n    int dot_index_7 = 0;\n    int dot_index_8 = 0;\n    int dot_index_9\
    \ = 0;\n    int dot_index_10 = 0;\n    int dot_index_11 = 0;\n    int dot_index_12\
    \ = 0;\n    int dot_index_13 = 0;\n    int dot_index_14 = 0;\n    int dot_index_15\
    \ = 0;\n    int dot_index_16 = 0;\n    int dot_index_17 = 0;\n    int dot_index_18\
    \ = 0;\n    int dot_index_19 = 0;\n    int dot_index_20 = 0;\n    int dot_index_21\
    \ = 0;\n    int dot_index_22 = 0;\n    int dot_index_23 = 0;\n    int dot_index_24\
    \ = 0;\n    int dot_index_25 = 0;\n    int dot_index_26 = 0;\n    int dot_index_27\
    \ = 0;\n    int dot_index_28 = 0;\n    int dot_index_29 = 0;\n    int dot_index_30\
    \ = 0;\n    int dot_index_31 = 0;\n    int dot_index_32 = 0;\n    int dot_index_33\
    \ = 0;\n    int dot_index_34 = 0;\n    int dot_index_35 = 0;\n    int dot_index_36\
    \ = 0;\n    int dot_index_37 = 0;\n    int dot_index_38 = 0;\n    int dot_index_39\
    \ = 0;\n    int dot_index_40 = 0;\n    int dot_index_41 = 0;\n    int dot_index_42\
    \ = 0;\n    int dot_index_43 = 0;\n    int dot_index_44 = 0;\n    int dot_index_45\
    \ = 0;\n", "{\n    auto dot_index = file_name.find('.');\n    if (dot_index ==\
    \ -1)\n        return \"No\";\n    auto dot_index_after = file_name.find('.',\
    \ dot_index + 1);\n    if (dot_index_after != -1)\n        return \"No\";\n  \
    \  auto digits_count = 0;\n    foreach (c; file_name)\n    {\n        if (c >=\
    \ '0' && c <= '9')\n            digits_count++;\n    }\n    if (digits_count >\
    \ 3)\n        return \"No\";\n    auto before_dot = file_name[0 .. dot_index];\n\
    \    if (before_dot.empty || !(before_dot[0] >= 'a' && before_dot[0] <= 'z' ||\
    \ before_dot[0] >= 'A' && before_dot[0] <= 'Z'))\n        return \"No\";\n   \
    \ auto after_dot = file_name[dot_index + 1 .. $];\n    if (after_dot != \"txt\"\
    \ && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n \
    \   return \"Yes\";\n}", "{\n    int count = 0;\n    int dot = 0;\n    int dot_index\
    \ = 0;\n    int dot_index_after = 0;\n    int dot_index_before = 0;\n    string\
    \ file_name_before_dot = \"\";\n    string file_name_after_dot = \"\";\n    string\
    \ file_name_after_dot_lower = \"\";\n    string[] valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    bool is_valid = true;\n    foreach(char c; file_name)\n\
    \    {\n        if(c == '.')\n        {\n            dot++;\n            dot_index\
    \ = count;\n        }\n        count++;\n    }\n    if(dot != 1)\n    {\n    \
    \    is_valid = false;\n    }\n    else\n    {\n        dot_index_after = dot_index\
    \ + 1;\n        dot_index_before = dot_index - 1;\n        file_name_before_dot\
    \ = file_name[0..dot_index_before];\n        file_name_after_dot = file_name[dot_index_after..$];\n\
    \        file_name_after_dot_lower = toLower(file_name_after_dot);\n        if(file_name_before_dot.length\
    \ == 0)\n        {\n            is_valid = false;\n        }\n        else\n \
    \       {\n            foreach(char c; file_name_before_dot)\n            {\n\
    \                if(!isAlpha(c))\n                {\n                    is_valid\
    \ = false;\n                }\n            }\n        }\n        if(!valid_extensions.contains(file_name_after_dot_lower))\n\
    \        {\n            is_valid = false;\n        }\n    }\n    if(is_valid)\n\
    \    {\n        return \"Yes\";\n    }\n    else\n    {\n        return \"No\"\
    ;\n    }\n}", "{\n    string[] valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    int dot_index = file_name.find(\".\");\n    if (dot_index == -1)\n      \
    \  return \"No\";\n    string file_name_without_extension = file_name[0..dot_index];\n\
    \    string file_extension = file_name[dot_index + 1..$];\n    if (file_name_without_extension.length\
    \ == 0 || !isalpha(file_name_without_extension[0]))\n        return \"No\";\n\
    \    if (file_name_without_extension.count!(c => isdigit(c)) > 3)\n        return\
    \ \"No\";\n    if (valid_extensions.count!(ext => ext == file_extension) == 0)\n\
    \        return \"No\";\n    return \"Yes\";\n}", "{\n    string[] valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n    int dot_index = file_name.indexOf('.');\n\
    \    if (dot_index == -1)\n        return \"No\";\n    string name = file_name[0..dot_index];\n\
    \    string extension = file_name[dot_index+1..$];\n    if (name.length == 0 ||\
    \ !isAlpha(name[0]))\n        return \"No\";\n    if (extension.length == 0 ||\
    \ valid_extensions.indexOf(extension) == -1)\n        return \"No\";\n    int\
    \ digit_count = 0;\n    foreach (c; name)\n        if (isDigit(c))\n         \
    \   digit_count++;\n    if (digit_count > 3)\n        return \"No\";\n    return\
    \ \"Yes\";\n}", "{\n    enum valid_extensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    string[] file_name_parts = file_name.split(\".\");\n    if (file_name_parts.length\
    \ != 2)\n        return \"No\";\n    if (file_name_parts[0].length == 0)\n   \
    \     return \"No\";\n    if (file_name_parts[0].count!(c => c.isDigit) > 3)\n\
    \        return \"No\";\n    if (!file_name_parts[0].front.isLetter)\n       \
    \ return \"No\";\n    if (!valid_extensions.canFind(file_name_parts[1]))\n   \
    \     return \"No\";\n    return \"Yes\";\n}", "{\n    import std.algorithm :\
    \ count;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : take, drop;\n    import std.string : split;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : Tuple;", "{\n    int count = 0;\n    int\
    \ dot_count = 0;\n    int dot_index = 0;\n    int ext_index = 0;\n    string ext\
    \ = \"\";\n    string name = \"\";\n    foreach(i, c; file_name)\n    {\n    \
    \    if(c >= '0' && c <= '9')\n        {\n            count++;\n        }\n  \
    \      if(c == '.')\n        {\n            dot_count++;\n            dot_index\
    \ = i;\n        }\n    }\n    if(count > 3 || dot_count != 1)\n    {\n       \
    \ return \"No\";\n    }\n    ext_index = dot_index + 1;\n    ext = file_name[ext_index..$];\n\
    \    name = file_name[0..dot_index - 1];\n    if(ext == \"txt\" || ext == \"exe\"\
    \ || ext == \"dll\")\n    {\n        if(name.length > 0 && (name[0] >= 'a' &&\
    \ name[0] <= 'z' || name[0] >= 'A' && name[0] <= 'Z'))\n        {\n          \
    \  return \"Yes\";\n        }\n    }\n    return \"No\";\n}", "{\n    auto dot_pos\
    \ = file_name.find('.');\n    if (dot_pos == -1)\n        return \"No\";\n   \
    \ auto ext = file_name.substr(dot_pos + 1);\n    if (ext != \"txt\" && ext !=\
    \ \"exe\" && ext != \"dll\")\n        return \"No\";\n    auto name = file_name.substr(0,\
    \ dot_pos);\n    if (name.length == 0)\n        return \"No\";\n    if (name[0]\
    \ < 'a' || name[0] > 'z' && name[0] < 'A' || name[0] > 'Z')\n        return \"\
    No\";\n    if (name.count!(a => a >= '0' && a <= '9') > 3)\n        return \"\
    No\";\n    return \"Yes\";\n}", "{\n    int count = 0;\n    bool dot = false;\n\
    \    bool ext = false;\n    bool valid = true;\n    foreach(c; file_name)\n  \
    \  {\n        if(c >= '0' && c <= '9')\n        {\n            count++;\n    \
    \    }\n        else if(c == '.')\n        {\n            dot = true;\n      \
    \  }\n        else if(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')\n        {\n\
    \            if(dot)\n            {\n                if(file_name[$-3..$] == \"\
    txt\" || file_name[$-3..$] == \"exe\" || file_name[$-3..$] == \"dll\")\n     \
    \           {\n                    ext = true;\n                }\n          \
    \  }\n        }\n        else\n        {\n            valid = false;\n       \
    \ }\n    }\n    if(count > 3 || !dot || !ext || !valid)\n    {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "{\n    string[] valid_extensions =\
    \ [\"txt\", \"exe\", \"dll\"];\n    int dot_pos = file_name.find('.');\n    if\
    \ (dot_pos == -1)\n        return \"No\";\n    string extension = file_name[dot_pos\
    \ + 1 .. $];\n    if (extension.length == 0 || !valid_extensions.find(extension))\n\
    \        return \"No\";\n    string name = file_name[0 .. dot_pos - 1];\n    if\
    \ (name.length == 0 || !isalpha(name[0]))\n        return \"No\";\n    int count\
    \ = 0;\n    foreach (c; name)\n        if (isdigit(c))\n            count++;\n\
    \    if (count > 3)\n        return \"No\";\n    return \"Yes\";\n}", "{\n   \
    \ int count = 0;\n    int dot_count = 0;\n    int dot_index = 0;\n    string ext\
    \ = \"\";\n    string valid_ext = \"txt,exe,dll\";\n    string result = \"No\"\
    ;\n    foreach(i, c; file_name)\n    {\n        if(c == '.')\n        {\n    \
    \        dot_count++;\n            dot_index = i;\n        }\n        if(c >=\
    \ '0' && c <= '9')\n        {\n            count++;\n        }\n    }\n    if(count\
    \ <= 3 && dot_count == 1 && dot_index != 0)\n    {\n        ext = file_name[dot_index+1..$];\n\
    \        if(valid_ext.canFind(ext))\n        {\n            result = \"Yes\";\n\
    \        }\n    }\n    return result;\n}", "{\n    auto dot_pos = file_name.find('.');\n\
    \    if (dot_pos == -1)\n        return \"No\";\n    auto ext = file_name.substr(dot_pos\
    \ + 1);\n    if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n       \
    \ return \"No\";\n    auto name = file_name.substr(0, dot_pos);\n    if (name.empty())\n\
    \        return \"No\";\n    if (!isAlpha(name[0]))\n        return \"No\";\n\
    \    if (count(name.begin(), name.end(), '0') + count(name.begin(), name.end(),\
    \ '1') + count(name.begin(), name.end(), '2') + count(name.begin(), name.end(),\
    \ '3') + count(name.begin(), name.end(), '4') + count(name.begin(), name.end(),\
    \ '5') + count(name.begin(), name.end(), '6') + count(name.begin(), name.end(),\
    \ '7') + count(name.begin(), name.end(), '8') + count(name.begin(), name.end(),\
    \ '9') > 3)\n        return \"No\";\n    return \"Yes\";\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
