name: HumanEval_58_common
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn sorted unique common elements\
  \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n"
tests: "unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L,\
  \ 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n\
  \    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L,\
  \ 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L,\
  \ 8L], []) == []);\n}\nvoid main(){}"
completions: ["{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e in\
    \ l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n \
    \   {\n        result ~= e;\n    }\n    foreach (e; l2)\n    {\n        result\
    \ ~= e;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] intersection(long[] l1, long[] l2)\
    \ \n{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ difference(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (!(e in l2))\n        {\n            result ~= e;\n       \
    \ }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] symmetricDifference(long[] l1, long[]\
    \ l2) \n{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (!(e in\
    \ l2))\n        {\n            result ~= e;\n        }\n    }\n    foreach (e;\
    \ l2)\n    {\n        if (!(e in l1))\n        {\n            result ~= e;\n \
    \       }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] symmetricDifference(long[]\
    \ l1, long[] l2) \n{", "{\n    auto l = new long[](l1.length);\n    long i = 0;\n\
    \    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n          \
    \  if (e1 == e2)\n            {\n                l[i] = e1;\n                i++;\n\
    \            }\n        }\n    }\n    l.length = i;\n    l.sort;\n    return l;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ unique(long[] l1, long[] l2) \n{\n    auto l = new long[](l1.length + l2.length);\n\
    \    long i = 0;\n    foreach (e1; l1)\n    {\n        l[i] = e1;\n        i++;\n\
    \    }\n    foreach (e2; l2)\n    {\n        l[i] = e2;\n        i++;\n    }\n\
    \    l.length = i;\n    l.sort;\n    return l;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] unique(long[] l1, long[] l2, long[]\
    \ l3) \n{\n    auto l = new long[](l1.length + l2.length + l3.length);\n    long\
    \ i = 0;\n    foreach (e1; l1)\n    {\n        l[i] = e1;\n        i++;\n    }\n\
    \    foreach (e2; l2)\n    {\n        l[i] = e2;\n        i++;\n    }\n    foreach\
    \ (e3; l3)\n    {\n        l[i] = e3;\n        i++;\n    }\n    l.length = i;\n\
    \    l.sort;\n    return l;\n}\n/*\nReturn sorted unique elements for two lists.\n\
    \        \n    \n*/\nlong[] unique(long[] l1, long[] l2, long[] l3, long[] l4)\
    \ \n{\n    auto l = new long[](l1.length + l2.length + l3.length + l4.length);\n",
  "{\n    long[] result = new long[];\n    foreach (long x; l1)\n    {\n        if\
    \ (x in l2)\n            result ~= x;\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n   \
    \ foreach (long x; l1)\n    {\n        if (x in l2)\n            result ~= x;\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (long x; l1)\n    {\n        if\
    \ (x in l2)\n            result ~= x;\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n   \
    \ foreach (long x; l1)\n    {\n        if (x in l2)\n            result ~= x;\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (long x; l1)\n    {\n        if\
    \ (x in l2)\n            result ~= x;\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n   \
    \ foreach (long x; l1)\n    {\n        if (x in l2)\n            result ~= x;\n\
    \    }\n    return result.sort().uniq;\n}", "{\n    auto result = new long[];\n\
    \    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n         \
    \   result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3) \n{\n    return common(common(l1, l2), l3);\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    return common(common(l1,\
    \ l2), common(l3, l4));\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n    return common(common(l1, l2), common(l3, l4, l5));\n}\n\
    /*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5, long[] l6)\
    \ \n{\n    return common(common(l1, l2), common(l3, l4, l5, l6));\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, long[] l4, long[] l5, long[] l6, long[] l7) \n{\n\
    \    return common(common(l1, l2), common(l3, l4, l5, l6, l7));\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, long[] l4, long[] l5, long[] l6, long[] l7, long[]\
    \ l8) \n", "{\n    long[] result;\n    foreach (elem; l1) \n    {\n        if\
    \ (elem in l2) \n        {\n            result ~= elem;\n        }\n    }\n  \
    \  return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result;\n    foreach (elem; l1) \n    {\n        if (elem in l2) \n\
    \        {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem;\
    \ l1) \n    {\n        if (elem in l2) \n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (elem; l1) \n    {\n       \
    \ if (elem in l2) \n        {\n            result ~= elem;\n        }\n    }\n\
    \    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result;\n    foreach (elem; l1) \n    {\n        if (elem in l2) \n\
    \        {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem;\
    \ l1) \n    {\n        if (", "{ \n    long[] result = new long[]; \n    foreach\
    \ (e1; l1) \n    { \n        foreach (e2; l2) \n        { \n            if (e1\
    \ == e2) \n            { \n                result ~= e1; \n                break;\
    \ \n            } \n        } \n    } \n    return result; \n} ", "{\n    long[]\
    \ res;\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n   \
    \         if (e1 == e2)\n            {\n                res ~= e1;\n         \
    \   }\n        }\n    }\n    return res.sort().unique;\n}", "{\n    long[] result\
    \ = new long[];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n     \
    \   {\n            if (e1 == e2)\n            {\n                result ~= e1;\n\
    \                break;\n            }\n        }\n    }\n    return result.sort().unique;\n\
    }", "{\n    long[] result = new long[0];\n    long[] l1_sorted = l1.dup;\n   \
    \ long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    foreach(long\
    \ i; l1_sorted)\n    {\n        if(l2_sorted.find(i) != -1)\n        {\n     \
    \       result ~= i;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] unique(long[] l1,\
    \ long[] l2) \n{\n    long[] result = new long[0];\n    long[] l1_sorted = l1.dup;\n\
    \    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n  \
    \  foreach(long i; l1_sorted)\n    {\n        if(l2_sorted.find(i) == -1)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    foreach(long i; l2_sorted)\n\
    \    {\n        if(l1_sorted.find(i) == -1)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] unique(long[] l1, long[] l2, long[]\
    \ l3) \n{\n    long[] result = new long[0];\n    long[] l1_sorted = l1.dup;\n\
    \    long[] l2_sorted = l2.dup;\n    long[] l3_sorted = l3.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    l3_sorted.sort;\n    foreach(long i; l1_sorted)\n  \
    \  {\n        if(l2_sorted.find(i) == -1 && l3_sorted.find(i) == -1)\n       \
    \ {\n", "{\n    long[] result;\n    long[] l1_copy = l1.dup;\n    long[] l2_copy\
    \ = l2.dup;\n    l1_copy.sort;\n    l2_copy.sort;\n    result = l1_copy.intersect(l2_copy);\n\
    \    return result;\n}", "{ \n    long[] result;\n    foreach (e; l1)\n    {\n\
    \        if (e in l2)\n        {\n            result ~= e;\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result;\n    foreach (elem;\
    \ l1)\n    {\n        if (elem in l2)\n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result =\
    \ new long[];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n       \
    \ {\n            if (e1 == e2)\n            {\n                result ~= e1;\n\
    \                break;\n            }\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach (elem; l1) \n    {\n        if (elem in\
    \ l2) \n        {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem; l1)\
    \ \n    {\n        result ~= elem;\n    }\n    foreach (elem; l2) \n    {\n  \
    \      result ~= elem;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] intersection(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    foreach (elem; l1) \n    {\n   \
    \     if (elem in l2) \n        {\n            result ~= elem;\n        }\n  \
    \  }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements for\
    \ two lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (elem; l1) \n    {\n        if (!(elem in l2))\
    \ \n        {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ symmetric_difference(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach\
    \ (elem; l1) \n    {\n        if (!(elem in l2)) \n        {\n            result\
    \ ~= elem;\n        }\n    }\n    foreach (elem; l2) \n    {\n        if (!(elem\
    \ in l1)) \n        {\n            result ~= elem;\n        }\n    }\n    return\
    \ result.sort().uniq;\n}\n/*\nReturn sorted unique", "{\n    long[] result;\n\
    \    long[] l1_unique = l1.unique;\n    long[] l2_unique = l2.unique;\n    foreach(long\
    \ i; l1_unique)\n    {\n        foreach(long j; l2_unique)\n        {\n      \
    \      if(i == j)\n            {\n                result ~= i;\n            }\n\
    \        }\n    }\n    return result.sort;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] union(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    long[] l1_unique = l1.unique;\n    long[] l2_unique =\
    \ l2.unique;\n    foreach(long i; l1_unique)\n    {\n        result ~= i;\n  \
    \  }\n    foreach(long j; l2_unique)\n    {\n        result ~= j;\n    }\n   \
    \ return result.sort;\n}\n/*\nReturn sorted unique elements for two lists.\n \
    \       \n    \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n    long[] result;\n\
    \    long[] l1_unique = l1.unique;\n    long[] l2_unique = l2.unique;\n    foreach(long\
    \ i; l1_unique)\n    {\n        bool found = false;\n        foreach(long j; l2_unique)\n\
    \        {\n            if(i == j)\n            {\n                found = true;\n\
    \            }\n        }\n        if(!found)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result.sort;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] symmetric_difference(long[] l1, long[]\
    \ l2) \n{\n    long[] result;\n    long[] l1_unique = l1.unique;\n    long[] l2_unique\
    \ = l2.unique;\n    foreach(long i; l1_unique)\n    {\n        bool found = false;\n\
    \        foreach(long j; l2_unique)\n        {\n            if", "{\n    long[]\
    \ result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            if (!result.canFind(l))\n            {\n             \
    \   result ~= l;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] ret = new long[0];\n    foreach (long i; l1) {\n        if (l2.canFind(i))\
    \ {\n            ret ~= i;\n        }\n    }\n    ret.sort();\n    ret = ret.dup;\n\
    \    return ret;\n}\n/*\nReturn sorted unique elements for two lists.\n      \
    \  \n    \n*/\nlong[] union(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n\
    \    foreach (long i; l1) {\n        ret ~= i;\n    }\n    foreach (long i; l2)\
    \ {\n        ret ~= i;\n    }\n    ret.sort();\n    ret = ret.dup;\n    return\
    \ ret;\n}\n/*\nReturn sorted unique elements for two lists.\n        \n    \n\
    */\nlong[] intersection(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n\
    \    foreach (long i; l1) {\n        if (l2.canFind(i)) {\n            ret ~=\
    \ i;\n        }\n    }\n    ret.sort();\n    ret = ret.dup;\n    return ret;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ difference(long[] l1, long[] l2) \n{\n    long[] ret = new long[0];\n    foreach\
    \ (long i; l1) {\n        if (!l2.canFind(i)) {\n            ret ~= i;\n     \
    \   }\n    }\n    ret.sort();\n    ret = ret.dup;\n    return ret;\n}\n/*\nReturn\
    \ sorted unique elements for two lists.\n        \n    \n*/\nlong[] symmetric_difference(long[]\
    \ l1, long[] l2) \n{\n    long[] ret = new long[0];\n    foreach (long i; l1)\
    \ {\n        if (!l2.canFind(i)) {\n            ret ~= i;\n        }\n    }\n\
    \    foreach (long i; l2) {\n        if (!l1.canFind(i)) {\n           ", "{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().unique;\n\
    }", "{\n    long[] result;\n    foreach (elem; l1) \n    {\n        if (elem in\
    \ l2) \n        {\n            result ~= elem;\n        }\n    }\n    return result.sort().unique;\n\
    }", "{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort", "{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort", "{\n\
    \    long[] result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n\
    }\n/*\nReturn sorted unique common", "{\n    long[] ret = new long[0];\n    long[]\
    \ l1s = l1.dup;\n    long[] l2s = l2.dup;\n    l1s.sort;\n    l2s.sort;\n    long\
    \ i1 = 0;\n    long i2 = 0;\n    while (i1 < l1s.length && i2 < l2s.length)\n\
    \    {\n        if (l1s[i1] == l2s[i2])\n        {\n            ret ~= l1s[i1];\n\
    \            i1++;\n            i2++;\n        }\n        else if (l1s[i1] < l2s[i2])\n\
    \        {\n            i1++;\n        }\n        else\n        {\n          \
    \  i2++;\n        }\n    }\n    return ret;\n}", "{\n    auto result = new long[];\n\
    \    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n          \
    \  if (e1 == e2)\n            {\n                result ~= e1;\n             \
    \   break;\n            }\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] result = new long[];\n    foreach (l; l1) {\n        if (l2.canFind(l))\
    \ {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (l; l1) {\n        result ~= l;\n    }\n    foreach (l; l2) {\n        result\
    \ ~= l;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[] l2)\
    \ \n{\n    long[] result = new long[];\n    foreach (l; l1) {\n        if (!l2.canFind(l))\
    \ {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ symmetricDifference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n\
    \    foreach (l; l1) {\n        if (!l2.canFind(l)) {\n            result ~= l;\n\
    \        }\n    }\n    foreach (l; l2) {\n        if (!l1.canFind(l)) {\n    \
    \        result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2, long[] l3) \n{\n    long[] result = new long[];\n\
    \    foreach (l; l1) {\n        if (l2.canFind(l) && l3.canFind(l)) {\n      \
    \      result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\n\
    Return sorted unique elements for two lists.\n        \n    ", "{\n    long[]\
    \ result;\n    foreach (e; l1) \n    {\n        if (e in l2) \n        {\n   \
    \         result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements in l1 that are not in l2.\n        \n   \
    \ \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n\
    \    foreach (l; l1)\n    {\n        if (!l2.canFind(l))\n        {\n        \
    \    result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn\
    \ sorted unique elements in l1 that are not in l2.\n        \n    \n*/\nlong[]\
    \ difference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (l; l1)\n    {\n        if (!l2.canFind(l))\n        {\n            result ~=\
    \ l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ elements in l1 that are not in l2.\n        \n    \n*/\nlong[] difference(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        if (!l2.canFind(l))\n        {\n            result ~= l;\n    \
    \    }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ in l1 that are not in l2.\n        \n    \n*/\nlong[] difference(long[] l1,\
    \ long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n\
    \        if (!l2.canFind(l))\n        {\n            result ~= l;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements in\
    \ l1 that are not in l2.\n        \n    \n*/\nlong[] difference(long[] l", "{\n\
    \    long[] result;\n    if (l1.length < l2.length) \n    {\n        result =\
    \ l1.dup;\n        foreach (e; l2) \n        {\n            if (e in result) \n\
    \            {\n                result ~= e;\n            }\n        }\n    }\
    \ \n    else \n    {\n        result = l2.dup;\n        foreach (e; l1) \n   \
    \     {\n            if (e in result) \n            {\n                result\
    \ ~= e;\n            }\n        }\n    }\n    return result.sort.uniq;\n}", "{\n\
    \    long[] result = new long[0];\n    foreach (long i; l1)\n    {\n        if\
    \ (l2.canFind(i))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort().dup.unique;\n}", "{\n    long[] result = new long[0];\n\
    \    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    int l1_i = 0;\n    int l2_i = 0;\n    while (l1_i <\
    \ l1_sorted.length && l2_i < l2_sorted.length) {\n        if (l1_sorted[l1_i]\
    \ == l2_sorted[l2_i]) {\n            result ~= l1_sorted[l1_i];\n            l1_i++;\n\
    \            l2_i++;\n        } else if (l1_sorted[l1_i] < l2_sorted[l2_i]) {\n\
    \            l1_i++;\n        } else {\n            l2_i++;\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique elements for two lists.\n   \
    \     \n    \n*/\nlong[] unique(long[] l1, long[] l2) \n{\n    long[] result =\
    \ new long[0];\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n\
    \    l1_sorted.sort;\n    l2_sorted.sort;\n    int l1_i = 0;\n    int l2_i = 0;\n\
    \    while (l1_i < l1_sorted.length && l2_i < l2_sorted.length) {\n        if\
    \ (l1_sorted[l1_i] == l2_sorted[l2_i]) {\n            l1_i++;\n            l2_i++;\n\
    \        } else if (l1_sorted[l1_i] < l2_sorted[l2_i]) {\n            result ~=\
    \ l1_sorted[l1_i];\n            l1_i++;\n        } else {\n            result\
    \ ~= l2_sorted[l2_i];\n            l2_i++;\n        }\n", "{ \n    long[] result\
    \ = new long[]; \n    foreach (e; l1) \n    { \n        if (e in l2) \n      \
    \      result ~= e; \n    } \n    return result.sort().uniq; \n} ", "{\n    auto\
    \ r = new long[];\n    foreach (i; l1)\n    {\n        if (l2.canFind(i))\n  \
    \          r ~= i;\n    }\n    return r.sort().uniq;\n}", "{\n    long[] result;\n\
    \    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ res = new long[];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n \
    \       {\n            if (e1 == e2)\n            {\n                res ~= e1;\n\
    \                break;\n            }\n        }\n    }\n    return res.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] res = new long[];\n    foreach (e1;\
    \ l1)\n    {\n        res ~= e1;\n    }\n    foreach (e2; l2)\n    {\n       \
    \ res ~= e2;\n    }\n    return res.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] diff(long[] l1, long[] l2)\
    \ \n{\n    long[] res = new long[];\n    foreach (e1; l1)\n    {\n        bool\
    \ found = false;\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n\
    \            {\n                found = true;\n                break;\n      \
    \      }\n        }\n        if (!found)\n        {\n            res ~= e1;\n\
    \        }\n    }\n    return res.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] symdiff(long[] l1, long[] l2) \n\
    {\n    long[] res = new long[];\n    foreach (e1; l1)\n    {\n        bool found\
    \ = false;\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n \
    \           {\n                found = true;\n                break;\n       \
    \     }\n        }\n        if (!found)\n        {\n            res ~= e1;\n \
    \       }\n    }\n    foreach (e2; l2)\n    {\n        bool found = false;\n \
    \       foreach (e1; l1)\n        {\n            if (e1 ==", "{\n    long[] result\
    \ = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n\
    \            if (e in result)\n                continue;\n            result ~=\
    \ e;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new long[];\n\
    \    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n          \
    \  if (e1 == e2)\n            {\n                result ~= e1;\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements in l1 that are not in l2.\n        \n    \n*/\nlong[]\
    \ difference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (e1; l1)\n    {\n        bool found = false;\n        foreach (e2; l2)\n   \
    \     {\n            if (e1 == e2)\n            {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (!found)\n     \
    \   {\n            result ~= e1;\n        }\n    }\n    return result;\n}\n/*\n\
    Return sorted unique elements in l1 that are not in l2.\n        \n    \n*/\n\
    long[] difference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n\
    \    foreach (e1; l1)\n    {\n        bool found = false;\n        foreach (e2;\
    \ l2)\n        {\n            if (e1 == e2)\n            {\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (!found)\n\
    \        {\n            result ~= e1;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique elements in l1 that are not in l2.\n        \n   \
    \ \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n\
    \    foreach (e1; l1)\n    {\n        bool found = false;\n        foreach (e2;\
    \ l2)\n        {\n            if (e1 == e2)\n            {\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (!found)\n\
    \        {\n            result ~= e1;\n        }\n    }\n    return", "{\n   \
    \ long[] result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n\
    \    l1_sorted.sort;\n    l2_sorted.sort;\n    long[] l1_unique = l1_sorted.unique;\n\
    \    long[] l2_unique = l2_sorted.unique;\n    foreach(long i; l1_unique)\n  \
    \  {\n        if(l2_unique.canFind(i))\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[];\n\
    \    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n         \
    \   result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn\
    \ sorted unique elements for two lists.\n        \n    \n*/\nlong[] union(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        result ~= l;\n    }\n    foreach (l; l2)\n    {\n        result\
    \ ~= l;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] intersect(long[] l1, long[] l2) \n\
    {\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ diff(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (l; l1)\n    {\n        if (!l2.canFind(l))\n        {\n            result ~=\
    \ l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] symdiff(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n     \
    \   if (!l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n\
    \    foreach (l; l2)\n    {\n        if (!l1.canFind(l))\n        {\n        \
    \    result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn\
    \ sorted unique elements for", "{\n    long[] ret = new long[];\n    foreach(l;\
    \ l1)\n    {\n        if(l2.canFind(l))\n            ret ~= l;\n    }\n    ret.sort;\n\
    \    ret = ret.dup;\n    return ret;\n}", "{\n    long[] l3 = new long[];\n  \
    \  foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        {\n            l3\
    \ ~= l;\n        }\n    }\n    return l3.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] l3 = new long[];\n    foreach(l; l1)\n    {\n   \
    \     if(l2.canFind(l))\n        {\n            l3 ~= l;\n        }\n    }\n \
    \   return l3.sort().uniq;\n}\n/*\nReturn sorted unique common elements for two\
    \ lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[]\
    \ l3 = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n   \
    \     {\n            l3 ~= l;\n        }\n    }\n    return l3.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] l3 = new long[];\n    foreach(l;\
    \ l1)\n    {\n        if(l2.canFind(l))\n        {\n            l3 ~= l;\n   \
    \     }\n    }\n    return l3.sort().uniq;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2) \n{\n    long[] l3 = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \        {\n            l3 ~= l;\n        }\n    }\n    return l3.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{", "{\n    long[] result = new long[];\n\
    \    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n          \
    \  if (e1 == e2)\n            {\n                result ~= e1;\n             \
    \   break;\n            }\n        }\n    }\n    return result.sort().unique;\n\
    }", "{\n    long[] res = new long[];\n    foreach (e; l1)\n    {\n        if (e\
    \ in l2)\n        {\n            res ~= e;\n        }\n    }\n    return res.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if (elem in\
    \ l2)\n        {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem;\
    \ l1)\n    {\n        if (elem in l2)\n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if\
    \ (elem in l2)\n        {\n            result ~= elem;\n        }\n    }\n   \
    \ return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n  \
    \      {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem;\
    \ l1)\n    {\n        if (elem in l2)\n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if\
    \ (elem in l2)\n        {\n           ", "{\n    long[] result;\n    long[] l1_sorted\
    \ = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n\
    \    foreach(long i; l1_sorted)\n    {\n        if (l2_sorted.canFind(i))\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[] union(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n   \
    \ long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    foreach(long\
    \ i; l1_sorted)\n    {\n        if (!result.canFind(i))\n        {\n         \
    \   result ~= i;\n        }\n    }\n    foreach(long i; l2_sorted)\n    {\n  \
    \      if (!result.canFind(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result;\n}\n/*\nReturn sorted unique elements for two lists.\n\
    \        \n    \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n    long[] result;\n\
    \    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    foreach(long i; l1_sorted)\n    {\n        if (!l2_sorted.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[] symmetric_difference(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    long[] l1_sorted = l1.dup;", "{\n\
    \    long[] result = [];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n\
    \        {\n            if (e1 == e2)\n            {\n                result ~=\
    \ e1;\n            }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n\
    \    long[] result = new long[];\n    foreach (e1; l1)\n    {\n        foreach\
    \ (e2; l2)\n        {\n            if (e1 == e2)\n            {\n            \
    \    result ~= e1;\n                break;\n            }\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result = new long[];\n   \
    \ foreach (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n            result\
    \ ~= l;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach (e; l1) {\n        if (e in l2) {\n      \
    \      result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n\
    \    long[] ret;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n\
    \    l1_sorted.sort;\n    l2_sorted.sort;\n    long l1_len = l1_sorted.length;\n\
    \    long l2_len = l2_sorted.length;\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < l1_len && j < l2_len) \n    {\n        if (l1_sorted[i] < l2_sorted[j])\
    \ \n        {\n            i++;\n        }\n        else if (l1_sorted[i] > l2_sorted[j])\
    \ \n        {\n            j++;\n        }\n        else \n        {\n       \
    \     ret ~= l1_sorted[i];\n            i++;\n            j++;\n        }\n  \
    \  }\n    return ret;\n}\n/*\nReturn sorted unique elements for two lists.\n \
    \       \n    \n*/\nlong[] unique(long[] l1, long[] l2) \n{\n    long[] ret;\n\
    \    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    long l1_len = l1_sorted.length;\n    long l2_len = l2_sorted.length;\n\
    \    long i = 0;\n    long j = 0;\n    while (i < l1_len && j < l2_len) \n   \
    \ {\n        if (l1_sorted[i] < l2_sorted[j]) \n        {\n            ret ~=\
    \ l1_sorted[i];\n            i++;\n        }\n        else if (l1_sorted[i] >\
    \ l2_sorted[j]) \n        {\n            ret ~= l2_sorted[j];\n            j++;\n\
    \        }\n        else \n        {\n            ret ~= l1_sorted[i];\n     \
    \       i++;\n           ", "{\n    long[] result = new long[];\n    foreach (e1;\
    \ l1)\n    {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n\
    \            {\n                result ~= e1;\n                break;\n      \
    \      }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n        {\n\
    \            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem;\
    \ l1)\n    {\n        if (elem in l2)\n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if\
    \ (elem in l2)\n        {\n            result ~= elem;\n        }\n    }\n   \
    \ return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n  \
    \      {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem;\
    \ l1)\n    {\n        if (elem in l2)\n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if\
    \ (elem in l2)\n        {\n           ", "{\n    long[] result = [];\n    foreach\
    \ (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n            result ~=\
    \ l;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result\
    \ = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n\
    \            result ~= e;\n        }\n    }\n    return result.sort().unique;\n\
    }", "{\n    long[] result = new long[0];\n    foreach (l; l1)\n    {\n       \
    \ if (l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n\
    \    return result.sort().unique;\n}", "{\n    long[] result = new long[];\n \
    \   foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] union(long[] l1,\
    \ long[] l2) \n{\n    long[] result = new long[];\n    foreach (e; l1)\n    {\n\
    \        result ~= e;\n    }\n    foreach (e; l2)\n    {\n        result ~= e;\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements for\
    \ two lists.\n        \n    \n*/\nlong[] intersection(long[] l1, long[] l2) \n\
    {\n    long[] result = new long[];\n    foreach (e; l1)\n    {\n        if (e\
    \ in l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ difference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (e; l1)\n    {\n        if (!(e in l2))\n        {\n            result ~= e;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] symmetricDifference(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (e; l1)\n \
    \   {\n        if (!(e in l2))\n        {\n            result ~= e;\n        }\n\
    \    }\n    foreach (e; l2)\n    {\n        if (!(e in l1))\n        {\n     \
    \       result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\n\
    Return sorted unique elements for two lists.\n        \n    \n*/\n", "{\n    long[]\
    \ result = new long[];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n\
    \        {\n            if (e1 == e2)\n            {\n                result ~=\
    \ e1;\n                break;\n            }\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().unique;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n \
    \   {\n        result ~= e;\n    }\n    foreach (e; l2)\n    {\n        result\
    \ ~= e;\n    }\n    return result.sort().unique;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[]\
    \ l2) \n{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (!(e in\
    \ l2))\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().unique;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ symmetric_difference(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach\
    \ (e; l1)\n    {\n        if (!(e in l2))\n        {\n            result ~= e;\n\
    \        }\n    }\n    foreach (e; l2)\n    {\n        if (!(e in l1))\n     \
    \   {\n            result ~= e;\n        }\n    }\n    return result.sort().unique;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ intersection(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e;\
    \ l1)\n    {\n        if (e in l2)\n        {\n            result ~= e;\n    \
    \    }\n    }\n    return result.sort().unique;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] symmetric_intersection(long[] l1,\
    \ long[] l2) \n{\n    long", "{\n    long[] result = new long[];\n    foreach\
    \ (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n            if (e1 ==\
    \ e2)\n            {\n                result ~= e1;\n                break;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    return l1.intersect(l2).sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    return l1", "{\n    long[] result = new long[];\n  \
    \  foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n        {\n\
    \            result ~= elem;\n        }\n    }\n    return result.sort.uniq;\n\
    }", "{\n    long[] result;\n    auto l1_sorted = l1.dup.sort;\n    auto l2_sorted\
    \ = l2.dup.sort;\n    auto l1_len = l1_sorted.length;\n    auto l2_len = l2_sorted.length;\n\
    \    auto l1_idx = 0;\n    auto l2_idx = 0;\n    while (l1_idx < l1_len && l2_idx\
    \ < l2_len) {\n        if (l1_sorted[l1_idx] == l2_sorted[l2_idx]) {\n       \
    \     result ~= l1_sorted[l1_idx];\n            l1_idx++;\n            l2_idx++;\n\
    \        } else if (l1_sorted[l1_idx] < l2_sorted[l2_idx]) {\n            l1_idx++;\n\
    \        } else {\n            l2_idx++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] ret = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \            ret ~= l;\n    }\n    return ret.sort().uniq;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n   \
    \     {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] res = new long[];\n    foreach (e; l1)\n    {\n        if (e\
    \ in l2)\n        {\n            res ~= e;\n        }\n    }\n    return res.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    return (l1 ~ l2).sort().uniq;\n}\n/*\n\
    Return sorted unique elements for two lists.\n        \n    \n*/\nlong[] difference(long[]\
    \ l1, long[] l2) \n{\n    long[] res = new long[];\n    foreach (e; l1)\n    {\n\
    \        if (!(e in l2))\n        {\n            res ~= e;\n        }\n    }\n\
    \    return res.sort().uniq;\n}\n/*\nReturn sorted unique elements for two lists.\n\
    \        \n    \n*/\nlong[] symmetricDifference(long[] l1, long[] l2) \n{\n  \
    \  return (l1 ~ l2).sort().uniq;\n}\n/*\nReturn sorted unique elements for two\
    \ lists.\n        \n    \n*/\nlong[] intersection(long[] l1, long[] l2) \n{\n\
    \    long[] res = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n\
    \        {\n            res ~= e;\n        }\n    }\n    return res.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ disjoint(long[] l1, long[] l2) \n{\n    long[] res = new long[];\n    foreach\
    \ (e; l1)\n    {\n        if (!(e in l2))\n        {\n            res ~= e;\n\
    \        }\n    }\n    return res.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] exclusiveOr(long[] l1, long[] l2)\
    \ \n{\n    return (l1 ~ l2).sort().uniq;\n}\n", "{\n    auto result = new long[];\n\
    \    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n        {\n\
    \            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    auto result = new long[](l1.length);\n    auto result_length = 0;\n\
    \    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n         \
    \   result[result_length] = l;\n            result_length++;\n        }\n    }\n\
    \    return result[0 .. result_length];\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] union(long[] l1, long[] l2) \n{\n\
    \    auto result = new long[](l1.length + l2.length);\n    auto result_length\
    \ = 0;\n    foreach (l; l1)\n    {\n        if (!result.canFind(l))\n        {\n\
    \            result[result_length] = l;\n            result_length++;\n      \
    \  }\n    }\n    foreach (l; l2)\n    {\n        if (!result.canFind(l))\n   \
    \     {\n            result[result_length] = l;\n            result_length++;\n\
    \        }\n    }\n    return result[0 .. result_length];\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] intersection(long[]\
    \ l1, long[] l2) \n{\n    auto result = new long[](l1.length);\n    auto result_length\
    \ = 0;\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n  \
    \          result[result_length] = l;\n            result_length++;\n        }\n\
    \    }\n    return result[0 .. result_length];\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[] l2)\
    \ \n{\n    auto result = new long[](l1.length);\n    auto result_length = 0;\n\
    \    foreach (l; l1)\n    {\n        if (!l2.canFind(l))\n        {\n        \
    \    result[result_length] = l;\n            result_length++;\n        }\n   \
    \ }\n    return result[0 .. result_length];\n}\n/*\n", "{\n    long[] result;\n\
    \    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    foreach(long l1_u; l1_unique)\n    {\n        foreach(long\
    \ l2_u; l2_unique)\n        {\n            if(l1_u == l2_u)\n            {\n \
    \               result ~= l1_u;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ unique(long[] l1, long[] l2) \n{\n    long[] result;\n    long[] l1_sorted =\
    \ l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n\
    \    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique = l2_sorted.unique;\n\
    \    foreach(long l1_u; l1_unique)\n    {\n        result ~= l1_u;\n    }\n  \
    \  foreach(long l2_u; l2_unique)\n    {\n        result ~= l2_u;\n    }\n    return\
    \ result.unique;\n}\n/*\nReturn sorted unique elements for two lists.\n      \
    \  \n    \n*/\nlong[] unique(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n  \
    \  long[] l3_sorted = l3.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    l3_sorted.sort;\n\
    \    long[] l1_unique = l1_s", "{\n    long[] result;\n    foreach (elem; l1)\n\
    \    {\n        if (elem in l2)\n        {\n            result ~= elem;\n    \
    \    }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result;\n  \
    \  long[] l1_unique;\n    long[] l2_unique;\n    long[] l1_sorted;\n    long[]\
    \ l2_sorted;\n    long[] l1_sorted_unique;\n    long[] l2_sorted_unique;\n   \
    \ long[] l1_sorted_unique_common;\n    long[] l2_sorted_unique_common;\n    long[]\
    \ l1_sorted_unique_common_sorted;\n    long[] l2_sorted_unique_common_sorted;\n\
    \    long[] l1_sorted_unique_common_sorted_unique;\n    long[] l2_sorted_unique_common_sorted_unique;\n\
    \    long[] l1_sorted_unique_common_sorted_unique_common;\n    long[] l2_sorted_unique_common_sorted_unique_common;\n\
    \    long[] l1_sorted_unique_common_sorted_unique_common_sorted;\n    long[] l2_sorted_unique_common_sorted_unique_common_sorted;\n\
    \    long[] l1_sorted_unique_common_sorted_unique_common_sorted_unique;\n    long[]\
    \ l2_sorted_unique_common_sorted_unique_common_sorted_unique;\n    long[] l1_sorted_unique_common_sorted_unique_common_sorted_unique_common;\n\
    \    long[] l2_sorted_unique_common_sorted_unique_common_sorted_unique_common;\n\
    \    long[] l1_sorted_unique_common_sorted_unique_common_sorted_unique_common_sorted;\n\
    \    long[] l2_sorted_unique_common_sorted_unique_common_sorted_unique_common_sorted;\n\
    \    long[] l1_sorted_unique_common_sorted_unique_common_sorted_unique_common_sorted_unique;\n\
    \    long[] l2_sorted_unique_common_sorted_unique_common_sorted_unique_common_sorted_unique;\n\
    \    long[] l1_sorted_unique_common_sorted", "{\n    long[] res = new long[];\n\
    \    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            res\
    \ ~= e;\n        }\n    }\n    return res.sort().uniq;\n}", "{\n    long[] ret\
    \ = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n      \
    \      ret ~= l;\n    }\n    return ret;\n}", "{\n    long[] ret;\n    long[]\
    \ l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n \
    \   l2_sorted.sort;\n    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique\
    \ = l2_sorted.unique;\n    long[] l1_unique_sorted = l1_unique.dup;\n    long[]\
    \ l2_unique_sorted = l2_unique.dup;\n    l1_unique_sorted.sort;\n    l2_unique_sorted.sort;\n\
    \    long[] l1_unique_sorted_set = l1_unique_sorted.unique;\n    long[] l2_unique_sorted_set\
    \ = l2_unique_sorted.unique;\n    long[] l1_unique_sorted_set_sorted = l1_unique_sorted_set.dup;\n\
    \    long[] l2_unique_sorted_set_sorted = l2_unique_sorted_set.dup;\n    l1_unique_sorted_set_sorted.sort;\n\
    \    l2_unique_sorted_set_sorted.sort;\n    long[] l1_unique_sorted_set_sorted_set\
    \ = l1_unique_sorted_set_sorted.unique;\n    long[] l2_unique_sorted_set_sorted_set\
    \ = l2_unique_sorted_set_sorted.unique;\n    long[] l1_unique_sorted_set_sorted_set_sorted\
    \ = l1_unique_sorted_set_sorted_set.dup;\n    long[] l2_unique_sorted_set_sorted_set_sorted\
    \ = l2_unique_sorted_set_sorted_set.dup;\n    l1_unique_sorted_set_sorted_set_sorted.sort;\n\
    \    l2_unique_sorted_set_sorted_set_sorted.sort;\n    long[] l1_unique_sorted_set_sorted_set_s",
  "{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n        foreach\
    \ (e2; l2)\n        {\n            if (e1 == e2)\n            {\n            \
    \    result ~= e1;\n                break;\n            }\n        }\n    }\n\
    \    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements for two\
    \ lists.\n        \n    \n*/\nlong[] union(long[] l1, long[] l2) \n{\n    long[]\
    \ result = new long[];\n    foreach (e1; l1)\n    {\n        result ~= e1;\n \
    \   }\n    foreach (e2; l2)\n    {\n        result ~= e2;\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ difference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (e1; l1)\n    {\n        bool found = false;\n        foreach (e2; l2)\n   \
    \     {\n            if (e1 == e2)\n            {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (!found)\n     \
    \   {\n            result ~= e1;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ symmetricDifference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n\
    \    foreach (e1; l1)\n    {\n        bool found = false;\n        foreach (e2;\
    \ l2)\n        {\n            if (e1 == e2)\n            {\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (!found)\n\
    \        {\n            result ~= e1;\n        }\n    }\n    foreach (e2; l2)\n\
    \    {\n        bool found = false;\n        foreach (e1; l1)\n        {\n   \
    \         if (e", "{\n    long[] res = new long[];\n    foreach (e; l1)\n    {\n\
    \        if (e in l2)\n        {\n            res ~= e;\n        }\n    }\n  \
    \  return res.sort().uniq;\n}", "{\n    long[] result;\n    long[] l1_sorted =\
    \ l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n\
    \    long i = 0;\n    long j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length)\
    \ \n    {\n        if (l1_sorted[i] < l2_sorted[j]) \n        {\n            i++;\n\
    \        }\n        else if (l1_sorted[i] > l2_sorted[j]) \n        {\n      \
    \      j++;\n        }\n        else \n        {\n            result ~= l1_sorted[i];\n\
    \            i++;\n            j++;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[] unique(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n   \
    \ long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length)\
    \ \n    {\n        if (l1_sorted[i] < l2_sorted[j]) \n        {\n            result\
    \ ~= l1_sorted[i];\n            i++;\n        }\n        else if (l1_sorted[i]\
    \ > l2_sorted[j]) \n        {\n            result ~= l2_sorted[j];\n         \
    \   j++;\n        }\n        else \n        {\n            result ~= l1_sorted[i];\n\
    \            i++;\n            j++;\n        }\n    }\n    while (i < l1_sorted.length)\
    \ \n    {\n        result ~= l1_sorted[i];\n        i++;\n    }\n    while (j\
    \ <", "{ \n    long[] result; \n    foreach (e; l1) \n    { \n        if (e in\
    \ l2) \n            result ~= e; \n    } \n    return result.sort().uniq; \n} ",
  "{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n        foreach\
    \ (e2; l2)\n        {\n            if (e1 == e2)\n            {\n            \
    \    result ~= e1;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\nReturn sorted unique elements for two lists.\n   \
    \     \n    \n*/\nlong[] union(long[] l1, long[] l2) \n{\n    long[] result =\
    \ new long[];\n    foreach (e1; l1)\n    {\n        result ~= e1;\n    }\n   \
    \ foreach (e2; l2)\n    {\n        bool found = false;\n        foreach (e1; l1)\n\
    \        {\n            if (e1 == e2)\n            {\n                found =\
    \ true;\n                break;\n            }\n        }\n        if (!found)\n\
    \        {\n            result ~= e2;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ intersect(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n            if (e1 ==\
    \ e2)\n            {\n                result ~= e1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n    \
    \    bool found = false;\n        foreach (e2; l2)\n        {\n            if\
    \ (e1 == e2)\n            {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found)\n        {\n            result\
    \ ~= e1;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n", "{\n    long[] result = new long[];\n    foreach\
    \ (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n            if (e1 ==\
    \ e2)\n            {\n                result ~= e1;\n                break;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (e1; l1)\n\
    \    {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n     \
    \       {\n                result ~= e1;\n                break;\n           \
    \ }\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n\
    \        foreach (e2; l2)\n        {\n            if (e1 == e2)\n            {\n\
    \                result ~= e1;\n                break;\n            }\n      \
    \  }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n    \
    \    foreach (e2; l2)\n        {\n            if (e1 == e2)\n            {\n \
    \               result ~= e1;\n                break;\n            }\n       \
    \ }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n    \
    \    foreach (e", "{\n    auto l3 = l1.dup;\n    l3 ~= l2;\n    l3.sort;\n   \
    \ l3.unique;\n    return l3;\n}", "{\n    long[] result = new long[];\n    foreach\
    \ (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n            if (e1 ==\
    \ e2)\n            {\n                result ~= e1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}", "{ \n    long[] result\
    \ = new long[]; \n    foreach (e1; l1) \n    { \n        foreach (e2; l2) \n \
    \       { \n            if (e1 == e2) \n            { \n                result\
    \ ~= e1; \n                break; \n            } \n        } \n    } \n    return\
    \ result.sort().uniq; \n} ", "{\n    long[] result;\n    if (l1.length > l2.length)\
    \ \n    {\n        result = l1.dup;\n        foreach (e; l2) \n        {\n   \
    \         if (e in result) \n            {\n                result ~= e;\n   \
    \         }\n        }\n    } \n    else \n    {\n        result = l2.dup;\n \
    \       foreach (e; l1) \n        {\n            if (e in result) \n         \
    \   {\n                result ~= e;\n            }\n        }\n    }\n    return\
    \ result.sort.uniq;\n}\n/*\nReturn sorted unique elements for two lists.\n   \
    \     \n    \n*/\nlong[] union(long[] l1, long[] l2) \n{\n    return (l1 ~ l2).sort.uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ intersection(long[] l1, long[] l2) \n{\n    long[] result;\n    if (l1.length\
    \ > l2.length) \n    {\n        result = l1.dup;\n        foreach (e; l2) \n \
    \       {\n            if (e in result) \n            {\n                result\
    \ ~= e;\n            }\n        }\n    } \n    else \n    {\n        result =\
    \ l2.dup;\n        foreach (e; l1) \n        {\n            if (e in result) \n\
    \            {\n                result ~= e;\n            }\n        }\n    }\n\
    \    return result.sort.uniq;\n}\n/*\nReturn sorted unique elements for two lists.\n\
    \        \n    \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n    long[] result;\n\
    \    if (l1.length > l2.length) \n    {\n        result = l1.dup;\n        foreach\
    \ (e; l2) \n        {\n            if (e in result) \n            {\n        \
    \        result ~= e;\n            }\n        }\n    } \n    else \n    {\n  \
    \      result = l2.du", "{\n    long[] result = new long[];\n    foreach (e1;\
    \ l1)\n    {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n\
    \            {\n                result ~= e1;\n                break;\n      \
    \      }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (l; l1)\n    {\n        result ~= l;\n    }\n    foreach (l; l2)\n    {\n  \
    \      result ~= l;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] difference(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        if (!l2.canFind(l))\n        {\n            result ~= l;\n    \
    \    }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] symmetricDifference(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n     \
    \   if (!l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n\
    \    foreach (l; l2)\n    {\n        if (!l1.canFind(l))\n        {\n        \
    \    result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn\
    \ sorted unique elements for two lists.\n        \n    \n*/\nlong[] intersection(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        if (l2.canFind(l))\n        {\n            result ~= l;\n     \
    \   }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique", "{\n\
    \    long[] result = new long[];\n    foreach (e; l1)\n    {\n        if (e in\
    \ l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (e; l1)\n    {\n        result ~= e;\n    }\n    foreach (e; l2)\n    {\n  \
    \      result ~= e;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] intersect(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (e; l1)\n \
    \   {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements for\
    \ two lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (e; l1)\n    {\n        if (!(e\
    \ in l2))\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ symmetric_difference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n\
    \    foreach (e; l1)\n    {\n        if (!(e in l2))\n        {\n            result\
    \ ~= e;\n        }\n    }\n    foreach (e; l2)\n    {\n        if (!(e in l1))\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/", "{\n\
    \    long[] result;\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (l; l1)\n \
    \   {\n        result ~= l;\n    }\n    foreach (l; l2)\n    {\n        result\
    \ ~= l;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] intersection(long[] l1, long[] l2)\
    \ \n{\n    long[] result;\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ difference(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (l; l1)\n\
    \    {\n        if (!l2.canFind(l))\n        {\n            result ~= l;\n   \
    \     }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] symmetric_difference(long[] l1, long[]\
    \ l2) \n{\n    long[] result;\n    foreach (l; l1)\n    {\n        if (!l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    foreach (l; l2)\n\
    \    {\n        if (!l1.canFind(l))\n        {\n            result ~= l;\n   \
    \     }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] isdisjoint(", "{\n    long[] result\
    \ = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n\
    \            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}",
  "{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[] union(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        result ~= l;\n    }\n    foreach (l; l2)\n    {\n        if (!result.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result;\n}\n\
    /*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[] difference(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        if (!l2.canFind(l))\n        {\n            result ~= l;\n    \
    \    }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements for two\
    \ lists.\n        \n    \n*/\nlong[] symmetricDifference(long[] l1, long[] l2)\
    \ \n{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n        if\
    \ (!l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n  \
    \  foreach (l; l2)\n    {\n        if (!l1.canFind(l))\n        {\n          \
    \  result ~= l;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] intersection(long[] l1,\
    \ long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n\
    \        if (l2.canFind(l))\n        {\n            result ~= l;\n        }\n\
    \    }\n    return result;\n}\n/*\nReturn sorted unique elements for two lists.\n\
    \        \n", "{\n    auto result = new long[](0);\n    auto l1s = l1.sort();\n\
    \    auto l2s = l2.sort();\n    auto l1i = 0;\n    auto l2i = 0;\n    while (l1i\
    \ < l1s.length && l2i < l2s.length) {\n        if (l1s[l1i] == l2s[l2i]) {\n \
    \           result ~= l1s[l1i];\n            l1i++;\n            l2i++;\n    \
    \    } else if (l1s[l1i] < l2s[l2i]) {\n            l1i++;\n        } else {\n\
    \            l2i++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] union(long[] l1,\
    \ long[] l2) \n{\n    auto result = new long[](0);\n    auto l1s = l1.sort();\n\
    \    auto l2s = l2.sort();\n    auto l1i = 0;\n    auto l2i = 0;\n    while (l1i\
    \ < l1s.length || l2i < l2s.length) {\n        if (l1i < l1s.length && l2i < l2s.length)\
    \ {\n            if (l1s[l1i] == l2s[l2i]) {\n                result ~= l1s[l1i];\n\
    \                l1i++;\n                l2i++;\n            } else if (l1s[l1i]\
    \ < l2s[l2i]) {\n                result ~= l1s[l1i];\n                l1i++;\n\
    \            } else {\n                result ~= l2s[l2i];\n                l2i++;\n\
    \            }\n        } else if (l1i < l1s.length) {\n            result ~=\
    \ l1s[l1i];\n            l1i++;\n        } else {\n            result ~= l2s[l2i];\n\
    \            l2i++;\n        }\n    }\n    return result;\n}\n/*\n", "{ \n   \
    \ long[] result;\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n    \
    \    {\n            if (e1 == e2)\n            {\n                result ~= e1;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n \
    \           result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n\
    /*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = [];\n    foreach\
    \ (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n            result ~=\
    \ l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result = [];\n    foreach (l; l1)\n    {\n      \
    \  if (l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n\
    \    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result = [];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = [];\n    foreach\
    \ (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n            result ~=\
    \ l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result = [];\n    foreach (l; l1)\n    {\n      \
    \  if (l2.canFind(", "{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n\
    \    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n  \
    \  int l1_index = 0;\n    int l2_index = 0;\n    while (l1_index < l1_sorted.length\
    \ && l2_index < l2_sorted.length)\n    {\n        if (l1_sorted[l1_index] < l2_sorted[l2_index])\n\
    \        {\n            l1_index++;\n        }\n        else if (l1_sorted[l1_index]\
    \ > l2_sorted[l2_index])\n        {\n            l2_index++;\n        }\n    \
    \    else\n        {\n            result ~= l1_sorted[l1_index];\n           \
    \ l1_index++;\n            l2_index++;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ unique(long[] l1, long[] l2) \n{\n    long[] result;\n    long[] l1_sorted =\
    \ l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n\
    \    int l1_index = 0;\n    int l2_index = 0;\n    while (l1_index < l1_sorted.length\
    \ && l2_index < l2_sorted.length)\n    {\n        if (l1_sorted[l1_index] < l2_sorted[l2_index])\n\
    \        {\n            result ~= l1_sorted[l1_index];\n            l1_index++;\n\
    \        }\n        else if (l1_sorted[l1_index] > l2_sorted[l2_index])\n    \
    \    {\n            result ~= l2_sorted[l2_index];\n            l2_index++;\n\
    \        }\n        else\n        {\n            result ~", "{ \n    auto result\
    \ = new long[]; \n    foreach (a; l1) \n    { \n        if (a in l2) \n      \
    \      result ~= a; \n    } \n    return result.sort().uniq; \n} ", "{\n    long[]\
    \ result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n  \
    \  l1_sorted.sort;\n    l2_sorted.sort;\n    int l1_i = 0;\n    int l2_i = 0;\n\
    \    while (l1_i < l1_sorted.length && l2_i < l2_sorted.length)\n    {\n     \
    \   if (l1_sorted[l1_i] == l2_sorted[l2_i])\n        {\n            result ~=\
    \ l1_sorted[l1_i];\n            l1_i++;\n            l2_i++;\n        }\n    \
    \    else if (l1_sorted[l1_i] < l2_sorted[l2_i])\n        {\n            l1_i++;\n\
    \        }\n        else\n        {\n            l2_i++;\n        }\n    }\n \
    \   return result;\n}\n/*\nReturn sorted unique elements for two lists.\n    \
    \    \n    \n*/\nlong[] unique(long[] l1, long[] l2) \n{\n    long[] result;\n\
    \    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    int l1_i = 0;\n    int l2_i = 0;\n    while (l1_i <\
    \ l1_sorted.length && l2_i < l2_sorted.length)\n    {\n        if (l1_sorted[l1_i]\
    \ == l2_sorted[l2_i])\n        {\n            l1_i++;\n            l2_i++;\n \
    \       }\n        else if (l1_sorted[l1_i] < l2_sorted[l2_i])\n        {\n  \
    \          result ~= l1_sorted[l1_i];\n            l1_i++;\n        }\n      \
    \  else\n        {\n            result ~= l2_sorted[l2", "{\n    long[] result\
    \ = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n    \
    \    {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (l; l1)\n    {\n        result ~= l;\n    }\n    foreach (l; l2)\n    {\n  \
    \      result ~= l;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] difference(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        if (!l2.canFind(l))\n        {\n            result ~= l;\n    \
    \    }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] symmetricDifference(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n     \
    \   if (!l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n\
    \    foreach (l; l2)\n    {\n        if (!l1.canFind(l))\n        {\n        \
    \    result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn\
    \ sorted unique elements for two lists.\n        \n    \n*/\nlong[] intersection(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        if (l2.canFind(l))\n        {\n            result ~= l;\n     \
    \   }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique", "{\n\
    \    long[] result = new long[];\n    foreach (e; l1)\n    {\n        if (e in\
    \ l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n       \
    \ foreach (e2; l2)\n        {\n            if (e1 == e2)\n            {\n    \
    \            result ~= e1;\n                break;\n            }\n        }\n\
    \    }\n    return result.sort().uniq;\n}", "{\n    long[] result = new long[];\n\
    \    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] unique(long[] l1,\
    \ long[] l2) \n{\n    long[] result = new long[];\n    foreach (e; l1)\n    {\n\
    \        result ~= e;\n    }\n    foreach (e; l2)\n    {\n        result ~= e;\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements for\
    \ two lists.\n        \n    \n*/\nlong[] unique(long[] l1, long[] l2, long[] l3)\
    \ \n{\n    long[] result = new long[];\n    foreach (e; l1)\n    {\n        result\
    \ ~= e;\n    }\n    foreach (e; l2)\n    {\n        result ~= e;\n    }\n    foreach\
    \ (e; l3)\n    {\n        result ~= e;\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ unique(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    long[] result =\
    \ new long[];\n    foreach (e; l1)\n    {\n        result ~= e;\n    }\n    foreach\
    \ (e; l2)\n    {\n        result ~= e;\n    }\n    foreach (e; l3)\n    {\n  \
    \      result ~= e;\n    }\n    foreach (e; l4)\n    {\n        result ~= e;\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements for\
    \ two lists.\n        \n    \n*/\nlong[] unique(long[] l1, long[] l2, long[] l3,\
    \ long[] l4, long[] l5) \n{\n    long[] result = new", "{\n    long[] result =\
    \ new long[];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n       \
    \ {\n            if (e1 == e2)\n            {\n                result ~= e1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    foreach (e1; l1)\n    {\n      \
    \  foreach (e2; l2)\n        {\n            if (e1 == e2)\n            {\n   \
    \             result ~= e1;\n            }\n        }\n    }\n    return result.sort().unique;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n  \
    \  foreach (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n            if\
    \ (e1 == e2)\n            {\n                result ~= e1;\n            }\n  \
    \      }\n    }\n    return result.sort().unique;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result = new long[0];\n    foreach (e1; l1)\n   \
    \ {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n        \
    \    {\n                result ~= e1;\n            }\n        }\n    }\n    return\
    \ result.sort().unique;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result\
    \ = new long[0];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n    \
    \    {\n            if (e1 == e2)\n            {\n                result ~= e1;\n\
    \            }\n        }\n    }\n    return result.sort().unique;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[0];\n    foreach (e1; l1)\n\
    \    {\n        foreach (e2; l2)\n        {\n            if (e1 ==", "{\n    long[]\
    \ result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n     \
    \       result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n\
    \    long[] result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.count(l)\
    \ > 0)\n        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[0];\n    foreach (long i; l1)\n    {\n  \
    \      if (l2.canFind(i))\n        {\n            result ~= i;\n        }\n  \
    \  }\n    return result.sort().dup.unique;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] union(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[0];\n    foreach (long i; l1)\n    {\n        result\
    \ ~= i;\n    }\n    foreach (long i; l2)\n    {\n        result ~= i;\n    }\n\
    \    return result.sort().dup.unique;\n}\n/*\nReturn sorted unique elements for\
    \ two lists.\n        \n    \n*/\nlong[] intersection(long[] l1, long[] l2) \n\
    {\n    long[] result = new long[0];\n    foreach (long i; l1)\n    {\n       \
    \ if (l2.canFind(i))\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result.sort().dup.unique;\n}\n/*\nReturn sorted unique elements for\
    \ two lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[0];\n    foreach (long i; l1)\n    {\n        if\
    \ (!l2.canFind(i))\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result.sort().dup.unique;\n}\n/*\nReturn sorted unique elements for\
    \ two lists.\n        \n    \n*/\nlong[] symmetric_difference(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[0];\n    foreach (long i; l1)\n    {\n\
    \        if (!l2.canFind(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    foreach (long i; l2)\n    {\n        if (!l1.canFind(i))\n       \
    \ {\n            result ~= i;\n        }", "{ \n    auto l = new long[]; \n  \
    \  foreach (e; l1) \n    { \n        if (e in l2) \n            l ~= e; \n   \
    \ } \n    return l.sort().uniq; \n} ", "{\n    long[] result;\n    long[] l1_sorted\
    \ = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n\
    \    long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique = l2_sorted.unique;\n\
    \    foreach(long l1_u; l1_unique)\n    {\n        foreach(long l2_u; l2_unique)\n\
    \        {\n            if(l1_u == l2_u)\n            {\n                result\
    \ ~= l1_u;\n            }\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements for two lists.\n        \n    \n*/\nlong[] unique(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n   \
    \ long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    long[]\
    \ l1_unique = l1_sorted.unique;\n    long[] l2_unique = l2_sorted.unique;\n  \
    \  foreach(long l1_u; l1_unique)\n    {\n        result ~= l1_u;\n    }\n    foreach(long\
    \ l2_u; l2_unique)\n    {\n        result ~= l2_u;\n    }\n    return result.unique;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ unique(long[] l1, long[] l2, long[] l3) \n{\n    long[] result;\n    long[]\
    \ l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n    long[] l3_sorted =\
    \ l3.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    l3_sorted.sort;\n   \
    \ long[] l1_unique = l1_s", "{\n    long[] r;\n    long[] l1_sorted = l1.dup;\n\
    \    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n  \
    \  long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique = l2_sorted.unique;\n\
    \    long[] l1_unique_sorted = l1_unique.dup;\n    long[] l2_unique_sorted = l2_unique.dup;\n\
    \    l1_unique_sorted.sort;\n    l2_unique_sorted.sort;\n    long[] l1_unique_sorted_unique\
    \ = l1_unique_sorted.unique;\n    long[] l2_unique_sorted_unique = l2_unique_sorted.unique;\n\
    \    long[] l1_unique_sorted_unique_sorted = l1_unique_sorted_unique.dup;\n  \
    \  long[] l2_unique_sorted_unique_sorted = l2_unique_sorted_unique.dup;\n    l1_unique_sorted_unique_sorted.sort;\n\
    \    l2_unique_sorted_unique_sorted.sort;\n    long[] l1_unique_sorted_unique_sorted_unique\
    \ = l1_unique_sorted_unique_sorted.unique;\n    long[] l2_unique_sorted_unique_sorted_unique\
    \ = l2_unique_sorted_unique_sorted.unique;\n    long[] l1_unique_sorted_unique_sorted_unique_sorted\
    \ = l1_unique_sorted_unique_sorted_unique.dup;\n    long[] l2_unique_sorted_unique_sorted_unique_sorted\
    \ = l2_unique_sorted_unique_sorted_unique.dup;\n    l1_unique_sorted_unique_sorted_unique_sorted.sort;\n\
    \    l2_unique_sorted_unique_sorted_unique_sorted.sort;\n    long[] l1_unique_sorted_unique_sorted_unique_s",
  "{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n        foreach\
    \ (e2; l2)\n        {\n            if (e1 == e2)\n            {\n            \
    \    result ~= e1;\n                break;\n            }\n        }\n    }\n\
    \    return result.sort().uniq;\n}", "{\n    long[] result = new long[];\n   \
    \ foreach (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n            if\
    \ (e1 == e2)\n            {\n                result ~= e1;\n                break;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n\
    \    l1_sorted.sort;\n    l2_sorted.sort;\n    foreach(long i; l1_sorted)\n  \
    \  {\n        if(l2_sorted.canFind(i))\n        {\n            result ~= i;\n\
    \        }\n    }\n    return result.dup.sort.uniq;\n}\n/*\nReturn sorted unique\
    \ elements in l1 that are not in l2.\n        \n    \n*/\nlong[] difference(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n   \
    \ long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    foreach(long\
    \ i; l1_sorted)\n    {\n        if(!l2_sorted.canFind(i))\n        {\n       \
    \     result ~= i;\n        }\n    }\n    return result.dup.sort.uniq;\n}\n/*\n\
    Return sorted unique elements in l1 that are not in l2.\n        \n    \n*/\n\
    long[] difference(long[] l1, long[] l2) \n{\n    long[] result;\n    long[] l1_sorted\
    \ = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n\
    \    foreach(long i; l1_sorted)\n    {\n        if(!l2_sorted.canFind(i))\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result.dup.sort.uniq;\n\
    }\n/*\nReturn sorted unique elements in l1 that are not in l2.\n        \n   \
    \ \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n    long[] result;\n    long[]\
    \ l1_sorted = l1.dup;", "{\n    long[] res = new long[];\n    foreach (e1; l1)\n\
    \    {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n     \
    \       {\n                res ~= e1;\n                break;\n            }\n\
    \        }\n    }\n    return res.sort().unique;\n}", "{ \n    long[] res = new\
    \ long[l1.length]; \n    int i = 0; \n    int j = 0; \n    int k = 0; \n    while\
    \ (i < l1.length && j < l2.length) \n    { \n        if (l1[i] < l2[j]) \n   \
    \         i++; \n        else if (l2[j] < l1[i]) \n            j++; \n       \
    \ else \n        { \n            res[k] = l1[i]; \n            i++; \n       \
    \     j++; \n            k++; \n        } \n    } \n    return res[0..k]; \n}\
    \ \n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ unique(long[] l1, long[] l2) \n{ \n    long[] res = new long[l1.length + l2.length];\
    \ \n    int i = 0; \n    int j = 0; \n    int k = 0; \n    while (i < l1.length\
    \ && j < l2.length) \n    { \n        if (l1[i] < l2[j]) \n            res[k++]\
    \ = l1[i++]; \n        else if (l2[j] < l1[i]) \n            res[k++] = l2[j++];\
    \ \n        else \n        { \n            res[k++] = l1[i++]; \n            j++;\
    \ \n        } \n    } \n    while (i < l1.length) \n        res[k++] = l1[i++];\
    \ \n    while (j < l2.length) \n        res[k++] = l2[j++]; \n    return res[0..k];\
    \ \n} \n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\n\
    long[] unique(long[] l1, long[] l2) \n{ \n    long[] res = new long[l1.length\
    \ + l2.length]; \n    int i = 0; \n    int j = 0; \n    int k = 0", "{\n    long[]\
    \ result = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n   \
    \     {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n        if\
    \ (l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n   \
    \ return result.sort().uniq;\n}", "{\n    auto result = new long[];\n    foreach\
    \ (a; l1)\n    {\n        if (a in l2)\n        {\n            result ~= a;\n\
    \        }\n    }\n    return result.sort().unique;\n}", "{\n    long[] result\
    \ = new long[];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n     \
    \   {\n            if (e1 == e2)\n            {\n                result ~= e1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ unique(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (e1; l1)\n    {\n        bool found = false;\n        foreach (e2; l2)\n   \
    \     {\n            if (e1 == e2)\n            {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (!found)\n     \
    \   {\n            result ~= e1;\n        }\n    }\n    foreach (e2; l2)\n   \
    \ {\n        bool found = false;\n        foreach (e1; l1)\n        {\n      \
    \      if (e1 == e2)\n            {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if (!found)\n        {\n   \
    \         result ~= e2;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] unique(long[] l1,\
    \ long[] l2, long[] l3) \n{\n    long[] result = new long[];\n    foreach (e1;\
    \ l1)\n    {\n        bool found = false;\n        foreach (e2; l2)\n        {\n\
    \            if (e1 == e2)\n            {\n                found = true;\n   \
    \             break;\n            }\n        }\n        if (!found)\n        {\n\
    \            foreach (e3; l3)\n            {\n                if (e1 == e3)\n\
    \                {\n                    found = true;\n                    break;\n\
    \                }\n            }\n        }\n        if (!found)\n        {\n\
    \            result ~= e1;\n        }\n    }\n    foreach (e2; l2)\n   ", "{\n\
    \    long[] result;\n    int i, j;\n    i = 0;\n    j = 0;\n    while (i < l1.length\
    \ && j < l2.length)\n    {\n        if (l1[i] == l2[j])\n        {\n         \
    \   result ~= l1[i];\n            i++;\n            j++;\n        }\n        else\
    \ if (l1[i] < l2[j])\n        {\n            i++;\n        }\n        else\n \
    \       {\n            j++;\n        }\n    }\n    return result;\n}", "{\n  \
    \  long[] result = new long[];\n    foreach (e1; l1)\n    {\n        foreach (e2;\
    \ l2)\n        {\n            if (e1 == e2)\n            {\n                result\
    \ ~= e1;\n                break;\n            }\n        }\n    }\n    return\
    \ result.sort().uniq;\n}", "{\n    long[] result = new long[];\n    foreach (e1;\
    \ l1)\n    {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n\
    \            {\n                result ~= e1;\n                break;\n      \
    \      }\n        }\n    }\n    return result.sort().unique;\n}", "{\n    auto\
    \ l1_set = set(l1);\n    auto l2_set = set(l2);\n    auto common_set = l1_set\
    \ & l2_set;\n    return common_set.array;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] unique(long[] l1, long[] l2) \n{\n\
    \    auto l1_set = set(l1);\n    auto l2_set = set(l2);\n    auto common_set =\
    \ l1_set | l2_set;\n    return common_set.array;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] unique(long[] l1, long[]\
    \ l2, long[] l3) \n{\n    auto l1_set = set(l1);\n    auto l2_set = set(l2);\n\
    \    auto l3_set = set(l3);\n    auto common_set = l1_set | l2_set | l3_set;\n\
    \    return common_set.array;\n}\n/*\nReturn sorted unique elements for two lists.\n\
    \        \n    \n*/\nlong[] unique(long[] l1, long[] l2, long[] l3, long[] l4)\
    \ \n{\n    auto l1_set = set(l1);\n    auto l2_set = set(l2);\n    auto l3_set\
    \ = set(l3);\n    auto l4_set = set(l4);\n    auto common_set = l1_set | l2_set\
    \ | l3_set | l4_set;\n    return common_set.array;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] unique(long[] l1, long[]\
    \ l2, long[] l3, long[] l4, long[] l5) \n{\n    auto l1_set = set(l1);\n    auto\
    \ l2_set = set(l2);\n    auto l3_set = set(l3);\n    auto l4_set = set(l4);\n\
    \    auto l5_set = set(l5);\n    auto common_", "{\n    long[] result = new long[];\n\
    \    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n        {\n\
    \            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] ret = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \            ret ~= l;\n    }\n    return ret.sort().uniq;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n   \
    \ foreach (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n            result\
    \ ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        if (l2.canFind(l))\n        {\n            result ~= l;\n     \
    \   }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n     \
    \   if (l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n\
    \    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n   \
    \ foreach (", "{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n\
    \        if (l2.canFind(l))\n        {\n            result ~= l;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n   \
    \ foreach (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n            result\
    \ ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        if (l2.canFind(l))\n        {\n            result ~= l;\n     \
    \   }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n     \
    \   if (l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n\
    \    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result = new long[];\n    foreach (", "{\n    long[] result = new long[];\n\
    \    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n        {\n         \
    \   result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn\
    \ sorted unique elements for two lists.\n        \n    \n*/\nlong[] union(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (l; l1)\n \
    \   {\n        result ~= l;\n    }\n    foreach (l; l2)\n    {\n        result\
    \ ~= l;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] intersection(long[] l1, long[] l2)\
    \ \n{\n    long[] result = new long[];\n    foreach (l; l1)\n    {\n        if\
    \ (l2.canFind(l))\n        {\n            result ~= l;\n        }\n    }\n   \
    \ return result.sort().uniq;\n}\n/*\nReturn sorted unique elements for two lists.\n\
    \        \n    \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n    long[] result\
    \ = new long[];\n    foreach (l; l1)\n    {\n        if (!l2.canFind(l))\n   \
    \     {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ symmetric_difference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n\
    \    foreach (l; l1)\n    {\n        if (!l2.canFind(l))\n        {\n        \
    \    result ~= l;\n        }\n    }\n    foreach (l; l2)\n    {\n        if (!l1.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted", "{\n    long[] result = new long[];\n    foreach (e1; l1)\n\
    \    {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n     \
    \       {\n                result ~= e1;\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    long[] result;\n    foreach\
    \ (e; l1)\n    {\n        if (l2.canFind(e))\n        {\n            result ~=\
    \ e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    auto result\
    \ = new long[](0);\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n \
    \       {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach (e1; l1) {\n        foreach\
    \ (e2; l2) {\n            if (e1 == e2) {\n                result ~= e1;\n   \
    \         }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result = new long[0];\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted\
    \ = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    long[] l1_unique =\
    \ l1_sorted.uniq;\n    long[] l2_unique = l2_sorted.uniq;\n    foreach(long i;\
    \ l1_unique)\n    {\n        foreach(long j; l2_unique)\n        {\n         \
    \   if(i == j)\n            {\n                result ~= i;\n            }\n \
    \       }\n    }\n    return result;\n}\n/*\nReturn sorted unique elements of\
    \ l1 that are not in l2.\n        \n    \n*/\nlong[] uncommon(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[0];\n    long[] l1_sorted = l1.dup;\n\
    \    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n  \
    \  long[] l1_unique = l1_sorted.uniq;\n    long[] l2_unique = l2_sorted.uniq;\n\
    \    foreach(long i; l1_unique)\n    {\n        bool found = false;\n        foreach(long\
    \ j; l2_unique)\n        {\n            if(i == j)\n            {\n          \
    \      found = true;\n            }\n        }\n        if(!found)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements of l1 that are not in l2.\n        \n    \n*/\nlong[]\
    \ uncommon(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    long[]\
    \ l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n \
    \   l2_sorted.sort;\n    long[] l1_unique =", "{\n    long[] res;\n    foreach\
    \ (e; l1)\n    {\n        if (e in l2)\n        {\n            res ~= e;\n   \
    \     }\n    }\n    return res.sort().uniq;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2) \n{\n    long[] res;\n    foreach (e; l1)\n    {\n        if (e in l2)\n\
    \        {\n            res ~= e;\n        }\n    }\n    return res.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] res;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            res ~= e;\n        }\n  \
    \  }\n    return res.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] res;\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n\
    \            res ~= e;\n        }\n    }\n    return res.sort().uniq;\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2) \n{\n    long[] res;\n    foreach (e; l1)\n   \
    \ {\n        if (e in l2)\n        {\n            res ~= e;\n        }\n    }\n\
    \    return res.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] res;\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n\
    \            res ~= e;\n        }\n    }\n    return res.sort", "{\n    long[]\
    \ result = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n   \
    \     {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach\
    \ (e; l1)\n    {\n        result ~= e;\n    }\n    foreach (e; l2)\n    {\n  \
    \      result ~= e;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] intersection(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (e; l1)\n \
    \   {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements for\
    \ two lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (e; l1)\n    {\n        if (!(e\
    \ in l2))\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ symmetricDifference(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n\
    \    foreach (e; l1)\n    {\n        if (!(e in l2))\n        {\n            result\
    \ ~= e;\n        }\n    }\n    foreach (e; l2)\n    {\n        if (!(e in l1))\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\n", "{\n\
    \    long[] result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n\
    \        {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n       \
    \ foreach (e2; l2)\n        {\n            if (e1 == e2)\n            {\n    \
    \            result ~= e1;\n                break;\n            }\n        }\n\
    \    }\n    return result.sort().uniq;\n}", "{\n    long[] ret;\n    ret = new\
    \ long[l1.length];\n    int i = 0;\n    foreach(e; l1)\n    {\n        if (e in\
    \ l2)\n        {\n            ret[i] = e;\n            i++;\n        }\n    }\n\
    \    ret = ret[0..i];\n    ret.sort;\n    ret = ret.uniq;\n    return ret;\n}",
  "{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n     \
    \   {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n\
    \        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n       \
    \ foreach (e2; l2)\n        {\n            if (e1 == e2)\n            {\n    \
    \            result ~= e1;\n                break;\n            }\n        }\n\
    \    }\n    return result.sort().unique;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (e1; l1)\n    {\n        foreach\
    \ (e2; l2)\n        {\n            if (e1 == e2)\n            {\n            \
    \    result ~= e1;\n                break;\n            }\n        }\n    }\n\
    \    return result.sort().unique;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (e1; l1)\n    {\n        foreach\
    \ (e2; l2)\n        {\n            if (e1 == e2)\n            {\n            \
    \    result ~= e1;\n                break;\n            }\n        }\n    }\n\
    \    return result.sort().unique;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (e1; l1)\n    {\n        foreach\
    \ (e2; l2)\n        {\n            if (e1 == e2)\n            {\n            \
    \    result ~= e1;\n                break;\n            }\n        }\n    }\n\
    \    return result.sort().unique;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (e1; l1)\n    {\n        foreach\
    \ (e2; l2", "{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e\
    \ in l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort", "{\n    long[] result = new long[];\n    foreach\
    \ (long i; l1) {\n        if (l2.canFind(i)) {\n            result ~= i;\n   \
    \     }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[];\n    foreach (long i; l1) {\n     \
    \   if (l2.canFind(i)) {\n            result ~= i;\n        }\n    }\n    return\
    \ result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result\
    \ = new long[];\n    foreach (long i; l1) {\n        if (l2.canFind(i)) {\n  \
    \          result ~= i;\n        }\n    }\n    return result.sort().uniq;\n}\n\
    /*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n   \
    \ foreach (long i; l1) {\n        if (l2.canFind(i)) {\n            result ~=\
    \ i;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result = new long[];\n    foreach (long i; l1) {\n\
    \        if (l2.canFind(i)) {\n            result ~= i;\n        }\n    }\n  \
    \  return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result = new long[];\n    foreach (long i; l1) {\n        if (l2.can",
  "{\n    long[] result = new long[];\n    foreach (e1; l1) {\n        foreach (e2;\
    \ l2) {\n            if (e1 == e2) {\n                result ~= e1;\n        \
    \    }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result;\n\
    \    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n   \
    \     {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted\
    \ = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    int i = 0;\n    int\
    \ j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length) \n    {\n \
    \       if (l1_sorted[i] == l2_sorted[j]) \n        {\n            result ~= l1_sorted[i];\n\
    \            i++;\n            j++;\n        }\n        else if (l1_sorted[i]\
    \ < l2_sorted[j]) \n        {\n            i++;\n        }\n        else \n  \
    \      {\n            j++;\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique elements of l1 that are not in l2.\n        \n    \n*/\nlong[]\
    \ difference(long[] l1, long[] l2) \n{\n    long[] result;\n    long[] l1_sorted\
    \ = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n\
    \    int i = 0;\n    int j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length)\
    \ \n    {\n        if (l1_sorted[i] == l2_sorted[j]) \n        {\n           \
    \ i++;\n            j++;\n        }\n        else if (l1_sorted[i] < l2_sorted[j])\
    \ \n        {\n            result ~= l1_sorted[i];\n            i++;\n       \
    \ }\n        else \n        {\n            j++;\n        }\n    }\n    while (i\
    \ < l1_sorted.length) \n    {\n        result ~= l1_sorted[i];\n        i++;\n\
    \    }\n    return result;\n}\n/*\nReturn sorted unique elements of l1 that are\
    \ not in l2.\n        ", "{\n    long[] res = new long[];\n    foreach (e; l1)\
    \ {\n        if (e in l2) {\n            res ~= e;\n        }\n    }\n    return\
    \ res.sort().uniq;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] res =\
    \ new long[];\n    foreach (e; l1) {\n        if (e in l2) {\n            res\
    \ ~= e;\n        }\n    }\n    return res.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] res = new long[];\n    foreach (e; l1) {\n      \
    \  if (e in l2) {\n            res ~= e;\n        }\n    }\n    return res.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] res = new long[];\n    foreach\
    \ (e; l1) {\n        if (e in l2) {\n            res ~= e;\n        }\n    }\n\
    \    return res.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] res = new long[];\n    foreach (e; l1) {\n        if (e in l2) {\n \
    \           res ~= e;\n        }\n    }\n    return res.sort().uniq;\n}\n/*\n\
    Return sorted unique common elements for two lists.\n        \n    \n*/\nlong[]\
    \ common(long[] l1, long[] l2) \n{\n    long[] res = new long[];\n    foreach\
    \ (e; l1) {\n        if (e in l2) {\n            res ~= e;\n        }\n    }\n\
    \    return res.sort", "{\n    auto l = new long[];\n    foreach (e1; l1) {\n\
    \        foreach (e2; l2) {\n            if (e1 == e2) {\n                l ~=\
    \ e1;\n                break;\n            }\n        }\n    }\n    return l.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if (elem in\
    \ l2)\n        {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if (elem in\
    \ l2)\n        {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    long[] l1_sorted = l1.dup;\n    long[]\
    \ l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    long i1 =\
    \ 0;\n    long i2 = 0;\n    while (i1 < l1_sorted.length && i2 < l2_sorted.length)\
    \ \n    {\n        if (l1_sorted[i1] == l2_sorted[i2]) \n        {\n         \
    \   result ~= l1_sorted[i1];\n            i1++;\n            i2++;\n        }\n\
    \        else if (l1_sorted[i1] < l2_sorted[i2]) \n        {\n            i1++;\n\
    \        }\n        else \n        {\n            i2++;\n        }\n    }\n  \
    \  return result;\n}\n/*\nReturn sorted unique elements for two lists.\n     \
    \   \n    \n*/\nlong[] unique(long[] l1, long[] l2) \n{\n    long[] result = new\
    \ long[];\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n  \
    \  l1_sorted.sort;\n    l2_sorted.sort;\n    long i1 = 0;\n    long i2 = 0;\n\
    \    while (i1 < l1_sorted.length && i2 < l2_sorted.length) \n    {\n        if\
    \ (l1_sorted[i1] == l2_sorted[i2]) \n        {\n            result ~= l1_sorted[i1];\n\
    \            i1++;\n            i2++;\n        }\n        else if (l1_sorted[i1]\
    \ < l2_sorted[i2]) \n        {\n            result ~= l1_sorted[i1];\n       \
    \     i1++;\n        }\n        else \n        {\n            result ~= l2_sorted[i2];\n\
    \            i2++;\n        }\n    }\n    while (i1 < l", "{\n    long[] result;\n\
    \    foreach (elem; l1)\n    {\n        if (elem in l2)\n        {\n         \
    \   result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n\
    \    long[] result = new long[0];\n    long[] l1_sorted = l1.dup;\n    long[]\
    \ l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    long i =\
    \ 0;\n    long j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length)\
    \ \n    {\n        if (l1_sorted[i] == l2_sorted[j]) \n        {\n           \
    \ result ~= l1_sorted[i];\n            i++;\n            j++;\n        }\n   \
    \     else if (l1_sorted[i] < l2_sorted[j]) \n        {\n            i++;\n  \
    \      }\n        else \n        {\n            j++;\n        }\n    }\n    return\
    \ result;\n}\n/*\nReturn sorted unique elements for two lists.\n        \n   \
    \ \n*/\nlong[] unique(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n\
    \    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    long i = 0;\n    long j = 0;\n    while (i < l1_sorted.length\
    \ && j < l2_sorted.length) \n    {\n        if (l1_sorted[i] == l2_sorted[j])\
    \ \n        {\n            i++;\n            j++;\n        }\n        else if\
    \ (l1_sorted[i] < l2_sorted[j]) \n        {\n            result ~= l1_sorted[i];\n\
    \            i++;\n        }\n        else \n        {\n            result ~=\
    \ l2_sorted[j];\n            j++;\n        }\n    }\n    while (i < l1_sorted.length)\
    \ \n    {\n        result ~= l1_sorted[i];\n        i++;\n    }\n    while (j\
    \ < l2_", "{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e in\
    \ l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result;\n    if (l1.length > l2.length) \n    {\n        result\
    \ = common(l2, l1);\n    }\n    else \n    {\n        result = new long[l1.length];\n\
    \        size_t j = 0;\n        foreach (i, e; l1) \n        {\n            if\
    \ (e in l2) \n            {\n                result[j++] = e;\n            }\n\
    \        }\n        result = result[0 .. j];\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    if (l1.length\
    \ > l2.length) \n    {\n        result = common(l2, l1);\n    }\n    else \n \
    \   {\n        result = new long[l1.length];\n        size_t j = 0;\n        foreach\
    \ (i, e; l1) \n        {\n            if (e in l2) \n            {\n         \
    \       result[j++] = e;\n            }\n        }\n        result = result[0\
    \ .. j];\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common\
    \ elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[]\
    \ l2) \n{\n    long[] result;\n    if (l1.length > l2.length) \n    {\n      \
    \  result = common(l2, l1);\n    }\n    else \n    {\n        result = new long[l1.length];\n\
    \        size_t j = 0;\n        foreach (i, e; l1) \n        {\n            if\
    \ (e in l2) \n            {\n                result[j++] = e;\n            }\n\
    \        }\n        result = result[0 .. j];\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1", "{\n    long[] result;\n    foreach (elem; l1) \n  \
    \  {\n        if (elem in l2) \n        {\n            result ~= elem;\n     \
    \   }\n    }\n    return result.sort().unique;\n}", "{\n    long[] result = new\
    \ long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n     \
    \       result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}", "{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n       \
    \ foreach (e2; l2)\n        {\n            if (e1 == e2)\n            {\n    \
    \            result ~= e1;\n                break;\n            }\n        }\n\
    \    }\n    return result.sort().uniq;\n}", "{\n    long[] result;\n    foreach\
    \ (e; l1)\n    {\n        if (e in l2)\n        {\n            result ~= e;\n\
    \        }\n    }\n    return result.sort().unique;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e\
    \ in l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().unique;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().unique;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().unique;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().unique;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().unique;\n\
    }", "{\n    auto l1_sorted = l1.dup.sort;\n    auto l2_sorted = l2.dup.sort;\n\
    \    auto l1_unique = l1_sorted.unique;\n    auto l2_unique = l2_sorted.unique;\n\
    \    auto l1_set = l1_unique.toSet;\n    auto l2_set = l2_unique.toSet;\n    auto\
    \ l1_l2_intersection = l1_set.intersection(l2_set);\n    auto l1_l2_intersection_sorted\
    \ = l1_l2_intersection.toArray.sort;\n    return l1_l2_intersection_sorted;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.dup.sort.unique.toSet.intersection(l2.dup.sort.unique.toSet).toArray.sort;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.dup.sort.unique.toSet.intersection(l2.dup.sort.unique.toSet).toArray.sort;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.dup.sort.unique.toSet.intersection(l2.dup.sort.unique.toSet).toArray.sort;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1.dup.sort.unique.toSet.intersection(l2.dup.sort.unique.toSet).toArray.sort;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    return l1", "{\n    long[] result\
    \ = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n    \
    \    {\n            result ~= l;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[0];\n    long[] l1_sorted = l1.dup;\n    long[]\
    \ l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    long[] l1_unique\
    \ = l1_sorted.unique;\n    long[] l2_unique = l2_sorted.unique;\n    foreach(long\
    \ i; l1_unique)\n    {\n        foreach(long j; l2_unique)\n        {\n      \
    \      if(i == j)\n            {\n                result ~= i;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    auto l = new long[](l1.length);\n\
    \    auto i = 0;\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n\
    \            l[i] = e;\n            i++;\n        }\n    }\n    l.length = i;\n\
    \    return l;\n}", "{\n    long[] res = new long[];\n    foreach (e1; l1)\n \
    \   {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n      \
    \      {\n                res ~= e1;\n                break;\n            }\n\
    \        }\n    }\n    return res.sort.uniq;\n}", "{\n    long[] ret = new long[];\n\
    \    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n            ret ~= l;\n\
    \    }\n    return ret.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] ret = new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n\
    \            ret ~= l;\n    }\n    return ret.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] ret = new long[];\n    foreach(l; l1)\n    {\n\
    \        if(l2.canFind(l))\n            ret ~= l;\n    }\n    return ret.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] ret = new long[];\n    foreach(l;\
    \ l1)\n    {\n        if(l2.canFind(l))\n            ret ~= l;\n    }\n    return\
    \ ret.sort().uniq;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] ret =\
    \ new long[];\n    foreach(l; l1)\n    {\n        if(l2.canFind(l))\n        \
    \    ret ~= l;\n    }\n    return ret.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] ret = new long[];\n    foreach(l; l1)\n    {\n  \
    \      if(l2.canFind(l))\n            ret ~= l;\n    }", "{\n    long[] result\
    \ = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n\
    \            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n   \
    \ foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (e; l1)\n \
    \   {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result = new long[];\n    foreach (e; l1)\n    {\n        if (e in\
    \ l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result = new long[];\n   \
    \ foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[];\n    foreach (e; l1)\n \
    \   {\n        if (e in l", "{\n    long[] result = new long[];\n    foreach (e1;\
    \ l1)\n    {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n\
    \            {\n                result ~= e1;\n                break;\n      \
    \      }\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] union(long[] l1,\
    \ long[] l2) \n{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n\
    \        result ~= e1;\n    }\n    foreach (e2; l2)\n    {\n        result ~=\
    \ e2;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] union(long[] l1, long[] l2, long[]\
    \ l3) \n{\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n    \
    \    result ~= e1;\n    }\n    foreach (e2; l2)\n    {\n        result ~= e2;\n\
    \    }\n    foreach (e3; l3)\n    {\n        result ~= e3;\n    }\n    return\
    \ result.sort().uniq;\n}\n/*\nReturn sorted unique elements for two lists.\n \
    \       \n    \n*/\nlong[] union(long[] l1, long[] l2, long[] l3, long[] l4) \n\
    {\n    long[] result = new long[];\n    foreach (e1; l1)\n    {\n        result\
    \ ~= e1;\n    }\n    foreach (e2; l2)\n    {\n        result ~= e2;\n    }\n \
    \   foreach (e3; l3)\n    {\n        result ~= e3;\n    }\n    foreach (e4; l4)\n\
    \    {\n        result ~= e4;\n    }\n    return result.sort().uniq;\n}\n/*\n\
    Return sorted unique elements for two lists.\n        \n    ", "{\n    long[]\
    \ result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n        {\n\
    \            result ~= elem;\n        }\n    }\n    return result.sort().unique;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem;\
    \ l1)\n    {\n        if (elem in l2)\n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().unique;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if\
    \ (elem in l2)\n        {\n            result ~= elem;\n        }\n    }\n   \
    \ return result.sort().unique;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n  \
    \      {\n            result ~= elem;\n        }\n    }\n    return result.sort().unique;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem;\
    \ l1)\n    {\n        if (elem in l2)\n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().unique;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if\
    \ (elem in l2)\n        {\n            result ~= elem", "{\n    long[] result\
    \ = new long[];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n     \
    \   {\n            if (e1 == e2)\n            {\n                result ~= e1;\n\
    \                break;\n            }\n        }\n    }\n    return result.sort().uniq;\n\
    }", "{\n    long[] result = new long[0];\n    foreach (i; l1)\n    {\n       \
    \ if (l2.canFind(i))\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result.sort().unique;\n}", "{\n    long[] result;\n    long[] tmp;\n\
    \    long[] tmp2;\n    long[] tmp3;\n    long[] tmp4;\n    long[] tmp5;\n    long[]\
    \ tmp6;\n    long[] tmp7;\n    long[] tmp8;\n    long[] tmp9;\n    long[] tmp10;\n\
    \    long[] tmp11;\n    long[] tmp12;\n    long[] tmp13;\n    long[] tmp14;\n\
    \    long[] tmp15;\n    long[] tmp16;\n    long[] tmp17;\n    long[] tmp18;\n\
    \    long[] tmp19;\n    long[] tmp20;\n    long[] tmp21;\n    long[] tmp22;\n\
    \    long[] tmp23;\n    long[] tmp24;\n    long[] tmp25;\n    long[] tmp26;\n\
    \    long[] tmp27;\n    long[] tmp28;\n    long[] tmp29;\n    long[] tmp30;\n\
    \    long[] tmp31;\n    long[] tmp32;\n    long[] tmp33;\n    long[] tmp34;\n\
    \    long[] tmp35;\n    long[] tmp36;\n    long[] tmp37;\n    long[] tmp38;\n\
    \    long[] tmp39;\n    long[] tmp40;\n    long[] tmp41;\n    long[] tmp42;\n\
    \    long[] tmp43;\n    long[] tmp44;\n    long[] tmp45;\n    long[] tmp46;\n\
    \    long[] tmp47;\n    long[] tmp48;\n    long[] tmp49;\n    long[] tmp50;\n\
    \    long[] tmp51;\n    long[] tmp52;\n    long[] tmp53;\n    long[] tmp54;\n\
    \    long[] tmp55;\n    long[] tmp56;\n    long[] tmp57;\n    long[] tmp58;\n\
    \    long[] tmp59;\n    long[] tmp60;\n    long[] tmp61;\n    long[] tmp62;\n\
    \    long[] tmp63;\n    long[] tmp64;\n    long[] tmp65;\n    long[] tmp66;\n\
    \    long[] tmp67;\n    long[] tmp68;\n    long[] tmp69;\n    long[] tmp70;\n\
    \    long[] tmp71;\n    long[] tmp72;\n", "{\n    auto result = new long[](l1.length);\n\
    \    size_t i = 0;\n    foreach (a; l1)\n    {\n        foreach (b; l2)\n    \
    \    {\n            if (a == b)\n            {\n                result[i] = a;\n\
    \                i++;\n            }\n        }\n    }\n    return result[0..i];\n\
    }", "{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted\
    \ = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    result = l1_sorted.intersect(l2_sorted);\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n  \
    \  long[] l3_sorted = l3.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    l3_sorted.sort;\n\
    \    result = l1_sorted.intersect(l2_sorted).intersect(l3_sorted);\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n\
    \    long[] result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n\
    \    long[] l3_sorted = l3.dup;\n    long[] l4_sorted = l4.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    l3_sorted.sort;\n    l4_sorted.sort;\n    result = l1_sorted.intersect(l2_sorted).intersect(l3_sorted).intersect(l4_sorted);\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n    long[] result;\n    long[] l1_sorted", "{\n    long[] result;\n\
    \    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n    {\n       \
    \ if (e in l2)\n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result;\n\
    \    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n    {\n       \
    \ if (e in l2)\n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n    long[] result;\n\
    \    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n            result\
    \ ~= e;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n    {\n       \
    \ if (e in l2)\n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort", "{\n    long[] result;\n    foreach (e; l1) \n    {\n        if\
    \ (e in l2) \n        {\n            result ~= e;\n        }\n    }\n    return\
    \ result.sort().unique;\n}", "{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n\
    \    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n  \
    \  long[] l1_unique = l1_sorted.unique;\n    long[] l2_unique = l2_sorted.unique;\n\
    \    foreach(long i; l1_unique)\n    {\n        foreach(long j; l2_unique)\n \
    \       {\n            if(i == j)\n            {\n                result ~= i;\n\
    \            }\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] unique(long[] l1, long[]\
    \ l2) \n{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted\
    \ = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    long[] l1_unique =\
    \ l1_sorted.unique;\n    long[] l2_unique = l2_sorted.unique;\n    foreach(long\
    \ i; l1_unique)\n    {\n        result ~= i;\n    }\n    foreach(long j; l2_unique)\n\
    \    {\n        result ~= j;\n    }\n    return result.unique;\n}\n/*\nReturn\
    \ sorted unique elements for two lists.\n        \n    \n*/\nlong[] unique(long[]\
    \ l1, long[] l2, long[] l3) \n{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n\
    \    long[] l2_sorted = l2.dup;\n    long[] l3_sorted = l3.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    l3_sorted.sort;\n    long[] l1_unique = l1_sorted.unique;\n\
    \    long[] l2_unique = l2_sorted.unique;\n    long[] l3", "{\n    long[] res;\n\
    \    foreach (long i; l1)\n    {\n        if (l2.canFind(i))\n            res\
    \ ~= i;\n    }\n    res.sort();\n    return res.dup.unique;\n}", "{\n    long[]\
    \ result = new long[];\n    foreach (e1; l1) {\n        foreach (e2; l2) {\n \
    \           if (e1 == e2) {\n                result ~= e1;\n            }\n  \
    \      }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result = new\
    \ long[];\n    foreach (long i; l1)\n    {\n        if (l2.canFind(i))\n     \
    \       result ~= i;\n    }\n    return result.sort().uniq;\n}", "{\n    long[]\
    \ result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n     \
    \       result ~= e;\n        }\n    }\n    return result.sort().uniq;\n}\n/*\n\
    Return sorted unique elements for two lists.\n        \n    \n*/\nlong[] union(long[]\
    \ l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n    {\n       \
    \ result ~= e;\n    }\n    foreach (e; l2)\n    {\n        result ~= e;\n    }\n\
    \    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements for two\
    \ lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[] l2) \n{\n  \
    \  long[] result;\n    foreach (e; l1)\n    {\n        if (!(e in l2))\n     \
    \   {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ symmetric_difference(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach\
    \ (e; l1)\n    {\n        if (!(e in l2))\n        {\n            result ~= e;\n\
    \        }\n    }\n    foreach (e; l2)\n    {\n        if (!(e in l1))\n     \
    \   {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ intersection(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e;\
    \ l1)\n    {\n        if (e in l2)\n        {\n            result ~= e;\n    \
    \    }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] intersection_update(long[] l1, long[]\
    \ l2) \n{", "{\n    auto result = new long[](0);\n    foreach (i; l1)\n    {\n\
    \        if (l2.canFind(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3) \n{\n    return common(common(l1, l2), l3);\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    return common(common(l1, l2), common(l3,\
    \ l4));\n}\n/*\nReturn sorted unique common elements for two lists.\n        \n\
    \    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5)\
    \ \n{\n    return common(common(l1, l2), common(l3, l4, l5));\n}\n/*\nReturn sorted\
    \ unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, long[] l4, long[] l5, long[] l6) \n{\n    return common(common(l1,\
    \ l2), common(l3, l4, l5, l6));\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3,\
    \ long[] l4, long[] l5, long[] l6, long[] l7) \n{\n    return common(common(l1,\
    \ l2), common(l3, l4, l5, l6, l7));\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3, long[] l4, long[] l5, long[] l6, long[] l7, long[] l8)", "{ \n    long[]\
    \ result; \n    foreach (e; l1) \n    { \n        if (e in l2) \n            result\
    \ ~= e; \n    } \n    return result.sort().uniq; \n} ", "{\n    long[] ret = new\
    \ long[];\n    foreach(long i; l1)\n    {\n        if(l2.canFind(i))\n       \
    \     ret ~= i;\n    }\n    ret.sort;\n    ret = ret.dup;\n    return ret;\n}",
  "{\n    long[] result = [];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result = [];\n    foreach (l; l1)\n\
    \    {\n        result ~= l;\n    }\n    foreach (l; l2)\n    {\n        result\
    \ ~= l;\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] intersection(long[] l1, long[] l2)\
    \ \n{\n    long[] result = [];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \        {\n            result ~= l;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ difference(long[] l1, long[] l2) \n{\n    long[] result = [];\n    foreach (l;\
    \ l1)\n    {\n        if (!l2.canFind(l))\n        {\n            result ~= l;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] symmetric_difference(long[]\
    \ l1, long[] l2) \n{\n    long[] result = [];\n    foreach (l; l1)\n    {\n  \
    \      if (!l2.canFind(l))\n        {\n            result ~= l;\n        }\n \
    \   }\n    foreach (l; l2)\n    {\n        if (!l1.canFind(l))\n        {\n  \
    \          result ~= l;\n        }\n    }\n    return result.sort().uniq;\n}\n\
    /*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]",
  "{\n    long[] result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n\
    \    l1_sorted.sort;\n    l2_sorted.sort;\n    result = l1_sorted.intersect(l2_sorted);\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n  \
    \  long[] l3_sorted = l3.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n    l3_sorted.sort;\n\
    \    result = l1_sorted.intersect(l2_sorted).intersect(l3_sorted);\n    return\
    \ result;\n}\n/*\nReturn sorted unique common elements for two lists.\n      \
    \  \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n\
    \    long[] result;\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n\
    \    long[] l3_sorted = l3.dup;\n    long[] l4_sorted = l4.dup;\n    l1_sorted.sort;\n\
    \    l2_sorted.sort;\n    l3_sorted.sort;\n    l4_sorted.sort;\n    result = l1_sorted.intersect(l2_sorted).intersect(l3_sorted).intersect(l4_sorted);\n\
    \    return result;\n}\n/*\nReturn sorted unique common elements for two lists.\n\
    \        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[] l3, long[] l4,\
    \ long[] l5) \n{\n    long[] result;\n    long[] l1_sorted", "{\n    long[] result\
    \ = new long[];\n    foreach (e1; l1)\n    {\n        foreach (e2; l2)\n     \
    \   {\n            if (e1 == e2)\n            {\n                result ~= e1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] r;\n    foreach (e; l1)\n    {\n        if (e in l2)\n    \
    \        r ~= e;\n    }\n    return r.sort().uniq;\n}", "{\n    long[] res = new\
    \ long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n     \
    \       if (e in res)\n                continue;\n            res ~= e;\n    \
    \    }\n    }\n    return res;\n}", "{\n    long[] result;\n    foreach (elem;\
    \ l1)\n    {\n        if (elem in l2)\n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if\
    \ (elem in l2)\n        {\n            result ~= elem;\n        }\n    }\n   \
    \ return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n  \
    \      {\n            result ~= elem;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (elem;\
    \ l1)\n    {\n        if (elem in l2)\n        {\n            result ~= elem;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (elem; l1)\n    {\n        if\
    \ (elem in l2)\n        {\n            result ~= elem;\n        }\n    }\n   \
    \ return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements for\
    \ two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n  \
    \  long[] result;\n    foreach (elem; l1)\n    {\n        if (elem in l2)\n  \
    \      {\n           ", "{\n    long[] result = new long[];\n    foreach (l; l1)\n\
    \    {\n        if (l2.canFind(l))\n        {\n            result ~= l;\n    \
    \    }\n    }\n    return result.sort().uniq;\n}", "{\n    long[] result = new\
    \ long[];\n    foreach (e; l1)\n    {\n        if (e in l2)\n        {\n     \
    \       if (e in result)\n                continue;\n            result ~= e;\n\
    \        }\n    }\n    return result;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2, long[]\
    \ l3) \n{\n    long[] result = new long[];\n    foreach (e; l1)\n    {\n     \
    \   if (e in l2 && e in l3)\n        {\n            if (e in result)\n       \
    \         continue;\n            result ~= e;\n        }\n    }\n    return result;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2, long[] l3, long[] l4) \n{\n    long[] result\
    \ = new long[];\n    foreach (e; l1)\n    {\n        if (e in l2 && e in l3 &&\
    \ e in l4)\n        {\n            if (e in result)\n                continue;\n\
    \            result ~= e;\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[] result = new\
    \ long[];\n    foreach (e; l1)\n    {\n        if (e in l2 && e in l3 && e in\
    \ l4 && e in l5)\n        {\n            if (e in result)\n                continue;\n\
    \            result ~= e;\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ sorted unique common elements for two lists.\n        \n    \n*/\nlong[] common(long[]\
    \ l1, long[] l2, long[] l3, long[] l4, long[] l5, long[] l6) \n{\n    long[] result\
    \ = new long[];\n    foreach (e; l", "{\n    long[] result = new long[];\n   \
    \ foreach (e1; l1)\n    {\n        foreach (e2; l2)\n        {\n            if\
    \ (e1 == e2)\n            {\n                result ~= e1;\n                break;\n\
    \            }\n        }\n    }\n    return result.sort().uniq;\n}", "{\n   \
    \ long[] result = new long[0];\n    foreach (long i; l1)\n    {\n        if (l2.canFind(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort().dup.unique;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2) \n{\n    long[] result = new long[0];\n    foreach\
    \ (long i; l1)\n    {\n        result ~= i;\n    }\n    foreach (long i; l2)\n\
    \    {\n        result ~= i;\n    }\n    return result.sort().dup.unique;\n}\n\
    /*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[] intersection(long[]\
    \ l1, long[] l2) \n{\n    long[] result = new long[0];\n    foreach (long i; l1)\n\
    \    {\n        if (l2.canFind(i))\n        {\n            result ~= i;\n    \
    \    }\n    }\n    return result.sort().dup.unique;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] difference(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[0];\n    foreach (long i; l1)\n    {\n\
    \        if (!l2.canFind(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    return result.sort().dup.unique;\n}\n/*\nReturn sorted unique elements\
    \ for two lists.\n        \n    \n*/\nlong[] symmetric_difference(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[0];\n    foreach (long i; l1)\n    {\n\
    \        if (!l2.canFind(i))\n        {\n            result ~= i;\n        }\n\
    \    }\n    foreach (long i; l2)\n    {\n        if (!l1.canFind(i))\n       \
    \ {\n            result ~= i;\n        }", "{\n    long[] result;\n    foreach\
    \ (e; l1)\n    {\n        if (e in l2)\n        {\n            result ~= e;\n\
    \        }\n    }\n    return result.sort.uniq;\n}", "{\n    long[] result = new\
    \ long[0];\n    long[] l1_sorted = l1.dup;\n    long[] l2_sorted = l2.dup;\n \
    \   l1_sorted.sort;\n    l2_sorted.sort;\n    int i = 0;\n    int j = 0;\n   \
    \ while (i < l1_sorted.length && j < l2_sorted.length) \n    {\n        if (l1_sorted[i]\
    \ == l2_sorted[j]) \n        {\n            result ~= l1_sorted[i];\n        \
    \    i++;\n            j++;\n        }\n        else if (l1_sorted[i] < l2_sorted[j])\
    \ \n        {\n            i++;\n        }\n        else \n        {\n       \
    \     j++;\n        }\n    }\n    return result;\n}\n/*\nReturn sorted unique\
    \ elements for two lists.\n        \n    \n*/\nlong[] unique(long[] l1, long[]\
    \ l2) \n{\n    long[] result = new long[0];\n    long[] l1_sorted = l1.dup;\n\
    \    long[] l2_sorted = l2.dup;\n    l1_sorted.sort;\n    l2_sorted.sort;\n  \
    \  int i = 0;\n    int j = 0;\n    while (i < l1_sorted.length && j < l2_sorted.length)\
    \ \n    {\n        if (l1_sorted[i] == l2_sorted[j]) \n        {\n           \
    \ i++;\n            j++;\n        }\n        else if (l1_sorted[i] < l2_sorted[j])\
    \ \n        {\n            result ~= l1_sorted[i];\n            i++;\n       \
    \ }\n        else \n        {\n            result ~= l2_sorted[j];\n         \
    \   j++;\n        }\n    }\n    while (i < l1_sorted.length) \n    {\n       \
    \ result ~= l1_sorted[i];\n        i++;\n    }\n    while (j < l2_", "{\n    long[]\
    \ res = new long[];\n    foreach (l; l1)\n    {\n        if (l2.canFind(l))\n\
    \            res ~= l;\n    }\n    return res.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] union(long[] l1,\
    \ long[] l2) \n{\n    long[] res = new long[];\n    foreach (l; l1)\n    {\n \
    \       res ~= l;\n    }\n    foreach (l; l2)\n    {\n        res ~= l;\n    }\n\
    \    return res.sort().uniq;\n}\n/*\nReturn sorted unique elements for two lists.\n\
    \        \n    \n*/\nlong[] union(long[] l1, long[] l2, long[] l3) \n{\n    long[]\
    \ res = new long[];\n    foreach (l; l1)\n    {\n        res ~= l;\n    }\n  \
    \  foreach (l; l2)\n    {\n        res ~= l;\n    }\n    foreach (l; l3)\n   \
    \ {\n        res ~= l;\n    }\n    return res.sort().uniq;\n}\n/*\nReturn sorted\
    \ unique elements for two lists.\n        \n    \n*/\nlong[] union(long[] l1,\
    \ long[] l2, long[] l3, long[] l4) \n{\n    long[] res = new long[];\n    foreach\
    \ (l; l1)\n    {\n        res ~= l;\n    }\n    foreach (l; l2)\n    {\n     \
    \   res ~= l;\n    }\n    foreach (l; l3)\n    {\n        res ~= l;\n    }\n \
    \   foreach (l; l4)\n    {\n        res ~= l;\n    }\n    return res.sort().uniq;\n\
    }\n/*\nReturn sorted unique elements for two lists.\n        \n    \n*/\nlong[]\
    \ union(long[] l1, long[] l2, long[] l3, long[] l4, long[] l5) \n{\n    long[]\
    \ res = new long[];", "{\n    auto l = new long[];\n    foreach (e1; l1)\n   \
    \ {\n        foreach (e2; l2)\n        {\n            if (e1 == e2)\n        \
    \    {\n                l ~= e1;\n                break;\n            }\n    \
    \    }\n    }\n    return l.sort().uniq;\n}", "{\n    long[] result;\n    foreach\
    \ (e; l1)\n    {\n        if (e in l2)\n        {\n            result ~= e;\n\
    \        }\n    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique\
    \ common elements for two lists.\n        \n    \n*/\nlong[] common(long[] l1,\
    \ long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n    {\n        if (e\
    \ in l2)\n        {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort().uniq;\n\
    }\n/*\nReturn sorted unique common elements for two lists.\n        \n    \n*/\n\
    long[] common(long[] l1, long[] l2) \n{\n    long[] result;\n    foreach (e; l1)\n\
    \    {\n        if (e in l2)\n        {\n            result ~= e;\n        }\n\
    \    }\n    return result.sort().uniq;\n}\n/*\nReturn sorted unique common elements\
    \ for two lists.\n        \n    \n*/\nlong[] common(long[] l1, long[] l2) \n{\n\
    \    long[] result;\n    foreach (e; l1)\n    {\n        if (e in l2)\n      \
    \  {\n            result ~= e;\n        }\n    }\n    return result.sort"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
