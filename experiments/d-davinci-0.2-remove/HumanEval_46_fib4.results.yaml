language: d
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return -1;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n\
    \ == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b = 0, c = 2, d\
    \ = 0;\n    for (int i = 4; i <= n; i++) {\n        long temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n  \
    \  return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxphx9hiq.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpxphx9hiq.__unittest_L30_C1() [0x427ae4]

    ??:? void tmpxphx9hiq.__modtest() [0x427b5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (int i = 4; i <= n; i++)\n    {\n        e = a + b +\
    \ c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n   \
    \ }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    //Tuple!(long,\
    \ long, long, long) fib4(long n) \n    //{\n    //    if (n < 4)\n    //     \
    \   return tuple(0, 0, 2, 0)[n];\n    //    auto t = fib4(n - 1);\n    //    return\
    \ tuple(t[1], t[2], t[3], t[0] + t[1] + t[2] + t[3]);\n    //}\n    if (n < 4)\n\
    \        return (n == 2) ? 2 : 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for\
    \ (long i = 4; i <= n; ++i)\n    {\n        d = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp26b7fjke.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmp26b7fjke.__unittest_L34_C1() [0x427a9c]

    ??:? void tmp26b7fjke.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long temp = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        temp =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp;\n    }\n    return temp;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) {\n        e = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (int i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpulc1jy2y.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpulc1jy2y.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpulc1jy2y.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    foreach (i; 4\
    \ .. n + 1) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp29yk7w8w.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmp29yk7w8w.__unittest_L27_C1() [0x427ab9]

    ??:? void tmp29yk7w8w.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaq2eylmd.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpaq2eylmd.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpaq2eylmd.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qy6pckn.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qy6pckn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaq2eylmd.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpaq2eylmd.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpaq2eylmd.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n     \
    \   c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0jb69p2j.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp0jb69p2j.__unittest_L26_C1() [0x427ab1]

    ??:? void tmp0jb69p2j.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return -1;\n    if (n < 4) return 0;\n    if (n == 4) return 2;\n    long a\
    \ = 0, b = 0, c = 0, d = 2, e = 0;\n    for (long i = 5; i <= n; i++) {\n    \
    \    e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx8sknyi8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpx8sknyi8.__unittest_L28_C1() [0x427ac4]

    ??:? void tmpx8sknyi8.__modtest() [0x427b3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n == 0 ? 0 : n == 1 ? 0 : n == 2 ? 2 : 0;\n    long a = 0, b =\
    \ 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe7ctgft2.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmpe7ctgft2.__unittest_L27_C1() [0x427ad5]

    ??:? void tmpe7ctgft2.__modtest() [0x427b2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n ==\
    \ 2) return 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int i = 4; i <= n;\
    \ i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n  \
    \      c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n == 0 ? 0 : n == 1 ? 0 : n == 2 ? 2 : 0;\n    long a = 0,\
    \ b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        d =\
    \ a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzmsb5xg2.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmpzmsb5xg2.__unittest_L27_C1() [0x427ad5]

    ??:? void tmpzmsb5xg2.__modtest() [0x427b2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n * 2;\n    long a = 0, b = 0, c = 2, d = 2;\n    for (long i\
    \ = 4; i <= n; i++)\n    {\n        long temp = d;\n        d = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = temp;\n    }\n    return d;\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpijq8al1c.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpijq8al1c.__unittest_L28_C1() [0x427a9c]

    ??:? void tmpijq8al1c.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    auto a = 0L;\n    auto b = 0L;\n    auto c = 2L;\n   \
    \ auto d = 0L;\n    auto e = 0L;\n    foreach (i; 4 .. n)\n    {\n        e =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvbhlclxc.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpvbhlclxc.__unittest_L32_C1() [0x427aa4]

    ??:? void tmpvbhlclxc.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    auto fib4 =\
    \ [](long n) {\n        if (n < 0)\n            return 0;\n        if (n == 0)\n\
    \            return 0;\n        if (n == 1)\n            return 0;\n        if\
    \ (n == 2)\n            return 2;\n        if (n == 3)\n            return 0;\n\
    \        long a = 0;\n        long b = 0;\n        long c = 2;\n        long d\
    \ = 0;\n        for (long i = 4; i <= n; i++) {\n            long temp = a + b\
    \ + c + d;\n            a = b;\n            b = c;\n            c = d;\n     \
    \       d = temp;\n        }\n        return a + b + c + d;\n    };\n    return\
    \ fib4(n);\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvcdyeegg.d(15): Error: found `n` when expecting `.` following long

    /tmp/tmpvcdyeegg.d(15): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpvcdyeegg.d(15): Error: found `{` when expecting `,`

    /tmp/tmpvcdyeegg.d(16): Error: expression expected, not `if`

    /tmp/tmpvcdyeegg.d(17): Error: found `return` when expecting `,`

    /tmp/tmpvcdyeegg.d(17): Error: found `;` when expecting `,`

    /tmp/tmpvcdyeegg.d(18): Error: expression expected, not `if`

    /tmp/tmpvcdyeegg.d(19): Error: found `return` when expecting `,`

    /tmp/tmpvcdyeegg.d(19): Error: found `;` when expecting `,`

    /tmp/tmpvcdyeegg.d(20): Error: expression expected, not `if`

    /tmp/tmpvcdyeegg.d(21): Error: found `return` when expecting `,`

    /tmp/tmpvcdyeegg.d(21): Error: found `;` when expecting `,`

    /tmp/tmpvcdyeegg.d(22): Error: expression expected, not `if`

    /tmp/tmpvcdyeegg.d(23): Error: found `return` when expecting `,`

    /tmp/tmpvcdyeegg.d(23): Error: found `;` when expecting `,`

    /tmp/tmpvcdyeegg.d(24): Error: expression expected, not `if`'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n\
    \        return 2;\n    if (n == 3)\n        return 0;\n    for (long i = 3; i\
    \ < n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b +\
    \ c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n   \
    \ }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    auto a = 0L;\n    auto b = 0L;\n    auto c = 2L;\n   \
    \ auto d = 0L;\n    auto temp = 0L;\n    for (long i = 4; i <= n; i++)\n    {\n\
    \        temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n\
    \        d = temp;\n    }\n    return temp;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i =\
    \ 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long i = 4;\n    while (i <= n)\n    {\n        long temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd8ggrurs.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpd8ggrurs.__unittest_L41_C1() [0x427ae8]

    ??:? void tmpd8ggrurs.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long i = 4;\n    while (i <= n)\n    {\n        long tmp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpso5u98dp.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmpso5u98dp.__unittest_L41_C1() [0x427ae0]

    ??:? void tmpso5u98dp.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ \n        return 0;\n    if (n == 0) \n        return 0;\n    if (n == 1) \n\
    \        return 0;\n    if (n == 2) \n        return 2;\n    if (n == 3) \n  \
    \      return 0;\n    long[] fib = new long[n + 1];\n    fib[0] = 0;\n    fib[1]\
    \ = 0;\n    fib[2] = 2;\n    fib[3] = 0;\n    for (int i = 4; i <= n; i++) \n\
    \    {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4];\n\
    \    }\n    return fib[n];\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ \n        return 0;\n    if (n == 0) \n        return 0;\n    if (n == 1) \n\
    \        return 0;\n    if (n == 2) \n        return 2;\n    if (n == 3) \n  \
    \      return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long\
    \ d = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n       \
    \ e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n       \
    \ d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    for (long i = 4; i <= n; i++)\n    {\n        long temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n  \
    \  return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6t0emnza.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp6t0emnza.__unittest_L39_C1() [0x427ae8]

    ??:? void tmp6t0emnza.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaq2eylmd.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpaq2eylmd.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpaq2eylmd.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i =\
    \ 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ \n        return -1;\n    if (n == 0) \n        return 0;\n    if (n == 1) \n\
    \        return 0;\n    if (n == 2) \n        return 2;\n    if (n == 3) \n  \
    \      return 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i\
    \ <= n; i++) \n    {\n        long temp = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (int i = 4; i <= n; i++)\n    {\n        e =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long result = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        result\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = result;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) {\n        e = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n == 2 ? 2 : 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for\
    \ (long i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdfklbmfm.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpdfklbmfm.__unittest_L27_C1() [0x427ab9]

    ??:? void tmpdfklbmfm.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ \n        return -1;\n    if (n == 0) \n        return 0;\n    if (n == 1) \n\
    \        return 0;\n    if (n == 2) \n        return 2;\n    if (n == 3) \n  \
    \      return 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i\
    \ <= n; i++) \n    {\n        long temp = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = temp;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long i = 4;\n    while (i <= n)\n    {\n        long temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd8ggrurs.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpd8ggrurs.__unittest_L41_C1() [0x427ae8]

    ??:? void tmpd8ggrurs.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long temp;\n    for (long i = 4; i <= n; i++)\n    {\n        temp\
    \ = a;\n        a = b;\n        b = c;\n        c = d;\n        d = temp + b +\
    \ c + d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpywdak0g_.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dbd]

    ??:? void tmpywdak0g_.__unittest_L34_C1() [0x427ae9]

    ??:? void tmpywdak0g_.__modtest() [0x427b40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a976]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]

    ??:? runModuleUnitTests [0x42b8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42820c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qy6pckn.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qy6pckn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n == 2 ? 2 : 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    foreach\
    \ (i; 4 .. n + 1)\n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzxznuala.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpzxznuala.__unittest_L27_C1() [0x427ac1]

    ??:? void tmpzxznuala.__modtest() [0x427b18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i =\
    \ 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaq2eylmd.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpaq2eylmd.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpaq2eylmd.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n < 2)\n        return 0;\n    if (n == 2)\n     \
    \   return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i = 4;\
    \ i <= n; i++) \n    {\n        e = d;\n        d = c;\n        c = b;\n     \
    \   b = a;\n        a = d + c + b + e;\n    }\n    return a;\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsmuaahl1.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427db5]

    ??:? void tmpsmuaahl1.__unittest_L38_C1() [0x427ae1]

    ??:? void tmpsmuaahl1.__modtest() [0x427b38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42badb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffb0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]

    ??:? runModuleUnitTests [0x42b8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428204]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpllr5wgu9.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpllr5wgu9.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpllr5wgu9.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n == 2 ? 2 : 0;\n    long a = 0, b = 0, c = 2, d = 0;\n   \
    \ for (long i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0cpkkynj.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmp0cpkkynj.__unittest_L27_C1() [0x427ab9]

    ??:? void tmp0cpkkynj.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qy6pckn.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qy6pckn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        long temp = a + b +\
    \ c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc3xp_cbn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpc3xp_cbn.__unittest_L33_C1() [0x427ad4]

    ??:? void tmpc3xp_cbn.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qy6pckn.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qy6pckn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n     \
    \   c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0jb69p2j.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp0jb69p2j.__unittest_L26_C1() [0x427ab1]

    ??:? void tmp0jb69p2j.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n ==\
    \ 2) return 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i = 4; i <=\
    \ n; i++) \n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n     \
    \   c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0jb69p2j.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp0jb69p2j.__unittest_L26_C1() [0x427ab1]

    ??:? void tmp0jb69p2j.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qy6pckn.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qy6pckn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i =\
    \ 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long i = 4;\n    while (i <= n) {\n        long temp = a + b + c +\
    \ d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n    \
    \    i++;\n    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9u8l1d1l.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmp9u8l1d1l.__unittest_L34_C1() [0x427ad4]

    ??:? void tmp9u8l1d1l.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0)\n        return 0;\n    else if (n == 1)\n        return 0;\n    else\
    \ if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 0;\n  \
    \  else\n    {\n        for (long i = 4; i <= n; i++)\n        {\n           \
    \ e = a + b + c + d;\n            a = b;\n            b = c;\n            c =\
    \ d;\n            d = e;\n        }\n        return e;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n ==\
    \ 2) return 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i = 4; i <=\
    \ n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n == 3 ? 0 : n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for\
    \ (long i = 4; i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n \
    \       b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo09gn0hg.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpo09gn0hg.__unittest_L27_C1() [0x427abd]

    ??:? void tmpo09gn0hg.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    //Tuple!(long,\
    \ long, long, long) fib4(long n)\n    //{\n    //    if (n == 0) return tuple(0,\
    \ 0, 0, 0);\n    //    if (n == 1) return tuple(0, 0, 0, 1);\n    //    if (n\
    \ == 2) return tuple(0, 0, 1, 0);\n    //    if (n == 3) return tuple(0, 1, 0,\
    \ 0);\n    //    auto t = fib4(n - 1);\n    //    return tuple(t[1], t[2], t[3],\
    \ t[0] + t[1] + t[2] + t[3]);\n    //}\n    //return fib4(n)[3];\n    if (n ==\
    \ 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n\
    \ == 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long\
    \ d = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        long e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) {\n        e = a +\
    \ b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaq2eylmd.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpaq2eylmd.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpaq2eylmd.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n % 2;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long\
    \ i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n      \
    \  b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjpfcg19_.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpjpfcg19_.__unittest_L27_C1() [0x427ac1]

    ??:? void tmpjpfcg19_.__modtest() [0x427b18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpah8aaha5.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpah8aaha5.__unittest_L25_C1() [0x427ab1]

    ??:? void tmpah8aaha5.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n\
    \        return 2;\n    if (n == 3)\n        return 0;\n    for (long i = 4; i\
    \ <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long i = 4;\n    while (i <= n)\n    {\n        long e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n     \
    \   i++;\n    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2uerslia.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmp2uerslia.__unittest_L35_C1() [0x427ad4]

    ??:? void tmp2uerslia.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n < 2)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i =\
    \ 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i =\
    \ 4; i <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n       \
    \ b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n == 2 ? 2 : 0;\n    auto a = 0L;\n    auto b = 0L;\n    auto\
    \ c = 0L;\n    auto d = 1L;\n    foreach (i; 4 .. n + 1) \n    {\n        auto\
    \ e = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n       \
    \ d = e;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuv8lmqed.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpuv8lmqed.__unittest_L31_C1() [0x427aa8]

    ??:? void tmpuv8lmqed.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n ==\
    \ 2) return 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i = 4; i <=\
    \ n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n == 0 ? 0 : n == 1 ? 0 : n == 2 ? 2 : 0;\n    long a = 0, b =\
    \ 0, c = 2, d = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n\
    }\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe7ctgft2.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dad]

    ??:? void tmpe7ctgft2.__unittest_L27_C1() [0x427ad5]

    ??:? void tmpe7ctgft2.__modtest() [0x427b2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a966]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffa8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]

    ??:? runModuleUnitTests [0x42b8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaq2eylmd.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpaq2eylmd.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpaq2eylmd.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \    {\n        return -1;\n    }\n    if (n == 0)\n    {\n        return 0;\n\
    \    }\n    if (n == 1)\n    {\n        return 0;\n    }\n    if (n == 2)\n  \
    \  {\n        return 2;\n    }\n    if (n == 3)\n    {\n        return 0;\n  \
    \  }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \    {\n        return -1;\n    }\n    if (n == 0)\n    {\n        return 0;\n\
    \    }\n    if (n == 1)\n    {\n        return 0;\n    }\n    if (n == 2)\n  \
    \  {\n        return 2;\n    }\n    if (n == 3)\n    {\n        return 0;\n  \
    \  }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n < 4)\n        return n;\n    long a = 0, b = 0,\
    \ c = 2, d = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzgnnkrh1.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpzgnnkrh1.__unittest_L29_C1() [0x427ac5]

    ??:? void tmpzgnnkrh1.__modtest() [0x427b1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n ==\
    \ 2) return 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i = 4; i <=\
    \ n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \    {\n        return -1;\n    }\n    else if (n == 0)\n    {\n        return\
    \ 0;\n    }\n    else if (n == 1)\n    {\n        return 0;\n    }\n    else if\
    \ (n == 2)\n    {\n        return 2;\n    }\n    else if (n == 3)\n    {\n   \
    \     return 0;\n    }\n    else\n    {\n        long a = 0;\n        long b =\
    \ 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for\
    \ (long i = 4; i <= n; i++)\n        {\n            e = a + b + c + d;\n     \
    \       a = b;\n            b = c;\n            c = d;\n            d = e;\n \
    \       }\n        return e;\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n\
    \        return 2;\n    if (n == 3)\n        return 0;\n    for (long i = 4; i\
    \ <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long i = 4;\n    while (i <= n)\n    {\n        long temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd8ggrurs.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpd8ggrurs.__unittest_L41_C1() [0x427ae8]

    ??:? void tmpd8ggrurs.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long i = 4;\n    while (i <= n)\n    {\n        long tmp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm0oxg75t.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpm0oxg75t.__unittest_L41_C1() [0x427ae8]

    ??:? void tmpm0oxg75t.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    foreach (i; 4 ..\
    \ n + 1)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n    \
    \    c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbc6pwyi8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpbc6pwyi8.__unittest_L27_C1() [0x427ab9]

    ??:? void tmpbc6pwyi8.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n     \
    \   c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0jb69p2j.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp0jb69p2j.__unittest_L26_C1() [0x427ab1]

    ??:? void tmp0jb69p2j.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    else\n    {\n        long a = 0;\n        long b = 0;\n\
    \        long c = 2;\n        long d = 0;\n        long e = 0;\n        for (long\
    \ i = 4; i <= n; i++)\n        {\n            e = a + b + c + d;\n           \
    \ a = b;\n            b = c;\n            c = d;\n            d = e;\n       \
    \ }\n        return e;\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qy6pckn.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qy6pckn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        e = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qy6pckn.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qy6pckn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0)\n        return 0;\n    else if (n == 1)\n        return 0;\n    else\
    \ if (n == 2)\n        return 2;\n    else if (n == 3)\n        return 0;\n  \
    \  else\n    {\n        for (long i = 4; i <= n; i++)\n        {\n           \
    \ e = a + b + c + d;\n            a = b;\n            b = c;\n            c =\
    \ d;\n            d = e;\n        }\n        return e;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n\
    \        return 2;\n    if (n == 3)\n        return 0;\n    for (int i = 3; i\
    \ < n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    auto fib4 =\
    \ [](long n) {\n        long a = 0;\n        long b = 0;\n        long c = 2;\n\
    \        long d = 0;\n        long e = 0;\n        for (long i = 0; i < n; i++)\
    \ {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n\
    \            c = d;\n            d = e;\n        }\n        return e;\n    };\n\
    \    return fib4(n);\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9t0e4_r.d(15): Error: found `n` when expecting `.` following long

    /tmp/tmpd9t0e4_r.d(15): Error: found `)` when expecting identifier following `long`.

    /tmp/tmpd9t0e4_r.d(15): Error: found `{` when expecting `,`

    /tmp/tmpd9t0e4_r.d(16): Error: found `a` when expecting `.` following long

    /tmp/tmpd9t0e4_r.d(16): Error: found `=` when expecting identifier following `long`.

    /tmp/tmpd9t0e4_r.d(16): Error: found `0` when expecting `,`

    /tmp/tmpd9t0e4_r.d(16): Error: expression expected, not `;`

    /tmp/tmpd9t0e4_r.d(17): Error: found `long` when expecting `,`

    /tmp/tmpd9t0e4_r.d(17): Error: found `;` when expecting `,`

    /tmp/tmpd9t0e4_r.d(18): Error: found `c` when expecting `.` following long

    /tmp/tmpd9t0e4_r.d(18): Error: found `=` when expecting identifier following `long`.

    /tmp/tmpd9t0e4_r.d(18): Error: found `2` when expecting `,`

    /tmp/tmpd9t0e4_r.d(18): Error: expression expected, not `;`

    /tmp/tmpd9t0e4_r.d(19): Error: found `long` when expecting `,`

    /tmp/tmpd9t0e4_r.d(19): Error: found `;` when expecting `,'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \    {\n        return -1;\n    }\n    if (n == 0)\n    {\n        return 0;\n\
    \    }\n    if (n == 1)\n    {\n        return 0;\n    }\n    if (n == 2)\n  \
    \  {\n        return 2;\n    }\n    if (n == 3)\n    {\n        return 0;\n  \
    \  }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long i = 4;\n    while (i <= n)\n    {\n        long temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd8ggrurs.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpd8ggrurs.__unittest_L41_C1() [0x427ae8]

    ??:? void tmpd8ggrurs.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    long i = 4;\n    while (i <= n)\n\
    \    {\n        long temp = a + b + c + d;\n        a = b;\n        b = c;\n \
    \       c = d;\n        d = temp;\n        i++;\n    }\n    return a + b + c +\
    \ d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr76i584h.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpr76i584h.__unittest_L39_C1() [0x427ad4]

    ??:? void tmpr76i584h.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n == 2 ? 2 : 0;\n    long a = 0, b = 0, c = 2, d = 0;\n   \
    \ for (long i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0cpkkynj.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmp0cpkkynj.__unittest_L27_C1() [0x427ab9]

    ??:? void tmp0cpkkynj.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long i = 4;\n    while (i <= n)\n    {\n        long temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd8ggrurs.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpd8ggrurs.__unittest_L41_C1() [0x427ae8]

    ??:? void tmpd8ggrurs.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if\
    \ (n == 3) return 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a\
    \ + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n\
    \    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\n\
    \        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n    \
    \    return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 2;\n    long d = 0;\n    for (long i = 4; i <= n; i++)\n\
    \    {\n        long temp = a + b + c + d;\n        a = b;\n        b = c;\n \
    \       c = d;\n        d = temp;\n    }\n    return a + b + c + d;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgavlhzx7.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmpgavlhzx7.__unittest_L37_C1() [0x427ad4]

    ??:? void tmpgavlhzx7.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaq2eylmd.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpaq2eylmd.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpaq2eylmd.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (int\
    \ i = 0; i < n; i++) \n    {\n        e = a + b + c + d;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4lfts3eo.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp4lfts3eo.__unittest_L30_C1() [0x427a8c]

    ??:? void tmp4lfts3eo.__modtest() [0x427b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long i = 4;\n    while (i <= n)\n    {\n        long temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd8ggrurs.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpd8ggrurs.__unittest_L41_C1() [0x427ae8]

    ??:? void tmpd8ggrurs.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    else if (n == 0)\n        return 0;\n    else if (n ==\
    \ 1)\n        return 0;\n    else if (n == 2)\n        return 2;\n    else if\
    \ (n == 3)\n        return 0;\n    else\n    {\n        long a = 0;\n        long\
    \ b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n    \
    \    for (long i = 4; i <= n; i++)\n        {\n            e = a + b + c + d;\n\
    \            a = b;\n            b = c;\n            c = d;\n            d = e;\n\
    \        }\n        return e;\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n\
    \        return 2;\n    if (n == 3)\n        return 0;\n    for (int i = 3; i\
    \ < n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ \n        return -1;\n    if (n == 0) \n        return 0;\n    if (n == 1) \n\
    \        return 0;\n    if (n == 2) \n        return 2;\n    if (n == 3) \n  \
    \      return 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i\
    \ <= n; i++) \n    {\n        long t = a + b + c + d;\n        a = b;\n      \
    \  b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return (n == 2) ? 2 : 0;\n    long a = 0, b = 0, c = 2, d = 0;\n \
    \   for (long i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a =\
    \ b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw2fjnm70.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpw2fjnm70.__unittest_L27_C1() [0x427ab9]

    ??:? void tmpw2fjnm70.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n <= 3)\
    \ \n        return n - 1;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long\
    \ i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n      \
    \  b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprho4mzmt.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmprho4mzmt.__unittest_L27_C1() [0x427ab5]

    ??:? void tmprho4mzmt.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n\
    \        return 2;\n    if (n == 3)\n        return 0;\n    for (int i = 4; i\
    \ <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n == 2 ? 2 : 0;\n    long a = 0, b = 0, c = 2, d = 0;\n   \
    \ for (long i = 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0cpkkynj.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmp0cpkkynj.__unittest_L27_C1() [0x427ab9]

    ??:? void tmp0cpkkynj.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return\
    \ 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ for (long i = 4; i <= n; i++)\n    {\n        long temp = a + b + c + d;\n \
    \       a = b;\n        b = c;\n        c = d;\n        d = temp;\n    }\n   \
    \ return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3bn1cra6.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dd5]

    ??:? void tmp3bn1cra6.__unittest_L39_C1() [0x427ae0]

    ??:? void tmp3bn1cra6.__modtest() [0x427b58]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a98e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]

    ??:? runModuleUnitTests [0x42b8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428224]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \    {\n        return -1;\n    }\n    else if (n == 0)\n    {\n        return\
    \ 0;\n    }\n    else if (n == 1)\n    {\n        return 0;\n    }\n    else if\
    \ (n == 2)\n    {\n        return 2;\n    }\n    else if (n == 3)\n    {\n   \
    \     return 0;\n    }\n    else\n    {\n        long a = 0;\n        long b =\
    \ 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for\
    \ (long i = 4; i <= n; i++)\n        {\n            e = a + b + c + d;\n     \
    \       a = b;\n            b = c;\n            c = d;\n            d = e;\n \
    \       }\n        return e;\n    }\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++) \n    {\n        e\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long tmp;\n    for (long i = 4; i <= n; i++)\n    {\n        tmp = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n\
    \    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ <= 3)\n        return (n == 0) ? 0 : 2;\n    for (long i = 4; i <= n; i++)\n\
    \    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n;\
    \ i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n      \
    \  c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpynltv3r3.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpynltv3r3.__unittest_L26_C1() [0x427ab1]

    ??:? void tmpynltv3r3.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n\
    \        return 2;\n    if (n == 3)\n        return 0;\n    for (int i = 4; i\
    \ <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b = c;\n\
    \        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e =\
    \ a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n  \
    \  assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return 0;\n    if (n < 2)\n        return 0;\n    if (n == 2)\n     \
    \   return 2;\n    if (n == 3)\n        return 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        e = a + b + c + d;\n        a = b;\n        b =\
    \ c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nunittest\n{\n \
    \   alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaq2eylmd.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpaq2eylmd.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpaq2eylmd.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n   \nunittest\n{\n    alias\
    \ candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) ==\
    \ 386L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qy6pckn.d(86): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qy6pckn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    else if (n == 0)\n        return 0;\n    else if (n ==\
    \ 1)\n        return 0;\n    else if (n == 2)\n        return 2;\n    else if\
    \ (n == 3)\n        return 0;\n    else\n    {\n        long[] fibs = new long[n\
    \ + 1];\n        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n  \
    \      fibs[3] = 0;\n        for (long i = 4; i <= n; i++)\n        {\n      \
    \      fibs[i] = fibs[i - 1] + fibs[i - 2] + fibs[i - 3] + fibs[i - 4];\n    \
    \    }\n        return fibs[n];\n    }\n}\nunittest\n{\n    alias candidate =\
    \ fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    long a = 0;\n\
    \    long b = 0;\n    long c = 2;\n    long d = 0;\n    long e = 0;\n    if (n\
    \ < 4)\n        return n;\n    for (long i = 3; i < n; i++)\n    {\n        e\
    \ = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d\
    \ = e;\n    }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return 0;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n ==\
    \ 2) return 2;\n    if (n == 3) return 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 2;\n    long d = 0;\n    long result = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        result = a + b + c + d;\n        a = b;\n     \
    \   b = c;\n        c = d;\n        d = result;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L)\
    \ == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\
    \ \n        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i =\
    \ 4; i <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwwwca2g8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmpwwwca2g8.__unittest_L27_C1() [0x427ab1]

    ??:? void tmpwwwca2g8.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long i = 4;\n    while (i <= n)\n    {\n        long temp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = temp;\n        i++;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd8ggrurs.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpd8ggrurs.__unittest_L41_C1() [0x427ae8]

    ??:? void tmpd8ggrurs.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return -1;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n\
    \ == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b = 0, c = 2, d\
    \ = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        long temp = a + b +\
    \ c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = temp;\n\
    \    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzxw3an9u.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmpzxw3an9u.__unittest_L31_C1() [0x427ae8]

    ??:? void tmpzxw3an9u.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \    {\n        return -1;\n    }\n    if (n == 0)\n    {\n        return 0;\n\
    \    }\n    if (n == 1)\n    {\n        return 0;\n    }\n    if (n == 2)\n  \
    \  {\n        return 2;\n    }\n    if (n == 3)\n    {\n        return 0;\n  \
    \  }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ return -1;\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n\
    \ == 2) return 2;\n    if (n == 3) return 0;\n    long a = 0, b = 0, c = 2, d\
    \ = 0;\n    for (long i = 4; i <= n; i++) {\n        long tmp = a + b + c + d;\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n    }\n   \
    \ return a + b + c + d;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4lnblwk9.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ddd]

    ??:? void tmp4lnblwk9.__unittest_L30_C1() [0x427ae8]

    ??:? void tmp4lnblwk9.__modtest() [0x427b60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffd8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fab5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]

    ??:? runModuleUnitTests [0x42b8d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \    {\n        return -1;\n    }\n    if (n == 0)\n    {\n        return 0;\n\
    \    }\n    if (n == 1)\n    {\n        return 0;\n    }\n    if (n == 2)\n  \
    \  {\n        return 2;\n    }\n    if (n == 3)\n    {\n        return 0;\n  \
    \  }\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n   \
    \ long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b + c\
    \ + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n\
    \    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163128
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\
    \ \n        return -1;\n    if (n == 0) \n        return 0;\n    if (n == 1) \n\
    \        return 0;\n    if (n == 2) \n        return 2;\n    if (n == 3) \n  \
    \      return 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i\
    \ <= n; i++) \n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptxchh8y5.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmptxchh8y5.__unittest_L35_C1() [0x427af5]

    ??:? void tmptxchh8y5.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 0)\n\
    \        return -1;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n       \
    \ return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d = 0;\n\
    \    long e = 0;\n    for (long i = 4; i <= n; i++)\n    {\n        e = a + b\
    \ + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n \
    \   }\n    return e;\n}\nunittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n\
    \    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4;\
    \ i <= n; i++)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n\
    \        c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zj_xk_z.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d85]

    ??:? void tmp6zj_xk_z.__unittest_L27_C1() [0x427ab1]

    ??:? void tmp6zj_xk_z.__modtest() [0x427b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a93e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff80]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]

    ??:? runModuleUnitTests [0x42b881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163127
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n < 4)\n\
    \        return n;\n    long a = 0, b = 0, c = 2, d = 0;\n    foreach (i; 4 ..\
    \ n + 1)\n    {\n        d = a + b + c;\n        a = b;\n        b = c;\n    \
    \    c = d;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate = fib4;\n\
    \n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L)\
    \ == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbc6pwyi8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmpbc6pwyi8.__unittest_L27_C1() [0x427ab9]

    ??:? void tmpbc6pwyi8.__modtest() [0x427b10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\n \
    \   fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function\
    \ to efficiently compute the n-th element of the fib4 number sequence.  Do not\
    \ use recursion.\n                \n*/\nlong fib4(long n) \n{\n    if (n == 0)\
    \ return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 0;\n    long a = 0;\n    long b = 0;\n    long c = 2;\n    long d\
    \ = 0;\n    long i = 4;\n    while (i <= n) {\n        long tmp = a + b + c +\
    \ d;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n     \
    \   i++;\n    }\n    return a + b + c + d;\n}\nunittest\n{\n    alias candidate\
    \ = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n\
    \    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp453qh65o.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427dcd]

    ??:? void tmp453qh65o.__unittest_L34_C1() [0x427ad4]

    ??:? void tmp453qh65o.__modtest() [0x427b4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ffc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42faa5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]

    ??:? runModuleUnitTests [0x42b8c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163129
