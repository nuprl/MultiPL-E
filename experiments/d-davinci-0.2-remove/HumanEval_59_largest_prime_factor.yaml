name: HumanEval_59_largest_prime_factor
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
  \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
  \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
  \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\n\
  void main(){}"
completions: ["{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            n /= i;\n\
    \        }\n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return i;\n}", "{\n    long largest_prime_factor = 0;\n    long i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n         \
    \   largest_prime_factor = i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest = 0;\n    long\
    \ divisor = 2;\n    while (n > 1) \n    {\n        while (n % divisor == 0) \n\
    \        {\n            largest = divisor;\n            n /= divisor;\n      \
    \  }\n        divisor++;\n    }\n    return largest;\n}", "{\n    long largest\
    \ = 1;\n    foreach (i; 2..n)\n    {\n        if (n % i == 0)\n        {\n   \
    \         largest = i;\n            n /= i;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            largest = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n \
    \   {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 0;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest = i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            largest = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1)\
    \ {\n        if (n % factor == 0) {\n            largest_factor = factor;\n  \
    \          n /= factor;\n            while (n % factor == 0) {\n             \
    \   n /= factor;\n            }\n        }\n        factor = factor + 1;\n   \
    \ }\n    return largest_factor;\n}", "{\n    long largest = 0;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest = i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest\
    \ = 1;\n    foreach(i; 2..n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          if (isPrime(i)) \n            {\n                largest = i;\n   \
    \         }\n        }\n    }\n    return largest;\n}", "{\n    long largest =\
    \ 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n \
    \   foreach(i; 2..n)\n    {\n        if(n % i == 0)\n        {\n            if(isPrime(i))\n\
    \            {\n                largest = i;\n            }\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_factor = 1;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest_factor = i;\n            n /= i;\n        } \n        else \n      \
    \  {\n            i++;\n        }\n    }\n    return largest_factor;\n}", "{\n\
    \    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 1;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n\
    \        else {\n            i++;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n       \
    \ if (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return largest;\n}", "{\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n  \
    \      }\n    }\n    return i;\n}", "{\n    long largest = 0;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest = i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            n /= i;\n            largest_prime = i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime_factor = 0;\n    long max_factor\
    \ = cast(long)sqrt(n);\n    foreach(i; 2..max_factor) \n    {\n        if(n %\
    \ i == 0) \n        {\n            if(is_prime(i)) \n            {\n         \
    \       largest_prime_factor = i;\n            }\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 0;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else {\n            i++;\n   \
    \     }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_factor = i;\n            n /= i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return largest_factor;\n}", "{\n    long largest\
    \ = 0;\n    foreach(i; 2 .. n)\n    {\n        if (n % i == 0)\n        {\n  \
    \          if (is_prime(i))\n            {\n                largest = i;\n   \
    \         }\n        }\n    }\n    return largest;\n}", "{\n    long largest_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest_prime_factor = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_factor =\
    \ 1;\n    long factor = 2;\n    while (n > 1) \n    {\n        if (n % factor\
    \ == 0) \n        {\n            largest_factor = factor;\n            n /= factor;\n\
    \            while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor++;\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime =\
    \ 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0;\n \
    \   long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n      \
    \  {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest_factor = i;\n       \
    \     n /= i;\n        } \n        else \n        {\n            i++;\n      \
    \  }\n    }\n    return largest_factor;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \       while (n % i == 0) \n            {\n                n /= i;\n        \
    \    }\n        }\n        i++;\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest_prime = 1;\n    foreach (i; 2 .. n) \n    {\n        if (n\
    \ % i == 0) \n        {\n            largest_prime = i;\n            n /= i;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        }\n       \
    \ else \n        {\n            i++;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n       \
    \ if (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return largest;\n}", "{\n    long largest_prime = 0;\n    long i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            largest_prime = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime;\n}", "{\n    long largest_prime = 0;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest_prime = i;\n            n /= i;\n        } \n        else \n       \
    \ {\n            i++;\n        }\n    }\n    return largest_prime;\n}", "{\n \
    \   long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_factor = 0;\n    long d = 2;\n    while (n\
    \ > 1) \n    {\n        while (n % d == 0) \n        {\n            largest_factor\
    \ = d;\n            n /= d;\n        }\n        d = d + 1;\n        if (d*d >\
    \ n) \n        {\n            if (n > 1) \n            {\n                largest_factor\
    \ = n;\n            }\n            break;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime = 1;\n    long i = 2;\n \
    \   while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest\
    \ = 0;\n    for (long i = 2; i <= n; i++) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n            i = 1;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long max = 0;\n    long i\
    \ = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n    \
    \        max = i;\n            n /= i;\n        } \n        else \n        {\n\
    \            i++;\n        }\n    }\n    return max;\n}", "{\n    long largest_prime\
    \ = 0;\n    foreach(i; 2..n)\n    {\n        if(n % i == 0)\n        {\n     \
    \       if(isPrime(i))\n            {\n                largest_prime = i;\n  \
    \          }\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_factor =\
    \ 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_factor;\n\
    }", "{ \n    long largest = 1; \n    long i = 2; \n    while (i <= n) \n    {\
    \ \n        if (n % i == 0) \n        { \n            largest = i; \n        \
    \    n = n / i; \n        } \n        else\n            i++; \n    } \n    return\
    \ largest; \n} ", "{\n    long largest_prime_factor = 0;\n    long i = 2;\n  \
    \  while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}", "{\n    long largest_prime = 1;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest_prime = i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime_factor = 1;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      largest_prime_factor = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return i;\n}", "{\n    long largest = 0;\n    long i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest = i;\n \
    \           n /= i;\n        }\n        else {\n            i++;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest_prime_factor = 0;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest_prime_factor = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    foreach(i; iota(2, cast(long)sqrt(n)))\n  \
    \  {\n        if (n % i == 0)\n        {\n            if (isPrime(i))\n      \
    \      {\n                largest = i;\n            }\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest_prime_factor = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 1;\n    foreach(i; 2 .. n)\n    {\n        if(n\
    \ % i == 0)\n        {\n            if(isPrime(i))\n            {\n          \
    \      largest_prime = i;\n            }\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            largest = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long factor = 2;\n    while (n > 1) \n    {\n        if (n % factor\
    \ == 0) \n        {\n            largest_prime_factor = factor;\n            n\
    \ /= factor;\n            while (n % factor == 0) \n            {\n          \
    \      n /= factor;\n            }\n        }\n        factor = factor + 1;\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long i = 2;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0) \n        {\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ i;\n}", "{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0)\
    \ {\n            largest = i;\n            n /= i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_factor = 1;\n    long d = 2;\n\
    \    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n         \
    \   largest_factor = d;\n            n /= d;\n        }\n        d += 1;\n   \
    \     if (d * d > n) \n        {\n            if (n > 1) \n            {\n   \
    \             largest_factor = n;\n            }\n            break;\n       \
    \ }\n    }\n    return largest_factor;\n}", "{\n    long largest_prime = 1;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest_prime = i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest = 0;\n    long factor = 2;\n    while (n > 1) \n    {\n\
    \        if (n % factor == 0) \n        {\n            largest = factor;\n   \
    \         n /= factor;\n            while (n % factor == 0) \n            {\n\
    \                n /= factor;\n            }\n        }\n        factor++;\n \
    \   }\n    return largest;\n}", "{\n    long largest = 0;\n    long i = 2;\n \
    \   while (i <= n) {\n        if (n % i == 0) {\n            largest = i;\n  \
    \          n /= i;\n        } else {\n            i++;\n        }\n    }\n   \
    \ return largest;\n}", "{\n    long largest_prime = 0;\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        }\n \
    \       else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long i = 2;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            n /= i;\n        } \n        else \n        {\n\
    \            i++;\n        }\n    }\n    return n;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n            while\
    \ (n % i == 0) \n            {\n                n /= i;\n            }\n     \
    \   }\n        i++;\n    }\n    return largest_prime;\n}", "{\n    long largest\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_factor = 1;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest_factor = i;\n            n /= i;\n        } \n        else \n      \
    \  {\n            i += 1;\n        }\n    }\n    return largest_factor;\n}", "{\n\
    \    long largest_prime_factor = 1;\n    long factor = 2;\n    while (n > 1) \n\
    \    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor++;\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long max_prime = 1;\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            max_prime\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return max_prime;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest_factor\
    \ = 0;\n    long factor = 2;\n    while (n > 1) \n    {\n        if (n % factor\
    \ == 0) \n        {\n            largest_factor = factor;\n            n /= factor;\n\
    \            while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor = factor + 1;\n    }\n    return largest_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            largest = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest = 1;\n \
    \   long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n      \
    \  {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n  \
    \      if (n % i == 0) \n        {\n            largest_prime = i;\n         \
    \   n /= i;\n        } \n        else \n        {\n            i++;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor = 0;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest_prime_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long i = 2;\n    long max = 0;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0) \n        {\n            max = i;\n            n /= i;\n \
    \       } \n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return max;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        }\n        else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0;\n    foreach(i; 2..n)\n  \
    \  {\n        if(n % i == 0)\n        {\n            if(isPrime(i))\n        \
    \    {\n                largest = i;\n            }\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 1;\n    foreach(i; 2 .. n) \n    {\n        if (n % i == 0) \n   \
    \     {\n            largest = i;\n            n /= i;\n        }\n    }\n   \
    \ return largest;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0) \n        {\n            largest = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long i = 2;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0) \n        {\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ i;\n}", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            n /= i;\n            largest_prime\
    \ = i;\n        } \n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest_prime;\n}", "{\n    long largest_prime = 1;\n    while\
    \ (n % 2 == 0) \n    {\n        largest_prime = 2;\n        n /= 2;\n    }\n \
    \   for (long i = 3; i <= n; i += 2) \n    {\n        while (n % i == 0) \n  \
    \      {\n            largest_prime = i;\n            n /= i;\n        }\n   \
    \ }\n    return largest_prime;\n}", "{\n    long largest_prime_factor = 1;\n \
    \   long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n      \
    \  {\n            largest_prime_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest_factor = 1;\n    long factor = 2;\n    while (n > 1) \n    {\n\
    \        while (n % factor == 0) \n        {\n            largest_factor = factor;\n\
    \            n /= factor;\n        }\n        factor++;\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest_prime = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return largest_prime;\n}", "{\n    long largest = 0;\n    long i = 2;\n   \
    \ while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long factor = 2;\n    while (n > 1) \n    {\n        if (n % factor\
    \ == 0) \n        {\n            largest_prime_factor = factor;\n            n\
    \ /= factor;\n            while (n % factor == 0) \n            {\n          \
    \      n /= factor;\n            }\n        }\n        factor++;\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest_prime_factor = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n        } \n        else \n        {\n            i++;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest = 1;\n \
    \   long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n      \
    \  {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long i = 2;\n    long max = 0;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            max = i;\n          \
    \  n /= i;\n        } \n        else \n        {\n            i++;\n        }\n\
    \    }\n    return max;\n}", "{\n    long largest_prime_factor = 1;\n    foreach\
    \ (i; 2 .. n) \n    {\n        if (n % i == 0) \n        {\n            if (isPrime(i))\
    \ \n            {\n                largest_prime_factor = i;\n            }\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 1;\n    foreach (i; 2 .. sqrt(n) + 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = max(largest, largest_prime_factor(n / i));\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 0;\n    for\
    \ (long i = 2; i <= n; i++) \n    {\n        if (n % i == 0) \n        {\n   \
    \         largest = i;\n            n /= i;\n            i = 1;\n        }\n \
    \   }\n    return largest;\n}", "{\n    long largest_prime = 0;\n    long i =\
    \ 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n      \
    \      largest_prime = i;\n            n /= i;\n        } \n        else \n  \
    \      {\n            i++;\n        }\n    }\n    return largest_prime;\n}", "{\n\
    \    long largest_prime = 1;\n    long factor = 2;\n    while (n > 1) \n    {\n\
    \        if (n % factor == 0) \n        {\n            largest_prime = factor;\n\
    \            n /= factor;\n            while (n % factor == 0) \n            {\n\
    \                n /= factor;\n            }\n        }\n        factor = factor\
    \ + 1;\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n  \
    \      if (n % i == 0) \n        {\n            largest_prime = i;\n         \
    \   n /= i;\n        } \n        else \n        {\n            i++;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor = 1;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest_prime_factor = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_factor = i;\n            n /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest_prime_factor = 1;\n    long factor = 2;\n    while (factor\
    \ <= n) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        } \n        else \n        {\n\
    \            factor += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0;\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest_prime = 0;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest_prime = i;\n            n /= i;\n        }\n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1;\n    }\n    return largest_factor;\n}", "{\n    long\
    \ largest = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0)\
    \ {\n            largest = i;\n            n /= i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest =\
    \ 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_factor = 1;\n    foreach (i; 2 .. n) \n    {\n      \
    \  if (n % i == 0) \n        {\n            largest_factor = i;\n            n\
    \ /= i;\n        }\n    }\n    return largest_factor;\n}", "{\n    long largest_prime\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_factor = 0;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1;\n    }\n    return largest_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    foreach (i; 2 .. n) \n    {\n        if (n % i == 0) \n        {\n\
    \            if (isPrime(i)) \n            {\n                largest_prime_factor\
    \ = i;\n            }\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n \
    \   {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}", "{\n    long largest = 1;\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            largest = i;\n            n /= i;\n        }\n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1) \n    {\n\
    \        if (n % factor == 0) \n        {\n            largest_factor = factor;\n\
    \            n /= factor;\n            while (n % factor == 0) \n            {\n\
    \                n /= factor;\n            }\n        }\n        factor = factor\
    \ + 1;\n    }\n    return largest_factor;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n        if (n %\
    \ i == 0) {\n            largest = i;\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime\
    \ = 0;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 1;\n    long d = 2;\n    while (d <= n) \n  \
    \  {\n        if (n % d == 0) \n        {\n            largest_prime = d;\n  \
    \          n /= d;\n        } \n        else \n        {\n            d += 1;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest_prime_factor = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime = 0;\n    long i = 2;\n \
    \   while (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime = 1;\n    for (long i\
    \ = 2; i <= n; i++) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest_prime = i;\n            n /= i;\n            i--;\n        }\n    }\n\
    \    return largest_prime;\n}", "{\n    long largest_prime_factor = 0;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}", "{\n    long largest = 0;\n    foreach(i;\
    \ 2 .. n)\n    {\n        if(n % i == 0)\n        {\n            largest = i;\n\
    \            n /= i;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime = i;\n            n /= i;\n        }\n \
    \       else \n        {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 0;\n    long max = cast(long)sqrt(n);\n    foreach(i; 2..max)\n    {\n   \
    \     if(n % i == 0)\n        {\n            if(isPrime(i))\n            {\n \
    \               largest_prime_factor = i;\n            }\n        }\n    }\n \
    \   return largest_prime_factor;\n}", "{\n    long largest_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_factor;\n}", "{\n    long largest_prime = 1;\n    while\
    \ (n % 2 == 0) \n    {\n        largest_prime = 2;\n        n /= 2;\n    }\n \
    \   for (long i = 3; i <= sqrt(n); i += 2) \n    {\n        while (n % i == 0)\
    \ \n        {\n            largest_prime = i;\n            n /= i;\n        }\n\
    \    }\n    if (n > 2) \n    {\n        largest_prime = n;\n    }\n    return\
    \ largest_prime;\n}", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ largest_prime_factor = i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest = 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            largest = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1;\n    long factor = 2;\n    while (n > 1) \n    {\n\
    \        while (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor++;\n    }\n \
    \   return largest_prime_factor;\n}", "{\n    long largest_prime = 1;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime;\n}", "{\n    long largest_factor = 1;\n    long\
    \ factor = 2;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n    \
    \    {\n            largest_factor = factor;\n            n /= factor;\n     \
    \       while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor++;\n    }\n    return largest_factor;\n\
    }", "{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n    \
    \    if (n % i == 0) \n        {\n            largest_prime = i;\n           \
    \ n /= i;\n        } \n        else \n        {\n            i += 1;\n       \
    \ }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor =\
    \ 1;\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            largest_prime_factor = i;\n            n /= i;\n     \
    \   } \n        else \n        {\n            i += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}", "{\n    long largest = 0;\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          largest = i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest_prime_factor = 1;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return largest_prime_factor;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
