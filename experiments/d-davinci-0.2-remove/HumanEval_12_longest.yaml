name: HumanEval_12_longest
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Out of list of strings, return\
  \ the longest one. Return the first one in case of multiple\n    strings of the\
  \ same length. Return None in case the input list is empty.\n                \n\
  */\nNullable!(string) longest(string[] strings) \n"
tests: "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
  \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
  , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n\
  {\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
  , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\n\
  void main(){}"
completions: ["{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\
    \ \n    {\n        if(str.length > longest.length) \n        {\n            longest\
    \ = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n  \
    \      if(result.isNull || s.length > result.get.length)\n        {\n        \
    \    result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest\
    \ is null || s.length > longest.get.length) \n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(str; strings)\n    {\n        if (longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings) \n    {\n        if(result.isNull || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || longest.get.length\
    \ < str.length)\n        {\n            longest = str;\n        }\n    }\n   \
    \ return longest;\n}", "{\n    Nullable!(string) longest;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n\
    \        return null;\n    auto longest = strings[0];\n    foreach (string; strings)\n\
    \    {\n        if (string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result =\
    \ Nullable!(string).init;\n    foreach(string s; strings)\n    {\n        if(result.isNull\
    \ || s.length > result.get.length)\n        {\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    string longest\
    \ = strings[0];\n    foreach (string s; strings)\n    {\n        if (s.length\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings) \n    {\n \
    \       if(longest is null || str.length > longest.length) \n        {\n     \
    \       longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull)\n        {\n\
    \            result = s;\n        }\n        else\n        {\n            if(s.length\
    \ > result.get.length)\n            {\n                result = s;\n         \
    \   }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string) result\
    \ = Nullable!(string).init;\n    foreach(str; strings)\n    {\n        if(result.isNull)\n\
    \        {\n            result = Nullable!(string).init(str);\n        }\n   \
    \     else if(str.length > result.get.length)\n        {\n            result =\
    \ Nullable!(string).init(str);\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(string) longest = Nullable!(string).init;\n    foreach(str; strings)\n\
    \    {\n        if (longest.isNull || longest.get.length < str.length)\n     \
    \   {\n            longest = str;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result =\
    \ Nullable!(string).init;\n    foreach(string s; strings)\n    {\n        if (result.isNull\
    \ || s.length > result.get.length)\n        {\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull)\n        {\n   \
    \         longest = str;\n        }\n        else\n        {\n            if(str.length\
    \ > longest.get.length)\n            {\n                longest = str;\n     \
    \       }\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull)\n        {\n            longest = Nullable!(string).init(s);\n\
    \        }\n        else\n        {\n            if(s.length > longest.get.length)\n\
    \            {\n                longest = Nullable!(string).init(s);\n       \
    \     }\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings) \n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length) \n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings) \n  \
    \  {\n        if(longest.isNull || str.length > longest.get.length) \n       \
    \ {\n            longest = str;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n   \
    \     if(longest.isNull || str.length > longest.get.length)\n        {\n     \
    \       longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(s.length > longest.getOrInit.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if (longest is null\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(str; strings) \n    {\n        if(str.length > longest.getOrElse(\"\
    \").length) \n        {\n            longest = Nullable!(string).init(str);\n\
    \        }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n\
    \        return null;\n    auto longest = strings[0];\n    foreach (string; strings)\n\
    \    {\n        if (string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n \
    \   foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(string\
    \ s; strings)\n    {\n        if(!longest.isNull)\n        {\n            if(s.length\
    \ > longest.get.length)\n            {\n                longest = s;\n       \
    \     }\n        }\n        else\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = Nullable!(string).init(s);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings) \n    {\n        if(longest is null ||\
    \ s.length > longest.length) \n        {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if (s.length > result.get.length)\n\
    \        {\n            result.set(s);\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) result = Nullable!(string).init;\n    foreach(string\
    \ s; strings) \n    {\n        if(result.isNull || s.length > result.get.length)\
    \ \n        {\n            result = s;\n        }\n    }\n    return result;\n\
    }", "{\n    import std.algorithm.iteration : max;\n    import std.algorithm.comparison\
    \ : maxElement;\n    import std.range : empty;\n    import std.typecons : Nullable;\n\
    \    Nullable!(string) result;\n    if (strings.empty)\n        return result;\n\
    \    else\n        return Nullable!(string)(strings[maxElement!((a, b) => a.length\
    \ > b.length)(strings)]);\n}", "{\n    Nullable!(string) longest = null;\n   \
    \ foreach(string s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n  \
    \      if(longest.isNull || str.length > longest.get.length)\n        {\n    \
    \        longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n  \
    \      if(result.isNull || s.length > result.get.length)\n        {\n        \
    \    result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings) \n    {\n\
    \        if(longest.isNull || s.length > longest.get.length) \n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings) \n    {\n        if(longest.isNull || str.length > longest.get.length)\
    \ \n        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull)\n        {\n            longest\
    \ = s;\n        }\n        else if(s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result = Nullable!(string).init;\n    foreach(string s; strings)\n\
    \    {\n        if(result.isNull || s.length > result.get.length)\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result = Nullable!(string).init;\n    int maxLength =\
    \ 0;\n    foreach(string s; strings)\n    {\n        if(s.length > maxLength)\n\
    \        {\n            maxLength = s.length;\n            result = s;\n     \
    \   }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || longest.get.length\
    \ < s.length)\n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest is null || s.length > longest.get.length)\n\
    \            longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings) \n    {\n        if (longest is null\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n   \
    \ {\n        if(longest.isNull || str.length > longest.get.length)\n        {\n\
    \            longest = str;\n        }\n    }\n    return longest;\n}", "{\n \
    \   Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = Nullable!(string).init;\n    foreach(str; strings)\n    {\n       \
    \ if(result.isNull || str.length > result.get.length)\n        {\n           \
    \ result = str;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(s.length\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(str; strings)\n    {\n        if(result.isNull || str.length > result.get.length)\n\
    \        {\n            result = str;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) result = Nullable!(string).init;\n    foreach(string s;\
    \ strings)\n    {\n        if(result.isNull)\n        {\n            result =\
    \ s;\n        }\n        else if(s.length > result.get.length)\n        {\n  \
    \          result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(str; strings) \n    {\n        if(longest.isNull || longest.get.length\
    \ < str.length) \n        {\n            longest = str;\n        }\n    }\n  \
    \  return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings) \n    {\n        if(longest.isNull || str.length > longest.get.length)\
    \ \n        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings) \n  \
    \  {\n        if(longest.isNull || str.length > longest.get.length) \n       \
    \ {\n            longest = str;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || longest.get.length\
    \ < s.length)\n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || s.length > longest.get.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    else\n    {\n        auto longest = strings[0];\n        foreach (string\
    \ s; strings)\n        {\n            if (s.length > longest.length)\n       \
    \         longest = s;\n        }\n        return longest;\n    }\n}", "{\n  \
    \  Nullable!(string) result = Nullable!(string).init;\n    foreach(str; strings)\n\
    \    {\n        if(result.isNull)\n        {\n            result = str;\n    \
    \    }\n        else\n        {\n            if(str.length > result.get.length)\n\
    \            {\n                result = str;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest is null || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result = Nullable!(string).init;\n    foreach(str; strings)\n\
    \    {\n        if(result.isNull || str.length > result.get.length)\n        {\n\
    \            result = str;\n        }\n    }\n    return result;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings) \n    {\n\
    \        if(longest.isNull || s.length > longest.get.length) \n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings) \n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length) \n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result =\
    \ Nullable!(string).init;\n    foreach(str; strings) \n    {\n        if(result.isNull\
    \ || str.length > result.get.length) \n        {\n            result = Nullable!(string).init(str);\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n   \
    \ foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = Nullable!(string).init;\n    foreach(str;\
    \ strings)\n    {\n        if(result.isNull)\n        {\n            result =\
    \ str;\n        }\n        else\n        {\n            if(str.length > result.get.length)\n\
    \            {\n                result = str;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\
    \ \n    {\n        if(longest.isNull || s.length > longest.get.length) \n    \
    \    {\n            longest = s;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if(result is null || s.length > result.get.length)\n        {\n     \
    \       result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if (longest.isNull\
    \ || longest.get.length < s.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) result = null;\n    foreach(str; strings)\n\
    \    {\n        if (result.isNull || str.length > result.get.length)\n       \
    \ {\n            result = str;\n        }\n    }\n    return result;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = Nullable!(string).init;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings) \n    {\n        if(result.isNull || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n   \
    \ {\n        if(longest.isNull || longest.get.length < str.length)\n        {\n\
    \            longest = str;\n        }\n    }\n    return longest;\n}", "{\n \
    \   Nullable!(string) result = Nullable!(string).init;\n    foreach(str; strings)\n\
    \    {\n        if(result.isNull || str.length > result.get.length)\n        {\n\
    \            result = str;\n        }\n    }\n    return result;\n}", "{\n   \
    \ Nullable!(string) longest;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = Nullable!(string).init;\n    foreach(string\
    \ s; strings) \n    {\n        if(result.isNull || s.length > result.get.length)\
    \ \n        {\n            result = s;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest.isNull || s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || longest.get.length < s.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings) \n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length) \n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n   \
    \ foreach(string s; strings) \n    {\n        if(longest.isNull || s.length >\
    \ longest.get.length) \n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings) \n    {\n        if(longest.isNull || str.length > longest.get.length)\
    \ \n        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = Nullable!(string).init;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull)\n        {\n            result\
    \ = s;\n        }\n        else\n        {\n            if(s.length > result.get.length)\n\
    \            {\n                result = s;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings) \n    {\n        if(longest.isNull || str.length > longest.get.length)\
    \ \n        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n   \
    \ {\n        if(longest.isNull || str.length > longest.get.length)\n        {\n\
    \            longest = str;\n        }\n    }\n    return longest;\n}", "{\n \
    \   Nullable!(string) longest = Nullable!(string).init;\n    foreach(string s;\
    \ strings)\n    {\n        if(s.length > longest.getOrElse(\"\").length)\n   \
    \     {\n            longest = Nullable!(string).init;\n            longest.set(s);\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n   \
    \ foreach(string s; strings)\n    {\n        if(longest.isNull || longest.get.length\
    \ < s.length)\n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n\
    \    {\n        if(longest.isNull || str.length > longest.get.length)\n      \
    \  {\n            longest = str;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || longest.get.length < s.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        string longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings) \n    {\n \
    \       if(longest.isNull || str.length > longest.get.length) \n        {\n  \
    \          longest = str;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n      \
    \  if (longest.isNull || str.length > longest.get.length)\n        {\n       \
    \     longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n  \
    \      if(result.isNull || s.length > result.get.length)\n        {\n        \
    \    result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings) \n    {\n        if(longest is null || str.length > longest.length)\
    \ \n        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = Nullable!(string).init;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = Nullable!(string).init(s);\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings) \n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(str; strings)\n    {\n        if(result.isNull)\n        {\n    \
    \        result = str;\n        }\n        else\n        {\n            if(str.length\
    \ > result.get.length)\n            {\n                result = str;\n       \
    \     }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string str; strings)\
    \ \n    {\n        if(longest is null || str.length > longest.get.length) \n \
    \       {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n   \
    \ {\n        if(longest.isNull || str.length > longest.get.length)\n        {\n\
    \            longest = str;\n        }\n    }\n    return longest;\n}", "{\n \
    \   Nullable!(string) result = Nullable!(string).init;\n    foreach(string s;\
    \ strings)\n    {\n        if(result.isNull)\n        {\n            result =\
    \ s;\n        }\n        else if(s.length > result.get.length)\n        {\n  \
    \          result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(str.length > longest.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = Nullable!(string).init;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(str; strings)\n\
    \    {\n        if(longest.isNull || str.length > longest.get.length)\n      \
    \  {\n            longest = str;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) result = Nullable!(string).init;\n    foreach(string s;\
    \ strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n            longest = s;\n    }\n  \
    \  return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest is null || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\
    \ \n    {\n        if(longest.isNull || s.length > longest.get.length) \n    \
    \    {\n            longest = s;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n   \
    \     if(longest is null || str.length > longest.length)\n        {\n        \
    \    longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        string longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings) \n    {\n \
    \       if(longest.isNull || str.length > longest.get.length) \n        {\n  \
    \          longest = str;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n  \
    \      if (result.isNull || s.length > result.get.length)\n        {\n       \
    \     result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n  \
    \      if(result.isNull)\n        {\n            result = s;\n        }\n    \
    \    else\n        {\n            if(s.length > result.get.length)\n         \
    \   {\n                result = s;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n  \
    \  foreach(string s; strings)\n    {\n        if (result.isNull)\n        {\n\
    \            result = s;\n        }\n        else\n        {\n            if (s.length\
    \ > result.get.length)\n            {\n                result = s;\n         \
    \   }\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string) result\
    \ = Nullable!(string).init;\n    foreach(str; strings) \n    {\n        if (result.isNull\
    \ || str.length > result.get.length) \n        {\n            result = str;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.get.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest.isNull || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest\
    \ is null || s.length > longest.get.length) \n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(str; strings) \n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length) \n        {\n            longest = str;\n        }\n \
    \   }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings)\n    {\n        if(longest.isNull || s.length >\
    \ longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    else\n    {\n        size_t maxLength = 0;\n        size_t maxIndex = 0;\n\
    \        foreach (i, s; strings)\n        {\n            if (s.length > maxLength)\n\
    \            {\n                maxLength = s.length;\n                maxIndex\
    \ = i;\n            }\n        }\n        return strings[maxIndex];\n    }\n}",
  "{\n    Nullable!(string) result = Nullable!(string).init;\n    foreach(string s;\
    \ strings) \n    {\n        if(result.isNull || s.length > result.get.length)\
    \ \n        {\n            result = s;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings) \n  \
    \  {\n        if(longest.isNull || str.length > longest.get.length) \n       \
    \ {\n            longest = str;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string str; strings)\n   \
    \ {\n        if(longest is null || str.length > longest.get.length)\n        {\n\
    \            longest = str;\n        }\n    }\n    return longest;\n}", "{\n \
    \   Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n    \
    \    if (longest.isNull || str.length > longest.get.length)\n        {\n     \
    \       longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest is null\
    \ || str.length > longest.length)\n        {\n            longest = str;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull)\n        {\n   \
    \         longest = str;\n        }\n        else if(str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    if (strings.length == 0)\n        return null;\n    string longest\
    \ = strings[0];\n    foreach (string s; strings)\n    {\n        if (s.length\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(string\
    \ s; strings) \n    {\n        if(longest.isNull || longest.get.length < s.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n   \
    \ {\n        if(longest.isNull || str.length > longest.get.length)\n        {\n\
    \            longest = str;\n        }\n    }\n    return longest;\n}", "{\n \
    \   Nullable!(string) result = Nullable!(string).init;\n    foreach(string s;\
    \ strings)\n    {\n        if(result.isNull)\n        {\n            result =\
    \ s;\n        }\n        else\n        {\n            if(s.length > result.get.length)\n\
    \            {\n                result = s;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(str; strings)\n    {\n        if(!longest.isNull)\n        {\n  \
    \          if(str.length > longest.get.length)\n            {\n              \
    \  longest = str;\n            }\n        }\n        else\n        {\n       \
    \     longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull)\n        {\n\
    \            longest = s;\n        }\n        else\n        {\n            if(s.length\
    \ > longest.get.length)\n            {\n                longest = s;\n       \
    \     }\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = Nullable!(string).init;\n    foreach(string s; strings) \n    {\n \
    \       if(result.isNull || s.length > result.get.length) \n        {\n      \
    \      result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result = Nullable!(string).init;\n    foreach(str; strings)\n    {\n       \
    \ if(result.isNull || str.length > result.get.length)\n        {\n           \
    \ result = str;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull\
    \ || str.length > longest.get.length)\n        {\n            longest = str;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(str; strings) \n    {\n        if(result.isNull || str.length > result.get.length)\
    \ \n        {\n            result = str;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest.isNull || s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n      \
    \  if(str.length > longest.length)\n        {\n            longest = str;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(str;\
    \ strings) \n    {\n        if(longest.isNull || str.length > longest.get.length)\
    \ \n        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = Nullable!(string).init;\n    foreach(str;\
    \ strings) \n    {\n        if(result.isNull || str.length > result.get.length)\
    \ \n        {\n            result = Nullable!(string).init(str);\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings) \n    {\n        if(result.isNull || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(s.length > longest.getOrElse(\"\
    \").length)\n        {\n            longest = Nullable!(string).init(s);\n   \
    \     }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    string longest = strings[0];\n    foreach (string s;\
    \ strings)\n    {\n        if (s.length > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) longestString\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longestString.isNull\
    \ || s.length > longestString.get.length)\n        {\n            longestString\
    \ = s;\n        }\n    }\n    return longestString;\n}", "{\n    Nullable!(string)\
    \ longest = Nullable!(string).init;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull)\n        {\n            longest = s;\n        }\n \
    \       else\n        {\n            if(s.length > longest.get.length)\n     \
    \       {\n                longest = s;\n            }\n        }\n    }\n   \
    \ return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(str; strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\
    \ \n    {\n        if(longest is null || s.length > longest.get.length) \n   \
    \     {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = Nullable!(string).init;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull)\n        {\n            longest\
    \ = s;\n        }\n        else\n        {\n            if(s.length > longest.get.length)\n\
    \            {\n                longest = s;\n            }\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = Nullable!(string).init(s);\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length) \n        {\n            longest = s;\n     \
    \   }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = Nullable!(string).init;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull)\n        {\n\
    \            result = s;\n        }\n        else\n        {\n            if(s.length\
    \ > result.get.length)\n            {\n                result = s;\n         \
    \   }\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
