language: d
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_p15q1b.d(13): Error: no property `sort` for type `char[]`

    /tmp/tmpk_p15q1b.d(14): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_p15q1b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n       \
    \     return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`

    /tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphoi5_60r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[]\
    \ c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n\
    \    foreach (c; s1) c1[c]++;\n    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuwb4u65.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmpzuwb4u65.__unittest_L18_C1() [0x427ec5]

    ??:? void tmpzuwb4u65.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[]\
    \ c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n\
    \    foreach (c; s1) c1[c]++;\n    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuwb4u65.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmpzuwb4u65.__unittest_L18_C1() [0x427ec5]

    ??:? void tmpzuwb4u65.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto chars0 = s0.dup;\n    auto chars1 = s1.dup;\n    chars0.sort;\n    chars1.sort;\n\
    \    return chars0 == chars1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprcjytkqf.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmprcjytkqf.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprcjytkqf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return\
    \ a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3ini5f8.d(13): Error: no property `sort` for type `char[]`

    /tmp/tmpx3ini5f8.d(14): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3ini5f8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lxkw8tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  foreach (i, c; s0_sorted) \n    {\n        if (c != s1_sorted[i]) \n      \
    \      return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzr2ee2uq.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpzr2ee2uq.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzr2ee2uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdox2o8p_.d(14): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpdox2o8p_.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdox2o8p_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    foreach\
    \ (i, c; s0_sorted)\n    {\n        if (c != s1_sorted[i])\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zjf30bp.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp6zjf30bp.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zjf30bp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    foreach\
    \ (c; s0)\n    {\n        if (s1.count(c) != s0.count(c)) return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4meheaxg.d(13): Error: no property `count` for type `string`

    /tmp/tmp4meheaxg.d(13): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4meheaxg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3oov8d00.d(13): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp3oov8d00.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3oov8d00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n\
    \        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 ..\
    \ 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsztxd7dw.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsztxd7dw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    char[] c0 = s0.dup;\n    char[] c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__kwt7qu.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmp__kwt7qu.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__kwt7qu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    foreach\
    \ (c; s0) {\n        if (s1.count(c) != s0.count(c)) return false;\n    }\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5lam787.d(12): Error: no property `count` for type `string`

    /tmp/tmpu5lam787.d(12): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5lam787.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.chars;\n    auto s1_chars = s1.chars;\n    sort(s0_chars);\n\
    \    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp71_sgtei.d(12): Error: no property `chars` for type `string`

    /tmp/tmp71_sgtei.d(13): Error: no property `chars` for type `string`

    /tmp/tmp71_sgtei.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp71_sgtei.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71_sgtei.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    int[] count = new int[256];\n    foreach (c; s0)\n \
    \       count[c]++;\n    foreach (c; s1)\n        count[c]--;\n    foreach (c;\
    \ count)\n        if (c != 0)\n            return false;\n    return true;\n}\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdi2w1b4x.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpdi2w1b4x.__unittest_L20_C1() [0x427e71]

    ??:? void tmpdi2w1b4x.__modtest() [0x428004]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43037d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43082c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428748]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    int[] cnt = new int[256];\n    foreach (c; s0)\n   \
    \     cnt[c]++;\n    foreach (c; s1)\n        cnt[c]--;\n    foreach (c; cnt)\n\
    \        if (c != 0)\n            return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx5crls0_.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpx5crls0_.__unittest_L20_C1() [0x427e71]

    ??:? void tmpx5crls0_.__modtest() [0x428004]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43037d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43082c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428748]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (char c; s0) \n    {\n        if (s1.count(c) != s0.count(c)) \n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm4le8ss5.d(14): Error: no property `count` for type `string`

    /tmp/tmpm4le8ss5.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm4le8ss5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3oov8d00.d(13): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp3oov8d00.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3oov8d00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydzjjrkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted\
    \ == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`

    /tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cp_dzzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    foreach\
    \ (c; s0) {\n        if (s1.count(c) != s0.count(c)) return false;\n    }\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu5lam787.d(12): Error: no property `count` for type `string`

    /tmp/tmpu5lam787.d(12): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu5lam787.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto a = s0.dup;\n    auto b = s1.dup;\n    a.sort;\n    b.sort;\n    return\
    \ a == b;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgjpi1158.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpgjpi1158.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjpi1158.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n    return\
    \ a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3ini5f8.d(13): Error: no property `sort` for type `char[]`

    /tmp/tmpx3ini5f8.d(14): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3ini5f8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n       \
    \     return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyd1smy7w.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyd1smy7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydzjjrkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rrpbzgt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    int[] counts = new int[256];\n    foreach (c; s0)\n\
    \        counts[c]++;\n    foreach (c; s1)\n        counts[c]--;\n    foreach\
    \ (c; counts)\n        if (c != 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_wsydudm.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmp_wsydudm.__unittest_L20_C1() [0x427e71]

    ??:? void tmp_wsydudm.__modtest() [0x428004]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43037d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43082c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428748]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydzjjrkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rrpbzgt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rrpbzgt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n  \
    \  return a0 == a1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_9j9z_f.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_9j9z_f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxcg6pk4c.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpxcg6pk4c.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcg6pk4c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n  \
    \  return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2p8cgf00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n\
    \    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkz2byu4w.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpkz2byu4w.__unittest_L18_C1() [0x427f5d]

    ??:? void tmpkz2byu4w.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydzjjrkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ipdp2i2.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ipdp2i2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.toCharArray;\n    auto s1_chars = s1.toCharArray;\n  \
    \  sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\n\
    /*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpekx76lo3.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpekx76lo3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphb3aqeq3.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphb3aqeq3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    foreach\
    \ (i, c; s0_sorted)\n    {\n        if (c != s1_sorted[i])\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zjf30bp.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp6zjf30bp.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zjf30bp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lxkw8tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2xrymsg.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2xrymsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto m0 = map!(char, int)();\n    auto m1 = map!(char, int)();\n    foreach\
    \ (c; s0)\n        m0[c]++;\n    foreach (c; s1)\n        m1[c]++;\n    foreach\
    \ (c; m0.keys)\n        if (m0[c] != m1[c])\n            return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1yikz1_g.d(12): Error: template instance `map!(char, int)` template
    `map` is not defined

    /tmp/tmp1yikz1_g.d(13): Error: template instance `map!(char, int)` template `map`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1yikz1_g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n  \
    \  return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2p8cgf00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3oov8d00.d(13): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp3oov8d00.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3oov8d00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted\
    \ == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`

    /tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cp_dzzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n\
    \        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 ..\
    \ 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyw53_on.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmpoyw53_on.__unittest_L23_C1() [0x427ec5]

    ??:? void tmpoyw53_on.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lxkw8tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lxkw8tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n\
    \    foreach (c; s0) {\n        c0[c]++;\n    }\n    foreach (c; s1) {\n     \
    \   c1[c]++;\n    }\n    foreach (i; 0 .. 256) {\n        if (c0[i] != c1[i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa2t5351l.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmpa2t5351l.__unittest_L25_C1() [0x427eb5]

    ??:? void tmpa2t5351l.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    return s0_chars\
    \ == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3eq12gww.d(11): Error: no property `sort` for type `char[]`

    /tmp/tmp3eq12gww.d(12): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3eq12gww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    int[] cnt = new int[256];\n    foreach (c; s0)\n   \
    \     cnt[c]++;\n    foreach (c; s1)\n        cnt[c]--;\n    foreach (c; cnt)\n\
    \        if (c != 0)\n            return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx5crls0_.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmpx5crls0_.__unittest_L20_C1() [0x427e71]

    ??:? void tmpx5crls0_.__modtest() [0x428004]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43037d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43082c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428748]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n  \
    \  return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2p8cgf00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_chars = s0.chars;\n    auto s1_chars = s1.chars;\n    sort(s0_chars);\n \
    \   sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95b_e54u.d(11): Error: no property `chars` for type `string`

    /tmp/tmp95b_e54u.d(12): Error: no property `chars` for type `string`

    /tmp/tmp95b_e54u.d(13): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp95b_e54u.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95b_e54u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (i, c; s0) \n    {\n        if (s1.indexOf(c) == -1) \n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnpt_yzj.d(14): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnpt_yzj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (c; s0) \n    {\n        if (s1.count(c) == 0) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkd57mu2.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkd57mu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ipdp2i2.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ipdp2i2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted\
    \ == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`

    /tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cp_dzzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted\
    \ == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`

    /tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cp_dzzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3uvcstgy.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3uvcstgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (i, c; s0) \n    {\n        if (s1.indexOf(c) == -1) \n         \
    \   return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnpt_yzj.d(14): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnpt_yzj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted\
    \ == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`

    /tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cp_dzzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (immutable c; s0)\n    {\n        if (s1.count(c) == 0)\n       \
    \     return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgfbdjppq.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfbdjppq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    foreach\
    \ (i, c; s0)\n    {\n        if (s1.count(c) == 0) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwx1_tydp.d(13): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwx1_tydp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    return\
    \ s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5iau6uoi.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp5iau6uoi.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5iau6uoi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n  \
    \  return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2p8cgf00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n       \
    \     return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyd1smy7w.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyd1smy7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    for (int i = 0; i < s0.length; i++)\n    {\n        if (s0[i] != s1[i])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6b49_cjk.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmp6b49_cjk.__unittest_L19_C1() [0x427af1]

    ??:? void tmp6b49_cjk.__modtest() [0x427c84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab32]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcc5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430174]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc51]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab09]

    ??:? runModuleUnitTests [0x42ba75]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lxkw8tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rrpbzgt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    return\
    \ s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5iau6uoi.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp5iau6uoi.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5iau6uoi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_chars = s0.to!char[];\n    auto s1_chars = s1.to!char[];\n    sort(s0_chars);\n\
    \    sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq05zhuv4.d(12): Error: no property `to` for type `string`

    /tmp/tmpq05zhuv4.d(13): Error: no property `to` for type `string`

    /tmp/tmpq05zhuv4.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpq05zhuv4.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq05zhuv4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_chars = s0.dup;\n    auto s1_chars = s1.dup;\n    s0_chars.sort;\n\
    \    s1_chars.sort;\n    return s0_chars == s1_chars;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz96oq470.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpz96oq470.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz96oq470.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[]\
    \ counts = new int[256];\n    foreach (c; s0) counts[c]++;\n    foreach (c; s1)\
    \ counts[c]--;\n    foreach (c; counts) if (c != 0) return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv00k6ezb.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x428295]

    ??:? void tmpv00k6ezb.__unittest_L17_C1() [0x427e81]

    ??:? void tmpv00k6ezb.__modtest() [0x428014]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43038d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43083c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430319]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428758]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    int[] chars = new int[256];\n    foreach (c; s0) \n        chars[c]++;\n\
    \    foreach (c; s1) \n        chars[c]--;\n    foreach (c; chars) \n        if\
    \ (c != 0) \n            return false;\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqzi74goi.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428295]

    ??:? void tmpqzi74goi.__unittest_L22_C1() [0x427e81]

    ??:? void tmpqzi74goi.__modtest() [0x428014]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43038d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43083c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430319]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428758]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.toCharArray();\n    auto s1_chars = s1.toCharArray();\n\
    \    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptq18fp3l.d(12): Error: no property `toCharArray` for type `string`

    /tmp/tmptq18fp3l.d(13): Error: no property `toCharArray` for type `string`

    /tmp/tmptq18fp3l.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmptq18fp3l.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptq18fp3l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.dup;\n    auto s1_chars = s1.dup;\n    std.algorithm.sort(s0_chars);\n\
    \    std.algorithm.sort(s1_chars);\n    return s0_chars == s1_chars;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbspsow52.d(14): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpbspsow52.d(15): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbspsow52.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    // Check if the words have the same length.\n    if\
    \ (s0.length != s1.length)\n        return false;\n    // Check if the words have\
    \ the same characters.\n    foreach (c; s0)\n    {\n        if (s1.count(c) !=\
    \ s0.count(c))\n            return false;\n    }\n    return true;\n}\n/*\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjykhy6fs.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjykhy6fs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.toCharArray();\n    auto s1_chars = s1.toCharArray();\n\
    \    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptq18fp3l.d(12): Error: no property `toCharArray` for type `string`

    /tmp/tmptq18fp3l.d(13): Error: no property `toCharArray` for type `string`

    /tmp/tmptq18fp3l.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmptq18fp3l.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptq18fp3l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.dup.sort();\n    auto s1_chars = s1.dup.sort();\n    return\
    \ s0_chars == s1_chars;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0y0zzd1g.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp0y0zzd1g.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0y0zzd1g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n\
    \    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n\
    \    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp11797bg0.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp11797bg0.__unittest_L21_C1() [0x427eb5]

    ??:? void tmp11797bg0.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpieu6ttgv.d(11): Error: no property `sort` for type `char[]`

    /tmp/tmpieu6ttgv.d(12): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpieu6ttgv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3uvcstgy.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3uvcstgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[]\
    \ c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n\
    \    foreach (c; s1) c1[c]++;\n    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuwb4u65.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmpzuwb4u65.__unittest_L18_C1() [0x427ec5]

    ??:? void tmpzuwb4u65.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    int[] counts = new int[256];\n    foreach (c; s0) \n        counts[c]++;\n\
    \    foreach (c; s1) \n        counts[c]--;\n    foreach (c; counts) \n      \
    \  if (c != 0) \n            return false;\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptcjg943q.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428295]

    ??:? void tmptcjg943q.__unittest_L22_C1() [0x427e81]

    ??:? void tmptcjg943q.__modtest() [0x428014]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43038d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43083c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430319]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428758]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2xrymsg.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2xrymsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprjfn1fck.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjfn1fck.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n  \
    \  return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukchuf3g.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpukchuf3g.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukchuf3g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdox2o8p_.d(14): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpdox2o8p_.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdox2o8p_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n  \
    \  return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2p8cgf00.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmp2p8cgf00.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2p8cgf00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    // Check if the words have the same length.\n    if\
    \ (s0.length != s1.length) return false;\n    // Check if the words have the same\
    \ characters.\n    foreach (c; s0) {\n        if (s1.count(c) != s0.count(c))\
    \ return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprche7yl5.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprche7yl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3uvcstgy.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3uvcstgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpieu6ttgv.d(11): Error: no property `sort` for type `char[]`

    /tmp/tmpieu6ttgv.d(12): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpieu6ttgv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    auto s0_chars = s0.chars;\n    auto s1_chars = s1.chars;\n\
    \    sort(s0_chars);\n    sort(s1_chars);\n    return s0_chars == s1_chars;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsb5mpofk.d(10): Error: no property `chars` for type `string`

    /tmp/tmpsb5mpofk.d(11): Error: no property `chars` for type `string`

    /tmp/tmpsb5mpofk.d(12): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpsb5mpofk.d(13): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsb5mpofk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n\
    \    sort(c1);\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_5htev1.d(12): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp5_5htev1.d(13): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_5htev1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (c; s0) \n    {\n        if (s1.count(c) == 0) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkd57mu2.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkd57mu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2xrymsg.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2xrymsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted =\
    \ s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0_knq49w.d(10): Error: no property `sort` for type `char[]`

    /tmp/tmp0_knq49w.d(11): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_knq49w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[]\
    \ c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n\
    \    foreach (c; s1) c1[c]++;\n    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuwb4u65.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmpzuwb4u65.__unittest_L18_C1() [0x427ec5]

    ??:? void tmpzuwb4u65.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    foreach\
    \ (i, c; s0_sorted) \n    {\n        if (c != s1_sorted[i]) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmfuyaoyx.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpmfuyaoyx.d(13): Error: no property `sort` for type `char[]`

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n       \
    \     return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`

    /tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphoi5_60r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto a0 = s0.dup;\n    auto a1 = s1.dup;\n    a0.sort;\n    a1.sort;\n  \
    \  return a0 == a1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukchuf3g.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpukchuf3g.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukchuf3g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n\
    \        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 ..\
    \ 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyw53_on.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmpoyw53_on.__unittest_L23_C1() [0x427ec5]

    ??:? void tmpoyw53_on.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    else\n    {\n        auto s0_sorted = s0.dup.sort;\n        auto s1_sorted\
    \ = s1.dup.sort;\n        return s0_sorted == s1_sorted;\n    }\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy9m12p_5.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpy9m12p_5.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy9m12p_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lxkw8tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[]\
    \ count0 = new int[256];\n    int[] count1 = new int[256];\n    foreach (c; s0)\
    \ count0[c]++;\n    foreach (c; s1) count1[c]++;\n    foreach (i; 0 .. 256) if\
    \ (count0[i] != count1[i]) return false;\n    return true;\n}\nunittest\n{\n \
    \   alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6wpibxhg.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmp6wpibxhg.__unittest_L18_C1() [0x427ec5]

    ??:? void tmp6wpibxhg.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydzjjrkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    foreach\
    \ (i, c; s0_chars)\n    {\n        if (c != s1_chars[i])\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqf7ch6j.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpiqf7ch6j.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqf7ch6j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3uvcstgy.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3uvcstgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxcg6pk4c.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpxcg6pk4c.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcg6pk4c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_p15q1b.d(13): Error: no property `sort` for type `char[]`

    /tmp/tmpk_p15q1b.d(14): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_p15q1b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted\
    \ = s1.dup.sort();\n    return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfs3sigga.d(10): Error: no property `sort` for type `char[]`

    /tmp/tmpfs3sigga.d(11): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfs3sigga.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach (c; s0)\n\
    \        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n    foreach (i; 0 ..\
    \ 256)\n        if (c0[i] != c1[i])\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyw53_on.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmpoyw53_on.__unittest_L23_C1() [0x427ec5]

    ??:? void tmpoyw53_on.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lxkw8tz.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp6lxkw8tz.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lxkw8tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    bool[] used = new bool[s1.length];\n    foreach (c;\
    \ s0)\n    {\n        bool found = false;\n        for (int i = 0; i < s1.length;\
    \ i++)\n        {\n            if (s1[i] == c && !used[i])\n            {\n  \
    \              used[i] = true;\n                found = true;\n              \
    \  break;\n            }\n        }\n        if (!found)\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprfqyfwgk.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280e5]

    ??:? void tmprfqyfwgk.__unittest_L28_C1() [0x427d5d]

    ??:? void tmprfqyfwgk.__modtest() [0x427e68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bf1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42adae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430039]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffc5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad85]

    ??:? runModuleUnitTests [0x42bcf1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ a = s0.dup;\n    auto b = s1.dup;\n    a.sort;\n    b.sort;\n    return a ==\
    \ b;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxk57r35j.d(13): Error: no property `sort` for type `char[]`

    /tmp/tmpxk57r35j.d(14): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxk57r35j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (i, c; s0)\n    {\n        if (s1.count(c) == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfakdr5d.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfakdr5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    char[]\
    \ c0 = s0.dup;\n    char[] c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeig88ccw.d(13): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpeig88ccw.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeig88ccw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpodkq84jw.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodkq84jw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n    return\
    \ c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3oov8d00.d(13): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp3oov8d00.d(14): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3oov8d00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_chars = s0.dup.sort;\n    auto s1_chars = s1.dup.sort;\n    foreach\
    \ (i, c; s0_chars) {\n        if (c != s1_chars[i])\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptghabg3o.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmptghabg3o.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptghabg3o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    foreach (c; s0)\n    {\n        if (s1.count(c) != s0.count(c))\n       \
    \     return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`

    /tmp/tmphoi5_60r.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphoi5_60r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    auto\
    \ s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return s0_sorted\
    \ == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cp_dzzi.d(11): Error: no property `sort` for type `char[]`

    /tmp/tmp7cp_dzzi.d(12): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cp_dzzi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n\
    \    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkz2byu4w.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpkz2byu4w.__unittest_L18_C1() [0x427f5d]

    ??:? void tmpkz2byu4w.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort;\n    auto s1_sorted = s1.dup.sort;\n    return\
    \ s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3vaqsru.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpj3vaqsru.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3vaqsru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydzjjrkb.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpydzjjrkb.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydzjjrkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    int[] count = new int[256];\n    foreach (c; s0)\n        count[c]++;\n \
    \   foreach (c; s1)\n        count[c]--;\n    foreach (c; count)\n        if (c\
    \ != 0)\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplvx18z0x.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x428295]

    ??:? void tmplvx18z0x.__unittest_L22_C1() [0x427e81]

    ??:? void tmplvx18z0x.__modtest() [0x428014]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43038d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43083c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430319]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428758]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n\
    \    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n\
    \    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp11797bg0.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp11797bg0.__unittest_L21_C1() [0x427eb5]

    ??:? void tmp11797bg0.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxcg6pk4c.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmpxcg6pk4c.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcg6pk4c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto s0_sorted = s0.dup.sort();\n    auto s1_sorted = s1.dup.sort();\n  \
    \  return s0_sorted == s1_sorted;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9kmhtu02.d(12): Error: no property `sort` for type `char[]`

    /tmp/tmp9kmhtu02.d(13): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9kmhtu02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    sort(c0);\n    sort(c1);\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdox2o8p_.d(14): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpdox2o8p_.d(15): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdox2o8p_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) return false;\n    int[]\
    \ cnt = new int[256];\n    foreach (c; s0) cnt[c]++;\n    foreach (c; s1) cnt[c]--;\n\
    \    foreach (c; cnt) if (c != 0) return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq7jxugam.d(21): unittest failure

    ----------------

    ??:? _d_unittestp [0x428295]

    ??:? void tmpq7jxugam.__unittest_L17_C1() [0x427e81]

    ??:? void tmpq7jxugam.__modtest() [0x428014]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43038d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43083c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430319]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428758]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length) \n        return false;\n\
    \    foreach (i, c; s0) \n    {\n        if (s1.count(c) == 0) \n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rrpbzgt.d(14): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rrpbzgt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164516
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2xrymsg.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2xrymsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n                            \n*/\nbool same_chars(string\
    \ s0, string s1) \n{\n    if (s0.length != s1.length)\n        return false;\n\
    \    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n  \
    \  return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg72k6rs3.d(14): Error: no property `sort` for type `char[]`

    /tmp/tmpg72k6rs3.d(15): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg72k6rs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164515
