language: d
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxkf16axa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] filtered;\n    foreach (string s;\
    \ strings) {\n        if (s.startsWith(prefix)) {\n            filtered ~= s;\n\
    \        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate =\
    \ filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplaexwjpj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrmicdcm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsqqeuhy9.d(72): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqqeuhy9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup.idup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup.idup.sort.reverse.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix8(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwgik8h1h.d(66): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmpwgik8h1h.d(67): Error: found \''{\'' when expecting
    \'';\'' following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwgik8h1h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings, string\n\
    unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp51t6zl3w.d(70): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp51t6zl3w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\n\
    \    {\n        if (s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup();\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjpjcd1n7.d(75): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjpjcd1n7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix_5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix_6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix_7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_9(\nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9b865lgr.d(72): Error: basic type expected, not unittest\n/tmp/tmp9b865lgr.d(72):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp9b865lgr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix6(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).idup.array;\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup.array;\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup.\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqki_5cd.d(72): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmpqqki_5cd.d(73): Error: found \''{\'' when expecting
    \'';\'' following return statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqqki_5cd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrmicdcm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\n\
    \    {\n        if (s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.sort.reverse.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzc32r1xn.d(72): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzc32r1xn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort.reverse.chunks;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix8(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph5s0wodf.d(66): Error: found \''unittest\'' when expecting \'',\''\n/tmp/tmph5s0wodf.d(73):
    Error: found \''void\'' when expecting \'',\''\n/tmp/tmph5s0wodf.d(73): Error:
    found \''{\'' when expecting \'',\''\n/tmp/tmph5s0wodf.d(73): Error: expression
    expected, not \''}\''\n/tmp/tmph5s0wodf.d(73): Error: found \''EOF\'' when expecting
    \'',\''\n/tmp/tmph5s0wodf.d(73): Error: found \''EOF\'' when expecting \'')\''\n/tmp/tmph5s0wodf.d(73):
    Error: found \''EOF\'' when expecting \'')\'' following template argument list\n/tmp/tmph5s0wodf.d(73):
    Error: found \''EOF\'' when expecting \'';\'' following return statement\n/tmp/tmph5s0wodf.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5s0wodf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    return filter!(a => a.endsWith(suffix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that match a given regular expression.\n     \
    \       \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n \
    \   return filter!(a => a.match(regex))(strings);\n}\n/*\n Filter an input list\
    \ of strings only for ones that are equal to a given string.\n            \n*/\n\
    string[] filter_by_equality(string[] strings, string equality) \n{\n    return\
    \ filter!(a => a == equality)(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that are not equal to a given string.\n            \n*/\nstring[]\
    \ filter_by_inequality(string[] strings, string inequality) \n{\n    return filter!(a\
    \ => a != inequality)(strings);\n}\n/*\n Filter an input list of strings only\
    \ for ones that are longer than a given length.\n            \n*/\nstring[] filter_by_length(string[]\
    \ strings, size_t length) \n{\n    return filter!(a => a.length > length)(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that are shorter than a\
    \ given length.\n            \n*/\nstring[] filter_by_shortness(string[] strings,\
    \ size_t length) \n{\n    return filter!(a => a.length < length)(strings);\n}\n\
    /*\n Filter an input list of strings only for ones that are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_min_length(string[] strings, size_t\
    \ length) \n{\n    return\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjdmqtbn3.d(74): Error: expression expected, not \''unittest\''\n/tmp/tmpjdmqtbn3.d(75):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjdmqtbn3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6inc68u.d(74): Error: expression expected, not \''unittest\''\n/tmp/tmpw6inc68u.d(75):
    Error: found \''{\'' when expecting \'')\'' following template argument list\n/tmp/tmpw6inc68u.d(76):
    Error: found \''alias\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6inc68u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array.idup.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix8(string[] strings, string\
    \ prefix) \n{\n    return\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp660sp07g.d(72): Error: expression expected, not \''unittest\''\n/tmp/tmp660sp07g.d(73):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp660sp07g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxkf16axa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjq51mfax.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix_5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix_6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix_7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_9(\nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9b865lgr.d(72): Error: basic type expected, not unittest\n/tmp/tmp9b865lgr.d(72):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp9b865lgr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.array.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.st\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg66kiz99.d(66): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpg66kiz99.d(67): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpg66kiz99.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.reverse.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7sjcumpy.d(70): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sjcumpy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix9(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1u_7shx1.d(72): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1u_7shx1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix9(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1u_7shx1.d(72): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1u_7shx1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix_5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix_6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix_7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_9(\nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9b865lgr.d(72): Error: basic type expected, not unittest\n/tmp/tmp9b865lgr.d(72):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp9b865lgr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6inc68u.d(74): Error: expression expected, not \''unittest\''\n/tmp/tmpw6inc68u.d(75):
    Error: found \''{\'' when expecting \'')\'' following template argument list\n/tmp/tmpw6inc68u.d(76):
    Error: found \''alias\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6inc68u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiskn725g.d(72): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiskn725g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4llt_63c.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmp4llt_63c.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4llt_63c.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix9(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1u_7shx1.d(72): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1u_7shx1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiskn725g.d(72): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiskn725g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxypu1_e0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix_5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix_6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix_7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_9(\nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9b865lgr.d(72): Error: basic type expected, not unittest\n/tmp/tmp9b865lgr.d(72):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp9b865lgr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw6inc68u.d(74): Error: expression expected, not \''unittest\''\n/tmp/tmpw6inc68u.d(75):
    Error: found \''{\'' when expecting \'')\'' following template argument list\n/tmp/tmpw6inc68u.d(76):
    Error: found \''alias\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6inc68u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix3(string[] strings, string prefix)\
    \ \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix4(string[] strings, string prefix) \n\
    {\n    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix) \n{\n\
    \    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix6(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix7(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix8(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix9(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6z8hlwzm.d(72): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6z8hlwzm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpush1_6g2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\n\
    \    {\n        if (s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup.array;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup.array();\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup.arrayof;\n\n\
    unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv3ixdcsz.d(75): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3ixdcsz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiskn725g.d(72): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiskn725g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978212
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpao1nrncz.d(74): Error: found \''unittest\'' when expecting \'')\''
    following template argument list\n/tmp/tmpao1nrncz.d(75): Error: found \''{\''
    when expecting \'';\'' following return statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpao1nrncz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsqqeuhy9.d(72): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqqeuhy9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pml5m7x.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrzxvomy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpex6f3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978211
