language: d
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8duptxs.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8duptxs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] filtered;\n    foreach (string s;\
    \ strings) {\n        if (s.startsWith(prefix)) {\n            filtered ~= s;\n\
    \        }\n    }\n    return filtered;\n}\nunittest\n{\n    alias candidate =\
    \ filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86ztwnz2.d(11): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86ztwnz2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfwx81vxe.d(11): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwx81vxe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyo02gcdh.d(72): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyo02gcdh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup.idup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array.dup.idup.sort.reverse.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix8(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7v7i3l7z.d(66): Error: identifier expected following `.`, not `unittest`

    /tmp/tmp7v7i3l7z.d(67): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7v7i3l7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings, string\n\
    unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpite7e5p3.d(70): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpite7e5p3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\n\
    \    {\n        if (s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup();\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8imln1w_.d(75): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8imln1w_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix_5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix_6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix_7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_9(\nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa19cz1m.d(72): Error: basic type expected, not `unittest`

    /tmp/tmpfa19cz1m.d(72): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa19cz1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix6(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).idup.array;\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup.array;\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup.\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqp4rjnr4.d(72): Error: identifier expected following `.`, not `unittest`

    /tmp/tmpqp4rjnr4.d(73): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqp4rjnr4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfwx81vxe.d(11): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwx81vxe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\n\
    \    {\n        if (s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.sort.reverse.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxgmksfrn.d(72): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxgmksfrn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.dup.idup.sort.reverse.chunks;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix8(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix\nunittest\n\
    {\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\"\
    ) == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunseq6ar.d(66): Error: found `unittest` when expecting `,`

    /tmp/tmpunseq6ar.d(73): Error: found `void` when expecting `,`

    /tmp/tmpunseq6ar.d(73): Error: found `{` when expecting `,`

    /tmp/tmpunseq6ar.d(73): Error: expression expected, not `}`

    /tmp/tmpunseq6ar.d(73): Error: found `End of File` when expecting `,`

    /tmp/tmpunseq6ar.d(73): Error: found `End of File` when expecting `)`

    /tmp/tmpunseq6ar.d(73): Error: found `End of File` when expecting `)` following
    template argument list

    /tmp/tmpunseq6ar.d(73): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpunseq6ar.d(73): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunseq6ar.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    return filter!(a => a.contains(substring))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    return filter!(a => a.endsWith(suffix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that match a given regular expression.\n     \
    \       \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n \
    \   return filter!(a => a.match(regex))(strings);\n}\n/*\n Filter an input list\
    \ of strings only for ones that are equal to a given string.\n            \n*/\n\
    string[] filter_by_equality(string[] strings, string equality) \n{\n    return\
    \ filter!(a => a == equality)(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that are not equal to a given string.\n            \n*/\nstring[]\
    \ filter_by_inequality(string[] strings, string inequality) \n{\n    return filter!(a\
    \ => a != inequality)(strings);\n}\n/*\n Filter an input list of strings only\
    \ for ones that are longer than a given length.\n            \n*/\nstring[] filter_by_length(string[]\
    \ strings, size_t length) \n{\n    return filter!(a => a.length > length)(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that are shorter than a\
    \ given length.\n            \n*/\nstring[] filter_by_shortness(string[] strings,\
    \ size_t length) \n{\n    return filter!(a => a.length < length)(strings);\n}\n\
    /*\n Filter an input list of strings only for ones that are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_min_length(string[] strings, size_t\
    \ length) \n{\n    return\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphh1_otct.d(74): Error: expression expected, not `unittest`

    /tmp/tmphh1_otct.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphh1_otct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxlp2zcrq.d(74): Error: expression expected, not `unittest`

    /tmp/tmpxlp2zcrq.d(75): Error: found `{` when expecting `)` following template
    argument list

    /tmp/tmpxlp2zcrq.d(76): Error: found `alias` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlp2zcrq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.array.idup.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix8(string[] strings, string\
    \ prefix) \n{\n    return\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkd7chvtv.d(72): Error: expression expected, not `unittest`

    /tmp/tmpkd7chvtv.d(73): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkd7chvtv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8duptxs.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8duptxs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3a_vn_9.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3a_vn_9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix_5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix_6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix_7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_9(\nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa19cz1m.d(72): Error: basic type expected, not `unittest`

    /tmp/tmpfa19cz1m.d(72): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa19cz1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.array.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.st\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxl02faz7.d(66): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpxl02faz7.d(67): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxl02faz7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.reverse;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array.idup.sort.reverse.array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9noq3gfw.d(70): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9noq3gfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix9(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadi70q6b.d(72): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadi70q6b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix9(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadi70q6b.d(72): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadi70q6b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix_5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix_6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix_7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_9(\nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa19cz1m.d(72): Error: basic type expected, not `unittest`

    /tmp/tmpfa19cz1m.d(72): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa19cz1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxlp2zcrq.d(74): Error: expression expected, not `unittest`

    /tmp/tmpxlp2zcrq.d(75): Error: found `{` when expecting `)` following template
    argument list

    /tmp/tmpxlp2zcrq.d(76): Error: found `alias` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlp2zcrq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldbrf21j.d(72): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldbrf21j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(s => s.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(s\
    \ => s.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzp6d2pa6.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpzp6d2pa6.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzp6d2pa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix9(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadi70q6b.d(72): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadi70q6b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldbrf21j.d(72): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldbrf21j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpih6p_i1b.d(9): Error: no property `filter` for type `string[]`

    /tmp/tmpih6p_i1b.d(17): Error: no property `filter` for type `string[]`

    /tmp/tmpih6p_i1b.d(25): Error: no property `filter` for type `string[]`

    /tmp/tmpih6p_i1b.d(33): Error: no property `filter` for type `string[]`

    /tmp/tmpih6p_i1b.d(41): Error: no property `filter` for type `string[]`

    /tmp/tmpih6p_i1b.d(49): Error: no property `filter` for type `string[]`

    /tmp/tmpih6p_i1b.d(57): Error: no property `filter` for type `string[]`

    /tmp/tmpih6p_i1b.d(65): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpih6p_i1b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix_3(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_4(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix_5(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix_6(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix_7(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_9(\nunittest\n{\n    alias\
    \ candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n\
    \    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"\
    xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa19cz1m.d(72): Error: basic type expected, not `unittest`

    /tmp/tmpfa19cz1m.d(72): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa19cz1m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n\
    \    return filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ filter!(a => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return filter!(a\
    \ => a.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return filter!(\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxlp2zcrq.d(74): Error: expression expected, not `unittest`

    /tmp/tmpxlp2zcrq.d(75): Error: found `{` when expecting `)` following template
    argument list

    /tmp/tmpxlp2zcrq.d(76): Error: found `alias` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlp2zcrq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix3(string[] strings, string prefix)\
    \ \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix4(string[] strings, string prefix) \n\
    {\n    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an\
    \ input list of strings only for ones that start with a given prefix.\n      \
    \      \n*/\nstring[] filter_by_prefix5(string[] strings, string prefix) \n{\n\
    \    return filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix6(string[] strings, string prefix) \n{\n    return\
    \ filter!(s => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix7(string[] strings, string prefix) \n{\n    return filter!(s\
    \ => s.startsWith(prefix))(strings);\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix8(string[]\
    \ strings, string prefix) \n{\n    return filter!(s => s.startsWith(prefix))(strings);\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix9(string[] strings, string\
    \ prefix) \nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptg0apxha.d(72): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptg0apxha.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\
    \ {\n        if (s.startsWith(prefix)) {\n            result ~= s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_2(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_7(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix_8(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcpm6r4ii.d(11): Error: no property `startsWith` for type `string`

    /tmp/tmpcpm6r4ii.d(23): Error: no property `filter` for type `string[]`

    /tmp/tmpcpm6r4ii.d(31): Error: no property `filter` for type `string[]`

    /tmp/tmpcpm6r4ii.d(39): Error: no property `filter` for type `string[]`

    /tmp/tmpcpm6r4ii.d(47): Error: no property `filter` for type `string[]`

    /tmp/tmpcpm6r4ii.d(55): Error: no property `filter` for type `string[]`

    /tmp/tmpcpm6r4ii.d(63): Error: no property `filter` for type `string[]`

    /tmp/tmpcpm6r4ii.d(71): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcpm6r4ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result;\n    foreach (string s; strings)\n\
    \    {\n        if (s.startsWith(prefix))\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup.array;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup.array();\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).idup.arrayof;\n\n\
    unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuzqd2h53.d(75): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuzqd2h53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(s => s.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(s => s.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldbrf21j.d(72): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldbrf21j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input\
    \ list of strings only for ones that start with a given prefix.\n            \n\
    */\nstring[] filter_by_prefix(string[] strings, string prefix) \n{\n    return\
    \ strings.filter!(a => a.startsWith(prefix));\n}\n/*\n Filter an input list of\
    \ strings only for ones that start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_prefix(string[] strings, string prefix) \n{\n    return strings.filter!(a\
    \ => a.startsWith(prefix));\n}\n/*\n Filter an input list of strings only for\
    \ ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n}\n/*\n\
    \ Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.starts\nunittest\n{\n    alias candidate\
    \ = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4m642hn.d(74): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpv4m642hn.d(75): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4m642hn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix2(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix3(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).array();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix4(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof;\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix5(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).arrayof();\n\
    }\n/*\n Filter an input list of strings only for ones that start with a given\
    \ prefix.\n            \n*/\nstring[] filter_by_prefix6(string[] strings, string\
    \ prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup;\n}\n\
    /*\n Filter an input list of strings only for ones that start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_prefix7(string[] strings, string prefix)\
    \ \n{\n    return strings.filter!(a => a.startsWith(prefix)).dup();\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix8(string[] strings, string prefix) \n\
    {\n    return strings.filter!(a => a.startsWith(prefix)).idup;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_\nunittest\n{\n    alias candidate = filter_by_prefix;\n\
    \n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"\
    asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyo02gcdh.d(72): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyo02gcdh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163053
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(a => a.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z5z5gq.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0z5z5gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return strings.filter!(s => s.startsWith(prefix));\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnix24yop.d(9): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnix24yop.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Filter an input list of strings\
    \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
    \ strings, string prefix) \n{\n    return filter!(a => a.startsWith(prefix))(strings);\n\
    }\nunittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
    \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxx8x1pg.d(9): Error: template instance `filter!((a) => a.startsWith(prefix))`
    template `filter` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxx8x1pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163054
