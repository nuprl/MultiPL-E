language: d
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] primes;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            primes ~= word;\n        }\n    }\n    return join(primes, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpapaudfyk.d(22): Error: undefined identifier `split`

    /tmp/tmpapaudfyk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpapaudfyk.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpapaudfyk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmdp3wv42.d(22): Error: undefined identifier `split`

    /tmp/tmpmdp3wv42.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpmdp3wv42.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmdp3wv42.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result);\n}\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptaoutje8.d(22): Error: undefined identifier `split`

    /tmp/tmptaoutje8.d(26): Error: undefined identifier `isPrime`

    /tmp/tmptaoutje8.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptaoutje8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujzt906h.d(22): Error: undefined identifier `split`

    /tmp/tmpujzt906h.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpujzt906h.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujzt906h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq8lksx_y.d(22): Error: undefined identifier `split`

    /tmp/tmpq8lksx_y.d(26): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8lksx_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    auto words = split(sentence);\n    string result;\n    foreach(word;\
    \ words)\n    {\n        if(isPrime(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpft9cl5pe.d(22): Error: undefined identifier `split`

    /tmp/tmpft9cl5pe.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpft9cl5pe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    // Split the sentence into words\n    string[] words = split(sentence,\
    \ \" \");\n    // Create a new string to store the result\n    string result =\
    \ \"\";\n    // Iterate over the words\n    foreach(word; words)\n    {\n    \
    \    // Check if the length of the word is a prime number\n        if(isPrime(word.length))\n\
    \        {\n            // If it is, add it to the result\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    // Return the result\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39c_6sq3.d(23): Error: undefined identifier `split`

    /tmp/tmp39c_6sq3.d(30): Error: undefined identifier `isPrime`

    /tmp/tmp39c_6sq3.d(37): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39c_6sq3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] prime_words;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            prime_words ~= word;\n        }\n    }\n    return join(prime_words,\
    \ \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxaep9ro.d(22): Error: undefined identifier `split`

    /tmp/tmpkxaep9ro.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpkxaep9ro.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxaep9ro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq8lksx_y.d(22): Error: undefined identifier `split`

    /tmp/tmpq8lksx_y.d(26): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8lksx_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result);\n}\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptaoutje8.d(22): Error: undefined identifier `split`

    /tmp/tmptaoutje8.d(26): Error: undefined identifier `isPrime`

    /tmp/tmptaoutje8.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptaoutje8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] primes;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            primes ~= word;\n        }\n    }\n    return join(primes, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpapaudfyk.d(22): Error: undefined identifier `split`

    /tmp/tmpapaudfyk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpapaudfyk.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpapaudfyk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable words = split(sentence);\n    immutable primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    immutable result = \"\";\n    foreach(immutable word;\
    \ words)\n    {\n        if(word.length in primes)\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkq7nqcam.d(22): Error: undefined identifier `split`

    /tmp/tmpkq7nqcam.d(32): Error: no property `stripRight` for type `immutable(string)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkq7nqcam.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujzt906h.d(22): Error: undefined identifier `split`

    /tmp/tmpujzt906h.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpujzt906h.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujzt906h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.algorithm : filter, map;\n    import std.conv\
    \ : to;\n    import std.range : iota;\n    import std.math : isPrime;\n    import\
    \ std.typecons : tuple;\n    import std.array : array;\n    import std.string\
    \ : join;\n    \n    auto words = sentence.split(\" \");\n    auto primes = iota(2,\
    \ words.length).filter!isPrime;\n    auto result = tuple(words[p] for p in primes);\n\
    \    return result.array.join(\" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpddll7tfm.d(32): Error: found `for` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddll7tfm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujzt906h.d(22): Error: undefined identifier `split`

    /tmp/tmpujzt906h.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpujzt906h.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujzt906h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiimv88pd.d(22): Error: undefined identifier `split`

    /tmp/tmpiimv88pd.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpiimv88pd.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiimv88pd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] prime_words;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            prime_words ~= word;\n        }\n    }\n    return join(prime_words,\
    \ \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxaep9ro.d(22): Error: undefined identifier `split`

    /tmp/tmpkxaep9ro.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpkxaep9ro.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxaep9ro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujzt906h.d(22): Error: undefined identifier `split`

    /tmp/tmpujzt906h.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpujzt906h.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujzt906h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result);\n}\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptaoutje8.d(22): Error: undefined identifier `split`

    /tmp/tmptaoutje8.d(26): Error: undefined identifier `isPrime`

    /tmp/tmptaoutje8.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptaoutje8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.algorithm : filter, map;\n    import std.range\
    \ : iota;\n    import std.conv : to;\n    import std.math : isPrime;\n    import\
    \ std.array : array;\n    import std.typecons : tuple;\n    import std.string\
    \ : split;\n    \n    auto words = sentence.split(\" \");\n    auto prime_words\
    \ = words.filter!(w => isPrime(w.length));\n    return prime_words.join(\" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0mvwbnxh.d(25): Error: module `std.math` import `isPrime` not found

    /tmp/tmp0mvwbnxh.d(32): Error: no property `join` for type `FilterResult!(__lambda2,
    string[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0mvwbnxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    string[] words\
    \ = split(sentence, \" \");\n    string[] result;\n    foreach(word; words)\n\
    \    {\n        if(primes.canFind(word.length))\n        {\n            result\
    \ ~= word;\n        }\n    }\n    return join(result, \" \");\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjhmgoexc.d(23): Error: undefined identifier `split`

    /tmp/tmpjhmgoexc.d(27): Error: no property `canFind` for type `immutable(int[])`

    /tmp/tmpjhmgoexc.d(32): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhmgoexc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2lg0qdkp.d(22): Error: undefined identifier `split`

    /tmp/tmp2lg0qdkp.d(26): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lg0qdkp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    string[] words\
    \ = split(sentence, \" \");\n    string result = \"\";\n    foreach(word; words)\n\
    \    {\n        if(word.length in primes)\n        {\n            result ~= word\
    \ ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n{\n\
    \    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a\
    \ test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go\
    \ for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74cmcd83.d(23): Error: undefined identifier `split`

    /tmp/tmp74cmcd83.d(27): Error: incompatible types for `(word.length) in (primes)`:
    `ulong` and `immutable(int[])`

    /tmp/tmp74cmcd83.d(32): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74cmcd83.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    auto words = split(sentence, \" \");\n    string result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm06ynt4m.d(22): Error: undefined identifier `split`

    /tmp/tmpm06ynt4m.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm06ynt4m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhsv1xq7.d(22): Error: undefined identifier `split`

    /tmp/tmplhsv1xq7.d(26): Error: undefined identifier `isPrime`

    /tmp/tmplhsv1xq7.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhsv1xq7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujzt906h.d(22): Error: undefined identifier `split`

    /tmp/tmpujzt906h.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpujzt906h.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujzt906h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.algorithm : filter, map;\n    import std.array\
    \ : array;\n    import std.conv : to;\n    import std.math : isPrime;\n    import\
    \ std.range : iota;\n    import std.string : split;\n    import std.typecons :\
    \ tuple;\n    \n    auto words = sentence.split(\" \");\n    auto words_with_lengths\
    \ = words.map!(w => tuple(w, w.length));\n    auto prime_lengths = iota(1, 100).filter!(isPrime).array;\n\
    \    auto prime_words = words_with_lengths.filter!(t => prime_lengths.canFind(t[1])).map!(t\
    \ => t[0]).join(\" \");\n    return prime_words;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr8gxluak.d(25): Error: module `std.math` import `isPrime` not found

    /tmp/tmpr8gxluak.d(33): Error: no property `join` for type `MapResult!(__lambda4,
    FilterResult!(__lambda3, MapResult!(__lambda2, string[])))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8gxluak.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2lg0qdkp.d(22): Error: undefined identifier `split`

    /tmp/tmp2lg0qdkp.d(26): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lg0qdkp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result);\n}\n\
    unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptaoutje8.d(22): Error: undefined identifier `split`

    /tmp/tmptaoutje8.d(26): Error: undefined identifier `isPrime`

    /tmp/tmptaoutje8.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptaoutje8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujzt906h.d(22): Error: undefined identifier `split`

    /tmp/tmpujzt906h.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpujzt906h.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujzt906h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiimv88pd.d(22): Error: undefined identifier `split`

    /tmp/tmpiimv88pd.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpiimv88pd.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiimv88pd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] prime_words;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            prime_words ~= word;\n        }\n    }\n    return join(prime_words,\
    \ \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxaep9ro.d(22): Error: undefined identifier `split`

    /tmp/tmpkxaep9ro.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpkxaep9ro.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxaep9ro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiimv88pd.d(22): Error: undefined identifier `split`

    /tmp/tmpiimv88pd.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpiimv88pd.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiimv88pd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    immutable words\
    \ = split(sentence, \" \");\n    string result = \"\";\n    foreach(word; words)\n\
    \    {\n        if(primes.canFind(word.length))\n        {\n            result\
    \ ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n}\nunittest\n\
    {\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is\
    \ a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"\
    go for\");\n    assert(candidate(\"there is no place available here\") == \"there\
    \ is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    );\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"\
    here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiibq5drf.d(23): Error: undefined identifier `split`

    /tmp/tmpiibq5drf.d(32): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiibq5drf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    immutable primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    immutable words\
    \ = split(sentence, \" \");\n    string result = \"\";\n    foreach(immutable\
    \ word; words)\n    {\n        if(primes.canFind(word.length))\n        {\n  \
    \          result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplgcg4n8z.d(23): Error: undefined identifier `split`

    /tmp/tmplgcg4n8z.d(32): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplgcg4n8z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    import std.algorithm : filter, map;\n    import std.conv\
    \ : to;\n    import std.range : iota;\n    import std.array : array;\n    import\
    \ std.math : isPrime;\n    import std.typecons : tuple;\n    import std.string\
    \ : split;\n    \n    auto words = sentence.split(\" \");\n    auto word_lengths\
    \ = words.map!(a => a.length);\n    auto primes = word_lengths.filter!(a => isPrime(a));\n\
    \    auto word_length_index = tuple(word_lengths.map!(a => tuple(a, word_lengths.indexOf(a))));\n\
    \    auto prime_word_length_index = word_length_index.filter!(a => isPrime(a[0]));\n\
    \    auto prime_word_index = prime_word_length_index.map!(a => a[1]);\n    auto\
    \ result = words.array.indexed.filter!(a => prime_word_index.contains(a.index)).map!(a\
    \ => a.value).join(\" \");\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n\
    \    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"\
    there is no place available here\") == \"there is no place\");\n    assert(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\"\
    ) == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0ik680z.d(26): Error: module `std.math` import `isPrime` not found

    /tmp/tmpa0ik680z.d(33): Error: no property `indexOf` for type `MapResult!(__lambda2,
    string[])`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/iteration.d(499):        instantiated
    from here: `MapResult!(__lambda4, MapResult!(__lambda2, string[]))`

    /tmp/tmpa0ik680z.d(33):        instantiated from here: `map!(MapResult!(__lambda2,
    string[]))`

    /tmp/tmpa0ik680z.d(36): Error: no property `indexed` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0ik680z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplww1vk_p.d(22): Error: undefined identifier `split`

    /tmp/tmplww1vk_p.d(26): Error: undefined identifier `isPrime`

    /tmp/tmplww1vk_p.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplww1vk_p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    auto words = split(sentence, \" \");\n    string result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppwbzfvcp.d(22): Error: undefined identifier `split`

    /tmp/tmppwbzfvcp.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppwbzfvcp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(string word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplww1vk_p.d(22): Error: undefined identifier `split`

    /tmp/tmplww1vk_p.d(26): Error: undefined identifier `isPrime`

    /tmp/tmplww1vk_p.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplww1vk_p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujzt906h.d(22): Error: undefined identifier `split`

    /tmp/tmpujzt906h.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpujzt906h.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujzt906h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string[] prime_words;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            prime_words ~= word;\n        }\n    }\n    return join(prime_words);\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprsbjb4bl.d(22): Error: undefined identifier `split`

    /tmp/tmprsbjb4bl.d(26): Error: undefined identifier `isPrime`

    /tmp/tmprsbjb4bl.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsbjb4bl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmdp3wv42.d(22): Error: undefined identifier `split`

    /tmp/tmpmdp3wv42.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpmdp3wv42.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmdp3wv42.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] prime_words;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            prime_words ~= word;\n        }\n    }\n    return join(prime_words,\
    \ \" \");\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkxaep9ro.d(22): Error: undefined identifier `split`

    /tmp/tmpkxaep9ro.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpkxaep9ro.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxaep9ro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.stripRight;\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb86ga1nu.d(22): Error: undefined identifier `split`

    /tmp/tmpb86ga1nu.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpb86ga1nu.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb86ga1nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trim();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n\
    \    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0h0m87u.d(22): Error: undefined identifier `split`

    /tmp/tmpa0h0m87u.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpa0h0m87u.d(31): Error: no property `trim` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0h0m87u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string[] result;\n\
    \    foreach(word; words)\n    {\n        if(isPrime(word.length))\n        {\n\
    \            result ~= word;\n        }\n    }\n    return join(result, \" \"\
    );\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkv90j3_.d(22): Error: undefined identifier `split`

    /tmp/tmpqkv90j3_.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpqkv90j3_.d(31): Error: undefined identifier `join`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkv90j3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trimRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp398tq6z6.d(22): Error: undefined identifier `split`

    /tmp/tmp398tq6z6.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp398tq6z6.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp398tq6z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence, \" \");\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n\
    \        {\n            result ~= word ~ \" \";\n        }\n    }\n    return\
    \ result.trimRight();\n}\nunittest\n{\n    alias candidate = words_in_sentence;\n\
    \n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"\
    lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place\
    \ available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am\
    \ Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"\
    go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"\
    here is\") == \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r0ok8uq.d(22): Error: undefined identifier `split`

    /tmp/tmp5r0ok8uq.d(26): Error: undefined identifier `isPrime`

    /tmp/tmp5r0ok8uq.d(31): Error: no property `trimRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r0ok8uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight();\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkdafdfj.d(22): Error: undefined identifier `split`

    /tmp/tmpfkdafdfj.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpfkdafdfj.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkdafdfj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a string\
    \ representing a sentence,\n    the sentence contains some words separated by\
    \ a space,\n    and you have to return a string that contains the words from the\
    \ original sentence,\n    whose lengths are prime numbers,\n    the order of the\
    \ words in the new string should be the same as the original one.\n\n    Example\
    \ 1:\n    \n    Example 2:\n        \n    Constraints:\n        * 1 <= len(sentence)\
    \ <= 100\n        * sentence contains only letters\n    \n*/\nstring words_in_sentence(string\
    \ sentence) \n{\n    string[] words = split(sentence);\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        if(isPrime(word.length))\n     \
    \   {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.stripRight;\n\
    }\nunittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"\
    This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\")\
    \ == \"go for\");\n    assert(candidate(\"there is no place available here\")\
    \ == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"\
    Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n  \
    \  assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") ==\
    \ \"is\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemz7ctqk.d(22): Error: undefined identifier `split`

    /tmp/tmpemz7ctqk.d(26): Error: undefined identifier `isPrime`

    /tmp/tmpemz7ctqk.d(31): Error: no property `stripRight` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemz7ctqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163918
