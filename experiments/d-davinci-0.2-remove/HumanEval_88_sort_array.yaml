name: HumanEval_88_sort_array
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
  \ integers, return a copy of the given array after sorting,\n    you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n    or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n\n    Note:\n    * don't change the given array.\n\n  \
  \  Examples:\n                    \n*/\nlong[] sort_array(long[] array) \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
  \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
  \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
  \ 21L, 14L, 11L]);\n}\nvoid main(){}"
completions: ["{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array.length == 2)\n    {\n        if\
    \ (array[0] > array[1])\n        {\n            long temp = array[0];\n      \
    \      array[0] = array[1];\n            array[1] = temp;\n        }\n       \
    \ return array;\n    }\n    long[] result = new long[array.length];\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        long[] temp = array.dup;\n\
    \        temp.sort!((a, b) => a > b);\n        result = temp;\n    }\n    else\n\
    \    {\n        long[] temp = array.dup;\n        temp.sort!((a, b) => a < b);\n\
    \        result = temp;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[array.length];\n    if (array.length == 0)\n        return result;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if ((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        result = array.dup;\n        result.sort!((a, b) =>\
    \ a > b);\n    }\n    else\n    {\n        result = array.dup;\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    auto result = array.dup;\n\
    \    auto sum = array[0] + array[$-1];\n    if (sum % 2 == 0)\n    {\n       \
    \ result.sort!((a, b) => b - a);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a - b);\n    }\n    return result;\n}", "{\n    long[] result = array.dup;\n\
    \    long sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n  \
    \  {\n        result.sort!((a, b) => b - a);\n    }\n    else\n    {\n       \
    \ result.sort!((a, b) => a - b);\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    if (array.length == 0) return result;\n\
    \    if (array.length == 1) return array;\n    if (array.length == 2)\n    {\n\
    \        if (array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n    {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n   \
    \ auto result = array.dup;\n    if ((result[0] + result[$-1]) % 2 == 0)\n    {\n\
    \        result.sort!((a, b) => b < a);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    auto result = array.dup;\n\
    \    auto sum = array[0] + array[$-1];\n    if (sum % 2 == 0)\n    {\n       \
    \ sort!((a, b) => a > b)(result);\n    }\n    else\n    {\n        sort!((a, b)\
    \ => a < b)(result);\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[array.length];\n    long sum = array[0] + array[array.length - 1];\n  \
    \  if (sum % 2 == 0)\n    {\n        sort(array, (a, b) => a > b);\n    }\n  \
    \  else\n    {\n        sort(array, (a, b) => a < b);\n    }\n    return array;\n\
    }", "{\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    if(array.length\
    \ == 0)\n        return result;\n    if(array.length == 1)\n        return array;\n\
    \    if(array.length == 2)\n    {\n        if(array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    long sum\
    \ = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n       \
    \ array.sort!((a, b) => b < a);\n        return array;\n    }\n    else\n    {\n\
    \        array.sort!((a, b) => a < b);\n        return array;\n    }\n}", "{\n\
    \    long[] copy = array.dup;\n    long first = copy[0];\n    long last = copy[copy.length\
    \ - 1];\n    long sum = first + last;\n    if(sum % 2 == 0)\n    {\n        sort(copy,\
    \ (a, b) => b - a);\n    }\n    else\n    {\n        sort(copy);\n    }\n    return\
    \ copy;\n}", "{\n    long[] result = new long[array.length];\n    long sum = array[0]\
    \ + array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n        result = array.dup.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result = array.dup.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    auto result = array.dup;\n\
    \    if (array.length == 0)\n        return result;\n    if ((array[0] + array[$\
    \ - 1]) % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    long[] result = array.dup;\n\
    \    bool isOdd = (result[0] + result[$-1]) % 2 == 1;\n    if (isOdd)\n    {\n\
    \        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    int index = 0;\n    long sum = array[0] + array[array.length - 1];\n    if\
    \ (sum % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n    }\n    else\n\
    \    {\n        array.sort!((a, b) => a - b);\n    }\n    foreach (i; array)\n\
    \    {\n        result[index] = i;\n        index++;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    if(array.length == 0)\
    \ return result;\n    auto sum = array[0] + array[array.length - 1];\n    if(sum\
    \ % 2 == 0)\n    {\n        sort(array.dup, (a, b) => b - a);\n    }\n    else\n\
    \    {\n        sort(array.dup);\n    }\n    return array;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    int start = 0;\n    int end = array.length\
    \ - 1;\n    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        foreach(i; array)\n        {\n            if (i % 2\
    \ == 1)\n            {\n                result[start] = i;\n                start++;\n\
    \            }\n            else\n            {\n                result[end] =\
    \ i;\n                end--;\n            }\n        }\n    }\n    else\n    {\n\
    \        foreach(i; array)\n        {\n            if (i % 2 == 1)\n         \
    \   {\n                result[end] = i;\n                end--;\n            }\n\
    \            else\n            {\n                result[start] = i;\n       \
    \         start++;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = array.dup;\n    if (array.length == 0)\n        return result;\n\
    \    bool isOdd = (array[0] + array[$ - 1]) % 2 == 1;\n    if (isOdd)\n      \
    \  sort!((a, b) => a > b)(result);\n    else\n        sort!((a, b) => a < b)(result);\n\
    \    return result;\n}", "{\n    auto sum = array[0] + array[$-1];\n    auto result\
    \ = array.dup;\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => a\
    \ > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n\
    \    return result;\n}", "{\n    long[] result = array.dup;\n    if (array.length\
    \ == 0)\n        return result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n \
    \       result.sort!((a, b) => a > b);\n    else\n        result.sort!((a, b)\
    \ => a < b);\n    return result;\n}", "{\n    if (array.length == 0) return array;\n\
    \    if (array.length == 1) return array;\n    long[] result = new long[array.length];\n\
    \    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        auto sort_result = array.sort!((a, b) => a > b);\n        foreach\
    \ (i, v; sort_result)\n        {\n            result[i] = v;\n        }\n    }\n\
    \    else\n    {\n        auto sort_result = array.sort!((a, b) => a < b);\n \
    \       foreach (i, v; sort_result)\n        {\n            result[i] = v;\n \
    \       }\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    int start = 0;\n    int end = array.length - 1;\n    bool isOdd = (array[0]\
    \ + array[array.length - 1]) % 2 == 1;\n    foreach(i; 0 .. array.length)\n  \
    \  {\n        if(isOdd)\n        {\n            if(array[i] % 2 == 1)\n      \
    \      {\n                result[start] = array[i];\n                start++;\n\
    \            }\n            else\n            {\n                result[end] =\
    \ array[i];\n                end--;\n            }\n        }\n        else\n\
    \        {\n            if(array[i] % 2 == 1)\n            {\n               \
    \ result[end] = array[i];\n                end--;\n            }\n           \
    \ else\n            {\n                result[start] = array[i];\n           \
    \     start++;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto sum = array[0] + array[$-1];\n    auto sort_order = (sum % 2 == 0) ?\
    \ Sort.descending : Sort.ascending;\n    return array.sort(sort_order);\n}", "{\n\
    \    long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    int k = 0;\n    bool isOdd = (array[0] + array[array.length - 1])\
    \ % 2 == 1;\n    while (i <= j)\n    {\n        if (isOdd)\n        {\n      \
    \      if (array[i] % 2 == 1)\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n            else\n            {\n      \
    \          result[k] = array[j];\n                j--;\n            }\n      \
    \  }\n        else\n        {\n            if (array[i] % 2 == 1)\n          \
    \  {\n                result[k] = array[j];\n                j--;\n          \
    \  }\n            else\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n        }\n        k++;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    if (array.length\
    \ == 0)\n        return result;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            result[0] = array[1];\n            result[1] = array[0];\n  \
    \      }\n        else\n        {\n            result[0] = array[0];\n       \
    \     result[1] = array[1];\n        }\n        return result;\n    }\n    long\
    \ sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n  \
    \      result = array.dup;\n        result.sort(std.math.greater);\n    }\n  \
    \  else\n    {\n        result = array.dup;\n        result.sort;\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[array.length];\n    auto\
    \ sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n  \
    \      sort(array.dup, (a, b) => b - a);\n    }\n    else\n    {\n        sort(array.dup);\n\
    \    }\n    return array;\n}", "{\n    auto result = array.dup;\n    auto sum\
    \ = array[0] + array[$-1];\n    if (sum % 2 == 0)\n    {\n        sort!((a, b)\
    \ => a > b)(result);\n    }\n    else\n    {\n        sort!((a, b) => a < b)(result);\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n\
    \    {\n        result = array.dup.sort;\n    }\n    else\n    {\n        result\
    \ = array.dup.sort.reverse;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = array.dup;\n    if (array.length == 0)\n        return result;\n    if (array[0]\
    \ + array[$ - 1] % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n\
    \        result.sort!((a, b) => a < b);\n    return result;\n}", "{\n    long[]\
    \ result = array.dup;\n    long sum = array[0] + array[array.length - 1];\n  \
    \  if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n \
    \   else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }", "{\n    long[] result = array.dup;\n    int first = 0;\n    int last = array.length\
    \ - 1;\n    bool isOdd = (array[first] + array[last]) % 2 == 1;\n    while (first\
    \ < last)\n    {\n        if (isOdd)\n        {\n            if (result[first]\
    \ % 2 == 0)\n            {\n                while (first < last && result[last]\
    \ % 2 == 0)\n                {\n                    last--;\n                }\n\
    \                if (first < last)\n                {\n                    long\
    \ temp = result[first];\n                    result[first] = result[last];\n \
    \                   result[last] = temp;\n                }\n            }\n \
    \       }\n        else\n        {\n            if (result[first] % 2 == 1)\n\
    \            {\n                while (first < last && result[last] % 2 == 1)\n\
    \                {\n                    last--;\n                }\n         \
    \       if (first < last)\n                {\n                    long temp =\
    \ result[first];\n                    result[first] = result[last];\n        \
    \            result[last] = temp;\n                }\n            }\n        }\n\
    \        first++;\n    }\n    if (isOdd)\n    {\n        result[0 .. array.length]\
    \ = result[0 .. array.length].sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result[0 .. array.length] = result[0 .. array.length].sort!((a, b) =>\
    \ a < b);\n    }\n    return result;\n}", "{\n    auto result = array.dup;\n \
    \   if(array.length == 0) return result;\n    if(array.length == 1) return result;\n\
    \    if(array.length == 2)\n    {\n        if(array[0] > array[1])\n        {\n\
    \            auto temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return result;\n    }\n    auto sum\
    \ = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n       \
    \ result.sort!((a, b) => b < a);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    auto result = array.dup;\n\
    \    auto sum = array[0] + array[$-1];\n    if (sum % 2 == 0)\n    {\n       \
    \ sort!((a, b) => b < a)(result);\n    }\n    else\n    {\n        sort!((a, b)\
    \ => a < b)(result);\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[array.length];\n    int start = 0;\n    int end = array.length - 1;\n \
    \   bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n\
    \    {\n        foreach(i; array)\n        {\n            if (i % 2 == 1)\n  \
    \          {\n                result[start] = i;\n                start++;\n \
    \           }\n            else\n            {\n                result[end] =\
    \ i;\n                end--;\n            }\n        }\n    }\n    else\n    {\n\
    \        foreach(i; array)\n        {\n            if (i % 2 == 1)\n         \
    \   {\n                result[end] = i;\n                end--;\n            }\n\
    \            else\n            {\n                result[start] = i;\n       \
    \         start++;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = array.dup;\n    int first = 0;\n    int last = array.length\
    \ - 1;\n    bool isOdd = (array[first] + array[last]) % 2 == 1;\n    while (first\
    \ < last)\n    {\n        if (isOdd)\n        {\n            if (result[first]\
    \ % 2 == 0)\n            {\n                first++;\n                continue;\n\
    \            }\n            if (result[last] % 2 == 1)\n            {\n      \
    \          last--;\n                continue;\n            }\n            long\
    \ temp = result[first];\n            result[first] = result[last];\n         \
    \   result[last] = temp;\n            first++;\n            last--;\n        }\n\
    \        else\n        {\n            if (result[first] % 2 == 1)\n          \
    \  {\n                first++;\n                continue;\n            }\n   \
    \         if (result[last] % 2 == 0)\n            {\n                last--;\n\
    \                continue;\n            }\n            long temp = result[first];\n\
    \            result[first] = result[last];\n            result[last] = temp;\n\
    \            first++;\n            last--;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp1 = new long[array.length];\n    long[] temp2 = new long[array.length];\n\
    \    long[] temp3 = new long[array.length];\n    long[] temp4 = new long[array.length];\n\
    \    long[] temp5 = new long[array.length];\n    long[] temp6 = new long[array.length];\n\
    \    long[] temp7 = new long[array.length];\n    long[] temp8 = new long[array.length];\n\
    \    long[] temp9 = new long[array.length];\n    long[] temp10 = new long[array.length];\n\
    \    long[] temp11 = new long[array.length];\n    long[] temp12 = new long[array.length];\n\
    \    long[] temp13 = new long[array.length];\n    long[] temp14 = new long[array.length];\n\
    \    long[] temp15 = new long[array.length];\n    long[] temp16 = new long[array.length];\n\
    \    long[] temp17 = new long[array.length];\n    long[] temp18 = new long[array.length];\n\
    \    long[] temp19 = new long[array.length];\n    long[] temp20 = new long[array.length];\n\
    \    long[] temp21 = new long[array.length];\n    long[] temp22 = new long[array.length];\n\
    \    long[] temp23 = new long[array.length];\n    long[] temp24 = new long[array.length];\n\
    \    long[] temp25 = new long[array.length];\n    long[] temp26 = new long[array.length];\n\
    \    long[] temp27 = new long[array.length];\n    long[] temp28 = new long[array.length];\n\
    \    long[] temp29 = new long[array.length];\n    long[] temp30 = new long[array.length];\n\
    \    long[] temp31 = new long[array.length];\n    long[] temp32 = new long[array.length];\n\
    \    long[] temp33 = new long[array.length];\n    long[] temp34 = new long[array.length];\n\
    \    long[] temp35 = new", "{\n    long[] result = array.dup;\n    if(array.length\
    \ == 0)\n        return result;\n    if((array[0] + array[$-1]) % 2 == 0)\n  \
    \      result.sort!((a, b) => a > b);\n    else\n        result.sort!((a, b) =>\
    \ a < b);\n    return result;\n}", "{\n    long[] result = array.dup;\n    if(array.length\
    \ == 0) return result;\n    if(array.length == 1) return result;\n    long sum\
    \ = array[0] + array[array.length-1];\n    if(sum % 2 == 0)\n    {\n        result.sort!((a,b)\
    \ => a > b);\n    }\n    else\n    {\n        result.sort!((a,b) => a < b);\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n  \
    \  {\n        sort(array, (a, b) => b - a);\n    }\n    else\n    {\n        sort(array);\n\
    \    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if(array.length == 0)\n        return result;\n    long sum = array[0] +\
    \ array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n        sort!((a, b)\
    \ => a > b)(array);\n    }\n    else\n    {\n        sort!((a, b) => a < b)(array);\n\
    \    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        array.sort!((a, b) => b < a);\n    }\n    else\n    {\n       \
    \ array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    if(array.length == 0) return result;\n\
    \    if(array.length == 1) return array;\n    if(array.length == 2)\n    {\n \
    \       if(array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        array = array.sort(std.math.comparator);\n    }\n  \
    \  else\n    {\n        array = array.sort(std.math.comparator!\"a > b\");\n \
    \   }\n    return array;\n}", "{\n    long[] result = array.dup;\n    bool isOdd\
    \ = (result[0] + result[$-1]) % 2 == 1;\n    if (isOdd)\n    {\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n\
    \    }\n    return result;\n}", "{\n    long[] result = array.dup;\n    if (result.length\
    \ > 1)\n    {\n        long sum = result[0] + result[$ - 1];\n        if (sum\
    \ % 2 == 0)\n        {\n            result.sort!((a, b) => a > b);\n        }\n\
    \        else\n        {\n            result.sort!((a, b) => a < b);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long[] temp = new long[array.length];\n    temp = array.dup;\n    temp.sort;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n    {\n        for (int\
    \ i = 0; i < array.length; i++)\n        {\n            result[i] = temp[array.length\
    \ - 1 - i];\n        }\n    }\n    else\n    {\n        result = temp;\n    }\n\
    \    return result;\n}", "{\n    auto result = array.dup;\n    auto sum = array[0]\
    \ + array[$-1];\n    if (sum % 2 == 0)\n    {\n        sort!((a, b) => a > b)(result);\n\
    \    }\n    else\n    {\n        sort!((a, b) => a < b)(result);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = array.dup;\n    auto sum = array[0] + array[$-1];\n\
    \    if(sum % 2 == 0)\n    {\n        sort(result.ptr, result.ptr + result.length,\
    \ std.algorithm.greater!long);\n    }\n    else\n    {\n        sort(result.ptr,\
    \ result.ptr + result.length);\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    if(array.length == 0) return result;\n\
    \    if(array.length == 1) return array;\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array.ptr, array.ptr + array.length,\
    \ std.greater!long());\n    }\n    else\n    {\n        sort(array.ptr, array.ptr\
    \ + array.length);\n    }\n    return array;\n}", "{\n    long[] result = array.dup;\n\
    \    if (result.length == 0) return result;\n    if (result.length == 1) return\
    \ result;\n    if (result.length == 2)\n    {\n        if (result[0] > result[1])\n\
    \        {\n            long temp = result[0];\n            result[0] = result[1];\n\
    \            result[1] = temp;\n        }\n        return result;\n    }\n   \
    \ long sum = result[0] + result[result.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        sort(result);\n    }\n    else\n    {\n        sort(result, (a,\
    \ b) => b - a);\n    }\n    return result;\n}", "{\n    long[] result = array.dup;\n\
    \    if(result.length == 0) return result;\n    bool isOdd = (result[0] + result[$-1])\
    \ % 2 == 1;\n    if(isOdd)\n    {\n        result.sort!((a, b) => a > b);\n  \
    \  }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    long[] evens\
    \ = array.filter!(a => a % 2 == 0).sort!((a, b) => a > b);\n    long[] odds =\
    \ array.filter!(a => a % 2 != 0).sort!((a, b) => a < b);\n    int evensIndex =\
    \ 0;\n    int oddsIndex = 0;\n    for (int i = 0; i < array.length; i++)\n   \
    \ {\n        if (array[i] % 2 == 0)\n        {\n            result[i] = evens[evensIndex];\n\
    \            evensIndex++;\n        }\n        else\n        {\n            result[i]\
    \ = odds[oddsIndex];\n            oddsIndex++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n        result.sort!((a,\
    \ b) => a < b);\n    else\n        result.sort!((a, b) => a > b);\n    return\
    \ result;\n}", "{\n    auto result = array.dup;\n    auto sum = result[0] + result[$-1];\n\
    \    if(sum % 2 == 0)\n    {\n        sort(result, (a, b) => b - a);\n    }\n\
    \    else\n    {\n        sort(result);\n    }\n    return result;\n}", "{\n \
    \   long[] result = array.dup;\n    int first = 0;\n    int last = array.length\
    \ - 1;\n    int sum = array[first] + array[last];\n    bool isOdd = sum % 2 ==\
    \ 1;\n    if (isOdd)\n    {\n        result.sort!((a, b) => a > b);\n    }\n \
    \   else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    auto sum = array[0] +\
    \ array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.ptr,\
    \ array.ptr + array.length, std.greater!long());\n    }\n    else\n    {\n   \
    \     sort(array.ptr, array.ptr + array.length);\n    }\n    return array;\n}",
  "{\n    long[] result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if((array[0] + array[$-1]) % 2 == 0)\n        result.sort!((a, b) => b -\
    \ a);\n    else\n        result.sort!((a, b) => a - b);\n    return result;\n}",
  "{\n    long[] result = array.dup;\n    if(result.length == 0)\n        return result;\n\
    \    if((result[0] + result[$-1]) % 2 == 0)\n        result.sort!((a, b) => b\
    \ - a);\n    else\n        result.sort!((a, b) => a - b);\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    if (array.length == 0)\n\
    \        return result;\n    if (array.length == 1)\n        return array;\n \
    \   if (array.length == 2)\n    {\n        if (array[0] > array[1])\n        {\n\
    \            long temp = array[0];\n            array[0] = array[1];\n       \
    \     array[1] = temp;\n        }\n        return array;\n    }\n    long first\
    \ = array[0];\n    long last = array[array.length - 1];\n    if ((first + last)\
    \ % 2 == 0)\n    {\n        array.sort!((a, b) => a > b);\n        return array;\n\
    \    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n        return\
    \ array;\n    }\n}", "{\n    long[] result = new long[array.length];\n    long[]\
    \ temp = new long[array.length];\n    long[] temp2 = new long[array.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n\
    \    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n\
    \    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk\
    \ = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int xx = 0;\n \
    \   int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc\
    \ = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n \
    \   int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int xxx = 0;\n    int yyy\
    \ = 0;\n    int zzz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc = 0;\n\
    \    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n    int\
    \ hhh = 0;\n    int iiii = 0;\n    int jjjj = 0;\n    int kkkk = 0;\n    int llll\
    \ = 0;\n    int mmmm = 0;\n    int nnnn = 0;\n    int xxxx = 0;\n    int yyyy\
    \ = 0;\n    int zzzz = 0;\n    int aaaa = 0;\n   ", "{\n    auto result = array.dup;\n\
    \    auto first = array[0];\n    auto last = array[$-1];\n    auto sum = first\
    \ + last;\n    auto isOdd = sum % 2 == 1;\n    if (isOdd)\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    else\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    return result;\n}", "{\n    auto sum = array[0] + array[$-1];\n  \
    \  auto result = array.dup;\n    if (sum % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b > a);\n    }\n    else\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    return result;\n}", "{\n    long[] result = array.dup;\n    if ((result[0]\
    \ + result[result.length - 1]) % 2 == 0)\n    {\n        result.sort!((a, b) =>\
    \ b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n  \
    \  }\n    return result;\n}", "{\n    long[] result = array.dup;\n    if(array.length\
    \ == 0) return result;\n    if(array.length == 1) return result;\n    if(array.length\
    \ == 2)\n    {\n        if(array[0] > array[1])\n        {\n            long temp\
    \ = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return result;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}",
  "{\n    long[] result = array.dup;\n    if (array.length == 0)\n        return result;\n\
    \    if ((array[0] + array[$ - 1]) % 2 == 0)\n        result.sort!((a, b) => a\
    \ < b);\n    else\n        result.sort!((a, b) => a > b);\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    int index = 0;\n    int\
    \ sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n   \
    \     array.sort!((a, b) => b < a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n    }\n    foreach(i; array)\n    {\n        result[index] =\
    \ i;\n        index++;\n    }\n    return result;\n}", "{\n    long[] result =\
    \ array.dup;\n    if (array.length == 0)\n        return result;\n    if (array[0]\
    \ + array[$ - 1] % 2 == 0)\n        sort!((a, b) => a > b)(result);\n    else\n\
    \        sort!((a, b) => a < b)(result);\n    return result;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array, (a, b) => b - a);\n\
    \    }\n    else\n    {\n        sort(array);\n    }\n    return array;\n}", "{\n\
    \    long[] result = new long[array.length];\n    if(array.length == 0) return\
    \ result;\n    if(array.length == 1) return array;\n    if(array.length == 2)\n\
    \    {\n        if(array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        result = array.dup;\n        result.sort!((a, b) =>\
    \ a > b);\n    }\n    else\n    {\n        result = array.dup;\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if (array.length == 0)\n        return result;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            result[0] = array[1];\n            result[1]\
    \ = array[0];\n        }\n        else\n        {\n            result[0] = array[0];\n\
    \            result[1] = array[1];\n        }\n        return result;\n    }\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        long[]\
    \ temp = new long[array.length];\n        for (int i = 0; i < array.length; i++)\n\
    \            temp[i] = array[i];\n        temp.sort();\n        for (int i = 0;\
    \ i < array.length; i++)\n            result[i] = temp[array.length - 1 - i];\n\
    \    }\n    else\n    {\n        long[] temp = new long[array.length];\n     \
    \   for (int i = 0; i < array.length; i++)\n            temp[i] = array[i];\n\
    \        temp.sort();\n        for (int i = 0; i < array.length; i++)\n      \
    \      result[i] = temp[i];\n    }\n    return result;\n}", "{\n    auto result\
    \ = array.dup;\n    if (array.length > 1)\n    {\n        if ((array[0] + array[$\
    \ - 1]) % 2 == 0)\n        {\n            result.sort!((a, b) => a > b);\n   \
    \     }\n        else\n        {\n            result.sort!((a, b) => a < b);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n       \
    \ array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    if (array.length == 0)\n        return\
    \ result;\n    if (array.length == 1)\n        return array;\n    if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        result = array.sort!((a, b) => a > b);\n   \
    \ }\n    else\n    {\n        result = array.sort!((a, b) => a < b);\n    }\n\
    \    return result;\n}", "{\n    auto a = array.dup;\n    auto s = a.front + a.back;\n\
    \    if(s % 2 == 0)\n        a.sort!((a, b) => a > b);\n    else\n        a.sort!((a,\
    \ b) => a < b);\n    return a;\n}", "{\n    long[] result = new long[array.length];\n\
    \    int index = 0;\n    if(array.length == 0)\n        return result;\n    if((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        sort(array);\n        foreach(i;\
    \ array)\n            result[index++] = i;\n    }\n    else\n    {\n        sort(array);\n\
    \        foreach(i; array)\n            result[index++] = i;\n        reverse(result);\n\
    \    }\n    return result;\n}", "{\n    long[] result = array.dup;\n    long sum\
    \ = array[0] + array[$-1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    auto sum = array[0] + array[array.length - 1];\n    auto isOdd = sum % 2\
    \ == 1;\n    if (isOdd)\n    {\n        sort(array);\n    }\n    else\n    {\n\
    \        sort(array, (a, b) => a > b);\n    }\n    return array;\n}", "{\n   \
    \ long[] result = new long[array.length];\n    int sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result = array.dup.sort!((a, b)\
    \ => a > b);\n    }\n    else\n    {\n        result = array.dup.sort!((a, b)\
    \ => a < b);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    int sum = (int)(array[0] + array[array.length - 1]);\n    if (sum % 2 ==\
    \ 0)\n    {\n        sort(array, (a, b) => b - a);\n    }\n    else\n    {\n \
    \       sort(array);\n    }\n    return array;\n}", "{\n    long[] result = new\
    \ long[array.length];\n    int start = 0;\n    int end = array.length - 1;\n \
    \   bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n\
    \    {\n        foreach(i; array)\n        {\n            if (i % 2 == 1)\n  \
    \          {\n                result[start] = i;\n                start++;\n \
    \           }\n            else\n            {\n                result[end] =\
    \ i;\n                end--;\n            }\n        }\n    }\n    else\n    {\n\
    \        foreach(i; array)\n        {\n            if (i % 2 == 1)\n         \
    \   {\n                result[end] = i;\n                end--;\n            }\n\
    \            else\n            {\n                result[start] = i;\n       \
    \         start++;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = array.dup;\n    if (array.length == 0)\n        return result;\n\
    \    if (array[0] + array[$ - 1] % 2 == 0)\n        sort!((a, b) => a > b)(result);\n\
    \    else\n        sort!((a, b) => a < b)(result);\n    return result;\n}", "{\n\
    \    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    array.dup.sort;\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        array.reverse;\n\
    \    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long[] temp = new long[array.length];\n    temp = array.dup;\n    temp.sort;\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        for(int\
    \ i = 0; i < array.length; i++)\n        {\n            result[i] = temp[array.length\
    \ - 1 - i];\n        }\n    }\n    else\n    {\n        result = temp;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[array.length];\n   \
    \ if(array.length == 0)\n        return result;\n    if(array.length == 1)\n \
    \       return array;\n    if(array.length == 2)\n    {\n        if(array[0] >\
    \ array[1])\n        {\n            result[0] = array[1];\n            result[1]\
    \ = array[0];\n        }\n        else\n        {\n            result[0] = array[0];\n\
    \            result[1] = array[1];\n        }\n        return result;\n    }\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        long[]\
    \ temp = new long[array.length];\n        for(int i = 0; i < array.length; i++)\n\
    \            temp[i] = array[i];\n        temp.sort();\n        for(int i = 0;\
    \ i < array.length; i++)\n            result[i] = temp[array.length - 1 - i];\n\
    \    }\n    else\n    {\n        long[] temp = new long[array.length];\n     \
    \   for(int i = 0; i < array.length; i++)\n            temp[i] = array[i];\n \
    \       temp.sort();\n        for(int i = 0; i < array.length; i++)\n        \
    \    result[i] = temp[i];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[array.length];\n    long[] temp = new long[array.length];\n    long[]\
    \ temp2 = new long[array.length];\n    long[] temp3 = new long[array.length];\n\
    \    long[] temp4 = new long[array.length];\n    long[] temp5 = new long[array.length];\n\
    \    long[] temp6 = new long[array.length];\n    long[] temp7 = new long[array.length];\n\
    \    long[] temp8 = new long[array.length];\n    long[] temp9 = new long[array.length];\n\
    \    long[] temp10 = new long[array.length];\n    long[] temp11 = new long[array.length];\n\
    \    long[] temp12 = new long[array.length];\n    long[] temp13 = new long[array.length];\n\
    \    long[] temp14 = new long[array.length];\n    long[] temp15 = new long[array.length];\n\
    \    long[] temp16 = new long[array.length];\n    long[] temp17 = new long[array.length];\n\
    \    long[] temp18 = new long[array.length];\n    long[] temp19 = new long[array.length];\n\
    \    long[] temp20 = new long[array.length];\n    long[] temp21 = new long[array.length];\n\
    \    long[] temp22 = new long[array.length];\n    long[] temp23 = new long[array.length];\n\
    \    long[] temp24 = new long[array.length];\n    long[] temp25 = new long[array.length];\n\
    \    long[] temp26 = new long[array.length];\n    long[] temp27 = new long[array.length];\n\
    \    long[] temp28 = new long[array.length];\n    long[] temp29 = new long[array.length];\n\
    \    long[] temp30 = new long[array.length];\n    long[] temp31 = new long[array.length];\n\
    \    long[] temp32 = new long[array.length];\n    long[] temp33 = new long[array.length];\n\
    \    long[] temp34 = new long[array.length];\n    long[] temp35 = new long[array.length];\n\
    \    long[] temp36 = new", "{\n    long[] result = new long[array.length];\n \
    \   auto sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n  \
    \  {\n        sort(array.dup, (a, b) => a > b);\n    }\n    else\n    {\n    \
    \    sort(array.dup, (a, b) => a < b);\n    }\n    return array;\n}", "{\n   \
    \ long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    int k = 0;\n    int sum = array[0] + array[array.length - 1];\n  \
    \  if (sum % 2 == 0)\n    {\n        while (i <= j)\n        {\n            if\
    \ (array[i] > array[j])\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n            else\n            {\n      \
    \          result[k] = array[j];\n                j--;\n            }\n      \
    \      k++;\n        }\n    }\n    else\n    {\n        while (i <= j)\n     \
    \   {\n            if (array[i] < array[j])\n            {\n                result[k]\
    \ = array[i];\n                i++;\n            }\n            else\n       \
    \     {\n                result[k] = array[j];\n                j--;\n       \
    \     }\n            k++;\n        }\n    }\n    return result;\n}", "{\n    auto\
    \ result = array.dup;\n    auto sum = array[0] + array[$-1];\n    auto isOdd =\
    \ sum % 2 == 1;\n    if (isOdd)\n    {\n        sort!((a, b) => a < b)(result);\n\
    \    }\n    else\n    {\n        sort!((a, b) => a > b)(result);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    if (array.length\
    \ == 0)\n        return result;\n    if (array.length == 1)\n        return array;\n\
    \    if (array.length == 2)\n    {\n        if (array[0] > array[1])\n       \
    \ {\n            result[0] = array[1];\n            result[1] = array[0];\n  \
    \      }\n        else\n        {\n            result[0] = array[0];\n       \
    \     result[1] = array[1];\n        }\n        return result;\n    }\n    if\
    \ ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        result = array.dup;\n\
    \        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result\
    \ = array.dup;\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }", "{\n    long[] result = array.dup;\n    long sum = array[0] + array[$-1];\n\
    \    if(sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }", "{\n    long[] result = array.dup;\n    int sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    auto sum =\
    \ array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array.dup,\
    \ (a, b) => b - a);\n    }\n    else\n    {\n        sort(array.dup);\n    }\n\
    \    return array;\n}", "{\n    long[] result = new long[array.length];\n    int\
    \ sum = (int)(array[0] + array[array.length - 1]);\n    if(sum % 2 == 0)\n   \
    \ {\n        result = array.dup.sort!((a, b) => a > b);\n    }\n    else\n   \
    \ {\n        result = array.dup.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    long[] temp2 = new long[array.length];\n    long[] temp3 = new long[array.length];\n\
    \    long[] temp4 = new long[array.length];\n    long[] temp5 = new long[array.length];\n\
    \    long[] temp6 = new long[array.length];\n    long[] temp7 = new long[array.length];\n\
    \    long[] temp8 = new long[array.length];\n    long[] temp9 = new long[array.length];\n\
    \    long[] temp10 = new long[array.length];\n    long[] temp11 = new long[array.length];\n\
    \    long[] temp12 = new long[array.length];\n    long[] temp13 = new long[array.length];\n\
    \    long[] temp14 = new long[array.length];\n    long[] temp15 = new long[array.length];\n\
    \    long[] temp16 = new long[array.length];\n    long[] temp17 = new long[array.length];\n\
    \    long[] temp18 = new long[array.length];\n    long[] temp19 = new long[array.length];\n\
    \    long[] temp20 = new long[array.length];\n    long[] temp21 = new long[array.length];\n\
    \    long[] temp22 = new long[array.length];\n    long[] temp23 = new long[array.length];\n\
    \    long[] temp24 = new long[array.length];\n    long[] temp25 = new long[array.length];\n\
    \    long[] temp26 = new long[array.length];\n    long[] temp27 = new long[array.length];\n\
    \    long[] temp28 = new long[array.length];\n    long[] temp29 = new long[array.length];\n\
    \    long[] temp30 = new long[array.length];\n    long[] temp31 = new long[array.length];\n\
    \    long[] temp32 = new long[array.length];\n    long[] temp33 = new long[array.length];\n\
    \    long[] temp34 = new long[array.length];\n    long[] temp35 = new long[array.length];\n\
    \    long[] temp36 = new", "{\n    long[] result = array.dup;\n    if ((array[0]\
    \ + array[$-1]) % 2 == 0)\n    {\n        sort(result, (a, b) => a > b);\n   \
    \ }\n    else\n    {\n        sort(result, (a, b) => a < b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    if (array.length\
    \ == 0) return result;\n    if (array.length == 1) return array;\n    if (array.length\
    \ == 2)\n    {\n        if ((array[0] + array[1]) % 2 == 0)\n        {\n     \
    \       result[0] = array[1];\n            result[1] = array[0];\n        }\n\
    \        else\n        {\n            result[0] = array[0];\n            result[1]\
    \ = array[1];\n        }\n        return result;\n    }\n    long[] odd = new\
    \ long[array.length];\n    long[] even = new long[array.length];\n    int odd_index\
    \ = 0;\n    int even_index = 0;\n    for (int i = 0; i < array.length; i++)\n\
    \    {\n        if (array[i] % 2 == 0)\n        {\n            even[even_index]\
    \ = array[i];\n            even_index++;\n        }\n        else\n        {\n\
    \            odd[odd_index] = array[i];\n            odd_index++;\n        }\n\
    \    }\n    even = even[0..even_index];\n    odd = odd[0..odd_index];\n    even.sort();\n\
    \    odd.sort();\n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n   \
    \ {\n        even = even.reverse;\n    }\n    else\n    {\n        odd = odd.reverse;\n\
    \    }\n    int index = 0;\n    for (int i = 0; i < odd.length; i++)\n    {\n\
    \        result[index] = odd[i];\n        index++;\n    }\n    for (int i = 0;\
    \ i < even.length; i++)\n    {\n        result[index] = even[i];\n        index++;\n\
    \    }\n    return result;\n}", "{\n    long[] result = array.dup;\n    int first\
    \ = 0;\n    int last = array.length - 1;\n    bool isOdd = (array[first] + array[last])\
    \ % 2 == 1;\n    while (first < last)\n    {\n        if (isOdd)\n        {\n\
    \            if (result[first] % 2 == 0)\n            {\n                if (result[last]\
    \ % 2 == 1)\n                {\n                    long temp = result[first];\n\
    \                    result[first] = result[last];\n                    result[last]\
    \ = temp;\n                    first++;\n                    last--;\n       \
    \         }\n                else\n                {\n                    last--;\n\
    \                }\n            }\n            else\n            {\n         \
    \       first++;\n            }\n        }\n        else\n        {\n        \
    \    if (result[first] % 2 == 1)\n            {\n                if (result[last]\
    \ % 2 == 0)\n                {\n                    long temp = result[first];\n\
    \                    result[first] = result[last];\n                    result[last]\
    \ = temp;\n                    first++;\n                    last--;\n       \
    \         }\n                else\n                {\n                    last--;\n\
    \                }\n            }\n            else\n            {\n         \
    \       first++;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array.ptr, array.ptr + array.length,\
    \ std.greater!long());\n    }\n    else\n    {\n        sort(array.ptr, array.ptr\
    \ + array.length);\n    }\n    return array;\n}", "{\n    long[] result = array.dup;\n\
    \    if(result.length == 0) return result;\n    if(result.length == 1) return\
    \ result;\n    if(result.length == 2)\n    {\n        if(result[0] > result[1])\n\
    \        {\n            long temp = result[0];\n            result[0] = result[1];\n\
    \            result[1] = temp;\n        }\n        return result;\n    }\n   \
    \ long first = result[0];\n    long last = result[result.length - 1];\n    bool\
    \ isOdd = (first + last) % 2 == 1;\n    if(isOdd)\n    {\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n\
    \    }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    long[] result = new long[array.length];\n    auto sum = array[0]\
    \ + array[$ - 1];\n    auto isOdd = sum % 2 == 1;\n    auto sorted = array.dup.sort;\n\
    \    if (isOdd)\n    {\n        foreach (i, e; sorted)\n            result[i]\
    \ = e;\n    }\n    else\n    {\n        foreach (i, e; sorted)\n            result[i]\
    \ = e;\n        result = result.reverse;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[array.length];\n    if(array.length == 0)\n    \
    \    return result;\n    if(array.length == 1)\n        return array;\n    if(array.length\
    \ == 2)\n    {\n        if(array[0] > array[1])\n        {\n            result[0]\
    \ = array[1];\n            result[1] = array[0];\n        }\n        else\n  \
    \      {\n            result[0] = array[0];\n            result[1] = array[1];\n\
    \        }\n        return result;\n    }\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        for(int i = 0; i < array.length;\
    \ i++)\n        {\n            result[i] = array[array.length - 1 - i];\n    \
    \    }\n    }\n    else\n    {\n        for(int i = 0; i < array.length; i++)\n\
    \        {\n            result[i] = array[i];\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    long[] odd = new long[array.length];\n\
    \    long[] even = new long[array.length];\n    int odd_index = 0;\n    int even_index\
    \ = 0;\n    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i]\
    \ % 2 == 0)\n        {\n            even[even_index] = array[i];\n           \
    \ even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = array[i];\n            odd_index++;\n        }\n    }\n    even = even[0..even_index];\n\
    \    odd = odd[0..odd_index];\n    even.sort();\n    odd.sort();\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        even = even.reverse();\n\
    \    }\n    else\n    {\n        odd = odd.reverse();\n    }\n    int index =\
    \ 0;\n    for (int i = 0; i < odd.length; i++)\n    {\n        result[index] =\
    \ odd[i];\n        index++;\n    }\n    for (int i = 0; i < even.length; i++)\n\
    \    {\n        result[index] = even[i];\n        index++;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = array.dup;\n    if(array.length == 0)\n\
    \        return result;\n    if((array[0] + array[$-1]) % 2 == 0)\n        result.sort!((a,\
    \ b) => a > b);\n    else\n        result.sort!((a, b) => a < b);\n    return\
    \ result;\n}", "{\n    auto result = array.dup;\n    if (array.length > 1)\n \
    \   {\n        if ((array[0] + array[$ - 1]) % 2 == 0)\n        {\n          \
    \  sort!((a, b) => a > b)(result);\n        }\n        else\n        {\n     \
    \       sort!((a, b) => a < b)(result);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = array.dup;\n    if(array.length == 0)\n        return\
    \ result;\n    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n    \
    \    result.sort!((a, b) => b - a);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a - b);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    int start = 0;\n    int end = array.length - 1;\n    bool isOdd = (array[0]\
    \ + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n    {\n        foreach(i;\
    \ array)\n        {\n            if (i % 2 == 1)\n            {\n            \
    \    result[start] = i;\n                start++;\n            }\n           \
    \ else\n            {\n                result[end] = i;\n                end--;\n\
    \            }\n        }\n    }\n    else\n    {\n        foreach(i; array)\n\
    \        {\n            if (i % 2 == 1)\n            {\n                result[end]\
    \ = i;\n                end--;\n            }\n            else\n            {\n\
    \                result[start] = i;\n                start++;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = array.dup;\n\
    \    long sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n  \
    \  {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n       \
    \ result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    if(array.length == 0)\n        return\
    \ result;\n    auto sum = array[0] + array[array.length - 1];\n    if(sum % 2\
    \ == 0)\n    {\n        sort(array.ptr, array.ptr + array.length, (a, b) => a\
    \ > b);\n    }\n    else\n    {\n        sort(array.ptr, array.ptr + array.length,\
    \ (a, b) => a < b);\n    }\n    return array;\n}", "{\n    long[] result = new\
    \ long[array.length];\n    if(array.length == 0)\n        return result;\n   \
    \ if(array.length == 1)\n        return array;\n    if(array.length == 2)\n  \
    \  {\n        if(array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        result = array.dup;\n        result.sort!((a, b) =>\
    \ a > b);\n    }\n    else\n    {\n        result = array.dup;\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    auto sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        sort(array.dup, (a, b) => b - a);\n    }\n    else\n    {\n   \
    \     sort(array.dup);\n    }\n    return array;\n}", "{\n    long[] result =\
    \ array.dup;\n    long sum = array[0] + array[array.length - 1];\n    if (sum\
    \ % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a - b);\n    }\n    return result;\n}",
  "{\n    auto result = array.dup;\n    if(array.length == 0)\n        return result;\n\
    \    if((array[0] + array[$-1]) % 2 == 0)\n    {\n        sort!((a, b) => a >\
    \ b)(result);\n    }\n    else\n    {\n        sort!((a, b) => a < b)(result);\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if(array.length == 0)\n        return result;\n    if(array.length == 1)\n\
    \        return array;\n    if(array.length == 2)\n    {\n        if(array[0]\
    \ > array[1])\n        {\n            result[0] = array[1];\n            result[1]\
    \ = array[0];\n        }\n        else\n        {\n            result[0] = array[0];\n\
    \            result[1] = array[1];\n        }\n        return result;\n    }\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        long[]\
    \ temp = new long[array.length];\n        for(int i = 0; i < array.length; i++)\n\
    \            temp[i] = array[i];\n        temp.sort();\n        for(int i = 0;\
    \ i < array.length; i++)\n            result[i] = temp[array.length - 1 - i];\n\
    \    }\n    else\n    {\n        long[] temp = new long[array.length];\n     \
    \   for(int i = 0; i < array.length; i++)\n            temp[i] = array[i];\n \
    \       temp.sort();\n        for(int i = 0; i < array.length; i++)\n        \
    \    result[i] = temp[i];\n    }\n    return result;\n}", "{\n    long[] res =\
    \ new long[array.length];\n    if (array.length == 0)\n        return res;\n \
    \   int sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n   \
    \ {\n        res = array.dup.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        res = array.dup.sort!((a, b) => a < b);\n    }\n    return res;\n}",
  "{\n    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result = array.sort!((a, b) =>\
    \ b < a);\n    }\n    else\n    {\n        result = array.sort!((a, b) => a <\
    \ b);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        array.sort!((a, b) => a > b);\n    }\n    else\n    {\n       \
    \ array.sort!((a, b) => a < b);\n    }\n    return array;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab =\
    \ 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n   \
    \ int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak =\
    \ 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n   \
    \ int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at =\
    \ 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n   \
    \ int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc =\
    \ 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n   \
    \ int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl =\
    \ 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n   \
    \ int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu =\
    \ 0;\n    int bv = 0;\n   ", "{\n    long[] result = new long[array.length];\n\
    \    int sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n  \
    \  {\n        sort(array.dup, (a, b) => a > b);\n    }\n    else\n    {\n    \
    \    sort(array.dup, (a, b) => a < b);\n    }\n    return array;\n}", "{\n   \
    \ long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    int k = 0;\n    if (array.length == 0)\n        return result;\n \
    \   if (array[0] + array[array.length - 1] % 2 == 0)\n    {\n        while (k\
    \ < array.length)\n        {\n            if (array[i] % 2 == 0)\n           \
    \ {\n                result[k] = array[i];\n                i++;\n           \
    \ }\n            else\n            {\n                result[k] = array[j];\n\
    \                j--;\n            }\n            k++;\n        }\n    }\n   \
    \ else\n    {\n        while (k < array.length)\n        {\n            if (array[i]\
    \ % 2 == 0)\n            {\n                result[k] = array[j];\n          \
    \      j--;\n            }\n            else\n            {\n                result[k]\
    \ = array[i];\n                i++;\n            }\n            k++;\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n\
    \    {\n        result = array.dup.sort;\n    }\n    else\n    {\n        result\
    \ = array.dup.sort.reverse;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[array.length];\n    if (array.length == 0)\n        return result;\n\
    \    if (array.length == 1)\n        return array;\n    if (array.length == 2)\n\
    \    {\n        if (array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    long sum = array[0] + array[array.length -\
    \ 1];\n    if (sum % 2 == 0)\n    {\n        foreach (i; 0 .. array.length)\n\
    \        {\n            result[i] = array[array.length - 1 - i];\n        }\n\
    \    }\n    else\n    {\n        foreach (i; 0 .. array.length)\n        {\n \
    \           result[i] = array[i];\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[array.length];\n    long[] odd = new long[array.length];\n\
    \    long[] even = new long[array.length];\n    int odd_index = 0;\n    int even_index\
    \ = 0;\n    for (int i = 0; i < array.length; i++)\n    {\n        if (array[i]\
    \ % 2 == 0)\n        {\n            even[even_index] = array[i];\n           \
    \ even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = array[i];\n            odd_index++;\n        }\n    }\n    sort(odd[0..odd_index]);\n\
    \    sort(even[0..even_index]);\n    if ((array[0] + array[array.length - 1])\
    \ % 2 == 0)\n    {\n        for (int i = 0; i < odd_index; i++)\n        {\n \
    \           result[i] = odd[odd_index - i - 1];\n        }\n        for (int i\
    \ = 0; i < even_index; i++)\n        {\n            result[odd_index + i] = even[even_index\
    \ - i - 1];\n        }\n    }\n    else\n    {\n        for (int i = 0; i < odd_index;\
    \ i++)\n        {\n            result[i] = odd[i];\n        }\n        for (int\
    \ i = 0; i < even_index; i++)\n        {\n            result[odd_index + i] =\
    \ even[i];\n        }\n    }\n    return result;\n}", "{\n    auto result = array.dup;\n\
    \    if(array.length > 1)\n    {\n        auto first = array[0];\n        auto\
    \ last = array[$-1];\n        if((first + last) % 2 == 0)\n        {\n       \
    \     result.sort!((a, b) => a > b);\n        }\n        else\n        {\n   \
    \         result.sort!((a, b) => a < b);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = array.dup;\n    if (array.length == 0)\n        return\
    \ result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n        result.sort!((a,\
    \ b) => a < b);\n    else\n        result.sort!((a, b) => a > b);\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    if (array.length\
    \ == 0)\n        return result;\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, \"a > b\");\n \
    \   }\n    else\n    {\n        sort(array.dup);\n    }\n    return array;\n}",
  "{\n    long[] result = array.dup;\n    if (array.length == 0) return result;\n\
    \    if (array.length == 1) return result;\n    if (array.length == 2)\n    {\n\
    \        if (array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        return result;\n    }\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if (array.length == 0)\n        return result;\n    long sum = array[0] +\
    \ array[array.length - 1];\n    bool isOdd = sum % 2 == 1;\n    if (isOdd)\n \
    \   {\n        sort(array.dup);\n        foreach (i, v; array)\n            result[i]\
    \ = v;\n    }\n    else\n    {\n        sort(array.dup, std.algorithm.greater!\"\
    a\");\n        foreach (i, v; array)\n            result[i] = v;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}", "{\n    auto result = array.dup;\n    if (array.length == 0)\n\
    \        return result;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n       \
    \ result.sort!((a, b) => a > b);\n    else\n        result.sort!((a, b) => a <\
    \ b);\n    return result;\n}", "{\n    long[] result = array.dup;\n    if (array.length\
    \ == 0) return result;\n    if (array.length == 1) return result;\n    if (array.length\
    \ == 2)\n    {\n        if ((array[0] + array[1]) % 2 == 0)\n        {\n     \
    \       if (array[0] > array[1])\n            {\n                long temp = array[0];\n\
    \                array[0] = array[1];\n                array[1] = temp;\n    \
    \        }\n        }\n        else\n        {\n            if (array[0] < array[1])\n\
    \            {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n        }\n  \
    \      return result;\n    }\n    if ((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n \
    \   long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    temp = array.dup;\n    temp.sort;\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        for(int i = 0; i < array.length; i++)\n    \
    \    {\n            result[i] = temp[array.length - i - 1];\n        }\n    }\n\
    \    else\n    {\n        result = temp;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[array.length];\n    auto sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result = array.dup.sort!((a, b)\
    \ => b < a);\n    }\n    else\n    {\n        result = array.dup.sort!((a, b)\
    \ => a < b);\n    }\n    return result;\n}", "{\n    long[] result = array.dup;\n\
    \    if(array.length == 0) return result;\n    bool isOdd = (array[0] + array[$-1])\
    \ % 2 == 1;\n    if(isOdd)\n    {\n        result.sort!((a, b) => a > b);\n  \
    \  }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    if(array.length\
    \ == 0) return result;\n    auto sum = array[0] + array[array.length - 1];\n \
    \   if(sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => a > b);\n    }\n\
    \    else\n    {\n        sort(array.dup, (a, b) => a < b);\n    }\n    return\
    \ array;\n}", "{\n    long[] result = new long[array.length];\n    auto sum =\
    \ array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        result\
    \ = array.dup.sort!((a, b) => b < a);\n    }\n    else\n    {\n        result\
    \ = array.dup.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n   \
    \ long[] result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    temp = array.dup;\n    temp.sort;\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        for(int i = 0; i < array.length; i++)\n    \
    \    {\n            result[i] = temp[array.length - i - 1];\n        }\n    }\n\
    \    else\n    {\n        result = temp;\n    }\n    return result;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    auto result = array.dup;\n    if ((array[0] + array[$-1])\
    \ % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}",
  "{\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        result = array.sort(std.math.cmp.descending);\n\
    \    }\n    else\n    {\n        result = array.sort();\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    auto sum = array[0] +\
    \ array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup,\
    \ (a, b) => a > b);\n    }\n    else\n    {\n        sort(array.dup, (a, b) =>\
    \ a < b);\n    }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    auto sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0)\n  \
    \  {\n        sort(array.dup, (a, b) => a > b);\n    }\n    else\n    {\n    \
    \    sort(array.dup, (a, b) => a < b);\n    }\n    return array;\n}", "{\n   \
    \ long[] result = array.dup;\n    if(array.length == 0) return result;\n    if(array.length\
    \ == 1) return result;\n    if(array.length == 2)\n    {\n        if(array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return result;\n\
    \    }\n    if((array[0] + array[$-1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => a > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n\
    \    }\n    return result;\n}", "{\n    long[] result = array.dup;\n    long first\
    \ = array[0];\n    long last = array[$-1];\n    if((first + last) % 2 == 0)\n\
    \    {\n        sort(result, (a, b) => a > b);\n    }\n    else\n    {\n     \
    \   sort(result, (a, b) => a < b);\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    long[] temp = new long[array.length];\n\
    \    auto sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        temp = array.dup;\n        temp.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        temp = array.dup;\n        temp.sort!((a, b) => a <\
    \ b);\n    }\n    foreach(i, v; temp)\n    {\n        result[i] = v;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[array.length];\n   \
    \ if (array.length == 0)\n        return result;\n    if (array.length == 1)\n\
    \        return array;\n    long sum = array[0] + array[array.length - 1];\n \
    \   if (sum % 2 == 0)\n    {\n        foreach (i, e; array)\n            result[i]\
    \ = e;\n        sort(result);\n        return result;\n    }\n    else\n    {\n\
    \        foreach (i, e; array)\n            result[i] = e;\n        sort(result);\n\
    \        reverse(result);\n        return result;\n    }\n}", "{\n    long[] result\
    \ = new long[array.length];\n    long[] temp = new long[array.length];\n    temp\
    \ = array.dup;\n    temp.sort;\n    if(array[0] + array[array.length - 1] % 2\
    \ == 0)\n    {\n        for(int i = 0; i < array.length; i++)\n        {\n   \
    \         result[i] = temp[array.length - i - 1];\n        }\n    }\n    else\n\
    \    {\n        result = temp;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    array.dup.sort;\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        result = array.dup.sort.reverse;\n    }\n  \
    \  else\n    {\n        result = array.dup.sort;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    bool isOdd = sum % 2 == 1;\n    if (isOdd)\n    {\n        result\
    \ = array.dup.sort();\n    }\n    else\n    {\n        result = array.dup.sort!((a,\
    \ b) => b - a);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long[] sorted = array.dup;\n    sorted.sort;\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        result = sorted.reverse;\n    }\n    else\n\
    \    {\n        result = sorted;\n    }\n    return result;\n}", "{\n    auto\
    \ result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if (sum % 2\
    \ == 0)\n    {\n        sort!((a, b) => a > b)(result);\n    }\n    else\n   \
    \ {\n        sort!((a, b) => a < b)(result);\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[array.length];\n    if (array.length == 0)\n   \
    \     return result;\n    long sum = array[0] + array[array.length - 1];\n   \
    \ if (sum % 2 == 0)\n    {\n        sort(array, (a, b) => a > b);\n    }\n   \
    \ else\n    {\n        sort(array, (a, b) => a < b);\n    }\n    return array;\n\
    }", "{\n    auto array_copy = array.dup;\n    auto sum = array[0] + array[$-1];\n\
    \    if(sum % 2 == 0)\n    {\n        sort(array_copy[], (a, b) => a > b);\n \
    \   }\n    else\n    {\n        sort(array_copy[], (a, b) => a < b);\n    }\n\
    \    return array_copy;\n}", "{\n    long[] result = new long[array.length];\n\
    \    int index = 0;\n    foreach(long i; array)\n    {\n        result[index]\
    \ = i;\n        index++;\n    }\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        sort(result);\n    }\n    else\n    {\n        sort(result,\
    \ std.math.greater!long);\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[array.length];\n    int sum = array[0] + array[array.length - 1];\n\
    \    if(sum % 2 == 0)\n    {\n        result = array.dup.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result = array.dup.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    \n    auto result = array.dup;\n    auto sum = array[0] + array[$\
    \ - 1];\n    auto isOdd = sum % 2 == 1;\n    if (isOdd)\n        sort!((a, b)\
    \ => a > b)(result);\n    else\n        sort!((a, b) => a < b)(result);\n    return\
    \ result;\n}", "{\n    long[] result = array.dup;\n    long first = array[0];\n\
    \    long last = array[$-1];\n    if((first + last) % 2 == 0)\n    {\n       \
    \ result.sort!((a, b) => b < a);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if (array.length == 0)\n        return result;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            result[0] = array[1];\n            result[1]\
    \ = array[0];\n        }\n        else\n        {\n            result[0] = array[0];\n\
    \            result[1] = array[1];\n        }\n        return result;\n    }\n\
    \    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        result\
    \ = array.dup;\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result = array.dup;\n        result.sort!((a, b) => a < b);\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[array.length];\n   \
    \ long[] temp = new long[array.length];\n    temp = array.dup;\n    temp.sort;\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        for(int\
    \ i = 0; i < array.length; i++)\n        {\n            result[i] = temp[array.length\
    \ - 1 - i];\n        }\n    }\n    else\n    {\n        result = temp;\n    }\n\
    \    return result;\n}", "{\n    auto result = array.dup;\n    auto sum = array[0]\
    \ + array[$-1];\n    if(sum % 2 == 0)\n    {\n        sort!((a, b) => a > b)(result);\n\
    \    }\n    else\n    {\n        sort!((a, b) => a < b)(result);\n    }\n    return\
    \ result;\n}", "{\n    auto sum = array[0] + array[$-1];\n    auto sorted = array.dup;\n\
    \    if (sum % 2 == 0)\n        sorted.sort!((a, b) => a > b);\n    else\n   \
    \     sorted.sort!((a, b) => a < b);\n    return sorted;\n}", "{\n    long[] result\
    \ = array.dup;\n    long sum = array[0] + array[$-1];\n    if (sum % 2 == 0)\n\
    \    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n     \
    \   result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n    auto\
    \ result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if(sum % 2 ==\
    \ 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n \
    \   long[] result = array.dup;\n    if(array.length == 0) return result;\n   \
    \ if(array.length == 1) return result;\n    if(array.length == 2) \n    {\n  \
    \      if(array[0] > array[1]) \n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return result;\n    }\n    if((array[0] + array[array.length - 1]) % 2\
    \ == 0) \n    {\n        result.sort!((a, b) => a > b);\n    }\n    else \n  \
    \  {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    int k = 0;\n    bool odd = (array[0] + array[array.length - 1]) %\
    \ 2 == 1;\n    while (i <= j)\n    {\n        if (odd)\n        {\n          \
    \  if (array[i] % 2 == 1)\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n            else\n            {\n      \
    \          result[k] = array[j];\n                j--;\n            }\n      \
    \  }\n        else\n        {\n            if (array[i] % 2 == 1)\n          \
    \  {\n                result[k] = array[j];\n                j--;\n          \
    \  }\n            else\n            {\n                result[k] = array[i];\n\
    \                i++;\n            }\n        }\n        k++;\n    }\n    return\
    \ result;\n}", "{\n    if (array.length == 0) return array;\n    auto result =\
    \ array.dup;\n    if ((array[0] + array[$-1]) % 2 == 0)\n    {\n        sort(result,\
    \ (a, b) => b - a);\n    }\n    else\n    {\n        sort(result);\n    }\n  \
    \  return result;\n}", "{\n    long[] result = array.dup;\n    bool isOdd = (array[0]\
    \ + array[$-1]) % 2 == 1;\n    if (isOdd)\n    {\n        result.sort!((a, b)\
    \ => a > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n\
    \    }\n    return result;\n}", "{\n    long[] result = array.dup;\n    int first\
    \ = 0;\n    int last = array.length - 1;\n    bool isOdd = (array[first] + array[last])\
    \ % 2 == 1;\n    while (first < last)\n    {\n        if (isOdd)\n        {\n\
    \            if (result[first] % 2 == 0)\n            {\n                if (result[last]\
    \ % 2 == 1)\n                {\n                    long temp = result[first];\n\
    \                    result[first] = result[last];\n                    result[last]\
    \ = temp;\n                    first++;\n                    last--;\n       \
    \         }\n                else\n                {\n                    last--;\n\
    \                }\n            }\n            else\n            {\n         \
    \       first++;\n            }\n        }\n        else\n        {\n        \
    \    if (result[first] % 2 == 1)\n            {\n                if (result[last]\
    \ % 2 == 0)\n                {\n                    long temp = result[first];\n\
    \                    result[first] = result[last];\n                    result[last]\
    \ = temp;\n                    first++;\n                    last--;\n       \
    \         }\n                else\n                {\n                    last--;\n\
    \                }\n            }\n            else\n            {\n         \
    \       first++;\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    int[] index\
    \ = new int[array.length];\n    for (int i = 0; i < array.length; i++)\n    {\n\
    \        index[i] = i;\n    }\n    if ((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        index.sort!((a, b) => array[a] < array[b]);\n    }\n\
    \    else\n    {\n        index.sort!((a, b) => array[a] > array[b]);\n    }\n\
    \    for (int i = 0; i < array.length; i++)\n    {\n        result[i] = array[index[i]];\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if(array.length == 0)\n        return result;\n    if(array.length == 1)\n\
    \        return array;\n    if(array.length == 2)\n    {\n        if(array[0]\
    \ > array[1])\n        {\n            result[0] = array[1];\n            result[1]\
    \ = array[0];\n        }\n        else\n        {\n            result[0] = array[0];\n\
    \            result[1] = array[1];\n        }\n        return result;\n    }\n\
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n        for(int\
    \ i = 0; i < array.length; i++)\n        {\n            result[i] = array[array.length\
    \ - 1 - i];\n        }\n    }\n    else\n    {\n        for(int i = 0; i < array.length;\
    \ i++)\n        {\n            result[i] = array[i];\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = array.dup;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    auto sum =\
    \ array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.ptr,\
    \ array.ptr + array.length, std.greater!long());\n    }\n    else\n    {\n   \
    \     sort(array.ptr, array.ptr + array.length);\n    }\n    return array;\n}",
  "{\n    long[] result = array.dup;\n    if ((result[0] + result[$-1]) % 2 == 0)\n\
    \    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n     \
    \   result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[array.length];\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup, (a, b) => a > b);\n\
    \    }\n    else\n    {\n        sort(array.dup, (a, b) => a < b);\n    }\n  \
    \  return array;\n}", "{\n    auto result = array.dup;\n    auto sum = array[0]\
    \ + array[$-1];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) =>\
    \ b < a);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    int i = 0;\n    int j = array.length - 1;\n    int k = 0;\n    if((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        while(i <= j)\n       \
    \ {\n            if(array[i] > array[j])\n            {\n                result[k]\
    \ = array[i];\n                i++;\n            }\n            else\n       \
    \     {\n                result[k] = array[j];\n                j--;\n       \
    \     }\n            k++;\n        }\n    }\n    else\n    {\n        while(i\
    \ <= j)\n        {\n            if(array[i] < array[j])\n            {\n     \
    \           result[k] = array[i];\n                i++;\n            }\n     \
    \       else\n            {\n                result[k] = array[j];\n         \
    \       j--;\n            }\n            k++;\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n\
    \    if(sum % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n\
    \    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    auto sum = array[0] +\
    \ array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup);\n\
    \        reverse(array);\n    }\n    else\n    {\n        sort(array.dup);\n \
    \   }\n    return array;\n}", "{\n    long[] result = new long[array.length];\n\
    \    auto sum = array[0] + array[$-1];\n    auto isEven = sum % 2 == 0;\n    auto\
    \ comparer = isEven ? (a, b) => a > b : (a, b) => a < b;\n    result = array.dup;\n\
    \    result.sort(comparer);\n    return result;\n}", "{\n    long[] result = array.dup;\n\
    \    int first = 0;\n    int last = array.length - 1;\n    int sum = array[first]\
    \ + array[last];\n    if (sum % 2 == 0)\n    {\n        result.sort!((a, b) =>\
    \ a > b);\n    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    if(array.length == 0) return result;\n    if(array.length == 1) return array;\n\
    \    if(array.length == 2)\n    {\n        if(array[0] > array[1])\n        {\n\
    \            result[0] = array[1];\n            result[1] = array[0];\n      \
    \  }\n        else\n        {\n            result[0] = array[0];\n           \
    \ result[1] = array[1];\n        }\n        return result;\n    }\n    if((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => a\
    \ > b);\n        return array;\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a < b);\n        return array;\n    }\n}", "{\n    long[] result = new\
    \ long[array.length];\n    long sum = array[0] + array[array.length - 1];\n  \
    \  bool isOdd = (sum % 2 == 1);\n    if (isOdd)\n    {\n        result = array.dup.sort;\n\
    \    }\n    else\n    {\n        result = array.dup.sort.reverse;\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[array.length];\n    long[]\
    \ temp = new long[array.length];\n    long[] temp2 = new long[array.length];\n\
    \    long[] temp3 = new long[array.length];\n    long[] temp4 = new long[array.length];\n\
    \    long[] temp5 = new long[array.length];\n    long[] temp6 = new long[array.length];\n\
    \    long[] temp7 = new long[array.length];\n    long[] temp8 = new long[array.length];\n\
    \    long[] temp9 = new long[array.length];\n    long[] temp10 = new long[array.length];\n\
    \    long[] temp11 = new long[array.length];\n    long[] temp12 = new long[array.length];\n\
    \    long[] temp13 = new long[array.length];\n    long[] temp14 = new long[array.length];\n\
    \    long[] temp15 = new long[array.length];\n    long[] temp16 = new long[array.length];\n\
    \    long[] temp17 = new long[array.length];\n    long[] temp18 = new long[array.length];\n\
    \    long[] temp19 = new long[array.length];\n    long[] temp20 = new long[array.length];\n\
    \    long[] temp21 = new long[array.length];\n    long[] temp22 = new long[array.length];\n\
    \    long[] temp23 = new long[array.length];\n    long[] temp24 = new long[array.length];\n\
    \    long[] temp25 = new long[array.length];\n    long[] temp26 = new long[array.length];\n\
    \    long[] temp27 = new long[array.length];\n    long[] temp28 = new long[array.length];\n\
    \    long[] temp29 = new long[array.length];\n    long[] temp30 = new long[array.length];\n\
    \    long[] temp31 = new long[array.length];\n    long[] temp32 = new long[array.length];\n\
    \    long[] temp33 = new long[array.length];\n    long[] temp34 = new long[array.length];\n\
    \    long[] temp35 = new long[array.length];\n    long[] temp36 = new", "{\n \
    \   long[] result = array.dup;\n    if(array.length == 0) return result;\n   \
    \ if(array.length == 1) return result;\n    if(array.length == 2)\n    {\n   \
    \     if(array[0] > array[1])\n        {\n            long temp = array[0];\n\
    \            array[0] = array[1];\n            array[1] = temp;\n        }\n \
    \       return result;\n    }\n    if((array[0] + array[array.length - 1]) % 2\
    \ == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n\
    \        result.sort!((a, b) => a < b);\n    }\n    return result;\n}", "{\n \
    \   if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array.length == 2)\n    {\n        if (array[0]\
    \ > array[1])\n        {\n            long temp = array[0];\n            array[0]\
    \ = array[1];\n            array[1] = temp;\n        }\n        return array;\n\
    \    }\n    long[] result = array.dup;\n    bool isOdd = (result[0] + result[result.length\
    \ - 1]) % 2 == 1;\n    if (isOdd)\n    {\n        result.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return\
    \ result;\n}", "{\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n\
    \    if(sum % 2 == 0)\n    {\n        result.sort!((a, b) => b < a);\n    }\n\
    \    else\n    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[array.length];\n    auto sum = array[0] +\
    \ array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup,\
    \ (a, b) => a < b);\n    }\n    else\n    {\n        sort(array.dup, (a, b) =>\
    \ a > b);\n    }\n    return array;\n}", "{\n    auto result = array.dup;\n  \
    \  if (array.length == 0)\n        return result;\n    if ((array[0] + array[$\
    \ - 1]) % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    long[] result = array.dup;\n\
    \    bool isOdd = (result[0] + result[$-1]) % 2 == 1;\n    if (isOdd)\n    {\n\
    \        result.sort!((a, b) => a > b);\n    }\n    else\n    {\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    auto sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n \
    \   {\n        sort(array.ptr, array.ptr + array.length, std.greater!long());\n\
    \    }\n    else\n    {\n        sort(array.ptr, array.ptr + array.length);\n\
    \    }\n    return array;\n}", "{\n    auto result = array.dup;\n    auto sum\
    \ = array[0] + array[$-1];\n    if (sum % 2 == 0)\n    {\n        sort!((a, b)\
    \ => b < a)(result);\n    }\n    else\n    {\n        sort!((a, b) => a < b)(result);\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long[] odd = new long[array.length];\n    long[] even = new long[array.length];\n\
    \    int odd_index = 0;\n    int even_index = 0;\n    foreach(i; array)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            even[even_index] = i;\n      \
    \      even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = i;\n            odd_index++;\n        }\n    }\n    sort(odd[0..odd_index]);\n\
    \    sort(even[0..even_index]);\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        reverse(even[0..even_index]);\n    }\n    else\n   \
    \ {\n        reverse(odd[0..odd_index]);\n    }\n    int index = 0;\n    foreach(i;\
    \ odd[0..odd_index])\n    {\n        result[index] = i;\n        index++;\n  \
    \  }\n    foreach(i; even[0..even_index])\n    {\n        result[index] = i;\n\
    \        index++;\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[array.length];\n    int start = 0;\n    int end = array.length - 1;\n \
    \   bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n\
    \    {\n        sort(array);\n        foreach(i; array)\n        {\n         \
    \   result[start++] = i;\n        }\n    }\n    else\n    {\n        sort(array,\
    \ (a, b) => a > b);\n        foreach(i; array)\n        {\n            result[end--]\
    \ = i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[array.length];\n    if(array.length == 0)\n        return result;\n   \
    \ if(array.length == 1)\n        return array;\n    if(array.length == 2)\n  \
    \  {\n        if(array[0] > array[1])\n        {\n            result[0] = array[1];\n\
    \            result[1] = array[0];\n        }\n        else\n        {\n     \
    \       result[0] = array[0];\n            result[1] = array[1];\n        }\n\
    \        return result;\n    }\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n    {\n        result = array.dup;\n        result.sort!((a, b) =>\
    \ a > b);\n    }\n    else\n    {\n        result = array.dup;\n        result.sort!((a,\
    \ b) => a < b);\n    }\n    return result;\n}", "{\n    long[] result = new long[array.length];\n\
    \    long[] odd = new long[array.length];\n    long[] even = new long[array.length];\n\
    \    int odd_index = 0;\n    int even_index = 0;\n    foreach(i; array)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            even[even_index] = i;\n      \
    \      even_index++;\n        }\n        else\n        {\n            odd[odd_index]\
    \ = i;\n            odd_index++;\n        }\n    }\n    sort(odd[0..odd_index]);\n\
    \    sort(even[0..even_index]);\n    if((array[0] + array[$-1]) % 2 == 0)\n  \
    \  {\n        even = even[0..even_index].reverse;\n    }\n    else\n    {\n  \
    \      odd = odd[0..odd_index].reverse;\n    }\n    int index = 0;\n    foreach(i;\
    \ odd)\n    {\n        result[index] = i;\n        index++;\n    }\n    foreach(i;\
    \ even)\n    {\n        result[index] = i;\n        index++;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[array.length];\n    auto sum =\
    \ array[0] + array[array.length - 1];\n    if (sum % 2 == 0)\n    {\n        sort(array.dup,\
    \ (a, b) => a > b);\n    }\n    else\n    {\n        sort(array.dup, (a, b) =>\
    \ a < b);\n    }\n    return array;\n}", "{\n    long[] result = array.dup;\n\
    \    auto first = result[0];\n    auto last = result[$-1];\n    if((first + last)\
    \ % 2 == 0)\n    {\n        result.sort!((a, b) => a > b);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a < b);\n    }\n    return result;\n}",
  "{\n    auto result = array.dup;\n    auto sum = array[0] + array[$-1];\n    if\
    \ (sum % 2 == 0)\n    {\n        result.sort!((a, b) => b - a);\n    }\n    else\n\
    \    {\n        result.sort!((a, b) => a - b);\n    }\n    return result;\n}",
  "{\n    long[] result = new long[array.length];\n    int i = 0;\n    int j = array.length\
    \ - 1;\n    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if\
    \ (isOdd)\n    {\n        foreach (e; array)\n        {\n            if (e % 2\
    \ == 1)\n            {\n                result[i] = e;\n                i++;\n\
    \            }\n        }\n        foreach (e; array)\n        {\n           \
    \ if (e % 2 == 0)\n            {\n                result[j] = e;\n           \
    \     j--;\n            }\n        }\n    }\n    else\n    {\n        foreach\
    \ (e; array)\n        {\n            if (e % 2 == 0)\n            {\n        \
    \        result[i] = e;\n                i++;\n            }\n        }\n    \
    \    foreach (e; array)\n        {\n            if (e % 2 == 1)\n            {\n\
    \                result[j] = e;\n                j--;\n            }\n       \
    \ }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
