name: HumanEval_87_get_row
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a 2 dimensional\
  \ data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n\
  \    each row may contain a different number of columns.\n    Given lst, and integer\
  \ x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also,\
  \ sort coordinates of the row by columns in descending order.\n    \n    Examples:\n\
  \                \n*/\nTuple!(long, long)[] get_row(long[][] lst, long x) \n"
tests: "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\
  \ == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n\
  \    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L,\
  \ 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L,\
  \ 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L,\
  \ 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L),\
  \ tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]],\
  \ 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L,\
  \ 2L)]);\n}\nvoid main(){}"
completions: ["{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n   \
    \ {\n        foreach(j, elem; row)\n        {\n            if(elem == x)\n   \
    \         {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    Tuple!(long, long)[] res;\n    long row\
    \ = 0;\n    foreach(row_; lst)\n    {\n        long col = 0;\n        foreach(col_;\
    \ row_)\n        {\n            if(col_ == x)\n            {\n               \
    \ res ~= tuple(row, col);\n            }\n            col++;\n        }\n    \
    \    row++;\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res;\n \
    \   foreach(i, row; lst)\n    {\n        foreach(j, val; row)\n        {\n   \
    \         if(val == x)\n            {\n                res ~= tuple(i, j);\n \
    \           }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n    return res;\n}\n/*\n    get_row([[1, 2, 3], [4,\
    \ 5, 6], [7, 8, 9]], 5) ==\n    [(1, 1)]\n    \n    get_row([[1, 2, 3], [4, 5,\
    \ 6], [7, 8, 9]], 6) ==\n    [(1, 2)]\n    \n    get_row([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 7) ==\n    [(2, 0)]\n    \n    get_row([[1, 2, 3], [4, 5, 6], [7,\
    \ 8, 9]], 8) ==\n    [(2, 1)]\n    \n    get_row([[1, 2, 3], [4, 5, 6], [7, 8,\
    \ 9]], 9) ==\n    [(2, 2)]\n    \n    get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 10) ==\n    []\n    \n    get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) ==\n\
    \    [(0, 0)]\n    \n    get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) ==\n  \
    \  [(0, 1)]\n    \n    get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) ==\n    [(0,\
    \ 2)]\n    \n    get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst) \n    {\n        foreach(j,\
    \ col; row) \n        {\n            if(col == x) \n            {\n          \
    \      result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    for (long i = 0; i <\
    \ lst.length; i++) \n    {\n        for (long j = 0; j < lst[i].length; j++) \n\
    \        {\n            if (lst[i][j] == x) \n            {\n                result\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(row; 0..lst.length)\n    {\n        foreach(col;\
    \ 0..lst[row].length)\n        {\n            if(lst[row][col] == x)\n       \
    \     {\n                result ~= tuple(row, col);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto res = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n \
    \   {\n        foreach(j, col; row)\n        {\n            if(col == x)\n   \
    \         {\n                res ~= tuple(i, j);\n            }\n        }\n \
    \   }\n    return res;\n}", "{\n    auto res = [];\n    foreach(i, row; lst)\n\
    \    {\n        auto cols = row.indexOf(x);\n        if(cols != -1)\n        {\n\
    \            res ~= tuple(i, cols);\n        }\n    }\n    return res.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto res = [];\n    foreach(i, row; lst)\n    {\n        foreach(j, elem;\
    \ row)\n        {\n            if(elem == x)\n            {\n                res\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto res = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n \
    \   {\n        foreach(j, col; row)\n        {\n            if(col == x)\n   \
    \         {\n                res ~= tuple(i, j);\n            }\n        }\n \
    \   }\n    return res;\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, val; row)\n        {\n            if(val\
    \ == x)\n            {\n                res ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return res;\n}", "{\n    auto res = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, e; row)\n        {\n    \
    \        if(e == x)\n            {\n                res ~= tuple(i, j);\n    \
    \        }\n        }\n    }\n    return res;\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    auto res\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(row; 0..lst.length)\n  \
    \  {\n        foreach(col; 0..lst[row].length)\n        {\n            if(lst[row][col]\
    \ == x)\n            {\n                result ~= tuple(row, col);\n         \
    \   }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                res ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(long row, long[] cols; lst)\n    {\n        foreach(long col; cols)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(row, col);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto res = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n \
    \   {\n        foreach(j, col; row)\n        {\n            if(col == x)\n   \
    \         {\n                res ~= tuple(i, j);\n            }\n        }\n \
    \   }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst) \n    {\n        foreach(j, item; row) \n        {\n            if\
    \ (item == x) \n            {\n                result ~= tuple(i, j);\n      \
    \      }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(row; 0..lst.length)\n    {\n        foreach(col; 0..lst[row].length)\n\
    \        {\n            if(lst[row][col] == x)\n            {\n              \
    \  result ~= tuple(row, col);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    auto res = [];\n    foreach(i, row; lst)\n  \
    \  {\n        auto pos = row.find(x);\n        if(pos != -1)\n        {\n    \
    \        res ~= tuple(i, pos);\n        }\n    }\n    return res;\n}", "{\n  \
    \  auto ret = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n   \
    \     foreach(j, col; row)\n        {\n            if(col == x)\n            {\n\
    \                ret ~= tuple(i, j);\n            }\n        }\n    }\n    return\
    \ ret;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n \
    \   {\n        foreach(j, item; row)\n        {\n            if(item == x)\n \
    \           {\n                result ~= tuple(i, j);\n            }\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] row = new long[];\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, item; row)\n        {\n            if(item == x)\n       \
    \     {\n                result ~= tuple(i, j);\n            }\n        }\n  \
    \  }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result.sort!((a, b) => a[0]\
    \ < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n \
    \       {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, val; row)\n        {\n            if(val == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    auto result = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n        {\n \
    \           if(item == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n\
    \        {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(row; 0..lst.length)\n    {\n  \
    \      foreach(col; 0..lst[row].length)\n        {\n            if(lst[row][col]\
    \ == x)\n            {\n                result ~= tuple(row, col);\n         \
    \   }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    auto result\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ e; row)\n        {\n            if(e == x)\n            {\n                result\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, elem; row)\n        {\n            if(elem == x)\n       \
    \     {\n                result ~= tuple(i, j);\n            }\n        }\n  \
    \  }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(row;\
    \ 0..lst.length)\n    {\n        foreach(col; 0..lst[row].length)\n        {\n\
    \            if(lst[row][col] == x)\n            {\n                result ~=\
    \ tuple(row, col);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, col; row)\n        {\n            if(col == x)\n         \
    \   {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    auto res = new Tuple!(long, long)[];\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, item; row)\n        {\n            if(item\
    \ == x)\n            {\n                res ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    long row = 0;\n    foreach(row_; lst)\n    {\n        long col = 0;\n   \
    \     foreach(col_; row_)\n        {\n            if(col_ == x)\n            {\n\
    \                result ~= tuple(row, col);\n            }\n            col++;\n\
    \        }\n        row++;\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    auto res\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ el; row)\n        {\n            if(el == x)\n            {\n              \
    \  res ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst) \n    {\n       \
    \ foreach(j, col; row) \n        {\n            if(col == x) \n            {\n\
    \                result ~= tuple(i, j);\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                result ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] res;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                res ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n      \
    \  {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ (a[0] == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result;\n}", "{\n    auto res\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ e; row)\n        {\n            if(e == x)\n            {\n                res\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, col; row)\n        {\n            if(col == x)\n         \
    \   {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    auto result = [];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, element; row)\n        {\n            if(element ==\
    \ x)\n            {\n                result ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, item; row)\n        {\n            if(item\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n        {\n \
    \           if(item == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto res = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n \
    \       foreach(j, col; row)\n        {\n            if(col == x)\n          \
    \  {\n                res ~= tuple(i, j);\n            }\n        }\n    }\n \
    \   return res;\n}", "{\n    auto res = [];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, col; row)\n        {\n            if(col == x)\n         \
    \   {\n                res ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, item; row)\n        {\n            if(item == x)\n         \
    \   {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    auto result = new Tuple!(long, long)[];\n   \
    \ for (long i = 0; i < lst.length; i++) \n    {\n        for (long j = 0; j <\
    \ lst[i].length; j++) \n        {\n            if (lst[i][j] == x) \n        \
    \    {\n                result ~= tuple(i, j);\n            }\n        }\n   \
    \ }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] >\
    \ b[1]));\n}", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(row;\
    \ 0..lst.length)\n    {\n        foreach(col; 0..lst[row].length)\n        {\n\
    \            if(lst[row][col] == x)\n            {\n                result ~=\
    \ tuple(row, col);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(row; 0..lst.length)\n    {\n  \
    \      foreach(col; 0..lst[row].length)\n        {\n            if(lst[row][col]\
    \ == x)\n            {\n                result ~= tuple(row, col);\n         \
    \   }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n   \
    \     {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(long i, long[] row; lst)\n    {\n\
    \        foreach(long j, long val; row)\n        {\n            if(val == x)\n\
    \            {\n                result ~= tuple(i, j);\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n  \
    \  foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n    \
    \        if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row; lst)\n    {\n     \
    \   foreach(j, col; row)\n        {\n            if(col == x)\n            {\n\
    \                res ~= tuple(i, j);\n            }\n        }\n    }\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(row; 0..lst.length)\n\
    \    {\n        foreach(col; 0..lst[row].length)\n        {\n            if(lst[row][col]\
    \ == x)\n            {\n                result ~= tuple(row, col);\n         \
    \   }\n        }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                res ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    auto result\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(long i, row; lst)\n    {\n\
    \        foreach(long j, elem; row)\n        {\n            if(elem == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, item; row)\n        {\n            if(item\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(long i, row; lst)\n    {\n        foreach(long j, val; row)\n   \
    \     {\n            if(val == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    auto result\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[][] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= [i, j];\n            }\n        }\n    }\n    return result;\n}",
  "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, el; row)\n        {\n            if(el == x)\n            {\n\
    \                result ~= tuple(i, j);\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[][] result = [];\n    foreach(i, row; lst)\n\
    \    {\n        long[] tmp = [];\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                tmp ~= j;\n          \
    \  }\n        }\n        if(tmp.length > 0)\n        {\n            result ~=\
    \ tmp;\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n  \
    \      {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ item; row)\n        {\n            if(item == x)\n            {\n          \
    \      result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto res = [];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row; lst)\n    {\n     \
    \   foreach(j, col; row)\n        {\n            if(col == x)\n            {\n\
    \                res ~= tuple(i, j);\n            }\n        }\n    }\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n \
    \   {\n        foreach(j, col; row)\n        {\n            if(col == x)\n   \
    \         {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    auto result = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    auto res = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col;\
    \ row)\n        {\n            if(col == x)\n            {\n                res\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, col; row)\n        {\n            if(col == x)\n         \
    \   {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, item; row)\n        {\n            if(item\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] res;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                res ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, elem; row)\n \
    \       {\n            if(elem == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a, b)\
    \ => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n\
    \        {\n            if(item == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto res = [];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = [];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result.sort!((a,\
    \ b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, elem; row)\n\
    \        {\n            if(elem == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}",
  "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, col; row)\n        {\n            if(col == x)\n         \
    \   {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    auto result\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(row;\
    \ lst)\n    {\n        foreach(column; row)\n        {\n            if(column\
    \ == x)\n            {\n                result ~= tuple(lst.indexOf(row), row.indexOf(column));\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto res = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n \
    \       foreach(j, col; row)\n        {\n            if(col == x)\n          \
    \  {\n                res ~= tuple(i, j);\n            }\n        }\n    }\n \
    \   return res;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                result ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    auto res\
    \ = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, elem; row)\n        {\n            if(elem == x)\n\
    \            {\n                result ~= tuple(i, j);\n            }\n      \
    \  }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n  \
    \  foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n        {\n   \
    \         if(item == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    res ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}",
  "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ elem; row)\n        {\n            if(elem == x)\n            {\n          \
    \      result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    auto result = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, val; row)\n\
    \        {\n            if(val == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] ||\
    \ a[0] == b[0] && a[1] > b[1]);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result;\n    foreach(i, row; lst)\n    {\n        foreach(j, elem; row)\n  \
    \      {\n            if(elem == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    long[][] res = [];\n    foreach(i, row; lst)\n    {\n        long[] tmp =\
    \ [];\n        foreach(j, col; row)\n        {\n            if(col == x)\n   \
    \         {\n                tmp ~= j;\n            }\n        }\n        if(tmp.length)\n\
    \        {\n            res ~= [i, tmp];\n        }\n    }\n    res.sort!(\"a[0]\
    \ < b[0]\");\n    foreach(i, row; res)\n    {\n        row[1].sort!(\"a > b\"\
    );\n    }\n    Tuple!(long, long)[] res2 = [];\n    foreach(i, row; res)\n   \
    \ {\n        foreach(j, col; row[1])\n        {\n            res2 ~= tuple(row[0],\
    \ col);\n        }\n    }\n    return res2;\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(row; 0..lst.length)\n    {\n        foreach(col;\
    \ 0..lst[row].length)\n        {\n            if(lst[row][col] == x)\n       \
    \     {\n                result ~= tuple(row, col);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    auto res = [];\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                res ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return res.sort!((a, b) => a[0] < b[0] || (a[0] == b[0]\
    \ && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(row; 0..lst.length)\n    {\n        foreach(col;\
    \ 0..lst[row].length)\n        {\n            if(lst[row][col] == x)\n       \
    \     {\n                result ~= tuple(row, col);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(long\
    \ i, long[] row; lst)\n    {\n        foreach(long j, long elem; row)\n      \
    \  {\n            if(elem == x)\n            {\n                result ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    long[] rows\
    \ = [];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n     \
    \   {\n            if(col == x)\n            {\n                rows ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return rows.sort!((a, b) => a[0] <\
    \ b[0] || (a[0] == b[0] && a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, elem; row)\n\
    \        {\n            if(elem == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ e; row)\n        {\n            if(e == x)\n            {\n                result\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto ret = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n \
    \       foreach(j, col; row)\n        {\n            if(col == x)\n          \
    \  {\n                ret ~= tuple(i, j);\n            }\n        }\n    }\n \
    \   return ret;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                result ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, elem; row)\n        {\n \
    \           if(elem == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ elem; row)\n        {\n            if(elem == x)\n            {\n          \
    \      result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row; lst)\n    {\n     \
    \   foreach(j, el; row)\n        {\n            if(el == x)\n            {\n \
    \               res ~= tuple(i, j);\n            }\n        }\n    }\n    return\
    \ res;\n}", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                result ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    auto res = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst) \n    {\n        foreach(j,\
    \ col; row) \n        {\n            if(col == x) \n            {\n          \
    \      res ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                result ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    auto result = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, value; row)\n\
    \        {\n            if(value == x)\n            {\n                result\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst) \n    {\n \
    \       foreach(j, col; row) \n        {\n            if(col == x) \n        \
    \    {\n                result ~= tuple(i, j);\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(row;\
    \ 0..lst.length)\n    {\n        foreach(col; 0..lst[row].length)\n        {\n\
    \            if(lst[row][col] == x)\n            {\n                result ~=\
    \ tuple(row, col);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, col; row)\n        {\n            if(col == x)\n         \
    \   {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst) \n    {\n        foreach(j, col; row) \n        {\n            if(col\
    \ == x) \n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, val; row)\n\
    \        {\n            if(val == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, val; row)\n        {\n            if(val == x)\n         \
    \   {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    auto res = new Tuple!(long,\
    \ long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n  \
    \      {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst) \n    {\n        foreach(j,\
    \ col; row) \n        {\n            if(col == x) \n            {\n          \
    \      result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    auto result = new Tuple!(long, long)[];\n   \
    \ foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n     \
    \       if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(long i, row; lst)\n    {\n        foreach(long\
    \ j, col; row)\n        {\n            if(col == x)\n            {\n         \
    \       result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, item; row)\n        {\n            if(item == x)\n\
    \            {\n                result ~= tuple(i, j);\n            }\n      \
    \  }\n    }\n    return result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] &&\
    \ a[1] > b[1]));\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(long i,\
    \ long[] row; lst)\n    {\n        foreach(long j, long val; row)\n        {\n\
    \            if(val == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    auto res = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col;\
    \ row)\n        {\n            if(col == x)\n            {\n                res\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, e; row)\n        {\n            if(e == x)\n            {\n\
    \                result ~= tuple(i, j);\n            }\n        }\n    }\n   \
    \ return result;\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row; lst)\n\
    \    {\n        foreach(j, col; row)\n        {\n            if(col == x)\n  \
    \          {\n                res ~= tuple(i, j);\n            }\n        }\n\
    \    }\n    return res;\n}", "{\n    long[][] result;\n    long row = 0;\n   \
    \ foreach(row_; lst)\n    {\n        long col = 0;\n        foreach(col_; row_)\n\
    \        {\n            if(col_ == x)\n            {\n                result ~=\
    \ tuple(row, col);\n            }\n            col++;\n        }\n        row++;\n\
    \    }\n    return result;\n}", "{\n    auto result = new Tuple!(long, long)[];\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    auto res = new\
    \ Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n        foreach(j, col;\
    \ row)\n        {\n            if(col == x)\n            {\n                res\
    \ ~= tuple(i, j);\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n  \
    \      foreach(j, col; row)\n        {\n            if(col == x)\n           \
    \ {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] res;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, elem; row)\n        {\n            if(elem ==\
    \ x)\n            {\n                res ~= tuple(i, j);\n            }\n    \
    \    }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n   \
    \ foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n     \
    \       if(col == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto res = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n \
    \       foreach(j, col; row)\n        {\n            if(col == x)\n          \
    \  {\n                res ~= tuple(i, j);\n            }\n        }\n    }\n \
    \   return res;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i, row;\
    \ lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col ==\
    \ x)\n            {\n                result ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] res;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n        {\n  \
    \          if(col == x)\n            {\n                res ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    res.sort!((a, b) => a[0] < b[0] || (a[0]\
    \ == b[0] && a[1] > b[1]));\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n      \
    \  {\n            if(col == x)\n            {\n                res ~= tuple(i,\
    \ j);\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, col; row)\n\
    \        {\n            if(col == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    auto result = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n    {\n\
    \        foreach(j, col; row)\n        {\n            if(col == x)\n         \
    \   {\n                result ~= tuple(i, j);\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, elem; row)\n        {\n            if(elem\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    auto res = [];\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                res ~= tuple(i, j);\n            }\n \
    \       }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, val; row)\n        {\n  \
    \          if(val == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j, elem; row)\n\
    \        {\n            if(elem == x)\n            {\n                result ~=\
    \ tuple(i, j);\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] result;\n    foreach(i, row; lst)\n    {\n        foreach(j,\
    \ col; row)\n        {\n            if(col == x)\n            {\n            \
    \    result ~= tuple(i, j);\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    auto ret = new Tuple!(long, long)[];\n    foreach(i, row; lst)\n \
    \   {\n        foreach(j, col; row)\n        {\n            if(col == x)\n   \
    \         {\n                ret ~= tuple(i, j);\n            }\n        }\n \
    \   }\n    return ret;\n}", "{\n    Tuple!(long, long)[] result;\n    foreach(i,\
    \ row; lst)\n    {\n        foreach(j, col; row)\n        {\n            if(col\
    \ == x)\n            {\n                result ~= tuple(i, j);\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] result;\n\
    \    foreach(i, row; lst)\n    {\n        foreach(j, item; row)\n        {\n \
    \           if(item == x)\n            {\n                result ~= tuple(i, j);\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result;\n    foreach(long i, row; lst)\n    {\n        foreach(long\
    \ j, item; row)\n        {\n            if(item == x)\n            {\n       \
    \         result ~= tuple(i, j);\n            }\n        }\n    }\n    return\
    \ result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
